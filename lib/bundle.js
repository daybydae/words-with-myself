/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 81);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(43));
__export(__webpack_require__(44));
__export(__webpack_require__(29));
__export(__webpack_require__(98));
__export(__webpack_require__(99));
__export(__webpack_require__(100));
__export(__webpack_require__(101));
__export(__webpack_require__(45));
__export(__webpack_require__(102));
__export(__webpack_require__(46));
__export(__webpack_require__(103));
__export(__webpack_require__(104));
__export(__webpack_require__(106));
__export(__webpack_require__(107));
__export(__webpack_require__(108));

//# sourceMappingURL=index.js.map


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(0);
var util_3 = __webpack_require__(0);
var util_4 = __webpack_require__(0);
var util_5 = __webpack_require__(0);
var util_6 = __webpack_require__(0);
var storage_1 = __webpack_require__(18);
var util_7 = __webpack_require__(0);
/**
 * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
 * @type {function(): number} Generated ID.
 */
exports.LUIDGenerator = (function () {
    var id = 1;
    return function () {
        return id++;
    };
})();
/**
 * Sha1 hash of the input string
 * @param {!string} str The string to hash
 * @return {!string} The resulting hash
 */
exports.sha1 = function (str) {
    var utf8Bytes = util_5.stringToByteArray(str);
    var sha1 = new util_4.Sha1();
    sha1.update(utf8Bytes);
    var sha1Bytes = sha1.digest();
    return util_3.base64.encodeByteArray(sha1Bytes);
};
/**
 * @param {...*} var_args
 * @return {string}
 * @private
 */
var buildLogMessage_ = function () {
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        var_args[_i] = arguments[_i];
    }
    var message = '';
    for (var i = 0; i < var_args.length; i++) {
        if (Array.isArray(var_args[i]) ||
            (var_args[i] &&
                typeof var_args[i] === 'object' &&
                typeof var_args[i].length === 'number')) {
            message += buildLogMessage_.apply(null, var_args[i]);
        }
        else if (typeof var_args[i] === 'object') {
            message += util_6.stringify(var_args[i]);
        }
        else {
            message += var_args[i];
        }
        message += ' ';
    }
    return message;
};
/**
 * Use this for all debug messages in Firebase.
 * @type {?function(string)}
 */
exports.logger = null;
/**
 * Flag to check for log availability on first log message
 * @type {boolean}
 * @private
 */
var firstLog_ = true;
/**
 * The implementation of Firebase.enableLogging (defined here to break dependencies)
 * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger
 * @param {boolean=} persistent Whether or not to persist logging settings across refreshes
 */
exports.enableLogging = function (logger_, persistent) {
    util_1.assert(!persistent || (logger_ === true || logger_ === false), "Can't turn on custom loggers persistently.");
    if (logger_ === true) {
        if (typeof console !== 'undefined') {
            if (typeof console.log === 'function') {
                exports.logger = console.log.bind(console);
            }
            else if (typeof console.log === 'object') {
                // IE does this.
                exports.logger = function (message) {
                    console.log(message);
                };
            }
        }
        if (persistent)
            storage_1.SessionStorage.set('logging_enabled', true);
    }
    else if (typeof logger_ === 'function') {
        exports.logger = logger_;
    }
    else {
        exports.logger = null;
        storage_1.SessionStorage.remove('logging_enabled');
    }
};
/**
 *
 * @param {...(string|Arguments)} var_args
 */
exports.log = function () {
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        var_args[_i] = arguments[_i];
    }
    if (firstLog_ === true) {
        firstLog_ = false;
        if (exports.logger === null && storage_1.SessionStorage.get('logging_enabled') === true)
            exports.enableLogging(true);
    }
    if (exports.logger) {
        var message = buildLogMessage_.apply(null, var_args);
        exports.logger(message);
    }
};
/**
 * @param {!string} prefix
 * @return {function(...[*])}
 */
exports.logWrapper = function (prefix) {
    return function () {
        var var_args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            var_args[_i] = arguments[_i];
        }
        exports.log.apply(void 0, [prefix].concat(var_args));
    };
};
/**
 * @param {...string} var_args
 */
exports.error = function () {
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        var_args[_i] = arguments[_i];
    }
    if (typeof console !== 'undefined') {
        var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);
        if (typeof console.error !== 'undefined') {
            console.error(message);
        }
        else {
            console.log(message);
        }
    }
};
/**
 * @param {...string} var_args
 */
exports.fatal = function () {
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        var_args[_i] = arguments[_i];
    }
    var message = buildLogMessage_.apply(void 0, var_args);
    throw new Error('FIREBASE FATAL ERROR: ' + message);
};
/**
 * @param {...*} var_args
 */
exports.warn = function () {
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        var_args[_i] = arguments[_i];
    }
    if (typeof console !== 'undefined') {
        var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);
        if (typeof console.warn !== 'undefined') {
            console.warn(message);
        }
        else {
            console.log(message);
        }
    }
};
/**
 * Logs a warning if the containing page uses https. Called when a call to new Firebase
 * does not use https.
 */
exports.warnIfPageIsSecure = function () {
    // Be very careful accessing browser globals. Who knows what may or may not exist.
    if (typeof window !== 'undefined' &&
        window.location &&
        window.location.protocol &&
        window.location.protocol.indexOf('https:') !== -1) {
        exports.warn('Insecure Firebase access from a secure page. ' +
            'Please use https in calls to new Firebase().');
    }
};
/**
 * @param {!String} methodName
 */
exports.warnAboutUnsupportedMethod = function (methodName) {
    exports.warn(methodName +
        ' is unsupported and will likely change soon.  ' +
        'Please do not use.');
};
/**
 * Returns true if data is NaN, or +/- Infinity.
 * @param {*} data
 * @return {boolean}
 */
exports.isInvalidJSONNumber = function (data) {
    return (typeof data === 'number' &&
        (data != data || // NaN
            data == Number.POSITIVE_INFINITY ||
            data == Number.NEGATIVE_INFINITY));
};
/**
 * @param {function()} fn
 */
exports.executeWhenDOMReady = function (fn) {
    if (util_7.isNodeSdk() || document.readyState === 'complete') {
        fn();
    }
    else {
        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
        // fire before onload), but fall back to onload.
        var called_1 = false;
        var wrappedFn_1 = function () {
            if (!document.body) {
                setTimeout(wrappedFn_1, Math.floor(10));
                return;
            }
            if (!called_1) {
                called_1 = true;
                fn();
            }
        };
        if (document.addEventListener) {
            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);
            // fallback to onload.
            window.addEventListener('load', wrappedFn_1, false);
        }
        else if (document.attachEvent) {
            // IE.
            document.attachEvent('onreadystatechange', function () {
                if (document.readyState === 'complete')
                    wrappedFn_1();
            });
            // fallback to onload.
            window.attachEvent('onload', wrappedFn_1);
            // jQuery has an extra hack for IE that we could employ (based on
            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
            // I'm hoping we don't need it.
        }
    }
};
/**
 * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
 * @type {!string}
 */
exports.MIN_NAME = '[MIN_NAME]';
/**
 * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
 * @type {!string}
 */
exports.MAX_NAME = '[MAX_NAME]';
/**
 * Compares valid Firebase key names, plus min and max name
 * @param {!string} a
 * @param {!string} b
 * @return {!number}
 */
exports.nameCompare = function (a, b) {
    if (a === b) {
        return 0;
    }
    else if (a === exports.MIN_NAME || b === exports.MAX_NAME) {
        return -1;
    }
    else if (b === exports.MIN_NAME || a === exports.MAX_NAME) {
        return 1;
    }
    else {
        var aAsInt = exports.tryParseInt(a), bAsInt = exports.tryParseInt(b);
        if (aAsInt !== null) {
            if (bAsInt !== null) {
                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;
            }
            else {
                return -1;
            }
        }
        else if (bAsInt !== null) {
            return 1;
        }
        else {
            return a < b ? -1 : 1;
        }
    }
};
/**
 * @param {!string} a
 * @param {!string} b
 * @return {!number} comparison result.
 */
exports.stringCompare = function (a, b) {
    if (a === b) {
        return 0;
    }
    else if (a < b) {
        return -1;
    }
    else {
        return 1;
    }
};
/**
 * @param {string} key
 * @param {Object} obj
 * @return {*}
 */
exports.requireKey = function (key, obj) {
    if (obj && key in obj) {
        return obj[key];
    }
    else {
        throw new Error('Missing required key (' + key + ') in object: ' + util_6.stringify(obj));
    }
};
/**
 * @param {*} obj
 * @return {string}
 */
exports.ObjectToUniqueKey = function (obj) {
    if (typeof obj !== 'object' || obj === null)
        return util_6.stringify(obj);
    var keys = [];
    for (var k in obj) {
        keys.push(k);
    }
    // Export as json, but with the keys sorted.
    keys.sort();
    var key = '{';
    for (var i = 0; i < keys.length; i++) {
        if (i !== 0)
            key += ',';
        key += util_6.stringify(keys[i]);
        key += ':';
        key += exports.ObjectToUniqueKey(obj[keys[i]]);
    }
    key += '}';
    return key;
};
/**
 * Splits a string into a number of smaller segments of maximum size
 * @param {!string} str The string
 * @param {!number} segsize The maximum number of chars in the string.
 * @return {Array.<string>} The string, split into appropriately-sized chunks
 */
exports.splitStringBySize = function (str, segsize) {
    var len = str.length;
    if (len <= segsize) {
        return [str];
    }
    var dataSegs = [];
    for (var c = 0; c < len; c += segsize) {
        if (c + segsize > len) {
            dataSegs.push(str.substring(c, len));
        }
        else {
            dataSegs.push(str.substring(c, c + segsize));
        }
    }
    return dataSegs;
};
/**
 * Apply a function to each (key, value) pair in an object or
 * apply a function to each (index, value) pair in an array
 * @param {!(Object|Array)} obj The object or array to iterate over
 * @param {function(?, ?)} fn The function to apply
 */
exports.each = function (obj, fn) {
    if (Array.isArray(obj)) {
        for (var i = 0; i < obj.length; ++i) {
            fn(i, obj[i]);
        }
    }
    else {
        /**
         * in the conversion of code we removed the goog.object.forEach
         * function which did a value,key callback. We standardized on
         * a single impl that does a key, value callback. So we invert
         * to not have to touch the `each` code points
         */
        util_2.forEach(obj, function (key, val) { return fn(val, key); });
    }
};
/**
 * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.
 * @param {function(*)} callback Callback function.
 * @param {?Object=} context Optional context to bind to.
 * @return {function(*)}
 */
exports.bindCallback = function (callback, context) {
    return context ? callback.bind(context) : callback;
};
/**
 * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
 * I made one modification at the end and removed the NaN / Infinity
 * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
 * @param {!number} v A double
 * @return {string}
 */
exports.doubleToIEEE754String = function (v) {
    util_1.assert(!exports.isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
    var ebits = 11, fbits = 52;
    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;
    // Compute sign, exponent, fraction
    // Skip NaN / Infinity handling --MJL.
    if (v === 0) {
        e = 0;
        f = 0;
        s = 1 / v === -Infinity ? 1 : 0;
    }
    else {
        s = v < 0;
        v = Math.abs(v);
        if (v >= Math.pow(2, 1 - bias)) {
            // Normalized
            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
            e = ln + bias;
            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
        }
        else {
            // Denormalized
            e = 0;
            f = Math.round(v / Math.pow(2, 1 - bias - fbits));
        }
    }
    // Pack sign, exponent, fraction
    bits = [];
    for (i = fbits; i; i -= 1) {
        bits.push(f % 2 ? 1 : 0);
        f = Math.floor(f / 2);
    }
    for (i = ebits; i; i -= 1) {
        bits.push(e % 2 ? 1 : 0);
        e = Math.floor(e / 2);
    }
    bits.push(s ? 1 : 0);
    bits.reverse();
    str = bits.join('');
    // Return the data as a hex string. --MJL
    var hexByteString = '';
    for (i = 0; i < 64; i += 8) {
        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
        if (hexByte.length === 1)
            hexByte = '0' + hexByte;
        hexByteString = hexByteString + hexByte;
    }
    return hexByteString.toLowerCase();
};
/**
 * Used to detect if we're in a Chrome content script (which executes in an
 * isolated environment where long-polling doesn't work).
 * @return {boolean}
 */
exports.isChromeExtensionContentScript = function () {
    return !!(typeof window === 'object' &&
        window['chrome'] &&
        window['chrome']['extension'] &&
        !/^chrome/.test(window.location.href));
};
/**
 * Used to detect if we're in a Windows 8 Store app.
 * @return {boolean}
 */
exports.isWindowsStoreApp = function () {
    // Check for the presence of a couple WinRT globals
    return typeof Windows === 'object' && typeof Windows.UI === 'object';
};
/**
 * Converts a server error code to a Javascript Error
 * @param {!string} code
 * @param {!Query} query
 * @return {Error}
 */
exports.errorForServerCode = function (code, query) {
    var reason = 'Unknown Error';
    if (code === 'too_big') {
        reason =
            'The data requested exceeds the maximum size ' +
                'that can be accessed with a single request.';
    }
    else if (code == 'permission_denied') {
        reason = "Client doesn't have permission to access the desired data.";
    }
    else if (code == 'unavailable') {
        reason = 'The service is unavailable';
    }
    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);
    error.code = code.toUpperCase();
    return error;
};
/**
 * Used to test for integer-looking strings
 * @type {RegExp}
 * @private
 */
exports.INTEGER_REGEXP_ = new RegExp('^-?\\d{1,10}$');
/**
 * If the string contains a 32-bit integer, return it.  Else return null.
 * @param {!string} str
 * @return {?number}
 */
exports.tryParseInt = function (str) {
    if (exports.INTEGER_REGEXP_.test(str)) {
        var intVal = Number(str);
        if (intVal >= -2147483648 && intVal <= 2147483647) {
            return intVal;
        }
    }
    return null;
};
/**
 * Helper to run some code but catch any exceptions and re-throw them later.
 * Useful for preventing user callbacks from breaking internal code.
 *
 * Re-throwing the exception from a setTimeout is a little evil, but it's very
 * convenient (we don't have to try to figure out when is a safe point to
 * re-throw it), and the behavior seems reasonable:
 *
 * * If you aren't pausing on exceptions, you get an error in the console with
 *   the correct stack trace.
 * * If you're pausing on all exceptions, the debugger will pause on your
 *   exception and then again when we rethrow it.
 * * If you're only pausing on uncaught exceptions, the debugger will only pause
 *   on us re-throwing it.
 *
 * @param {!function()} fn The code to guard.
 */
exports.exceptionGuard = function (fn) {
    try {
        fn();
    }
    catch (e) {
        // Re-throw exception when it's safe.
        setTimeout(function () {
            // It used to be that "throw e" would result in a good console error with
            // relevant context, but as of Chrome 39, you just get the firebase.js
            // file/line number where we re-throw it, which is useless. So we log
            // e.stack explicitly.
            var stack = e.stack || '';
            exports.warn('Exception was thrown by user callback.', stack);
            throw e;
        }, Math.floor(0));
    }
};
/**
 * Helper function to safely call opt_callback with the specified arguments.  It:
 * 1. Turns into a no-op if opt_callback is null or undefined.
 * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.
 *
 * @param {?Function=} callback Optional onComplete callback.
 * @param {...*} var_args Arbitrary args to be passed to opt_onComplete
 */
exports.callUserCallback = function (callback) {
    var var_args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        var_args[_i - 1] = arguments[_i];
    }
    if (typeof callback === 'function') {
        exports.exceptionGuard(function () {
            callback.apply(void 0, var_args);
        });
    }
};
/**
 * @return {boolean} true if we think we're currently being crawled.
 */
exports.beingCrawled = function () {
    var userAgent = (typeof window === 'object' &&
        window['navigator'] &&
        window['navigator']['userAgent']) ||
        '';
    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
    // believe to support JavaScript/AJAX rendering.
    // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
    // would have seen the page" is flaky if we don't treat it as a crawler.
    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);
};
/**
 * Export a property of an object using a getter function.
 *
 * @param {!Object} object
 * @param {string} name
 * @param {!function(): *} fnGet
 */
exports.exportPropGetter = function (object, name, fnGet) {
    Object.defineProperty(object, name, { get: fnGet });
};
/**
 * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
 *
 * It is removed with clearTimeout() as normal.
 *
 * @param {Function} fn Function to run.
 * @param {number} time Milliseconds to wait before running.
 * @return {number|Object} The setTimeout() return value.
 */
exports.setTimeoutNonBlocking = function (fn, time) {
    var timeout = setTimeout(fn, time);
    if (typeof timeout === 'object' && timeout['unref']) {
        timeout['unref']();
    }
    return timeout;
};

//# sourceMappingURL=util.js.map


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(1);
var util_2 = __webpack_require__(0);
/**
 * An immutable object representing a parsed path.  It's immutable so that you
 * can pass them around to other functions without worrying about them changing
 * it.
 */
var Path = /** @class */ (function () {
    /**
     * @param {string|Array.<string>} pathOrString Path string to parse,
     *      or another path, or the raw tokens array
     * @param {number=} pieceNum
     */
    function Path(pathOrString, pieceNum) {
        if (pieceNum === void 0) {
            this.pieces_ = pathOrString.split('/');
            // Remove empty pieces.
            var copyTo = 0;
            for (var i = 0; i < this.pieces_.length; i++) {
                if (this.pieces_[i].length > 0) {
                    this.pieces_[copyTo] = this.pieces_[i];
                    copyTo++;
                }
            }
            this.pieces_.length = copyTo;
            this.pieceNum_ = 0;
        }
        else {
            this.pieces_ = pathOrString;
            this.pieceNum_ = pieceNum;
        }
    }
    Object.defineProperty(Path, "Empty", {
        /**
         * Singleton to represent an empty path
         *
         * @const
         */
        get: function () {
            return new Path('');
        },
        enumerable: true,
        configurable: true
    });
    Path.prototype.getFront = function () {
        if (this.pieceNum_ >= this.pieces_.length)
            return null;
        return this.pieces_[this.pieceNum_];
    };
    /**
     * @return {number} The number of segments in this path
     */
    Path.prototype.getLength = function () {
        return this.pieces_.length - this.pieceNum_;
    };
    /**
     * @return {!Path}
     */
    Path.prototype.popFront = function () {
        var pieceNum = this.pieceNum_;
        if (pieceNum < this.pieces_.length) {
            pieceNum++;
        }
        return new Path(this.pieces_, pieceNum);
    };
    /**
     * @return {?string}
     */
    Path.prototype.getBack = function () {
        if (this.pieceNum_ < this.pieces_.length)
            return this.pieces_[this.pieces_.length - 1];
        return null;
    };
    Path.prototype.toString = function () {
        var pathString = '';
        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
            if (this.pieces_[i] !== '')
                pathString += '/' + this.pieces_[i];
        }
        return pathString || '/';
    };
    Path.prototype.toUrlEncodedString = function () {
        var pathString = '';
        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
            if (this.pieces_[i] !== '')
                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));
        }
        return pathString || '/';
    };
    /**
     * Shallow copy of the parts of the path.
     *
     * @param {number=} begin
     * @return {!Array<string>}
     */
    Path.prototype.slice = function (begin) {
        if (begin === void 0) { begin = 0; }
        return this.pieces_.slice(this.pieceNum_ + begin);
    };
    /**
     * @return {?Path}
     */
    Path.prototype.parent = function () {
        if (this.pieceNum_ >= this.pieces_.length)
            return null;
        var pieces = [];
        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)
            pieces.push(this.pieces_[i]);
        return new Path(pieces, 0);
    };
    /**
     * @param {string|!Path} childPathObj
     * @return {!Path}
     */
    Path.prototype.child = function (childPathObj) {
        var pieces = [];
        for (var i = this.pieceNum_; i < this.pieces_.length; i++)
            pieces.push(this.pieces_[i]);
        if (childPathObj instanceof Path) {
            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
                pieces.push(childPathObj.pieces_[i]);
            }
        }
        else {
            var childPieces = childPathObj.split('/');
            for (var i = 0; i < childPieces.length; i++) {
                if (childPieces[i].length > 0)
                    pieces.push(childPieces[i]);
            }
        }
        return new Path(pieces, 0);
    };
    /**
     * @return {boolean} True if there are no segments in this path
     */
    Path.prototype.isEmpty = function () {
        return this.pieceNum_ >= this.pieces_.length;
    };
    /**
     * @param {!Path} outerPath
     * @param {!Path} innerPath
     * @return {!Path} The path from outerPath to innerPath
     */
    Path.relativePath = function (outerPath, innerPath) {
        var outer = outerPath.getFront(), inner = innerPath.getFront();
        if (outer === null) {
            return innerPath;
        }
        else if (outer === inner) {
            return Path.relativePath(outerPath.popFront(), innerPath.popFront());
        }
        else {
            throw new Error('INTERNAL ERROR: innerPath (' +
                innerPath +
                ') is not within ' +
                'outerPath (' +
                outerPath +
                ')');
        }
    };
    /**
     * @param {!Path} left
     * @param {!Path} right
     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.
     */
    Path.comparePaths = function (left, right) {
        var leftKeys = left.slice();
        var rightKeys = right.slice();
        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
            var cmp = util_1.nameCompare(leftKeys[i], rightKeys[i]);
            if (cmp !== 0)
                return cmp;
        }
        if (leftKeys.length === rightKeys.length)
            return 0;
        return leftKeys.length < rightKeys.length ? -1 : 1;
    };
    /**
     *
     * @param {Path} other
     * @return {boolean} true if paths are the same.
     */
    Path.prototype.equals = function (other) {
        if (this.getLength() !== other.getLength()) {
            return false;
        }
        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {
            if (this.pieces_[i] !== other.pieces_[j]) {
                return false;
            }
        }
        return true;
    };
    /**
     *
     * @param {!Path} other
     * @return {boolean} True if this path is a parent (or the same as) other
     */
    Path.prototype.contains = function (other) {
        var i = this.pieceNum_;
        var j = other.pieceNum_;
        if (this.getLength() > other.getLength()) {
            return false;
        }
        while (i < this.pieces_.length) {
            if (this.pieces_[i] !== other.pieces_[j]) {
                return false;
            }
            ++i;
            ++j;
        }
        return true;
    };
    return Path;
}()); // end Path
exports.Path = Path;
/**
 * Dynamic (mutable) path used to count path lengths.
 *
 * This class is used to efficiently check paths for valid
 * length (in UTF8 bytes) and depth (used in path validation).
 *
 * Throws Error exception if path is ever invalid.
 *
 * The definition of a path always begins with '/'.
 */
var ValidationPath = /** @class */ (function () {
    /**
     * @param {!Path} path Initial Path.
     * @param {string} errorPrefix_ Prefix for any error messages.
     */
    function ValidationPath(path, errorPrefix_) {
        this.errorPrefix_ = errorPrefix_;
        /** @type {!Array<string>} */
        this.parts_ = path.slice();
        /** @type {number} Initialize to number of '/' chars needed in path. */
        this.byteLength_ = Math.max(1, this.parts_.length);
        for (var i = 0; i < this.parts_.length; i++) {
            this.byteLength_ += util_2.stringLength(this.parts_[i]);
        }
        this.checkValid_();
    }
    Object.defineProperty(ValidationPath, "MAX_PATH_DEPTH", {
        /** @const {number} Maximum key depth. */
        get: function () {
            return 32;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidationPath, "MAX_PATH_LENGTH_BYTES", {
        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */
        get: function () {
            return 768;
        },
        enumerable: true,
        configurable: true
    });
    /** @param {string} child */
    ValidationPath.prototype.push = function (child) {
        // Count the needed '/'
        if (this.parts_.length > 0) {
            this.byteLength_ += 1;
        }
        this.parts_.push(child);
        this.byteLength_ += util_2.stringLength(child);
        this.checkValid_();
    };
    ValidationPath.prototype.pop = function () {
        var last = this.parts_.pop();
        this.byteLength_ -= util_2.stringLength(last);
        // Un-count the previous '/'
        if (this.parts_.length > 0) {
            this.byteLength_ -= 1;
        }
    };
    ValidationPath.prototype.checkValid_ = function () {
        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {
            throw new Error(this.errorPrefix_ +
                'has a key path longer than ' +
                ValidationPath.MAX_PATH_LENGTH_BYTES +
                ' bytes (' +
                this.byteLength_ +
                ').');
        }
        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {
            throw new Error(this.errorPrefix_ +
                'path specified exceeds the maximum depth that can be written (' +
                ValidationPath.MAX_PATH_DEPTH +
                ') or object contains a cycle ' +
                this.toErrorString());
        }
    };
    /**
     * String for use in error messages - uses '.' notation for path.
     *
     * @return {string}
     */
    ValidationPath.prototype.toErrorString = function () {
        if (this.parts_.length == 0) {
            return '';
        }
        return "in property '" + this.parts_.join('.') + "'";
    };
    return ValidationPath;
}());
exports.ValidationPath = ValidationPath;

//# sourceMappingURL=Path.js.map


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Index_1 = __webpack_require__(20);
var util_1 = __webpack_require__(1);
var Node_1 = __webpack_require__(5);
var LeafNode_1 = __webpack_require__(21);
var nodeFromJSON;
var MAX_NODE;
function setNodeFromJSON(val) {
    nodeFromJSON = val;
}
exports.setNodeFromJSON = setNodeFromJSON;
function setMaxNode(val) {
    MAX_NODE = val;
}
exports.setMaxNode = setMaxNode;
/**
 * @constructor
 * @extends {Index}
 * @private
 */
var PriorityIndex = /** @class */ (function (_super) {
    __extends(PriorityIndex, _super);
    function PriorityIndex() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritDoc
     */
    PriorityIndex.prototype.compare = function (a, b) {
        var aPriority = a.node.getPriority();
        var bPriority = b.node.getPriority();
        var indexCmp = aPriority.compareTo(bPriority);
        if (indexCmp === 0) {
            return util_1.nameCompare(a.name, b.name);
        }
        else {
            return indexCmp;
        }
    };
    /**
     * @inheritDoc
     */
    PriorityIndex.prototype.isDefinedOn = function (node) {
        return !node.getPriority().isEmpty();
    };
    /**
     * @inheritDoc
     */
    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
        return !oldNode.getPriority().equals(newNode.getPriority());
    };
    /**
     * @inheritDoc
     */
    PriorityIndex.prototype.minPost = function () {
        return Node_1.NamedNode.MIN;
    };
    /**
     * @inheritDoc
     */
    PriorityIndex.prototype.maxPost = function () {
        return new Node_1.NamedNode(util_1.MAX_NAME, new LeafNode_1.LeafNode('[PRIORITY-POST]', MAX_NODE));
    };
    /**
     * @param {*} indexValue
     * @param {string} name
     * @return {!NamedNode}
     */
    PriorityIndex.prototype.makePost = function (indexValue, name) {
        var priorityNode = nodeFromJSON(indexValue);
        return new Node_1.NamedNode(name, new LeafNode_1.LeafNode('[PRIORITY-POST]', priorityNode));
    };
    /**
     * @return {!string} String representation for inclusion in a query spec
     */
    PriorityIndex.prototype.toString = function () {
        return '.priority';
    };
    return PriorityIndex;
}(Index_1.Index));
exports.PriorityIndex = PriorityIndex;
exports.PRIORITY_INDEX = new PriorityIndex();

//# sourceMappingURL=PriorityIndex.js.map


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(1);
var SortedMap_1 = __webpack_require__(22);
var Node_1 = __webpack_require__(5);
var snap_1 = __webpack_require__(52);
var PriorityIndex_1 = __webpack_require__(3);
var KeyIndex_1 = __webpack_require__(14);
var IndexMap_1 = __webpack_require__(54);
var LeafNode_1 = __webpack_require__(21);
var comparators_1 = __webpack_require__(56);
// TODO: For memory savings, don't store priorityNode_ if it's empty.
var EMPTY_NODE;
/**
 * ChildrenNode is a class for storing internal nodes in a DataSnapshot
 * (i.e. nodes with children).  It implements Node and stores the
 * list of children in the children property, sorted by child name.
 *
 * @constructor
 * @implements {Node}
 */
var ChildrenNode = /** @class */ (function () {
    /**
     *
     * @param {!SortedMap.<string, !Node>} children_ List of children
     * of this node..
     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).
     * @param {!IndexMap} indexMap_
     */
    function ChildrenNode(children_, priorityNode_, indexMap_) {
        this.children_ = children_;
        this.priorityNode_ = priorityNode_;
        this.indexMap_ = indexMap_;
        this.lazyHash_ = null;
        /**
         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
         * class instead of an empty ChildrenNode.
         */
        if (this.priorityNode_) {
            snap_1.validatePriorityNode(this.priorityNode_);
        }
        if (this.children_.isEmpty()) {
            util_1.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
        }
    }
    Object.defineProperty(ChildrenNode, "EMPTY_NODE", {
        get: function () {
            return (EMPTY_NODE ||
                (EMPTY_NODE = new ChildrenNode(new SortedMap_1.SortedMap(comparators_1.NAME_COMPARATOR), null, IndexMap_1.IndexMap.Default)));
        },
        enumerable: true,
        configurable: true
    });
    /** @inheritDoc */
    ChildrenNode.prototype.isLeafNode = function () {
        return false;
    };
    /** @inheritDoc */
    ChildrenNode.prototype.getPriority = function () {
        return this.priorityNode_ || EMPTY_NODE;
    };
    /** @inheritDoc */
    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {
        if (this.children_.isEmpty()) {
            // Don't allow priorities on empty nodes
            return this;
        }
        else {
            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
        }
    };
    /** @inheritDoc */
    ChildrenNode.prototype.getImmediateChild = function (childName) {
        // Hack to treat priority as a regular child
        if (childName === '.priority') {
            return this.getPriority();
        }
        else {
            var child = this.children_.get(childName);
            return child === null ? EMPTY_NODE : child;
        }
    };
    /** @inheritDoc */
    ChildrenNode.prototype.getChild = function (path) {
        var front = path.getFront();
        if (front === null)
            return this;
        return this.getImmediateChild(front).getChild(path.popFront());
    };
    /** @inheritDoc */
    ChildrenNode.prototype.hasChild = function (childName) {
        return this.children_.get(childName) !== null;
    };
    /** @inheritDoc */
    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {
        util_1.assert(newChildNode, 'We should always be passing snapshot nodes');
        if (childName === '.priority') {
            return this.updatePriority(newChildNode);
        }
        else {
            var namedNode = new Node_1.NamedNode(childName, newChildNode);
            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;
            if (newChildNode.isEmpty()) {
                newChildren = this.children_.remove(childName);
                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
            }
            else {
                newChildren = this.children_.insert(childName, newChildNode);
                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
            }
            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;
            return new ChildrenNode(newChildren, newPriority, newIndexMap);
        }
    };
    /** @inheritDoc */
    ChildrenNode.prototype.updateChild = function (path, newChildNode) {
        var front = path.getFront();
        if (front === null) {
            return newChildNode;
        }
        else {
            util_1.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);
            return this.updateImmediateChild(front, newImmediateChild);
        }
    };
    /** @inheritDoc */
    ChildrenNode.prototype.isEmpty = function () {
        return this.children_.isEmpty();
    };
    /** @inheritDoc */
    ChildrenNode.prototype.numChildren = function () {
        return this.children_.count();
    };
    /** @inheritDoc */
    ChildrenNode.prototype.val = function (exportFormat) {
        if (this.isEmpty())
            return null;
        var obj = {};
        var numKeys = 0, maxKey = 0, allIntegerKeys = true;
        this.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
            obj[key] = childNode.val(exportFormat);
            numKeys++;
            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
                maxKey = Math.max(maxKey, Number(key));
            }
            else {
                allIntegerKeys = false;
            }
        });
        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
            // convert to array.
            var array = [];
            for (var key in obj)
                array[key] = obj[key];
            return array;
        }
        else {
            if (exportFormat && !this.getPriority().isEmpty()) {
                obj['.priority'] = this.getPriority().val();
            }
            return obj;
        }
    };
    /** @inheritDoc */
    ChildrenNode.prototype.hash = function () {
        if (this.lazyHash_ === null) {
            var toHash_1 = '';
            if (!this.getPriority().isEmpty())
                toHash_1 +=
                    'priority:' +
                        snap_1.priorityHashText(this.getPriority().val()) +
                        ':';
            this.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                var childHash = childNode.hash();
                if (childHash !== '')
                    toHash_1 += ':' + key + ':' + childHash;
            });
            this.lazyHash_ = toHash_1 === '' ? '' : util_2.sha1(toHash_1);
        }
        return this.lazyHash_;
    };
    /** @inheritDoc */
    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {
        var idx = this.resolveIndex_(index);
        if (idx) {
            var predecessor = idx.getPredecessorKey(new Node_1.NamedNode(childName, childNode));
            return predecessor ? predecessor.name : null;
        }
        else {
            return this.children_.getPredecessorKey(childName);
        }
    };
    /**
     * @param {!Index} indexDefinition
     * @return {?string}
     */
    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
            var minKey = idx.minKey();
            return minKey && minKey.name;
        }
        else {
            return this.children_.minKey();
        }
    };
    /**
     * @param {!Index} indexDefinition
     * @return {?NamedNode}
     */
    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {
        var minKey = this.getFirstChildName(indexDefinition);
        if (minKey) {
            return new Node_1.NamedNode(minKey, this.children_.get(minKey));
        }
        else {
            return null;
        }
    };
    /**
     * Given an index, return the key name of the largest value we have, according to that index
     * @param {!Index} indexDefinition
     * @return {?string}
     */
    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
            var maxKey = idx.maxKey();
            return maxKey && maxKey.name;
        }
        else {
            return this.children_.maxKey();
        }
    };
    /**
     * @param {!Index} indexDefinition
     * @return {?NamedNode}
     */
    ChildrenNode.prototype.getLastChild = function (indexDefinition) {
        var maxKey = this.getLastChildName(indexDefinition);
        if (maxKey) {
            return new Node_1.NamedNode(maxKey, this.children_.get(maxKey));
        }
        else {
            return null;
        }
    };
    /**
     * @inheritDoc
     */
    ChildrenNode.prototype.forEachChild = function (index, action) {
        var idx = this.resolveIndex_(index);
        if (idx) {
            return idx.inorderTraversal(function (wrappedNode) {
                return action(wrappedNode.name, wrappedNode.node);
            });
        }
        else {
            return this.children_.inorderTraversal(action);
        }
    };
    /**
     * @param {!Index} indexDefinition
     * @return {SortedMapIterator}
     */
    ChildrenNode.prototype.getIterator = function (indexDefinition) {
        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
    };
    /**
     *
     * @param {!NamedNode} startPost
     * @param {!Index} indexDefinition
     * @return {!SortedMapIterator}
     */
    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
            return idx.getIteratorFrom(startPost, function (key) { return key; });
        }
        else {
            var iterator = this.children_.getIteratorFrom(startPost.name, Node_1.NamedNode.Wrap);
            var next = iterator.peek();
            while (next != null && indexDefinition.compare(next, startPost) < 0) {
                iterator.getNext();
                next = iterator.peek();
            }
            return iterator;
        }
    };
    /**
     * @param {!Index} indexDefinition
     * @return {!SortedMapIterator}
     */
    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {
        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
    };
    /**
     * @param {!NamedNode} endPost
     * @param {!Index} indexDefinition
     * @return {!SortedMapIterator}
     */
    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
            return idx.getReverseIteratorFrom(endPost, function (key) {
                return key;
            });
        }
        else {
            var iterator = this.children_.getReverseIteratorFrom(endPost.name, Node_1.NamedNode.Wrap);
            var next = iterator.peek();
            while (next != null && indexDefinition.compare(next, endPost) > 0) {
                iterator.getNext();
                next = iterator.peek();
            }
            return iterator;
        }
    };
    /**
     * @inheritDoc
     */
    ChildrenNode.prototype.compareTo = function (other) {
        if (this.isEmpty()) {
            if (other.isEmpty()) {
                return 0;
            }
            else {
                return -1;
            }
        }
        else if (other.isLeafNode() || other.isEmpty()) {
            return 1;
        }
        else if (other === exports.MAX_NODE) {
            return -1;
        }
        else {
            // Must be another node with children.
            return 0;
        }
    };
    /**
     * @inheritDoc
     */
    ChildrenNode.prototype.withIndex = function (indexDefinition) {
        if (indexDefinition === KeyIndex_1.KEY_INDEX ||
            this.indexMap_.hasIndex(indexDefinition)) {
            return this;
        }
        else {
            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
        }
    };
    /**
     * @inheritDoc
     */
    ChildrenNode.prototype.isIndexed = function (index) {
        return index === KeyIndex_1.KEY_INDEX || this.indexMap_.hasIndex(index);
    };
    /**
     * @inheritDoc
     */
    ChildrenNode.prototype.equals = function (other) {
        if (other === this) {
            return true;
        }
        else if (other.isLeafNode()) {
            return false;
        }
        else {
            var otherChildrenNode = other;
            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
                return false;
            }
            else if (this.children_.count() === otherChildrenNode.children_.count()) {
                var thisIter = this.getIterator(PriorityIndex_1.PRIORITY_INDEX);
                var otherIter = otherChildrenNode.getIterator(PriorityIndex_1.PRIORITY_INDEX);
                var thisCurrent = thisIter.getNext();
                var otherCurrent = otherIter.getNext();
                while (thisCurrent && otherCurrent) {
                    if (thisCurrent.name !== otherCurrent.name ||
                        !thisCurrent.node.equals(otherCurrent.node)) {
                        return false;
                    }
                    thisCurrent = thisIter.getNext();
                    otherCurrent = otherIter.getNext();
                }
                return thisCurrent === null && otherCurrent === null;
            }
            else {
                return false;
            }
        }
    };
    /**
     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
     * instead.
     *
     * @private
     * @param {!Index} indexDefinition
     * @return {?SortedMap.<NamedNode, Node>}
     */
    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {
        if (indexDefinition === KeyIndex_1.KEY_INDEX) {
            return null;
        }
        else {
            return this.indexMap_.get(indexDefinition.toString());
        }
    };
    /**
     * @private
     * @type {RegExp}
     */
    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
    return ChildrenNode;
}());
exports.ChildrenNode = ChildrenNode;
/**
 * @constructor
 * @extends {ChildrenNode}
 * @private
 */
var MaxNode = /** @class */ (function (_super) {
    __extends(MaxNode, _super);
    function MaxNode() {
        return _super.call(this, new SortedMap_1.SortedMap(comparators_1.NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap_1.IndexMap.Default) || this;
    }
    MaxNode.prototype.compareTo = function (other) {
        if (other === this) {
            return 0;
        }
        else {
            return 1;
        }
    };
    MaxNode.prototype.equals = function (other) {
        // Not that we every compare it, but MAX_NODE is only ever equal to itself
        return other === this;
    };
    MaxNode.prototype.getPriority = function () {
        return this;
    };
    MaxNode.prototype.getImmediateChild = function (childName) {
        return ChildrenNode.EMPTY_NODE;
    };
    MaxNode.prototype.isEmpty = function () {
        return false;
    };
    return MaxNode;
}(ChildrenNode));
exports.MaxNode = MaxNode;
/**
 * Marker that will sort higher than any other snapshot.
 * @type {!MAX_NODE}
 * @const
 */
exports.MAX_NODE = new MaxNode();
Object.defineProperties(Node_1.NamedNode, {
    MIN: {
        value: new Node_1.NamedNode(util_2.MIN_NAME, ChildrenNode.EMPTY_NODE)
    },
    MAX: {
        value: new Node_1.NamedNode(util_2.MAX_NAME, exports.MAX_NODE)
    }
});
/**
 * Reference Extensions
 */
KeyIndex_1.KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
LeafNode_1.LeafNode.__childrenNodeConstructor = ChildrenNode;
snap_1.setMaxNode(exports.MAX_NODE);
PriorityIndex_1.setMaxNode(exports.MAX_NODE);

//# sourceMappingURL=ChildrenNode.js.map


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * @param {!string} name
 * @param {!Node} node
 * @constructor
 * @struct
 */
var NamedNode = /** @class */ (function () {
    function NamedNode(name, node) {
        this.name = name;
        this.node = node;
    }
    /**
     *
     * @param {!string} name
     * @param {!Node} node
     * @return {NamedNode}
     */
    NamedNode.Wrap = function (name, node) {
        return new NamedNode(name, node);
    };
    return NamedNode;
}());
exports.NamedNode = NamedNode;

//# sourceMappingURL=Node.js.map


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isDef;
/* harmony export (immutable) */ __webpack_exports__["c"] = isJustDef;
/* harmony export (immutable) */ __webpack_exports__["b"] = isFunction;
/* harmony export (immutable) */ __webpack_exports__["i"] = isObject;
/* harmony export (immutable) */ __webpack_exports__["g"] = isNonNullObject;
/* harmony export (immutable) */ __webpack_exports__["f"] = isNonArrayObject;
/* harmony export (immutable) */ __webpack_exports__["j"] = isString;
/* harmony export (immutable) */ __webpack_exports__["h"] = isNumber;
/* harmony export (immutable) */ __webpack_exports__["d"] = isNativeBlob;
/* harmony export (immutable) */ __webpack_exports__["e"] = isNativeBlobDefined;
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @return False if the object is undefined or null, true otherwise.
 */
function isDef(p) {
    return p != null;
}
function isJustDef(p) {
    return p !== void 0;
}
function isFunction(p) {
    return typeof p === 'function';
}
function isObject(p) {
    return typeof p === 'object';
}
function isNonNullObject(p) {
    return isObject(p) && p !== null;
}
function isNonArrayObject(p) {
    return isObject(p) && !Array.isArray(p);
}
function isString(p) {
    return typeof p === 'string' || p instanceof String;
}
function isNumber(p) {
    return typeof p === 'number' || p instanceof Number;
}
function isNativeBlob(p) {
    return isNativeBlobDefined() && p instanceof Blob;
}
function isNativeBlobDefined() {
    return typeof Blob !== 'undefined';
}

//# sourceMappingURL=type.js.map


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export FirebaseStorageError */
/* unused harmony export errors */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Code; });
/* unused harmony export prependCode */
/* harmony export (immutable) */ __webpack_exports__["s"] = unknown;
/* harmony export (immutable) */ __webpack_exports__["m"] = objectNotFound;
/* unused harmony export bucketNotFound */
/* unused harmony export projectNotFound */
/* harmony export (immutable) */ __webpack_exports__["n"] = quotaExceeded;
/* harmony export (immutable) */ __webpack_exports__["q"] = unauthenticated;
/* harmony export (immutable) */ __webpack_exports__["r"] = unauthorized;
/* harmony export (immutable) */ __webpack_exports__["o"] = retryLimitExceeded;
/* unused harmony export invalidChecksum */
/* harmony export (immutable) */ __webpack_exports__["c"] = canceled;
/* unused harmony export invalidEventName */
/* harmony export (immutable) */ __webpack_exports__["k"] = invalidUrl;
/* harmony export (immutable) */ __webpack_exports__["h"] = invalidDefaultBucket;
/* unused harmony export noDefaultBucket */
/* harmony export (immutable) */ __webpack_exports__["d"] = cannotSliceBlob;
/* harmony export (immutable) */ __webpack_exports__["p"] = serverFileWrongSize;
/* harmony export (immutable) */ __webpack_exports__["l"] = noDownloadURL;
/* harmony export (immutable) */ __webpack_exports__["f"] = invalidArgument;
/* harmony export (immutable) */ __webpack_exports__["g"] = invalidArgumentCount;
/* harmony export (immutable) */ __webpack_exports__["b"] = appDeleted;
/* harmony export (immutable) */ __webpack_exports__["j"] = invalidRootOperation;
/* harmony export (immutable) */ __webpack_exports__["i"] = invalidFormat;
/* harmony export (immutable) */ __webpack_exports__["e"] = internalError;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(26);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var FirebaseStorageError = /** @class */ (function () {
    function FirebaseStorageError(code, message) {
        this.code_ = prependCode(code);
        this.message_ = 'Firebase Storage: ' + message;
        this.serverResponse_ = null;
        this.name_ = 'FirebaseError';
    }
    FirebaseStorageError.prototype.codeProp = function () {
        return this.code;
    };
    FirebaseStorageError.prototype.codeEquals = function (code) {
        return prependCode(code) === this.codeProp();
    };
    FirebaseStorageError.prototype.serverResponseProp = function () {
        return this.serverResponse_;
    };
    FirebaseStorageError.prototype.setServerResponseProp = function (serverResponse) {
        this.serverResponse_ = serverResponse;
    };
    Object.defineProperty(FirebaseStorageError.prototype, "name", {
        get: function () {
            return this.name_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseStorageError.prototype, "code", {
        get: function () {
            return this.code_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseStorageError.prototype, "message", {
        get: function () {
            return this.message_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseStorageError.prototype, "serverResponse", {
        get: function () {
            return this.serverResponse_;
        },
        enumerable: true,
        configurable: true
    });
    return FirebaseStorageError;
}());

var errors = {};
var Code = {
    // Shared between all platforms
    UNKNOWN: 'unknown',
    OBJECT_NOT_FOUND: 'object-not-found',
    BUCKET_NOT_FOUND: 'bucket-not-found',
    PROJECT_NOT_FOUND: 'project-not-found',
    QUOTA_EXCEEDED: 'quota-exceeded',
    UNAUTHENTICATED: 'unauthenticated',
    UNAUTHORIZED: 'unauthorized',
    RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',
    INVALID_CHECKSUM: 'invalid-checksum',
    CANCELED: 'canceled',
    // JS specific
    INVALID_EVENT_NAME: 'invalid-event-name',
    INVALID_URL: 'invalid-url',
    INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',
    NO_DEFAULT_BUCKET: 'no-default-bucket',
    CANNOT_SLICE_BLOB: 'cannot-slice-blob',
    SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',
    NO_DOWNLOAD_URL: 'no-download-url',
    INVALID_ARGUMENT: 'invalid-argument',
    INVALID_ARGUMENT_COUNT: 'invalid-argument-count',
    APP_DELETED: 'app-deleted',
    INVALID_ROOT_OPERATION: 'invalid-root-operation',
    INVALID_FORMAT: 'invalid-format',
    INTERNAL_ERROR: 'internal-error'
};
function prependCode(code) {
    return 'storage/' + code;
}
function unknown() {
    var message = 'An unknown error occurred, please check the error payload for ' +
        'server response.';
    return new FirebaseStorageError(Code.UNKNOWN, message);
}
function objectNotFound(path) {
    return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, "Object '" + path + "' does not exist.");
}
function bucketNotFound(bucket) {
    return new FirebaseStorageError(Code.BUCKET_NOT_FOUND, "Bucket '" + bucket + "' does not exist.");
}
function projectNotFound(project) {
    return new FirebaseStorageError(Code.PROJECT_NOT_FOUND, "Project '" + project + "' does not exist.");
}
function quotaExceeded(bucket) {
    return new FirebaseStorageError(Code.QUOTA_EXCEEDED, "Quota for bucket '" +
        bucket +
        "' exceeded, please view quota on " +
        'https://firebase.google.com/pricing/.');
}
function unauthenticated() {
    var message = 'User is not authenticated, please authenticate using Firebase ' +
        'Authentication and try again.';
    return new FirebaseStorageError(Code.UNAUTHENTICATED, message);
}
function unauthorized(path) {
    return new FirebaseStorageError(Code.UNAUTHORIZED, "User does not have permission to access '" + path + "'.");
}
function retryLimitExceeded() {
    return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');
}
function invalidChecksum(path, checksum, calculated) {
    return new FirebaseStorageError(Code.INVALID_CHECKSUM, "Uploaded/downloaded object '" +
        path +
        "' has checksum '" +
        checksum +
        "' which does not match '" +
        calculated +
        "'. Please retry the upload/download.");
}
function canceled() {
    return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');
}
function invalidEventName(name) {
    return new FirebaseStorageError(Code.INVALID_EVENT_NAME, "Invalid event name '" + name + "'.");
}
function invalidUrl(url) {
    return new FirebaseStorageError(Code.INVALID_URL, "Invalid URL '" + url + "'.");
}
function invalidDefaultBucket(bucket) {
    return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + bucket + "'.");
}
function noDefaultBucket() {
    return new FirebaseStorageError(Code.NO_DEFAULT_BUCKET, 'No default bucket ' +
        "found. Did you set the '" +
        __WEBPACK_IMPORTED_MODULE_0__constants__["c" /* configOption */] +
        "' property when initializing the app?");
}
function cannotSliceBlob() {
    return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');
}
function serverFileWrongSize() {
    return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');
}
function noDownloadURL() {
    return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');
}
function invalidArgument(index, fnName, message) {
    return new FirebaseStorageError(Code.INVALID_ARGUMENT, 'Invalid argument in `' + fnName + '` at index ' + index + ': ' + message);
}
function invalidArgumentCount(argMin, argMax, fnName, real) {
    var countPart;
    var plural;
    if (argMin === argMax) {
        countPart = argMin;
        plural = argMin === 1 ? 'argument' : 'arguments';
    }
    else {
        countPart = 'between ' + argMin + ' and ' + argMax;
        plural = 'arguments';
    }
    return new FirebaseStorageError(Code.INVALID_ARGUMENT_COUNT, 'Invalid argument count in `' +
        fnName +
        '`: Expected ' +
        countPart +
        ' ' +
        plural +
        ', received ' +
        real +
        '.');
}
function appDeleted() {
    return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');
}
/**
 * @param name The name of the operation that was invalid.
 */
function invalidRootOperation(name) {
    return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, "The operation '" +
        name +
        "' cannot be performed on a root reference, create a non-root " +
        "reference using child, such as .child('file.png').");
}
/**
 * @param format The format that was not valid.
 * @param message A message describing the format violation.
 */
function invalidFormat(format, message) {
    return new FirebaseStorageError(Code.INVALID_FORMAT, "String does not match format '" + format + "': " + message);
}
/**
 * @param message A message describing the internal error.
 */
function internalError(message) {
    throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);
}

//# sourceMappingURL=error.js.map


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "firebase", function() { return firebase; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_firebaseApp__ = __webpack_require__(97);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var firebase = Object(__WEBPACK_IMPORTED_MODULE_0__src_firebaseApp__["a" /* createFirebaseNamespace */])();
/* harmony default export */ __webpack_exports__["default"] = (firebase);


//# sourceMappingURL=index.js.map


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Path_1 = __webpack_require__(2);
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(1);
var util_3 = __webpack_require__(0);
var util_4 = __webpack_require__(0);
/**
 * True for invalid Firebase keys
 * @type {RegExp}
 * @private
 */
exports.INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
/**
 * True for invalid Firebase paths.
 * Allows '/' in paths.
 * @type {RegExp}
 * @private
 */
exports.INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
/**
 * Maximum number of characters to allow in leaf value
 * @type {number}
 * @private
 */
exports.MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
/**
 * @param {*} key
 * @return {boolean}
 */
exports.isValidKey = function (key) {
    return (typeof key === 'string' && key.length !== 0 && !exports.INVALID_KEY_REGEX_.test(key));
};
/**
 * @param {string} pathString
 * @return {boolean}
 */
exports.isValidPathString = function (pathString) {
    return (typeof pathString === 'string' &&
        pathString.length !== 0 &&
        !exports.INVALID_PATH_REGEX_.test(pathString));
};
/**
 * @param {string} pathString
 * @return {boolean}
 */
exports.isValidRootPathString = function (pathString) {
    if (pathString) {
        // Allow '/.info/' at the beginning.
        pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
    }
    return exports.isValidPathString(pathString);
};
/**
 * @param {*} priority
 * @return {boolean}
 */
exports.isValidPriority = function (priority) {
    return (priority === null ||
        typeof priority === 'string' ||
        (typeof priority === 'number' && !util_2.isInvalidJSONNumber(priority)) ||
        (priority && typeof priority === 'object' && util_1.contains(priority, '.sv')));
};
/**
 * Pre-validate a datum passed as an argument to Firebase function.
 *
 * @param {string} fnName
 * @param {number} argumentNumber
 * @param {*} data
 * @param {!Path} path
 * @param {boolean} optional
 */
exports.validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {
    if (optional && data === undefined)
        return;
    exports.validateFirebaseData(util_3.errorPrefix(fnName, argumentNumber, optional), data, path);
};
/**
 * Validate a data object client-side before sending to server.
 *
 * @param {string} errorPrefix
 * @param {*} data
 * @param {!Path|!ValidationPath} path_
 */
exports.validateFirebaseData = function (errorPrefix, data, path_) {
    var path = path_ instanceof Path_1.Path ? new Path_1.ValidationPath(path_, errorPrefix) : path_;
    if (data === undefined) {
        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());
    }
    if (typeof data === 'function') {
        throw new Error(errorPrefix +
            'contains a function ' +
            path.toErrorString() +
            ' with contents = ' +
            data.toString());
    }
    if (util_2.isInvalidJSONNumber(data)) {
        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());
    }
    // Check max leaf size, but try to avoid the utf8 conversion if we can.
    if (typeof data === 'string' &&
        data.length > exports.MAX_LEAF_SIZE_ / 3 &&
        util_4.stringLength(data) > exports.MAX_LEAF_SIZE_) {
        throw new Error(errorPrefix +
            'contains a string greater than ' +
            exports.MAX_LEAF_SIZE_ +
            ' utf8 bytes ' +
            path.toErrorString() +
            " ('" +
            data.substring(0, 50) +
            "...')");
    }
    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
    // to save extra walking of large objects.
    if (data && typeof data === 'object') {
        var hasDotValue_1 = false, hasActualChild_1 = false;
        util_1.forEach(data, function (key, value) {
            if (key === '.value') {
                hasDotValue_1 = true;
            }
            else if (key !== '.priority' && key !== '.sv') {
                hasActualChild_1 = true;
                if (!exports.isValidKey(key)) {
                    throw new Error(errorPrefix +
                        ' contains an invalid key (' +
                        key +
                        ') ' +
                        path.toErrorString() +
                        '.  Keys must be non-empty strings ' +
                        'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                }
            }
            path.push(key);
            exports.validateFirebaseData(errorPrefix, value, path);
            path.pop();
        });
        if (hasDotValue_1 && hasActualChild_1) {
            throw new Error(errorPrefix +
                ' contains ".value" child ' +
                path.toErrorString() +
                ' in addition to actual children.');
        }
    }
};
/**
 * Pre-validate paths passed in the firebase function.
 *
 * @param {string} errorPrefix
 * @param {Array<!Path>} mergePaths
 */
exports.validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
    var i, curPath;
    for (i = 0; i < mergePaths.length; i++) {
        curPath = mergePaths[i];
        var keys = curPath.slice();
        for (var j = 0; j < keys.length; j++) {
            if (keys[j] === '.priority' && j === keys.length - 1) {
                // .priority is OK
            }
            else if (!exports.isValidKey(keys[j])) {
                throw new Error(errorPrefix +
                    'contains an invalid key (' +
                    keys[j] +
                    ') in path ' +
                    curPath.toString() +
                    '. Keys must be non-empty strings ' +
                    'and can\'t contain ".", "#", "$", "/", "[", or "]"');
            }
        }
    }
    // Check that update keys are not descendants of each other.
    // We rely on the property that sorting guarantees that ancestors come
    // right before descendants.
    mergePaths.sort(Path_1.Path.comparePaths);
    var prevPath = null;
    for (i = 0; i < mergePaths.length; i++) {
        curPath = mergePaths[i];
        if (prevPath !== null && prevPath.contains(curPath)) {
            throw new Error(errorPrefix +
                'contains a path ' +
                prevPath.toString() +
                ' that is ancestor of another path ' +
                curPath.toString());
        }
        prevPath = curPath;
    }
};
/**
 * pre-validate an object passed as an argument to firebase function (
 * must be an object - e.g. for firebase.update()).
 *
 * @param {string} fnName
 * @param {number} argumentNumber
 * @param {*} data
 * @param {!Path} path
 * @param {boolean} optional
 */
exports.validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {
    if (optional && data === undefined)
        return;
    var errorPrefix = util_3.errorPrefix(fnName, argumentNumber, optional);
    if (!(data && typeof data === 'object') || Array.isArray(data)) {
        throw new Error(errorPrefix + ' must be an object containing the children to replace.');
    }
    var mergePaths = [];
    util_1.forEach(data, function (key, value) {
        var curPath = new Path_1.Path(key);
        exports.validateFirebaseData(errorPrefix, value, path.child(curPath));
        if (curPath.getBack() === '.priority') {
            if (!exports.isValidPriority(value)) {
                throw new Error(errorPrefix +
                    "contains an invalid value for '" +
                    curPath.toString() +
                    "', which must be a valid " +
                    'Firebase priority (a string, finite number, server value, or null).');
            }
        }
        mergePaths.push(curPath);
    });
    exports.validateFirebaseMergePaths(errorPrefix, mergePaths);
};
exports.validatePriority = function (fnName, argumentNumber, priority, optional) {
    if (optional && priority === undefined)
        return;
    if (util_2.isInvalidJSONNumber(priority))
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'is ' +
            priority.toString() +
            ', but must be a valid Firebase priority (a string, finite number, ' +
            'server value, or null).');
    // Special case to allow importing data with a .sv.
    if (!exports.isValidPriority(priority))
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid Firebase priority ' +
            '(a string, finite number, server value, or null).');
};
exports.validateEventType = function (fnName, argumentNumber, eventType, optional) {
    if (optional && eventType === undefined)
        return;
    switch (eventType) {
        case 'value':
        case 'child_added':
        case 'child_removed':
        case 'child_changed':
        case 'child_moved':
            break;
        default:
            throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid event type = "value", "child_added", "child_removed", ' +
                '"child_changed", or "child_moved".');
    }
};
exports.validateKey = function (fnName, argumentNumber, key, optional) {
    if (optional && key === undefined)
        return;
    if (!exports.isValidKey(key))
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'was an invalid key = "' +
            key +
            '".  Firebase keys must be non-empty strings and ' +
            'can\'t contain ".", "#", "$", "/", "[", or "]").');
};
exports.validatePathString = function (fnName, argumentNumber, pathString, optional) {
    if (optional && pathString === undefined)
        return;
    if (!exports.isValidPathString(pathString))
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'was an invalid path = "' +
            pathString +
            '". Paths must be non-empty strings and ' +
            'can\'t contain ".", "#", "$", "[", or "]"');
};
exports.validateRootPathString = function (fnName, argumentNumber, pathString, optional) {
    if (pathString) {
        // Allow '/.info/' at the beginning.
        pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
    }
    exports.validatePathString(fnName, argumentNumber, pathString, optional);
};
exports.validateWritablePath = function (fnName, path) {
    if (path.getFront() === '.info') {
        throw new Error(fnName + " failed = Can't modify data under /.info/");
    }
};
exports.validateUrl = function (fnName, argumentNumber, parsedUrl) {
    // TODO = Validate server better.
    var pathString = parsedUrl.path.toString();
    if (!(typeof parsedUrl.repoInfo.host === 'string') ||
        parsedUrl.repoInfo.host.length === 0 ||
        !exports.isValidKey(parsedUrl.repoInfo.namespace) ||
        (pathString.length !== 0 && !exports.isValidRootPathString(pathString))) {
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, false) +
            'must be a valid firebase URL and ' +
            'the path can\'t contain ".", "#", "$", "[", or "]".');
    }
};
exports.validateCredential = function (fnName, argumentNumber, cred, optional) {
    if (optional && cred === undefined)
        return;
    if (!(typeof cred === 'string'))
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid credential (a string).');
};
exports.validateBoolean = function (fnName, argumentNumber, bool, optional) {
    if (optional && bool === undefined)
        return;
    if (typeof bool !== 'boolean')
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');
};
exports.validateString = function (fnName, argumentNumber, string, optional) {
    if (optional && string === undefined)
        return;
    if (!(typeof string === 'string')) {
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid string.');
    }
};
exports.validateObject = function (fnName, argumentNumber, obj, optional) {
    if (optional && obj === undefined)
        return;
    if (!(obj && typeof obj === 'object') || obj === null) {
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid object.');
    }
};
exports.validateObjectContainsKey = function (fnName, argumentNumber, obj, key, optional, opt_type) {
    var objectContainsKey = obj && typeof obj === 'object' && util_1.contains(obj, key);
    if (!objectContainsKey) {
        if (optional) {
            return;
        }
        else {
            throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
                'must contain the key "' +
                key +
                '"');
        }
    }
    if (opt_type) {
        var val = util_1.safeGet(obj, key);
        if ((opt_type === 'number' && !(typeof val === 'number')) ||
            (opt_type === 'string' && !(typeof val === 'string')) ||
            (opt_type === 'boolean' && !(typeof val === 'boolean')) ||
            (opt_type === 'function' && !(typeof val === 'function')) ||
            (opt_type === 'object' && !(typeof val === 'object') && val)) {
            if (optional) {
                throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
                    'contains invalid value for key "' +
                    key +
                    '" (must be of type "' +
                    opt_type +
                    '")');
            }
            else {
                throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
                    'must contain the key "' +
                    key +
                    '" with type "' +
                    opt_type +
                    '"');
            }
        }
    }
};

//# sourceMappingURL=validation.js.map


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
/**
 *
 * @enum
 */
var OperationType;
(function (OperationType) {
    OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
    OperationType[OperationType["MERGE"] = 1] = "MERGE";
    OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
    OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
})(OperationType = exports.OperationType || (exports.OperationType = {}));
/**
 * @param {boolean} fromUser
 * @param {boolean} fromServer
 * @param {?string} queryId
 * @param {boolean} tagged
 * @constructor
 */
var OperationSource = /** @class */ (function () {
    function OperationSource(fromUser, fromServer, queryId, tagged) {
        this.fromUser = fromUser;
        this.fromServer = fromServer;
        this.queryId = queryId;
        this.tagged = tagged;
        util_1.assert(!tagged || fromServer, 'Tagged queries must be from server.');
    }
    /**
     * @const
     * @type {!OperationSource}
     */
    OperationSource.User = new OperationSource(
    /*fromUser=*/ true, false, null, 
    /*tagged=*/ false);
    /**
     * @const
     * @type {!OperationSource}
     */
    OperationSource.Server = new OperationSource(false, 
    /*fromServer=*/ true, null, 
    /*tagged=*/ false);
    /**
     * @param {string} queryId
     * @return {!OperationSource}
     */
    OperationSource.forServerTaggedQuery = function (queryId) {
        return new OperationSource(false, 
        /*fromServer=*/ true, queryId, 
        /*tagged=*/ true);
    };
    return OperationSource;
}());
exports.OperationSource = OperationSource;

//# sourceMappingURL=Operation.js.map


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = make;
/* harmony export (immutable) */ __webpack_exports__["c"] = resolve;
/* harmony export (immutable) */ __webpack_exports__["b"] = reject;
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Implements the promise abstraction interface for external
 * (public SDK) packaging, which just passes through to the firebase-app impl.
 */
/**
 * @template T
 * @param {function((function(T): void),
 *                  (function(!Error): void))} resolver
 */
function make(resolver) {
    return new Promise(resolver);
}
/**
 * @template T
 */
function resolve(value) {
    return Promise.resolve(value);
}
function reject(error) {
    return Promise.reject(error);
}

//# sourceMappingURL=promise_external.js.map


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @constructor
 * @struct
 * @param {!string} type The event type
 * @param {!Node} snapshotNode The data
 * @param {string=} childName The name for this child, if it's a child event
 * @param {Node=} oldSnap Used for intermediate processing of child changed events
 * @param {string=} prevName The name for the previous child, if applicable
 */
var Change = /** @class */ (function () {
    function Change(type, snapshotNode, childName, oldSnap, prevName) {
        this.type = type;
        this.snapshotNode = snapshotNode;
        this.childName = childName;
        this.oldSnap = oldSnap;
        this.prevName = prevName;
    }
    /**
     * @param {!Node} snapshot
     * @return {!Change}
     */
    Change.valueChange = function (snapshot) {
        return new Change(Change.VALUE, snapshot);
    };
    /**
     * @param {string} childKey
     * @param {!Node} snapshot
     * @return {!Change}
     */
    Change.childAddedChange = function (childKey, snapshot) {
        return new Change(Change.CHILD_ADDED, snapshot, childKey);
    };
    /**
     * @param {string} childKey
     * @param {!Node} snapshot
     * @return {!Change}
     */
    Change.childRemovedChange = function (childKey, snapshot) {
        return new Change(Change.CHILD_REMOVED, snapshot, childKey);
    };
    /**
     * @param {string} childKey
     * @param {!Node} newSnapshot
     * @param {!Node} oldSnapshot
     * @return {!Change}
     */
    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {
        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);
    };
    /**
     * @param {string} childKey
     * @param {!Node} snapshot
     * @return {!Change}
     */
    Change.childMovedChange = function (childKey, snapshot) {
        return new Change(Change.CHILD_MOVED, snapshot, childKey);
    };
    //event types
    /** Event type for a child added */
    Change.CHILD_ADDED = 'child_added';
    /** Event type for a child removed */
    Change.CHILD_REMOVED = 'child_removed';
    /** Event type for a child changed */
    Change.CHILD_CHANGED = 'child_changed';
    /** Event type for a child moved */
    Change.CHILD_MOVED = 'child_moved';
    /** Event type for a value change */
    Change.VALUE = 'value';
    return Change;
}());
exports.Change = Change;

//# sourceMappingURL=Change.js.map


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export contains */
/* harmony export (immutable) */ __webpack_exports__["b"] = forEach;
/* harmony export (immutable) */ __webpack_exports__["a"] = clone;
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Contains methods for working with objects.
 */
function contains(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
function forEach(obj, f) {
    for (var key in obj) {
        if (contains(obj, key)) {
            f(key, obj[key]);
        }
    }
}
function clone(obj) {
    if (obj == null) {
        return {};
    }
    var c = {};
    forEach(obj, function (key, val) {
        c[key] = val;
    });
    return c;
}

//# sourceMappingURL=object.js.map


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Index_1 = __webpack_require__(20);
var Node_1 = __webpack_require__(5);
var util_1 = __webpack_require__(1);
var util_2 = __webpack_require__(0);
var __EMPTY_NODE;
var KeyIndex = /** @class */ (function (_super) {
    __extends(KeyIndex, _super);
    function KeyIndex() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(KeyIndex, "__EMPTY_NODE", {
        get: function () {
            return __EMPTY_NODE;
        },
        set: function (val) {
            __EMPTY_NODE = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.compare = function (a, b) {
        return util_1.nameCompare(a.name, b.name);
    };
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.isDefinedOn = function (node) {
        // We could probably return true here (since every node has a key), but it's never called
        // so just leaving unimplemented for now.
        throw util_2.assertionError('KeyIndex.isDefinedOn not expected to be called.');
    };
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
        return false; // The key for a node never changes.
    };
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.minPost = function () {
        return Node_1.NamedNode.MIN;
    };
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.maxPost = function () {
        // TODO: This should really be created once and cached in a static property, but
        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
        return new Node_1.NamedNode(util_1.MAX_NAME, __EMPTY_NODE);
    };
    /**
     * @param {*} indexValue
     * @param {string} name
     * @return {!NamedNode}
     */
    KeyIndex.prototype.makePost = function (indexValue, name) {
        util_2.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
        // We just use empty node, but it'll never be compared, since our comparator only looks at name.
        return new Node_1.NamedNode(indexValue, __EMPTY_NODE);
    };
    /**
     * @return {!string} String representation for inclusion in a query spec
     */
    KeyIndex.prototype.toString = function () {
        return '.key';
    };
    return KeyIndex;
}(Index_1.Index));
exports.KeyIndex = KeyIndex;
exports.KEY_INDEX = new KeyIndex();

//# sourceMappingURL=KeyIndex.js.map


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ChildrenNode_1 = __webpack_require__(4);
var LeafNode_1 = __webpack_require__(21);
var Node_1 = __webpack_require__(5);
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(0);
var childSet_1 = __webpack_require__(55);
var comparators_1 = __webpack_require__(56);
var IndexMap_1 = __webpack_require__(54);
var PriorityIndex_1 = __webpack_require__(3);
var USE_HINZE = true;
/**
 * Constructs a snapshot node representing the passed JSON and returns it.
 * @param {*} json JSON to create a node for.
 * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the
 * passed JSON contains a .priority property.
 * @return {!Node}
 */
function nodeFromJSON(json, priority) {
    if (priority === void 0) { priority = null; }
    if (json === null) {
        return ChildrenNode_1.ChildrenNode.EMPTY_NODE;
    }
    if (typeof json === 'object' && '.priority' in json) {
        priority = json['.priority'];
    }
    util_2.assert(priority === null ||
        typeof priority === 'string' ||
        typeof priority === 'number' ||
        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);
    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
        json = json['.value'];
    }
    // Valid leaf nodes include non-objects or server-value wrapper objects
    if (typeof json !== 'object' || '.sv' in json) {
        var jsonLeaf = json;
        return new LeafNode_1.LeafNode(jsonLeaf, nodeFromJSON(priority));
    }
    if (!(json instanceof Array) && USE_HINZE) {
        var children_1 = [];
        var childrenHavePriority_1 = false;
        var hinzeJsonObj_1 = json;
        util_1.forEach(hinzeJsonObj_1, function (key, child) {
            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {
                // Ignore metadata nodes
                var childNode = nodeFromJSON(hinzeJsonObj_1[key]);
                if (!childNode.isEmpty()) {
                    childrenHavePriority_1 =
                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();
                    children_1.push(new Node_1.NamedNode(key, childNode));
                }
            }
        });
        if (children_1.length == 0) {
            return ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        }
        var childSet = childSet_1.buildChildSet(children_1, comparators_1.NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, comparators_1.NAME_COMPARATOR);
        if (childrenHavePriority_1) {
            var sortedChildSet = childSet_1.buildChildSet(children_1, PriorityIndex_1.PRIORITY_INDEX.getCompare());
            return new ChildrenNode_1.ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap_1.IndexMap({ '.priority': sortedChildSet }, { '.priority': PriorityIndex_1.PRIORITY_INDEX }));
        }
        else {
            return new ChildrenNode_1.ChildrenNode(childSet, nodeFromJSON(priority), IndexMap_1.IndexMap.Default);
        }
    }
    else {
        var node_1 = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        var jsonObj_1 = json;
        util_1.forEach(jsonObj_1, function (key, childData) {
            if (util_1.contains(jsonObj_1, key)) {
                if (key.substring(0, 1) !== '.') {
                    // ignore metadata nodes.
                    var childNode = nodeFromJSON(childData);
                    if (childNode.isLeafNode() || !childNode.isEmpty())
                        node_1 = node_1.updateImmediateChild(key, childNode);
                }
            }
        });
        return node_1.updatePriority(nodeFromJSON(priority));
    }
}
exports.nodeFromJSON = nodeFromJSON;
PriorityIndex_1.setNodeFromJSON(nodeFromJSON);

//# sourceMappingURL=nodeFromJSON.js.map


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StringFormat; });
/* harmony export (immutable) */ __webpack_exports__["c"] = formatValidator;
/* unused harmony export StringData */
/* harmony export (immutable) */ __webpack_exports__["b"] = dataFromString;
/* unused harmony export utf8Bytes_ */
/* unused harmony export percentEncodedBytes_ */
/* unused harmony export base64Bytes_ */
/* unused harmony export dataURLBytes_ */
/* unused harmony export dataURLContentType_ */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__error__ = __webpack_require__(7);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var StringFormat = {
    RAW: 'raw',
    BASE64: 'base64',
    BASE64URL: 'base64url',
    DATA_URL: 'data_url'
};
function formatValidator(stringFormat) {
    switch (stringFormat) {
        case StringFormat.RAW:
        case StringFormat.BASE64:
        case StringFormat.BASE64URL:
        case StringFormat.DATA_URL:
            return;
        default:
            throw 'Expected one of the event types: [' +
                StringFormat.RAW +
                ', ' +
                StringFormat.BASE64 +
                ', ' +
                StringFormat.BASE64URL +
                ', ' +
                StringFormat.DATA_URL +
                '].';
    }
}
/**
 * @struct
 */
var StringData = /** @class */ (function () {
    function StringData(data, opt_contentType) {
        this.data = data;
        this.contentType = opt_contentType || null;
    }
    return StringData;
}());

function dataFromString(format, string) {
    switch (format) {
        case StringFormat.RAW:
            return new StringData(utf8Bytes_(string));
        case StringFormat.BASE64:
        case StringFormat.BASE64URL:
            return new StringData(base64Bytes_(format, string));
        case StringFormat.DATA_URL:
            return new StringData(dataURLBytes_(string), dataURLContentType_(string));
    }
    // assert(false);
    throw __WEBPACK_IMPORTED_MODULE_0__error__["s" /* unknown */]();
}
function utf8Bytes_(string) {
    var b = [];
    for (var i = 0; i < string.length; i++) {
        var c = string.charCodeAt(i);
        if (c <= 127) {
            b.push(c);
        }
        else {
            if (c <= 2047) {
                b.push(192 | (c >> 6), 128 | (c & 63));
            }
            else {
                if ((c & 64512) == 55296) {
                    // The start of a surrogate pair.
                    var valid = i < string.length - 1 &&
                        (string.charCodeAt(i + 1) & 64512) == 56320;
                    if (!valid) {
                        // The second surrogate wasn't there.
                        b.push(239, 191, 189);
                    }
                    else {
                        var hi = c;
                        var lo = string.charCodeAt(++i);
                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);
                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));
                    }
                }
                else {
                    if ((c & 64512) == 56320) {
                        // Invalid low surrogate.
                        b.push(239, 191, 189);
                    }
                    else {
                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));
                    }
                }
            }
        }
    }
    return new Uint8Array(b);
}
function percentEncodedBytes_(string) {
    var decoded;
    try {
        decoded = decodeURIComponent(string);
    }
    catch (e) {
        throw __WEBPACK_IMPORTED_MODULE_0__error__["i" /* invalidFormat */](StringFormat.DATA_URL, 'Malformed data URL.');
    }
    return utf8Bytes_(decoded);
}
function base64Bytes_(format, string) {
    switch (format) {
        case StringFormat.BASE64: {
            var hasMinus = string.indexOf('-') !== -1;
            var hasUnder = string.indexOf('_') !== -1;
            if (hasMinus || hasUnder) {
                var invalidChar = hasMinus ? '-' : '_';
                throw __WEBPACK_IMPORTED_MODULE_0__error__["i" /* invalidFormat */](format, "Invalid character '" +
                    invalidChar +
                    "' found: is it base64url encoded?");
            }
            break;
        }
        case StringFormat.BASE64URL: {
            var hasPlus = string.indexOf('+') !== -1;
            var hasSlash = string.indexOf('/') !== -1;
            if (hasPlus || hasSlash) {
                var invalidChar = hasPlus ? '+' : '/';
                throw __WEBPACK_IMPORTED_MODULE_0__error__["i" /* invalidFormat */](format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
            }
            string = string.replace(/-/g, '+').replace(/_/g, '/');
            break;
        }
    }
    var bytes;
    try {
        bytes = atob(string);
    }
    catch (e) {
        throw __WEBPACK_IMPORTED_MODULE_0__error__["i" /* invalidFormat */](format, 'Invalid character found');
    }
    var array = new Uint8Array(bytes.length);
    for (var i = 0; i < bytes.length; i++) {
        array[i] = bytes.charCodeAt(i);
    }
    return array;
}
/**
 * @struct
 */
var DataURLParts = /** @class */ (function () {
    function DataURLParts(dataURL) {
        this.base64 = false;
        this.contentType = null;
        var matches = dataURL.match(/^data:([^,]+)?,/);
        if (matches === null) {
            throw __WEBPACK_IMPORTED_MODULE_0__error__["i" /* invalidFormat */](StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
        }
        var middle = matches[1] || null;
        if (middle != null) {
            this.base64 = endsWith(middle, ';base64');
            this.contentType = this.base64
                ? middle.substring(0, middle.length - ';base64'.length)
                : middle;
        }
        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
    }
    return DataURLParts;
}());
function dataURLBytes_(string) {
    var parts = new DataURLParts(string);
    if (parts.base64) {
        return base64Bytes_(StringFormat.BASE64, parts.rest);
    }
    else {
        return percentEncodedBytes_(parts.rest);
    }
}
function dataURLContentType_(string) {
    var parts = new DataURLParts(string);
    return parts.contentType;
}
function endsWith(s, end) {
    var longEnough = s.length >= end.length;
    if (!longEnough) {
        return false;
    }
    return s.substring(s.length - end.length) === end;
}

//# sourceMappingURL=string.js.map


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TaskEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InternalTaskState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return TaskState; });
/* harmony export (immutable) */ __webpack_exports__["d"] = taskStateFromInternalTaskState;
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var TaskEvent = {
    /** Triggered whenever the task changes or progress is updated. */
    STATE_CHANGED: 'state_changed'
};
var InternalTaskState = {
    RUNNING: 'running',
    PAUSING: 'pausing',
    PAUSED: 'paused',
    SUCCESS: 'success',
    CANCELING: 'canceling',
    CANCELED: 'canceled',
    ERROR: 'error'
};
var TaskState = {
    /** The task is currently transferring data. */
    RUNNING: 'running',
    /** The task was paused by the user. */
    PAUSED: 'paused',
    /** The task completed successfully. */
    SUCCESS: 'success',
    /** The task was canceled. */
    CANCELED: 'canceled',
    /** The task failed with an error. */
    ERROR: 'error'
};
function taskStateFromInternalTaskState(state) {
    switch (state) {
        case InternalTaskState.RUNNING:
        case InternalTaskState.PAUSING:
        case InternalTaskState.CANCELING:
            return TaskState.RUNNING;
        case InternalTaskState.PAUSED:
            return TaskState.PAUSED;
        case InternalTaskState.SUCCESS:
            return TaskState.SUCCESS;
        case InternalTaskState.CANCELED:
            return TaskState.CANCELED;
        case InternalTaskState.ERROR:
            return TaskState.ERROR;
        default:
            // TODO(andysoto): assert(false);
            return TaskState.ERROR;
    }
}

//# sourceMappingURL=taskenums.js.map


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var DOMStorageWrapper_1 = __webpack_require__(113);
var MemoryStorage_1 = __webpack_require__(114);
/**
 * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
 * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
 * to reflect this type
 *
 * @param {string} domStorageName Name of the underlying storage object
 *   (e.g. 'localStorage' or 'sessionStorage').
 * @return {?} Turning off type information until a common interface is defined.
 */
var createStoragefor = function (domStorageName) {
    try {
        // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
        // so it must be inside the try/catch.
        if (typeof window !== 'undefined' &&
            typeof window[domStorageName] !== 'undefined') {
            // Need to test cache. Just because it's here doesn't mean it works
            var domStorage = window[domStorageName];
            domStorage.setItem('firebase:sentinel', 'cache');
            domStorage.removeItem('firebase:sentinel');
            return new DOMStorageWrapper_1.DOMStorageWrapper(domStorage);
        }
    }
    catch (e) { }
    // Failed to create wrapper.  Just return in-memory storage.
    // TODO: log?
    return new MemoryStorage_1.MemoryStorage();
};
/** A storage object that lasts across sessions */
exports.PersistentStorage = createStoragefor('localStorage');
/** A storage object that only lasts one session */
exports.SessionStorage = createStoragefor('sessionStorage');

//# sourceMappingURL=storage.js.map


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PROTOCOL_VERSION = '5';
exports.VERSION_PARAM = 'v';
exports.TRANSPORT_SESSION_PARAM = 's';
exports.REFERER_PARAM = 'r';
exports.FORGE_REF = 'f';
exports.FORGE_DOMAIN = 'firebaseio.com';
exports.LAST_SESSION_PARAM = 'ls';
exports.WEBSOCKET = 'websocket';
exports.LONG_POLLING = 'long_polling';

//# sourceMappingURL=Constants.js.map


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Node_1 = __webpack_require__(5);
var util_1 = __webpack_require__(1);
/**
 *
 * @constructor
 */
var Index = /** @class */ (function () {
    function Index() {
    }
    /**
     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for
     * this index
     */
    Index.prototype.getCompare = function () {
        return this.compare.bind(this);
    };
    /**
     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
     *
     * @param {!Node} oldNode
     * @param {!Node} newNode
     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode
     */
    Index.prototype.indexedValueChanged = function (oldNode, newNode) {
        var oldWrapped = new Node_1.NamedNode(util_1.MIN_NAME, oldNode);
        var newWrapped = new Node_1.NamedNode(util_1.MIN_NAME, newNode);
        return this.compare(oldWrapped, newWrapped) !== 0;
    };
    /**
     * @return {!NamedNode} a node wrapper that will sort equal to or less than
     * any other node wrapper, using this index
     */
    Index.prototype.minPost = function () {
        return Node_1.NamedNode.MIN;
    };
    return Index;
}());
exports.Index = Index;

//# sourceMappingURL=Index.js.map


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(1);
var snap_1 = __webpack_require__(52);
var __childrenNodeConstructor;
/**
 * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
 * implements Node and stores the value of the node (a string,
 * number, or boolean) accessible via getValue().
 */
var LeafNode = /** @class */ (function () {
    /**
     * @implements {Node}
     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.
     *                                         The object type is possible in the event of a deferred value
     * @param {!Node=} priorityNode_ The priority of this node.
     */
    function LeafNode(value_, priorityNode_) {
        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }
        this.value_ = value_;
        this.priorityNode_ = priorityNode_;
        this.lazyHash_ = null;
        util_1.assert(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
        snap_1.validatePriorityNode(this.priorityNode_);
    }
    Object.defineProperty(LeafNode, "__childrenNodeConstructor", {
        get: function () {
            return __childrenNodeConstructor;
        },
        set: function (val) {
            __childrenNodeConstructor = val;
        },
        enumerable: true,
        configurable: true
    });
    /** @inheritDoc */
    LeafNode.prototype.isLeafNode = function () {
        return true;
    };
    /** @inheritDoc */
    LeafNode.prototype.getPriority = function () {
        return this.priorityNode_;
    };
    /** @inheritDoc */
    LeafNode.prototype.updatePriority = function (newPriorityNode) {
        return new LeafNode(this.value_, newPriorityNode);
    };
    /** @inheritDoc */
    LeafNode.prototype.getImmediateChild = function (childName) {
        // Hack to treat priority as a regular child
        if (childName === '.priority') {
            return this.priorityNode_;
        }
        else {
            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
        }
    };
    /** @inheritDoc */
    LeafNode.prototype.getChild = function (path) {
        if (path.isEmpty()) {
            return this;
        }
        else if (path.getFront() === '.priority') {
            return this.priorityNode_;
        }
        else {
            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
        }
    };
    /**
     * @inheritDoc
     */
    LeafNode.prototype.hasChild = function () {
        return false;
    };
    /** @inheritDoc */
    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {
        return null;
    };
    /** @inheritDoc */
    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {
        if (childName === '.priority') {
            return this.updatePriority(newChildNode);
        }
        else if (newChildNode.isEmpty() && childName !== '.priority') {
            return this;
        }
        else {
            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
        }
    };
    /** @inheritDoc */
    LeafNode.prototype.updateChild = function (path, newChildNode) {
        var front = path.getFront();
        if (front === null) {
            return newChildNode;
        }
        else if (newChildNode.isEmpty() && front !== '.priority') {
            return this;
        }
        else {
            util_1.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));
        }
    };
    /** @inheritDoc */
    LeafNode.prototype.isEmpty = function () {
        return false;
    };
    /** @inheritDoc */
    LeafNode.prototype.numChildren = function () {
        return 0;
    };
    /** @inheritDoc */
    LeafNode.prototype.forEachChild = function (index, action) {
        return false;
    };
    /**
     * @inheritDoc
     */
    LeafNode.prototype.val = function (exportFormat) {
        if (exportFormat && !this.getPriority().isEmpty())
            return {
                '.value': this.getValue(),
                '.priority': this.getPriority().val()
            };
        else
            return this.getValue();
    };
    /** @inheritDoc */
    LeafNode.prototype.hash = function () {
        if (this.lazyHash_ === null) {
            var toHash = '';
            if (!this.priorityNode_.isEmpty())
                toHash +=
                    'priority:' +
                        snap_1.priorityHashText(this.priorityNode_.val()) +
                        ':';
            var type = typeof this.value_;
            toHash += type + ':';
            if (type === 'number') {
                toHash += util_2.doubleToIEEE754String(this.value_);
            }
            else {
                toHash += this.value_;
            }
            this.lazyHash_ = util_2.sha1(toHash);
        }
        return this.lazyHash_;
    };
    /**
     * Returns the value of the leaf node.
     * @return {Object|string|number|boolean} The value of the node.
     */
    LeafNode.prototype.getValue = function () {
        return this.value_;
    };
    /**
     * @inheritDoc
     */
    LeafNode.prototype.compareTo = function (other) {
        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
            return 1;
        }
        else if (other instanceof LeafNode.__childrenNodeConstructor) {
            return -1;
        }
        else {
            util_1.assert(other.isLeafNode(), 'Unknown node type');
            return this.compareToLeafNode_(other);
        }
    };
    /**
     * Comparison specifically for two leaf nodes
     * @param {!LeafNode} otherLeaf
     * @return {!number}
     * @private
     */
    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {
        var otherLeafType = typeof otherLeaf.value_;
        var thisLeafType = typeof this.value_;
        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
        util_1.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
        util_1.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
        if (otherIndex === thisIndex) {
            // Same type, compare values
            if (thisLeafType === 'object') {
                // Deferred value nodes are all equal, but we should also never get to this point...
                return 0;
            }
            else {
                // Note that this works because true > false, all others are number or string comparisons
                if (this.value_ < otherLeaf.value_) {
                    return -1;
                }
                else if (this.value_ === otherLeaf.value_) {
                    return 0;
                }
                else {
                    return 1;
                }
            }
        }
        else {
            return thisIndex - otherIndex;
        }
    };
    /**
     * @inheritDoc
     */
    LeafNode.prototype.withIndex = function () {
        return this;
    };
    /**
     * @inheritDoc
     */
    LeafNode.prototype.isIndexed = function () {
        return true;
    };
    /**
     * @inheritDoc
     */
    LeafNode.prototype.equals = function (other) {
        /**
         * @inheritDoc
         */
        if (other === this) {
            return true;
        }
        else if (other.isLeafNode()) {
            var otherLeaf = other;
            return (this.value_ === otherLeaf.value_ &&
                this.priorityNode_.equals(otherLeaf.priorityNode_));
        }
        else {
            return false;
        }
    };
    /**
     * The sort order for comparing leaf nodes of different types. If two leaf nodes have
     * the same type, the comparison falls back to their value
     * @type {Array.<!string>}
     * @const
     */
    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];
    return LeafNode;
}());
exports.LeafNode = LeafNode;

//# sourceMappingURL=LeafNode.js.map


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An iterator over an LLRBNode.
 */
var SortedMapIterator = /** @class */ (function () {
    /**
     * @template K, V, T
     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.
     * @param {?K} startKey
     * @param {function(K, K): number} comparator
     * @param {boolean} isReverse_ Whether or not to iterate in reverse
     * @param {(function(K, V):T)=} resultGenerator_
     */
    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {
        if (resultGenerator_ === void 0) { resultGenerator_ = null; }
        this.isReverse_ = isReverse_;
        this.resultGenerator_ = resultGenerator_;
        /** @private
         * @type {Array.<!LLRBNode>}
         */
        this.nodeStack_ = [];
        var cmp = 1;
        while (!node.isEmpty()) {
            node = node;
            cmp = startKey ? comparator(node.key, startKey) : 1;
            // flip the comparison if we're going in reverse
            if (isReverse_)
                cmp *= -1;
            if (cmp < 0) {
                // This node is less than our start key. ignore it
                if (this.isReverse_) {
                    node = node.left;
                }
                else {
                    node = node.right;
                }
            }
            else if (cmp === 0) {
                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
                this.nodeStack_.push(node);
                break;
            }
            else {
                // This node is greater than our start key, add it to the stack and move to the next one
                this.nodeStack_.push(node);
                if (this.isReverse_) {
                    node = node.right;
                }
                else {
                    node = node.left;
                }
            }
        }
    }
    SortedMapIterator.prototype.getNext = function () {
        if (this.nodeStack_.length === 0)
            return null;
        var node = this.nodeStack_.pop();
        var result;
        if (this.resultGenerator_)
            result = this.resultGenerator_(node.key, node.value);
        else
            result = { key: node.key, value: node.value };
        if (this.isReverse_) {
            node = node.left;
            while (!node.isEmpty()) {
                this.nodeStack_.push(node);
                node = node.right;
            }
        }
        else {
            node = node.right;
            while (!node.isEmpty()) {
                this.nodeStack_.push(node);
                node = node.left;
            }
        }
        return result;
    };
    SortedMapIterator.prototype.hasNext = function () {
        return this.nodeStack_.length > 0;
    };
    SortedMapIterator.prototype.peek = function () {
        if (this.nodeStack_.length === 0)
            return null;
        var node = this.nodeStack_[this.nodeStack_.length - 1];
        if (this.resultGenerator_) {
            return this.resultGenerator_(node.key, node.value);
        }
        else {
            return { key: node.key, value: node.value };
        }
    };
    return SortedMapIterator;
}());
exports.SortedMapIterator = SortedMapIterator;
/**
 * Represents a node in a Left-leaning Red-Black tree.
 */
var LLRBNode = /** @class */ (function () {
    /**
     * @template K, V
     * @param {!K} key Key associated with this node.
     * @param {!V} value Value associated with this node.
     * @param {?boolean} color Whether this node is red.
     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.
     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.
     */
    function LLRBNode(key, value, color, left, right) {
        this.key = key;
        this.value = value;
        this.color = color != null ? color : LLRBNode.RED;
        this.left =
            left != null ? left : SortedMap.EMPTY_NODE;
        this.right =
            right != null ? right : SortedMap.EMPTY_NODE;
    }
    /**
     * Returns a copy of the current node, optionally replacing pieces of it.
     *
     * @param {?K} key New key for the node, or null.
     * @param {?V} value New value for the node, or null.
     * @param {?boolean} color New color for the node, or null.
     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.
     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.
     * @return {!LLRBNode} The node copy.
     */
    LLRBNode.prototype.copy = function (key, value, color, left, right) {
        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
    };
    /**
     * @return {number} The total number of nodes in the tree.
     */
    LLRBNode.prototype.count = function () {
        return this.left.count() + 1 + this.right.count();
    };
    /**
     * @return {boolean} True if the tree is empty.
     */
    LLRBNode.prototype.isEmpty = function () {
        return false;
    };
    /**
     * Traverses the tree in key order and calls the specified action function
     * for each node.
     *
     * @param {function(!K, !V):*} action Callback function to be called for each
     *   node.  If it returns true, traversal is aborted.
     * @return {*} The first truthy value returned by action, or the last falsey
     *   value returned by action
     */
    LLRBNode.prototype.inorderTraversal = function (action) {
        return (this.left.inorderTraversal(action) ||
            action(this.key, this.value) ||
            this.right.inorderTraversal(action));
    };
    /**
     * Traverses the tree in reverse key order and calls the specified action function
     * for each node.
     *
     * @param {function(!Object, !Object)} action Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @return {*} True if traversal was aborted.
     */
    LLRBNode.prototype.reverseTraversal = function (action) {
        return (this.right.reverseTraversal(action) ||
            action(this.key, this.value) ||
            this.left.reverseTraversal(action));
    };
    /**
     * @return {!Object} The minimum node in the tree.
     * @private
     */
    LLRBNode.prototype.min_ = function () {
        if (this.left.isEmpty()) {
            return this;
        }
        else {
            return this.left.min_();
        }
    };
    /**
     * @return {!K} The maximum key in the tree.
     */
    LLRBNode.prototype.minKey = function () {
        return this.min_().key;
    };
    /**
     * @return {!K} The maximum key in the tree.
     */
    LLRBNode.prototype.maxKey = function () {
        if (this.right.isEmpty()) {
            return this.key;
        }
        else {
            return this.right.maxKey();
        }
    };
    /**
     *
     * @param {!Object} key Key to insert.
     * @param {!Object} value Value to insert.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBNode} New tree, with the key/value added.
     */
    LLRBNode.prototype.insert = function (key, value, comparator) {
        var cmp, n;
        n = this;
        cmp = comparator(key, n.key);
        if (cmp < 0) {
            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
        }
        else if (cmp === 0) {
            n = n.copy(null, value, null, null, null);
        }
        else {
            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
        }
        return n.fixUp_();
    };
    /**
     * @private
     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.
     */
    LLRBNode.prototype.removeMin_ = function () {
        if (this.left.isEmpty()) {
            return SortedMap.EMPTY_NODE;
        }
        var n = this;
        if (!n.left.isRed_() && !n.left.left.isRed_())
            n = n.moveRedLeft_();
        n = n.copy(null, null, null, n.left.removeMin_(), null);
        return n.fixUp_();
    };
    /**
     * @param {!Object} key The key of the item to remove.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.
     */
    LLRBNode.prototype.remove = function (key, comparator) {
        var n, smallest;
        n = this;
        if (comparator(key, n.key) < 0) {
            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
                n = n.moveRedLeft_();
            }
            n = n.copy(null, null, null, n.left.remove(key, comparator), null);
        }
        else {
            if (n.left.isRed_())
                n = n.rotateRight_();
            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
                n = n.moveRedRight_();
            }
            if (comparator(key, n.key) === 0) {
                if (n.right.isEmpty()) {
                    return SortedMap.EMPTY_NODE;
                }
                else {
                    smallest = n.right.min_();
                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                }
            }
            n = n.copy(null, null, null, null, n.right.remove(key, comparator));
        }
        return n.fixUp_();
    };
    /**
     * @private
     * @return {boolean} Whether this is a RED node.
     */
    LLRBNode.prototype.isRed_ = function () {
        return this.color;
    };
    /**
     * @private
     * @return {!LLRBNode} New tree after performing any needed rotations.
     */
    LLRBNode.prototype.fixUp_ = function () {
        var n = this;
        if (n.right.isRed_() && !n.left.isRed_())
            n = n.rotateLeft_();
        if (n.left.isRed_() && n.left.left.isRed_())
            n = n.rotateRight_();
        if (n.left.isRed_() && n.right.isRed_())
            n = n.colorFlip_();
        return n;
    };
    /**
     * @private
     * @return {!LLRBNode} New tree, after moveRedLeft.
     */
    LLRBNode.prototype.moveRedLeft_ = function () {
        var n = this.colorFlip_();
        if (n.right.left.isRed_()) {
            n = n.copy(null, null, null, null, n.right.rotateRight_());
            n = n.rotateLeft_();
            n = n.colorFlip_();
        }
        return n;
    };
    /**
     * @private
     * @return {!LLRBNode} New tree, after moveRedRight.
     */
    LLRBNode.prototype.moveRedRight_ = function () {
        var n = this.colorFlip_();
        if (n.left.left.isRed_()) {
            n = n.rotateRight_();
            n = n.colorFlip_();
        }
        return n;
    };
    /**
     * @private
     * @return {!LLRBNode} New tree, after rotateLeft.
     */
    LLRBNode.prototype.rotateLeft_ = function () {
        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, nl, null);
    };
    /**
     * @private
     * @return {!LLRBNode} New tree, after rotateRight.
     */
    LLRBNode.prototype.rotateRight_ = function () {
        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, nr);
    };
    /**
     * @private
     * @return {!LLRBNode} New tree, after colorFlip.
     */
    LLRBNode.prototype.colorFlip_ = function () {
        var left = this.left.copy(null, null, !this.left.color, null, null);
        var right = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, left, right);
    };
    /**
     * For testing.
     *
     * @private
     * @return {boolean} True if all is well.
     */
    LLRBNode.prototype.checkMaxDepth_ = function () {
        var blackDepth = this.check_();
        return Math.pow(2.0, blackDepth) <= this.count() + 1;
    };
    /**
     * @private
     * @return {number} Not sure what this returns exactly. :-).
     */
    LLRBNode.prototype.check_ = function () {
        var blackDepth;
        if (this.isRed_() && this.left.isRed_()) {
            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
        }
        if (this.right.isRed_()) {
            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
        }
        blackDepth = this.left.check_();
        if (blackDepth !== this.right.check_()) {
            throw new Error('Black depths differ');
        }
        else {
            return blackDepth + (this.isRed_() ? 0 : 1);
        }
    };
    LLRBNode.RED = true;
    LLRBNode.BLACK = false;
    return LLRBNode;
}());
exports.LLRBNode = LLRBNode;
/**
 * Represents an empty node (a leaf node in the Red-Black Tree).
 */
var LLRBEmptyNode = /** @class */ (function () {
    function LLRBEmptyNode() {
    }
    /**
     * Returns a copy of the current node.
     *
     * @return {!LLRBEmptyNode} The node copy.
     */
    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
        return this;
    };
    /**
     * Returns a copy of the tree, with the specified key/value added.
     *
     * @param {!K} key Key to be added.
     * @param {!V} value Value to be added.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBNode} New tree, with item added.
     */
    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
        return new LLRBNode(key, value, null);
    };
    /**
     * Returns a copy of the tree, with the specified key removed.
     *
     * @param {!K} key The key to remove.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBEmptyNode} New tree, with item removed.
     */
    LLRBEmptyNode.prototype.remove = function (key, comparator) {
        return this;
    };
    /**
     * @return {number} The total number of nodes in the tree.
     */
    LLRBEmptyNode.prototype.count = function () {
        return 0;
    };
    /**
     * @return {boolean} True if the tree is empty.
     */
    LLRBEmptyNode.prototype.isEmpty = function () {
        return true;
    };
    /**
     * Traverses the tree in key order and calls the specified action function
     * for each node.
     *
     * @param {function(!K, !V):*} action Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @return {boolean} True if traversal was aborted.
     */
    LLRBEmptyNode.prototype.inorderTraversal = function (action) {
        return false;
    };
    /**
     * Traverses the tree in reverse key order and calls the specified action function
     * for each node.
     *
     * @param {function(!K, !V)} action Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @return {boolean} True if traversal was aborted.
     */
    LLRBEmptyNode.prototype.reverseTraversal = function (action) {
        return false;
    };
    /**
     * @return {null}
     */
    LLRBEmptyNode.prototype.minKey = function () {
        return null;
    };
    /**
     * @return {null}
     */
    LLRBEmptyNode.prototype.maxKey = function () {
        return null;
    };
    /**
     * @private
     * @return {number} Not sure what this returns exactly. :-).
     */
    LLRBEmptyNode.prototype.check_ = function () {
        return 0;
    };
    /**
     * @private
     * @return {boolean} Whether this node is red.
     */
    LLRBEmptyNode.prototype.isRed_ = function () {
        return false;
    };
    return LLRBEmptyNode;
}());
exports.LLRBEmptyNode = LLRBEmptyNode;
/**
 * An immutable sorted map implementation, based on a Left-leaning Red-Black
 * tree.
 */
var SortedMap = /** @class */ (function () {
    /**
     * @template K, V
     * @param {function(K, K):number} comparator_ Key comparator.
     * @param {LLRBNode=} root_ (Optional) Root node for the map.
     */
    function SortedMap(comparator_, root_) {
        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }
        this.comparator_ = comparator_;
        this.root_ = root_;
    }
    /**
     * Returns a copy of the map, with the specified key/value added or replaced.
     * (TODO: We should perhaps rename this method to 'put')
     *
     * @param {!K} key Key to be added.
     * @param {!V} value Value to be added.
     * @return {!SortedMap.<K, V>} New map, with item added.
     */
    SortedMap.prototype.insert = function (key, value) {
        return new SortedMap(this.comparator_, this.root_
            .insert(key, value, this.comparator_)
            .copy(null, null, LLRBNode.BLACK, null, null));
    };
    /**
     * Returns a copy of the map, with the specified key removed.
     *
     * @param {!K} key The key to remove.
     * @return {!SortedMap.<K, V>} New map, with item removed.
     */
    SortedMap.prototype.remove = function (key) {
        return new SortedMap(this.comparator_, this.root_
            .remove(key, this.comparator_)
            .copy(null, null, LLRBNode.BLACK, null, null));
    };
    /**
     * Returns the value of the node with the given key, or null.
     *
     * @param {!K} key The key to look up.
     * @return {?V} The value of the node with the given key, or null if the
     * key doesn't exist.
     */
    SortedMap.prototype.get = function (key) {
        var cmp;
        var node = this.root_;
        while (!node.isEmpty()) {
            cmp = this.comparator_(key, node.key);
            if (cmp === 0) {
                return node.value;
            }
            else if (cmp < 0) {
                node = node.left;
            }
            else if (cmp > 0) {
                node = node.right;
            }
        }
        return null;
    };
    /**
     * Returns the key of the item *before* the specified key, or null if key is the first item.
     * @param {K} key The key to find the predecessor of
     * @return {?K} The predecessor key.
     */
    SortedMap.prototype.getPredecessorKey = function (key) {
        var cmp, node = this.root_, rightParent = null;
        while (!node.isEmpty()) {
            cmp = this.comparator_(key, node.key);
            if (cmp === 0) {
                if (!node.left.isEmpty()) {
                    node = node.left;
                    while (!node.right.isEmpty())
                        node = node.right;
                    return node.key;
                }
                else if (rightParent) {
                    return rightParent.key;
                }
                else {
                    return null; // first item.
                }
            }
            else if (cmp < 0) {
                node = node.left;
            }
            else if (cmp > 0) {
                rightParent = node;
                node = node.right;
            }
        }
        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
    };
    /**
     * @return {boolean} True if the map is empty.
     */
    SortedMap.prototype.isEmpty = function () {
        return this.root_.isEmpty();
    };
    /**
     * @return {number} The total number of nodes in the map.
     */
    SortedMap.prototype.count = function () {
        return this.root_.count();
    };
    /**
     * @return {?K} The minimum key in the map.
     */
    SortedMap.prototype.minKey = function () {
        return this.root_.minKey();
    };
    /**
     * @return {?K} The maximum key in the map.
     */
    SortedMap.prototype.maxKey = function () {
        return this.root_.maxKey();
    };
    /**
     * Traverses the map in key order and calls the specified action function
     * for each key/value pair.
     *
     * @param {function(!K, !V):*} action Callback function to be called
     * for each key/value pair.  If action returns true, traversal is aborted.
     * @return {*} The first truthy value returned by action, or the last falsey
     *   value returned by action
     */
    SortedMap.prototype.inorderTraversal = function (action) {
        return this.root_.inorderTraversal(action);
    };
    /**
     * Traverses the map in reverse key order and calls the specified action function
     * for each key/value pair.
     *
     * @param {function(!Object, !Object)} action Callback function to be called
     * for each key/value pair.  If action returns true, traversal is aborted.
     * @return {*} True if the traversal was aborted.
     */
    SortedMap.prototype.reverseTraversal = function (action) {
        return this.root_.reverseTraversal(action);
    };
    /**
     * Returns an iterator over the SortedMap.
     * @template T
     * @param {(function(K, V):T)=} resultGenerator
     * @return {SortedMapIterator.<K, V, T>} The iterator.
     */
    SortedMap.prototype.getIterator = function (resultGenerator) {
        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
    };
    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {
        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
    };
    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {
        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
    };
    SortedMap.prototype.getReverseIterator = function (resultGenerator) {
        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
    };
    /**
     * Always use the same empty node, to reduce memory.
     * @const
     */
    SortedMap.EMPTY_NODE = new LLRBEmptyNode();
    return SortedMap;
}());
exports.SortedMap = SortedMap;

//# sourceMappingURL=SortedMap.js.map


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ServerValues_1 = __webpack_require__(58);
var nodeFromJSON_1 = __webpack_require__(15);
var Path_1 = __webpack_require__(2);
var SparseSnapshotTree_1 = __webpack_require__(59);
var SyncTree_1 = __webpack_require__(119);
var SnapshotHolder_1 = __webpack_require__(130);
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(1);
var util_3 = __webpack_require__(0);
var AuthTokenProvider_1 = __webpack_require__(131);
var StatsManager_1 = __webpack_require__(34);
var StatsReporter_1 = __webpack_require__(133);
var StatsListener_1 = __webpack_require__(64);
var EventQueue_1 = __webpack_require__(134);
var PersistentConnection_1 = __webpack_require__(65);
var ReadonlyRestClient_1 = __webpack_require__(139);
var Database_1 = __webpack_require__(47);
var INTERRUPT_REASON = 'repo_interrupt';
/**
 * A connection to a single data repository.
 */
var Repo = /** @class */ (function () {
    /**
     * @param {!RepoInfo} repoInfo_
     * @param {boolean} forceRestClient
     * @param {!FirebaseApp} app
     */
    function Repo(repoInfo_, forceRestClient, app) {
        var _this = this;
        this.repoInfo_ = repoInfo_;
        this.app = app;
        this.dataUpdateCount = 0;
        this.statsListener_ = null;
        this.eventQueue_ = new EventQueue_1.EventQueue();
        this.nextWriteId_ = 1;
        this.interceptServerDataCallback_ = null;
        // A list of data pieces and paths to be set when this client disconnects.
        this.onDisconnect_ = new SparseSnapshotTree_1.SparseSnapshotTree();
        /**
         * TODO: This should be @private but it's used by test_access.js and internal.js
         * @type {?PersistentConnection}
         */
        this.persistentConnection_ = null;
        /** @type {!AuthTokenProvider} */
        var authTokenProvider = new AuthTokenProvider_1.AuthTokenProvider(app);
        this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo_);
        if (forceRestClient || util_2.beingCrawled()) {
            this.server_ = new ReadonlyRestClient_1.ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);
            // Minor hack: Fire onConnect immediately, since there's no actual connection.
            setTimeout(this.onConnectStatus_.bind(this, true), 0);
        }
        else {
            var authOverride = app.options['databaseAuthVariableOverride'];
            // Validate authOverride
            if (typeof authOverride !== 'undefined' && authOverride !== null) {
                if (typeof authOverride !== 'object') {
                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');
                }
                try {
                    util_1.stringify(authOverride);
                }
                catch (e) {
                    throw new Error('Invalid authOverride provided: ' + e);
                }
            }
            this.persistentConnection_ = new PersistentConnection_1.PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);
            this.server_ = this.persistentConnection_;
        }
        authTokenProvider.addTokenChangeListener(function (token) {
            _this.server_.refreshAuthToken(token);
        });
        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
        this.statsReporter_ = StatsManager_1.StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter_1.StatsReporter(_this.stats_, _this.server_); });
        this.transactions_init_();
        // Used for .info.
        this.infoData_ = new SnapshotHolder_1.SnapshotHolder();
        this.infoSyncTree_ = new SyncTree_1.SyncTree({
            startListening: function (query, tag, currentHashFn, onComplete) {
                var infoEvents = [];
                var node = _this.infoData_.getNode(query.path);
                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
                // on initial data...
                if (!node.isEmpty()) {
                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);
                    setTimeout(function () {
                        onComplete('ok');
                    }, 0);
                }
                return infoEvents;
            },
            stopListening: function () { }
        });
        this.updateInfo_('connected', false);
        this.serverSyncTree_ = new SyncTree_1.SyncTree({
            startListening: function (query, tag, currentHashFn, onComplete) {
                _this.server_.listen(query, currentHashFn, tag, function (status, data) {
                    var events = onComplete(status, data);
                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);
                });
                // No synchronous events for network-backed sync trees
                return [];
            },
            stopListening: function (query, tag) {
                _this.server_.unlisten(query, tag);
            }
        });
    }
    /**
     * @return {string}  The URL corresponding to the root of this Firebase.
     */
    Repo.prototype.toString = function () {
        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);
    };
    /**
     * @return {!string} The namespace represented by the repo.
     */
    Repo.prototype.name = function () {
        return this.repoInfo_.namespace;
    };
    /**
     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.
     */
    Repo.prototype.serverTime = function () {
        var offsetNode = this.infoData_.getNode(new Path_1.Path('.info/serverTimeOffset'));
        var offset = offsetNode.val() || 0;
        return new Date().getTime() + offset;
    };
    /**
     * Generate ServerValues using some variables from the repo object.
     * @return {!Object}
     */
    Repo.prototype.generateServerValues = function () {
        return ServerValues_1.generateWithValues({
            timestamp: this.serverTime()
        });
    };
    /**
     * Called by realtime when we get new messages from the server.
     *
     * @private
     * @param {string} pathString
     * @param {*} data
     * @param {boolean} isMerge
     * @param {?number} tag
     */
    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {
        // For testing.
        this.dataUpdateCount++;
        var path = new Path_1.Path(pathString);
        data = this.interceptServerDataCallback_
            ? this.interceptServerDataCallback_(pathString, data)
            : data;
        var events = [];
        if (tag) {
            if (isMerge) {
                var taggedChildren = util_3.map(data, function (raw) {
                    return nodeFromJSON_1.nodeFromJSON(raw);
                });
                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);
            }
            else {
                var taggedSnap = nodeFromJSON_1.nodeFromJSON(data);
                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);
            }
        }
        else if (isMerge) {
            var changedChildren = util_3.map(data, function (raw) {
                return nodeFromJSON_1.nodeFromJSON(raw);
            });
            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);
        }
        else {
            var snap = nodeFromJSON_1.nodeFromJSON(data);
            events = this.serverSyncTree_.applyServerOverwrite(path, snap);
        }
        var affectedPath = path;
        if (events.length > 0) {
            // Since we have a listener outstanding for each transaction, receiving any events
            // is a proxy for some change having occurred.
            affectedPath = this.rerunTransactions_(path);
        }
        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);
    };
    /**
     * TODO: This should be @private but it's used by test_access.js and internal.js
     * @param {?function(!string, *):*} callback
     * @private
     */
    Repo.prototype.interceptServerData_ = function (callback) {
        this.interceptServerDataCallback_ = callback;
    };
    /**
     * @param {!boolean} connectStatus
     * @private
     */
    Repo.prototype.onConnectStatus_ = function (connectStatus) {
        this.updateInfo_('connected', connectStatus);
        if (connectStatus === false) {
            this.runOnDisconnectEvents_();
        }
    };
    /**
     * @param {!Object} updates
     * @private
     */
    Repo.prototype.onServerInfoUpdate_ = function (updates) {
        var _this = this;
        util_2.each(updates, function (value, key) {
            _this.updateInfo_(key, value);
        });
    };
    /**
     *
     * @param {!string} pathString
     * @param {*} value
     * @private
     */
    Repo.prototype.updateInfo_ = function (pathString, value) {
        var path = new Path_1.Path('/.info/' + pathString);
        var newNode = nodeFromJSON_1.nodeFromJSON(value);
        this.infoData_.updateSnapshot(path, newNode);
        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);
        this.eventQueue_.raiseEventsForChangedPath(path, events);
    };
    /**
     * @return {!number}
     * @private
     */
    Repo.prototype.getNextWriteId_ = function () {
        return this.nextWriteId_++;
    };
    /**
     * @param {!Path} path
     * @param {*} newVal
     * @param {number|string|null} newPriority
     * @param {?function(?Error, *=)} onComplete
     */
    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {
        var _this = this;
        this.log_('set', {
            path: path.toString(),
            value: newVal,
            priority: newPriority
        });
        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
        // (b) store unresolved paths on JSON parse
        var serverValues = this.generateServerValues();
        var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(newVal, newPriority);
        var newNode = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);
        var writeId = this.getNextWriteId_();
        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);
        this.eventQueue_.queueEvents(events);
        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {
            var success = status === 'ok';
            if (!success) {
                util_2.warn('set at ' + path + ' failed: ' + status);
            }
            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);
            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);
            _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
        var affectedPath = this.abortTransactions_(path);
        this.rerunTransactions_(affectedPath);
        // We queued the events above, so just flush the queue here
        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);
    };
    /**
     * @param {!Path} path
     * @param {!Object} childrenToMerge
     * @param {?function(?Error, *=)} onComplete
     */
    Repo.prototype.update = function (path, childrenToMerge, onComplete) {
        var _this = this;
        this.log_('update', { path: path.toString(), value: childrenToMerge });
        // Start with our existing data and merge each child into it.
        var empty = true;
        var serverValues = this.generateServerValues();
        var changedChildren = {};
        util_3.forEach(childrenToMerge, function (changedKey, changedValue) {
            empty = false;
            var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(changedValue);
            changedChildren[changedKey] = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);
        });
        if (!empty) {
            var writeId_1 = this.getNextWriteId_();
            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);
            this.eventQueue_.queueEvents(events);
            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {
                var success = status === 'ok';
                if (!success) {
                    util_2.warn('update at ' + path + ' failed: ' + status);
                }
                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);
                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;
                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);
                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
            util_3.forEach(childrenToMerge, function (changedPath) {
                var affectedPath = _this.abortTransactions_(path.child(changedPath));
                _this.rerunTransactions_(affectedPath);
            });
            // We queued the events above, so just flush the queue here
            this.eventQueue_.raiseEventsForChangedPath(path, []);
        }
        else {
            util_2.log("update() called with empty data.  Don't do anything.");
            this.callOnCompleteCallback(onComplete, 'ok');
        }
    };
    /**
     * Applies all of the changes stored up in the onDisconnect_ tree.
     * @private
     */
    Repo.prototype.runOnDisconnectEvents_ = function () {
        var _this = this;
        this.log_('onDisconnectEvents');
        var serverValues = this.generateServerValues();
        var resolvedOnDisconnectTree = ServerValues_1.resolveDeferredValueTree(this.onDisconnect_, serverValues);
        var events = [];
        resolvedOnDisconnectTree.forEachTree(Path_1.Path.Empty, function (path, snap) {
            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));
            var affectedPath = _this.abortTransactions_(path);
            _this.rerunTransactions_(affectedPath);
        });
        this.onDisconnect_ = new SparseSnapshotTree_1.SparseSnapshotTree();
        this.eventQueue_.raiseEventsForChangedPath(Path_1.Path.Empty, events);
    };
    /**
     * @param {!Path} path
     * @param {?function(?Error, *=)} onComplete
     */
    Repo.prototype.onDisconnectCancel = function (path, onComplete) {
        var _this = this;
        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {
            if (status === 'ok') {
                _this.onDisconnect_.forget(path);
            }
            _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
    };
    /**
     * @param {!Path} path
     * @param {*} value
     * @param {?function(?Error, *=)} onComplete
     */
    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {
        var _this = this;
        var newNode = nodeFromJSON_1.nodeFromJSON(value);
        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
            if (status === 'ok') {
                _this.onDisconnect_.remember(path, newNode);
            }
            _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
    };
    /**
     * @param {!Path} path
     * @param {*} value
     * @param {*} priority
     * @param {?function(?Error, *=)} onComplete
     */
    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {
        var _this = this;
        var newNode = nodeFromJSON_1.nodeFromJSON(value, priority);
        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
            if (status === 'ok') {
                _this.onDisconnect_.remember(path, newNode);
            }
            _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
    };
    /**
     * @param {!Path} path
     * @param {*} childrenToMerge
     * @param {?function(?Error, *=)} onComplete
     */
    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {
        var _this = this;
        if (util_3.isEmpty(childrenToMerge)) {
            util_2.log("onDisconnect().update() called with empty data.  Don't do anything.");
            this.callOnCompleteCallback(onComplete, 'ok');
            return;
        }
        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {
            if (status === 'ok') {
                util_3.forEach(childrenToMerge, function (childName, childNode) {
                    var newChildNode = nodeFromJSON_1.nodeFromJSON(childNode);
                    _this.onDisconnect_.remember(path.child(childName), newChildNode);
                });
            }
            _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
    };
    /**
     * @param {!Query} query
     * @param {!EventRegistration} eventRegistration
     */
    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {
        var events;
        if (query.path.getFront() === '.info') {
            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);
        }
        else {
            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);
        }
        this.eventQueue_.raiseEventsAtPath(query.path, events);
    };
    /**
     * @param {!Query} query
     * @param {?EventRegistration} eventRegistration
     */
    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {
        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
        // a little bit by handling the return values anyways.
        var events;
        if (query.path.getFront() === '.info') {
            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);
        }
        else {
            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);
        }
        this.eventQueue_.raiseEventsAtPath(query.path, events);
    };
    Repo.prototype.interrupt = function () {
        if (this.persistentConnection_) {
            this.persistentConnection_.interrupt(INTERRUPT_REASON);
        }
    };
    Repo.prototype.resume = function () {
        if (this.persistentConnection_) {
            this.persistentConnection_.resume(INTERRUPT_REASON);
        }
    };
    Repo.prototype.stats = function (showDelta) {
        if (showDelta === void 0) { showDelta = false; }
        if (typeof console === 'undefined')
            return;
        var stats;
        if (showDelta) {
            if (!this.statsListener_)
                this.statsListener_ = new StatsListener_1.StatsListener(this.stats_);
            stats = this.statsListener_.get();
        }
        else {
            stats = this.stats_.get();
        }
        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {
            return Math.max(currentValue.length, previousValue);
        }, 0);
        util_3.forEach(stats, function (stat, value) {
            // pad stat names to be the same length (plus 2 extra spaces).
            for (var i = stat.length; i < longestName + 2; i++)
                stat += ' ';
            console.log(stat + value);
        });
    };
    Repo.prototype.statsIncrementCounter = function (metric) {
        this.stats_.incrementCounter(metric);
        this.statsReporter_.includeStat(metric);
    };
    /**
     * @param {...*} var_args
     * @private
     */
    Repo.prototype.log_ = function () {
        var var_args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            var_args[_i] = arguments[_i];
        }
        var prefix = '';
        if (this.persistentConnection_) {
            prefix = this.persistentConnection_.id + ':';
        }
        util_2.log.apply(void 0, [prefix].concat(var_args));
    };
    /**
     * @param {?function(?Error, *=)} callback
     * @param {!string} status
     * @param {?string=} errorReason
     */
    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {
        if (callback) {
            util_2.exceptionGuard(function () {
                if (status == 'ok') {
                    callback(null);
                }
                else {
                    var code = (status || 'error').toUpperCase();
                    var message = code;
                    if (errorReason)
                        message += ': ' + errorReason;
                    var error = new Error(message);
                    error.code = code;
                    callback(error);
                }
            });
        }
    };
    Object.defineProperty(Repo.prototype, "database", {
        get: function () {
            return this.__database || (this.__database = new Database_1.Database(this));
        },
        enumerable: true,
        configurable: true
    });
    return Repo;
}());
exports.Repo = Repo;

//# sourceMappingURL=Repo.js.map


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
 * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
 * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
 * whether a node potentially had children removed due to a filter.
 */
var CacheNode = /** @class */ (function () {
    /**
     * @param {!Node} node_
     * @param {boolean} fullyInitialized_
     * @param {boolean} filtered_
     */
    function CacheNode(node_, fullyInitialized_, filtered_) {
        this.node_ = node_;
        this.fullyInitialized_ = fullyInitialized_;
        this.filtered_ = filtered_;
    }
    /**
     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
     * @return {boolean}
     */
    CacheNode.prototype.isFullyInitialized = function () {
        return this.fullyInitialized_;
    };
    /**
     * Returns whether this node is potentially missing children due to a filter applied to the node
     * @return {boolean}
     */
    CacheNode.prototype.isFiltered = function () {
        return this.filtered_;
    };
    /**
     * @param {!Path} path
     * @return {boolean}
     */
    CacheNode.prototype.isCompleteForPath = function (path) {
        if (path.isEmpty()) {
            return this.isFullyInitialized() && !this.filtered_;
        }
        var childKey = path.getFront();
        return this.isCompleteForChild(childKey);
    };
    /**
     * @param {!string} key
     * @return {boolean}
     */
    CacheNode.prototype.isCompleteForChild = function (key) {
        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));
    };
    /**
     * @return {!Node}
     */
    CacheNode.prototype.getNode = function () {
        return this.node_;
    };
    return CacheNode;
}());
exports.CacheNode = CacheNode;

//# sourceMappingURL=CacheNode.js.map


/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var CODES = {
    AVAILABLE_IN_WINDOW: 'only-available-in-window',
    AVAILABLE_IN_SW: 'only-available-in-sw',
    SHOULD_BE_INHERITED: 'should-be-overriden',
    BAD_SENDER_ID: 'bad-sender-id',
    INCORRECT_GCM_SENDER_ID: 'incorrect-gcm-sender-id',
    PERMISSION_DEFAULT: 'permission-default',
    PERMISSION_BLOCKED: 'permission-blocked',
    UNSUPPORTED_BROWSER: 'unsupported-browser',
    NOTIFICATIONS_BLOCKED: 'notifications-blocked',
    FAILED_DEFAULT_REGISTRATION: 'failed-serviceworker-registration',
    SW_REGISTRATION_EXPECTED: 'sw-registration-expected',
    GET_SUBSCRIPTION_FAILED: 'get-subscription-failed',
    INVALID_SAVED_TOKEN: 'invalid-saved-token',
    SW_REG_REDUNDANT: 'sw-reg-redundant',
    TOKEN_SUBSCRIBE_FAILED: 'token-subscribe-failed',
    TOKEN_SUBSCRIBE_NO_TOKEN: 'token-subscribe-no-token',
    TOKEN_SUBSCRIBE_NO_PUSH_SET: 'token-subscribe-no-push-set',
    USE_SW_BEFORE_GET_TOKEN: 'use-sw-before-get-token',
    INVALID_DELETE_TOKEN: 'invalid-delete-token',
    DELETE_TOKEN_NOT_FOUND: 'delete-token-not-found',
    DELETE_SCOPE_NOT_FOUND: 'delete-scope-not-found',
    BG_HANDLER_FUNCTION_EXPECTED: 'bg-handler-function-expected',
    NO_WINDOW_CLIENT_TO_MSG: 'no-window-client-to-msg',
    UNABLE_TO_RESUBSCRIBE: 'unable-to-resubscribe',
    NO_FCM_TOKEN_FOR_RESUBSCRIBE: 'no-fcm-token-for-resubscribe',
    FAILED_TO_DELETE_TOKEN: 'failed-to-delete-token',
    NO_SW_IN_REG: 'no-sw-in-reg',
    BAD_SCOPE: 'bad-scope',
    BAD_VAPID_KEY: 'bad-vapid-key',
    BAD_SUBSCRIPTION: 'bad-subscription',
    BAD_TOKEN: 'bad-token',
    BAD_PUSH_SET: 'bad-push-set',
    FAILED_DELETE_VAPID_KEY: 'failed-delete-vapid-key'
};
var ERROR_MAP = (_a = {},
    _a[CODES.AVAILABLE_IN_WINDOW] = 'This method is available in a Window context.',
    _a[CODES.AVAILABLE_IN_SW] = 'This method is available in a service worker ' + 'context.',
    _a[CODES.SHOULD_BE_INHERITED] = 'This method should be overriden by ' + 'extended classes.',
    _a[CODES.BAD_SENDER_ID] = "Please ensure that 'messagingSenderId' is set " +
        'correctly in the options passed into firebase.initializeApp().',
    _a[CODES.PERMISSION_DEFAULT] = 'The required permissions were not granted and ' + 'dismissed instead.',
    _a[CODES.PERMISSION_BLOCKED] = 'The required permissions were not granted and ' + 'blocked instead.',
    _a[CODES.UNSUPPORTED_BROWSER] = "This browser doesn't support the API's " +
        'required to use the firebase SDK.',
    _a[CODES.NOTIFICATIONS_BLOCKED] = 'Notifications have been blocked.',
    _a[CODES.FAILED_DEFAULT_REGISTRATION] = 'We are unable to register the ' +
        'default service worker. {$browserErrorMessage}',
    _a[CODES.SW_REGISTRATION_EXPECTED] = 'A service worker registration was the ' + 'expected input.',
    _a[CODES.GET_SUBSCRIPTION_FAILED] = 'There was an error when trying to get ' +
        'any existing Push Subscriptions.',
    _a[CODES.INVALID_SAVED_TOKEN] = 'Unable to access details of the saved token.',
    _a[CODES.SW_REG_REDUNDANT] = 'The service worker being used for push was made ' + 'redundant.',
    _a[CODES.TOKEN_SUBSCRIBE_FAILED] = 'A problem occured while subscribing the ' + 'user to FCM: {$message}',
    _a[CODES.TOKEN_SUBSCRIBE_NO_TOKEN] = 'FCM returned no token when subscribing ' + 'the user to push.',
    _a[CODES.TOKEN_SUBSCRIBE_NO_PUSH_SET] = 'FCM returned an invalid response ' + 'when getting an FCM token.',
    _a[CODES.USE_SW_BEFORE_GET_TOKEN] = 'You must call useServiceWorker() before ' +
        'calling getToken() to ensure your service worker is used.',
    _a[CODES.INVALID_DELETE_TOKEN] = 'You must pass a valid token into ' +
        'deleteToken(), i.e. the token from getToken().',
    _a[CODES.DELETE_TOKEN_NOT_FOUND] = 'The deletion attempt for token could not ' +
        'be performed as the token was not found.',
    _a[CODES.DELETE_SCOPE_NOT_FOUND] = 'The deletion attempt for service worker ' +
        'scope could not be performed as the scope was not found.',
    _a[CODES.BG_HANDLER_FUNCTION_EXPECTED] = 'The input to ' + 'setBackgroundMessageHandler() must be a function.',
    _a[CODES.NO_WINDOW_CLIENT_TO_MSG] = 'An attempt was made to message a ' + 'non-existant window client.',
    _a[CODES.UNABLE_TO_RESUBSCRIBE] = 'There was an error while re-subscribing ' +
        'the FCM token for push messaging. Will have to resubscribe the ' +
        'user on next visit. {$message}',
    _a[CODES.NO_FCM_TOKEN_FOR_RESUBSCRIBE] = 'Could not find an FCM token ' +
        'and as a result, unable to resubscribe. Will have to resubscribe the ' +
        'user on next visit.',
    _a[CODES.FAILED_TO_DELETE_TOKEN] = 'Unable to delete the currently saved token.',
    _a[CODES.NO_SW_IN_REG] = 'Even though the service worker registration was ' +
        'successful, there was a problem accessing the service worker itself.',
    _a[CODES.INCORRECT_GCM_SENDER_ID] = "Please change your web app manifest's " +
        "'gcm_sender_id' value to '103953800507' to use Firebase messaging.",
    _a[CODES.BAD_SCOPE] = 'The service worker scope must be a string with at ' +
        'least one character.',
    _a[CODES.BAD_VAPID_KEY] = 'The public VAPID key must be a string with at ' + 'least one character.',
    _a[CODES.BAD_SUBSCRIPTION] = 'The subscription must be a valid ' + 'PushSubscription.',
    _a[CODES.BAD_TOKEN] = 'The FCM Token used for storage / lookup was not ' +
        'a valid token string.',
    _a[CODES.BAD_PUSH_SET] = 'The FCM push set used for storage / lookup was not ' +
        'not a valid push set string.',
    _a[CODES.FAILED_DELETE_VAPID_KEY] = 'The VAPID key could not be deleted.',
    _a);
/* harmony default export */ __webpack_exports__["a"] = ({
    codes: CODES,
    map: ERROR_MAP
});
var _a;

//# sourceMappingURL=errors.js.map


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return domainBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return downloadBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return apiBaseUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return apiUploadBaseUrl; });
/* unused harmony export setDomainBase */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return configOption; });
/* unused harmony export shortMaxOperationRetryTime */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return defaultMaxOperationRetryTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return defaultMaxUploadRetryTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return minSafeInteger; });
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Constants used in the Firebase Storage library.
 */
/**
 * Domain and scheme for API calls.
 */
var domainBase = 'https://firebasestorage.googleapis.com';
/**
 * Domain and scheme for object downloads.
 */
var downloadBase = 'https://firebasestorage.googleapis.com';
/**
 * Base URL for non-upload calls to the API.
 */
var apiBaseUrl = '/v0';
/**
 * Base URL for upload calls to the API.
 */
var apiUploadBaseUrl = '/v0';
function setDomainBase(domainBase) {
    domainBase = domainBase;
}
var configOption = 'storageBucket';
/**
 * 1 minute
 */
var shortMaxOperationRetryTime = 1 * 60 * 1000;
/**
 * 2 minutes
 */
var defaultMaxOperationRetryTime = 2 * 60 * 1000;
/**
 * 10 minutes
 */
var defaultMaxUploadRetryTime = 10 * 60 * 100;
/**
 * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported
 * enough for us to use it directly.
 */
var minSafeInteger = -9007199254740991;

//# sourceMappingURL=constants.js.map


/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Location; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__error__ = __webpack_require__(7);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Functionality related to the parsing/composition of bucket/
 * object location.
 */

/**
 * @struct
 */
var Location = /** @class */ (function () {
    function Location(bucket, path) {
        this.bucket = bucket;
        this.path_ = path;
    }
    Object.defineProperty(Location.prototype, "path", {
        get: function () {
            return this.path_;
        },
        enumerable: true,
        configurable: true
    });
    Location.prototype.fullServerUrl = function () {
        var encode = encodeURIComponent;
        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
    };
    Location.prototype.bucketOnlyServerUrl = function () {
        var encode = encodeURIComponent;
        return '/b/' + encode(this.bucket) + '/o';
    };
    Location.makeFromBucketSpec = function (bucketString) {
        var bucketLocation;
        try {
            bucketLocation = Location.makeFromUrl(bucketString);
        }
        catch (e) {
            // Not valid URL, use as-is. This lets you put bare bucket names in
            // config.
            return new Location(bucketString, '');
        }
        if (bucketLocation.path === '') {
            return bucketLocation;
        }
        else {
            throw __WEBPACK_IMPORTED_MODULE_0__error__["h" /* invalidDefaultBucket */](bucketString);
        }
    };
    Location.makeFromUrl = function (url) {
        var location = null;
        var bucketDomain = '([A-Za-z0-9.\\-]+)';
        function gsModify(loc) {
            if (loc.path.charAt(loc.path.length - 1) === '/') {
                loc.path_ = loc.path_.slice(0, -1);
            }
        }
        var gsPath = '(/(.*))?$';
        var path = '(/([^?#]*).*)?$';
        var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
        var gsIndices = { bucket: 1, path: 3 };
        function httpModify(loc) {
            loc.path_ = decodeURIComponent(loc.path);
        }
        var version = 'v[A-Za-z0-9_]+';
        var httpRegex = new RegExp('^https?://firebasestorage\\.googleapis\\.com/' +
            version +
            '/b/' +
            bucketDomain +
            '/o' +
            path, 'i');
        var httpIndices = { bucket: 1, path: 3 };
        var groups = [
            { regex: gsRegex, indices: gsIndices, postModify: gsModify },
            { regex: httpRegex, indices: httpIndices, postModify: httpModify }
        ];
        for (var i = 0; i < groups.length; i++) {
            var group = groups[i];
            var captures = group.regex.exec(url);
            if (captures) {
                var bucketValue = captures[group.indices.bucket];
                var pathValue = captures[group.indices.path];
                if (!pathValue) {
                    pathValue = '';
                }
                location = new Location(bucketValue, pathValue);
                group.postModify(location);
                break;
            }
        }
        if (location == null) {
            throw __WEBPACK_IMPORTED_MODULE_0__error__["k" /* invalidUrl */](url);
        }
        return location;
    };
    return Location;
}());


//# sourceMappingURL=location.js.map


/***/ }),
/* 28 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */
exports.CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */
    NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */
    NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */
    SDK_VERSION: '${JSCORE_VERSION}'
};

//# sourceMappingURL=constants.js.map


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var onDisconnect_1 = __webpack_require__(50);
var TransactionResult_1 = __webpack_require__(115);
var util_1 = __webpack_require__(1);
var NextPushId_1 = __webpack_require__(116);
var Query_1 = __webpack_require__(51);
var Repo_1 = __webpack_require__(23);
var Path_1 = __webpack_require__(2);
var QueryParams_1 = __webpack_require__(140);
var validation_1 = __webpack_require__(9);
var util_2 = __webpack_require__(0);
var util_3 = __webpack_require__(0);
var SyncPoint_1 = __webpack_require__(62);
var Reference = /** @class */ (function (_super) {
    __extends(Reference, _super);
    /**
     * Call options:
     *   new Reference(Repo, Path) or
     *   new Reference(url: string, string|RepoManager)
     *
     * Externally - this is the firebase.database.Reference type.
     *
     * @param {!Repo} repo
     * @param {(!Path)} path
     * @extends {Query}
     */
    function Reference(repo, path) {
        var _this = this;
        if (!(repo instanceof Repo_1.Repo)) {
            throw new Error('new Reference() no longer supported - use app.database().');
        }
        // call Query's constructor, passing in the repo and path.
        _this = _super.call(this, repo, path, QueryParams_1.QueryParams.DEFAULT, false) || this;
        return _this;
    }
    /** @return {?string} */
    Reference.prototype.getKey = function () {
        util_2.validateArgCount('Reference.key', 0, 0, arguments.length);
        if (this.path.isEmpty())
            return null;
        else
            return this.path.getBack();
    };
    /**
     * @param {!(string|Path)} pathString
     * @return {!Reference}
     */
    Reference.prototype.child = function (pathString) {
        util_2.validateArgCount('Reference.child', 1, 1, arguments.length);
        if (typeof pathString === 'number') {
            pathString = String(pathString);
        }
        else if (!(pathString instanceof Path_1.Path)) {
            if (this.path.getFront() === null)
                validation_1.validateRootPathString('Reference.child', 1, pathString, false);
            else
                validation_1.validatePathString('Reference.child', 1, pathString, false);
        }
        return new Reference(this.repo, this.path.child(pathString));
    };
    /** @return {?Reference} */
    Reference.prototype.getParent = function () {
        util_2.validateArgCount('Reference.parent', 0, 0, arguments.length);
        var parentPath = this.path.parent();
        return parentPath === null ? null : new Reference(this.repo, parentPath);
    };
    /** @return {!Reference} */
    Reference.prototype.getRoot = function () {
        util_2.validateArgCount('Reference.root', 0, 0, arguments.length);
        var ref = this;
        while (ref.getParent() !== null) {
            ref = ref.getParent();
        }
        return ref;
    };
    /** @return {!Database} */
    Reference.prototype.databaseProp = function () {
        return this.repo.database;
    };
    /**
     * @param {*} newVal
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */
    Reference.prototype.set = function (newVal, onComplete) {
        util_2.validateArgCount('Reference.set', 1, 2, arguments.length);
        validation_1.validateWritablePath('Reference.set', this.path);
        validation_1.validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);
        util_2.validateCallback('Reference.set', 2, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo.setWithPriority(this.path, newVal, 
        /*priority=*/ null, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {!Object} objectToMerge
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */
    Reference.prototype.update = function (objectToMerge, onComplete) {
        util_2.validateArgCount('Reference.update', 1, 2, arguments.length);
        validation_1.validateWritablePath('Reference.update', this.path);
        if (Array.isArray(objectToMerge)) {
            var newObjectToMerge = {};
            for (var i = 0; i < objectToMerge.length; ++i) {
                newObjectToMerge['' + i] = objectToMerge[i];
            }
            objectToMerge = newObjectToMerge;
            util_1.warn('Passing an Array to Firebase.update() is deprecated. ' +
                'Use set() if you want to overwrite the existing data, or ' +
                'an Object with integer keys if you really do want to ' +
                'only update some of the children.');
        }
        validation_1.validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);
        util_2.validateCallback('Reference.update', 2, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {*} newVal
     * @param {string|number|null} newPriority
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */
    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {
        util_2.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);
        validation_1.validateWritablePath('Reference.setWithPriority', this.path);
        validation_1.validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);
        validation_1.validatePriority('Reference.setWithPriority', 2, newPriority, false);
        util_2.validateCallback('Reference.setWithPriority', 3, onComplete, true);
        if (this.getKey() === '.length' || this.getKey() === '.keys')
            throw 'Reference.setWithPriority failed: ' +
                this.getKey() +
                ' is a read-only object.';
        var deferred = new util_3.Deferred();
        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */
    Reference.prototype.remove = function (onComplete) {
        util_2.validateArgCount('Reference.remove', 0, 1, arguments.length);
        validation_1.validateWritablePath('Reference.remove', this.path);
        util_2.validateCallback('Reference.remove', 1, onComplete, true);
        return this.set(null, onComplete);
    };
    /**
     * @param {function(*):*} transactionUpdate
     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete
     * @param {boolean=} applyLocally
     * @return {!Promise}
     */
    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {
        util_2.validateArgCount('Reference.transaction', 1, 3, arguments.length);
        validation_1.validateWritablePath('Reference.transaction', this.path);
        util_2.validateCallback('Reference.transaction', 1, transactionUpdate, false);
        util_2.validateCallback('Reference.transaction', 2, onComplete, true);
        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how
        // to expose it.
        validation_1.validateBoolean('Reference.transaction', 3, applyLocally, true);
        if (this.getKey() === '.length' || this.getKey() === '.keys')
            throw 'Reference.transaction failed: ' +
                this.getKey() +
                ' is a read-only object.';
        if (applyLocally === undefined)
            applyLocally = true;
        var deferred = new util_3.Deferred();
        if (typeof onComplete === 'function') {
            deferred.promise.catch(function () { });
        }
        var promiseComplete = function (error, committed, snapshot) {
            if (error) {
                deferred.reject(error);
            }
            else {
                deferred.resolve(new TransactionResult_1.TransactionResult(committed, snapshot));
            }
            if (typeof onComplete === 'function') {
                onComplete(error, committed, snapshot);
            }
        };
        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);
        return deferred.promise;
    };
    /**
     * @param {string|number|null} priority
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */
    Reference.prototype.setPriority = function (priority, onComplete) {
        util_2.validateArgCount('Reference.setPriority', 1, 2, arguments.length);
        validation_1.validateWritablePath('Reference.setPriority', this.path);
        validation_1.validatePriority('Reference.setPriority', 1, priority, false);
        util_2.validateCallback('Reference.setPriority', 2, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {*=} value
     * @param {function(?Error)=} onComplete
     * @return {!Reference}
     */
    Reference.prototype.push = function (value, onComplete) {
        util_2.validateArgCount('Reference.push', 0, 2, arguments.length);
        validation_1.validateWritablePath('Reference.push', this.path);
        validation_1.validateFirebaseDataArg('Reference.push', 1, value, this.path, true);
        util_2.validateCallback('Reference.push', 2, onComplete, true);
        var now = this.repo.serverTime();
        var name = NextPushId_1.nextPushId(now);
        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.
        // We use child() to create handles to two different references. The first is turned into a
        // ThennableReference below by adding then() and catch() methods and is used as the
        // return value of push(). The second remains a regular Reference and is used as the fulfilled
        // value of the first ThennableReference.
        var thennablePushRef = this.child(name);
        var pushRef = this.child(name);
        var promise;
        if (value != null) {
            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });
        }
        else {
            promise = Promise.resolve(pushRef);
        }
        thennablePushRef.then = promise.then.bind(promise);
        thennablePushRef.catch = promise.then.bind(promise, undefined);
        if (typeof onComplete === 'function') {
            promise.catch(function () { });
        }
        return thennablePushRef;
    };
    /**
     * @return {!OnDisconnect}
     */
    Reference.prototype.onDisconnect = function () {
        validation_1.validateWritablePath('Reference.onDisconnect', this.path);
        return new onDisconnect_1.OnDisconnect(this.repo, this.path);
    };
    Object.defineProperty(Reference.prototype, "database", {
        get: function () {
            return this.databaseProp();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "key", {
        get: function () {
            return this.getKey();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "parent", {
        get: function () {
            return this.getParent();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "root", {
        get: function () {
            return this.getRoot();
        },
        enumerable: true,
        configurable: true
    });
    return Reference;
}(Query_1.Query));
exports.Reference = Reference;
/**
 * Define reference constructor in various modules
 *
 * We are doing this here to avoid several circular
 * dependency issues
 */
Query_1.Query.__referenceConstructor = Reference;
SyncPoint_1.SyncPoint.__referenceConstructor = Reference;

//# sourceMappingURL=Reference.js.map


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var validation_1 = __webpack_require__(9);
var Path_1 = __webpack_require__(2);
var PriorityIndex_1 = __webpack_require__(3);
/**
 * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
 * surfaces the public methods (val, forEach, etc.) we want to expose.
 */
var DataSnapshot = /** @class */ (function () {
    /**
     * @param {!Node} node_ A SnapshotNode to wrap.
     * @param {!Reference} ref_ The ref of the location this snapshot came from.
     * @param {!Index} index_ The iteration order for this snapshot
     */
    function DataSnapshot(node_, ref_, index_) {
        this.node_ = node_;
        this.ref_ = ref_;
        this.index_ = index_;
    }
    /**
     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
     * empty.
     *
     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
     */
    DataSnapshot.prototype.val = function () {
        util_1.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);
        return this.node_.val();
    };
    /**
     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
     * the entire node contents.
     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
     */
    DataSnapshot.prototype.exportVal = function () {
        util_1.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);
        return this.node_.val(true);
    };
    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
    // for end-users
    DataSnapshot.prototype.toJSON = function () {
        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
        util_1.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);
        return this.exportVal();
    };
    /**
     * Returns whether the snapshot contains a non-null value.
     *
     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.
     */
    DataSnapshot.prototype.exists = function () {
        util_1.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);
        return !this.node_.isEmpty();
    };
    /**
     * Returns a DataSnapshot of the specified child node's contents.
     *
     * @param {!string} childPathString Path to a child.
     * @return {!DataSnapshot} DataSnapshot for child node.
     */
    DataSnapshot.prototype.child = function (childPathString) {
        util_1.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);
        // Ensure the childPath is a string (can be a number)
        childPathString = String(childPathString);
        validation_1.validatePathString('DataSnapshot.child', 1, childPathString, false);
        var childPath = new Path_1.Path(childPathString);
        var childRef = this.ref_.child(childPath);
        return new DataSnapshot(this.node_.getChild(childPath), childRef, PriorityIndex_1.PRIORITY_INDEX);
    };
    /**
     * Returns whether the snapshot contains a child at the specified path.
     *
     * @param {!string} childPathString Path to a child.
     * @return {boolean} Whether the child exists.
     */
    DataSnapshot.prototype.hasChild = function (childPathString) {
        util_1.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);
        validation_1.validatePathString('DataSnapshot.hasChild', 1, childPathString, false);
        var childPath = new Path_1.Path(childPathString);
        return !this.node_.getChild(childPath).isEmpty();
    };
    /**
     * Returns the priority of the object, or null if no priority was set.
     *
     * @return {string|number|null} The priority.
     */
    DataSnapshot.prototype.getPriority = function () {
        util_1.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);
        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
        return this.node_.getPriority().val();
    };
    /**
     * Iterates through child nodes and calls the specified action for each one.
     *
     * @param {function(!DataSnapshot)} action Callback function to be called
     * for each child.
     * @return {boolean} True if forEach was canceled by action returning true for
     * one of the child nodes.
     */
    DataSnapshot.prototype.forEach = function (action) {
        var _this = this;
        util_1.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);
        util_1.validateCallback('DataSnapshot.forEach', 1, action, false);
        if (this.node_.isLeafNode())
            return false;
        var childrenNode = this.node_;
        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
        return !!childrenNode.forEachChild(this.index_, function (key, node) {
            return action(new DataSnapshot(node, _this.ref_.child(key), PriorityIndex_1.PRIORITY_INDEX));
        });
    };
    /**
     * Returns whether this DataSnapshot has children.
     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.
     */
    DataSnapshot.prototype.hasChildren = function () {
        util_1.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);
        if (this.node_.isLeafNode())
            return false;
        else
            return !this.node_.isEmpty();
    };
    Object.defineProperty(DataSnapshot.prototype, "key", {
        get: function () {
            return this.ref_.getKey();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the number of children for this DataSnapshot.
     * @return {number} The number of children that this DataSnapshot contains.
     */
    DataSnapshot.prototype.numChildren = function () {
        util_1.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);
        return this.node_.numChildren();
    };
    /**
     * @return {Reference} The Firebase reference for the location this snapshot's data came from.
     */
    DataSnapshot.prototype.getRef = function () {
        util_1.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);
        return this.ref_;
    };
    Object.defineProperty(DataSnapshot.prototype, "ref", {
        get: function () {
            return this.getRef();
        },
        enumerable: true,
        configurable: true
    });
    return DataSnapshot;
}());
exports.DataSnapshot = DataSnapshot;

//# sourceMappingURL=DataSnapshot.js.map


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var SortedMap_1 = __webpack_require__(22);
var Path_1 = __webpack_require__(2);
var util_1 = __webpack_require__(1);
var util_2 = __webpack_require__(0);
var emptyChildrenSingleton;
/**
 * Singleton empty children collection.
 *
 * @const
 * @type {!SortedMap.<string, !ImmutableTree.<?>>}
 */
var EmptyChildren = function () {
    if (!emptyChildrenSingleton) {
        emptyChildrenSingleton = new SortedMap_1.SortedMap(util_1.stringCompare);
    }
    return emptyChildrenSingleton;
};
/**
 * A tree with immutable elements.
 */
var ImmutableTree = /** @class */ (function () {
    /**
     * @template T
     * @param {?T} value
     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children
     */
    function ImmutableTree(value, children) {
        if (children === void 0) { children = EmptyChildren(); }
        this.value = value;
        this.children = children;
    }
    /**
     * @template T
     * @param {!Object.<string, !T>} obj
     * @return {!ImmutableTree.<!T>}
     */
    ImmutableTree.fromObject = function (obj) {
        var tree = ImmutableTree.Empty;
        util_2.forEach(obj, function (childPath, childSnap) {
            tree = tree.set(new Path_1.Path(childPath), childSnap);
        });
        return tree;
    };
    /**
     * True if the value is empty and there are no children
     * @return {boolean}
     */
    ImmutableTree.prototype.isEmpty = function () {
        return this.value === null && this.children.isEmpty();
    };
    /**
     * Given a path and predicate, return the first node and the path to that node
     * where the predicate returns true.
     *
     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects
     * on the way back out, it may be better to pass down a pathSoFar obj.
     *
     * @param {!Path} relativePath The remainder of the path
     * @param {function(T):boolean} predicate The predicate to satisfy to return a
     *   node
     * @return {?{path:!Path, value:!T}}
     */
    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {
        if (this.value != null && predicate(this.value)) {
            return { path: Path_1.Path.Empty, value: this.value };
        }
        else {
            if (relativePath.isEmpty()) {
                return null;
            }
            else {
                var front = relativePath.getFront();
                var child = this.children.get(front);
                if (child !== null) {
                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);
                    if (childExistingPathAndValue != null) {
                        var fullPath = new Path_1.Path(front).child(childExistingPathAndValue.path);
                        return { path: fullPath, value: childExistingPathAndValue.value };
                    }
                    else {
                        return null;
                    }
                }
                else {
                    return null;
                }
            }
        }
    };
    /**
     * Find, if it exists, the shortest subpath of the given path that points a defined
     * value in the tree
     * @param {!Path} relativePath
     * @return {?{path: !Path, value: !T}}
     */
    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {
        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });
    };
    /**
     * @param {!Path} relativePath
     * @return {!ImmutableTree.<T>} The subtree at the given path
     */
    ImmutableTree.prototype.subtree = function (relativePath) {
        if (relativePath.isEmpty()) {
            return this;
        }
        else {
            var front = relativePath.getFront();
            var childTree = this.children.get(front);
            if (childTree !== null) {
                return childTree.subtree(relativePath.popFront());
            }
            else {
                return ImmutableTree.Empty;
            }
        }
    };
    /**
     * Sets a value at the specified path.
     *
     * @param {!Path} relativePath Path to set value at.
     * @param {?T} toSet Value to set.
     * @return {!ImmutableTree.<T>} Resulting tree.
     */
    ImmutableTree.prototype.set = function (relativePath, toSet) {
        if (relativePath.isEmpty()) {
            return new ImmutableTree(toSet, this.children);
        }
        else {
            var front = relativePath.getFront();
            var child = this.children.get(front) || ImmutableTree.Empty;
            var newChild = child.set(relativePath.popFront(), toSet);
            var newChildren = this.children.insert(front, newChild);
            return new ImmutableTree(this.value, newChildren);
        }
    };
    /**
     * Removes the value at the specified path.
     *
     * @param {!Path} relativePath Path to value to remove.
     * @return {!ImmutableTree.<T>} Resulting tree.
     */
    ImmutableTree.prototype.remove = function (relativePath) {
        if (relativePath.isEmpty()) {
            if (this.children.isEmpty()) {
                return ImmutableTree.Empty;
            }
            else {
                return new ImmutableTree(null, this.children);
            }
        }
        else {
            var front = relativePath.getFront();
            var child = this.children.get(front);
            if (child) {
                var newChild = child.remove(relativePath.popFront());
                var newChildren = void 0;
                if (newChild.isEmpty()) {
                    newChildren = this.children.remove(front);
                }
                else {
                    newChildren = this.children.insert(front, newChild);
                }
                if (this.value === null && newChildren.isEmpty()) {
                    return ImmutableTree.Empty;
                }
                else {
                    return new ImmutableTree(this.value, newChildren);
                }
            }
            else {
                return this;
            }
        }
    };
    /**
     * Gets a value from the tree.
     *
     * @param {!Path} relativePath Path to get value for.
     * @return {?T} Value at path, or null.
     */
    ImmutableTree.prototype.get = function (relativePath) {
        if (relativePath.isEmpty()) {
            return this.value;
        }
        else {
            var front = relativePath.getFront();
            var child = this.children.get(front);
            if (child) {
                return child.get(relativePath.popFront());
            }
            else {
                return null;
            }
        }
    };
    /**
     * Replace the subtree at the specified path with the given new tree.
     *
     * @param {!Path} relativePath Path to replace subtree for.
     * @param {!ImmutableTree} newTree New tree.
     * @return {!ImmutableTree} Resulting tree.
     */
    ImmutableTree.prototype.setTree = function (relativePath, newTree) {
        if (relativePath.isEmpty()) {
            return newTree;
        }
        else {
            var front = relativePath.getFront();
            var child = this.children.get(front) || ImmutableTree.Empty;
            var newChild = child.setTree(relativePath.popFront(), newTree);
            var newChildren = void 0;
            if (newChild.isEmpty()) {
                newChildren = this.children.remove(front);
            }
            else {
                newChildren = this.children.insert(front, newChild);
            }
            return new ImmutableTree(this.value, newChildren);
        }
    };
    /**
     * Performs a depth first fold on this tree. Transforms a tree into a single
     * value, given a function that operates on the path to a node, an optional
     * current value, and a map of child names to folded subtrees
     * @template V
     * @param {function(Path, ?T, Object.<string, V>):V} fn
     * @return {V}
     */
    ImmutableTree.prototype.fold = function (fn) {
        return this.fold_(Path_1.Path.Empty, fn);
    };
    /**
     * Recursive helper for public-facing fold() method
     * @template V
     * @param {!Path} pathSoFar
     * @param {function(Path, ?T, Object.<string, V>):V} fn
     * @return {V}
     * @private
     */
    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {
        var accum = {};
        this.children.inorderTraversal(function (childKey, childTree) {
            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);
        });
        return fn(pathSoFar, this.value, accum);
    };
    /**
     * Find the first matching value on the given path. Return the result of applying f to it.
     * @template V
     * @param {!Path} path
     * @param {!function(!Path, !T):?V} f
     * @return {?V}
     */
    ImmutableTree.prototype.findOnPath = function (path, f) {
        return this.findOnPath_(path, Path_1.Path.Empty, f);
    };
    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {
        var result = this.value ? f(pathSoFar, this.value) : false;
        if (result) {
            return result;
        }
        else {
            if (pathToFollow.isEmpty()) {
                return null;
            }
            else {
                var front = pathToFollow.getFront();
                var nextChild = this.children.get(front);
                if (nextChild) {
                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);
                }
                else {
                    return null;
                }
            }
        }
    };
    /**
     *
     * @param {!Path} path
     * @param {!function(!Path, !T)} f
     * @returns {!ImmutableTree.<T>}
     */
    ImmutableTree.prototype.foreachOnPath = function (path, f) {
        return this.foreachOnPath_(path, Path_1.Path.Empty, f);
    };
    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {
        if (pathToFollow.isEmpty()) {
            return this;
        }
        else {
            if (this.value) {
                f(currentRelativePath, this.value);
            }
            var front = pathToFollow.getFront();
            var nextChild = this.children.get(front);
            if (nextChild) {
                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);
            }
            else {
                return ImmutableTree.Empty;
            }
        }
    };
    /**
     * Calls the given function for each node in the tree that has a value.
     *
     * @param {function(!Path, !T)} f A function to be called with
     *   the path from the root of the tree to a node, and the value at that node.
     *   Called in depth-first order.
     */
    ImmutableTree.prototype.foreach = function (f) {
        this.foreach_(Path_1.Path.Empty, f);
    };
    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {
        this.children.inorderTraversal(function (childName, childTree) {
            childTree.foreach_(currentRelativePath.child(childName), f);
        });
        if (this.value) {
            f(currentRelativePath, this.value);
        }
    };
    /**
     *
     * @param {function(string, !T)} f
     */
    ImmutableTree.prototype.foreachChild = function (f) {
        this.children.inorderTraversal(function (childName, childTree) {
            if (childTree.value) {
                f(childName, childTree.value);
            }
        });
    };
    ImmutableTree.Empty = new ImmutableTree(null);
    return ImmutableTree;
}());
exports.ImmutableTree = ImmutableTree;

//# sourceMappingURL=ImmutableTree.js.map


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var Change_1 = __webpack_require__(12);
var ChildrenNode_1 = __webpack_require__(4);
var PriorityIndex_1 = __webpack_require__(3);
/**
 * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
 *
 * @constructor
 * @implements {NodeFilter}
 * @param {!Index} index
 */
var IndexedFilter = /** @class */ (function () {
    function IndexedFilter(index_) {
        this.index_ = index_;
    }
    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
        util_1.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
        var oldChild = snap.getImmediateChild(key);
        // Check if anything actually changed.
        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
            // to avoid treating these cases as "nothing changed."
            if (oldChild.isEmpty() == newChild.isEmpty()) {
                // Nothing changed.
                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
                return snap;
            }
        }
        if (optChangeAccumulator != null) {
            if (newChild.isEmpty()) {
                if (snap.hasChild(key)) {
                    optChangeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(key, oldChild));
                }
                else {
                    util_1.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
                }
            }
            else if (oldChild.isEmpty()) {
                optChangeAccumulator.trackChildChange(Change_1.Change.childAddedChange(key, newChild));
            }
            else {
                optChangeAccumulator.trackChildChange(Change_1.Change.childChangedChange(key, newChild, oldChild));
            }
        }
        if (snap.isLeafNode() && newChild.isEmpty()) {
            return snap;
        }
        else {
            // Make sure the node is indexed
            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
        }
    };
    /**
     * @inheritDoc
     */
    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
        if (optChangeAccumulator != null) {
            if (!oldSnap.isLeafNode()) {
                oldSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                    if (!newSnap.hasChild(key)) {
                        optChangeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(key, childNode));
                    }
                });
            }
            if (!newSnap.isLeafNode()) {
                newSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                    if (oldSnap.hasChild(key)) {
                        var oldChild = oldSnap.getImmediateChild(key);
                        if (!oldChild.equals(childNode)) {
                            optChangeAccumulator.trackChildChange(Change_1.Change.childChangedChange(key, childNode, oldChild));
                        }
                    }
                    else {
                        optChangeAccumulator.trackChildChange(Change_1.Change.childAddedChange(key, childNode));
                    }
                });
            }
        }
        return newSnap.withIndex(this.index_);
    };
    /**
     * @inheritDoc
     */
    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
        if (oldSnap.isEmpty()) {
            return ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        }
        else {
            return oldSnap.updatePriority(newPriority);
        }
    };
    /**
     * @inheritDoc
     */
    IndexedFilter.prototype.filtersNodes = function () {
        return false;
    };
    /**
     * @inheritDoc
     */
    IndexedFilter.prototype.getIndexedFilter = function () {
        return this;
    };
    /**
     * @inheritDoc
     */
    IndexedFilter.prototype.getIndex = function () {
        return this.index_;
    };
    return IndexedFilter;
}());
exports.IndexedFilter = IndexedFilter;

//# sourceMappingURL=IndexedFilter.js.map


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var StatsCollection_1 = __webpack_require__(132);
var StatsManager = /** @class */ (function () {
    function StatsManager() {
    }
    StatsManager.getCollection = function (repoInfo) {
        var hashString = repoInfo.toString();
        if (!this.collections_[hashString]) {
            this.collections_[hashString] = new StatsCollection_1.StatsCollection();
        }
        return this.collections_[hashString];
    };
    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {
        var hashString = repoInfo.toString();
        if (!this.reporters_[hashString]) {
            this.reporters_[hashString] = creatorFunction();
        }
        return this.reporters_[hashString];
    };
    StatsManager.collections_ = {};
    StatsManager.reporters_ = {};
    return StatsManager;
}());
exports.StatsManager = StatsManager;

//# sourceMappingURL=StatsManager.js.map


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var Repo_1 = __webpack_require__(23);
var util_2 = __webpack_require__(1);
var parser_1 = __webpack_require__(48);
var validation_1 = __webpack_require__(9);
__webpack_require__(142);
/** @const {string} */
var DATABASE_URL_OPTION = 'databaseURL';
var _staticInstance;
/**
 * Creates and caches Repo instances.
 */
var RepoManager = /** @class */ (function () {
    function RepoManager() {
        /**
         * @private {!Object.<string, Object<string, !fb.core.Repo>>}
         */
        this.repos_ = {};
        /**
         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
         * @private {boolean}
         */
        this.useRestClient_ = false;
    }
    RepoManager.getInstance = function () {
        if (!_staticInstance) {
            _staticInstance = new RepoManager();
        }
        return _staticInstance;
    };
    // TODO(koss): Remove these functions unless used in tests?
    RepoManager.prototype.interrupt = function () {
        for (var appName in this.repos_) {
            for (var dbUrl in this.repos_[appName]) {
                this.repos_[appName][dbUrl].interrupt();
            }
        }
    };
    RepoManager.prototype.resume = function () {
        for (var appName in this.repos_) {
            for (var dbUrl in this.repos_[appName]) {
                this.repos_[appName][dbUrl].resume();
            }
        }
    };
    /**
     * This function should only ever be called to CREATE a new database instance.
     *
     * @param {!FirebaseApp} app
     * @return {!Database}
     */
    RepoManager.prototype.databaseFromApp = function (app, url) {
        var dbUrl = url || app.options[DATABASE_URL_OPTION];
        if (dbUrl === undefined) {
            util_2.fatal("Can't determine Firebase Database URL.  Be sure to include " +
                DATABASE_URL_OPTION +
                ' option when calling firebase.initializeApp().');
        }
        var parsedUrl = parser_1.parseRepoInfo(dbUrl);
        var repoInfo = parsedUrl.repoInfo;
        validation_1.validateUrl('Invalid Firebase Database URL', 1, parsedUrl);
        if (!parsedUrl.path.isEmpty()) {
            util_2.fatal('Database URL must point to the root of a Firebase Database ' +
                '(not including a child path).');
        }
        var repo = this.createRepo(repoInfo, app);
        return repo.database;
    };
    /**
     * Remove the repo and make sure it is disconnected.
     *
     * @param {!Repo} repo
     */
    RepoManager.prototype.deleteRepo = function (repo) {
        var appRepos = util_1.safeGet(this.repos_, repo.app.name);
        // This should never happen...
        if (!appRepos || util_1.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {
            util_2.fatal("Database " + repo.app.name + "(" + repo.repoInfo_ + ") has already been deleted.");
        }
        repo.interrupt();
        delete appRepos[repo.repoInfo_.toURLString()];
    };
    /**
     * Ensures a repo doesn't already exist and then creates one using the
     * provided app.
     *
     * @param {!RepoInfo} repoInfo The metadata about the Repo
     * @param {!FirebaseApp} app
     * @return {!Repo} The Repo object for the specified server / repoName.
     */
    RepoManager.prototype.createRepo = function (repoInfo, app) {
        var appRepos = util_1.safeGet(this.repos_, app.name);
        if (!appRepos) {
            appRepos = {};
            this.repos_[app.name] = appRepos;
        }
        var repo = util_1.safeGet(appRepos, repoInfo.toURLString());
        if (repo) {
            util_2.fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
        }
        repo = new Repo_1.Repo(repoInfo, this.useRestClient_, app);
        appRepos[repoInfo.toURLString()] = repo;
        return repo;
    };
    /**
     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
     * @param {boolean} forceRestClient
     */
    RepoManager.prototype.forceRestClient = function (forceRestClient) {
        this.useRestClient_ = forceRestClient;
    };
    return RepoManager;
}());
exports.RepoManager = RepoManager;

//# sourceMappingURL=RepoManager.js.map


/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["g"] = validate;
/* unused harmony export ArgSpec */
/* unused harmony export and_ */
/* harmony export (immutable) */ __webpack_exports__["e"] = stringSpec;
/* harmony export (immutable) */ __webpack_exports__["f"] = uploadDataSpec;
/* harmony export (immutable) */ __webpack_exports__["b"] = metadataSpec;
/* harmony export (immutable) */ __webpack_exports__["c"] = nonNegativeNumberSpec;
/* harmony export (immutable) */ __webpack_exports__["a"] = looseObjectSpec;
/* harmony export (immutable) */ __webpack_exports__["d"] = nullFunctionSpec;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__error__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__metadata__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__type__ = __webpack_require__(6);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param name Name of the function.
 * @param specs Argument specs.
 * @param passed The actual arguments passed to the function.
 * @throws {fbs.Error} If the arguments are invalid.
 */
function validate(name, specs, passed) {
    var minArgs = specs.length;
    var maxArgs = specs.length;
    for (var i = 0; i < specs.length; i++) {
        if (specs[i].optional) {
            minArgs = i;
            break;
        }
    }
    var validLength = minArgs <= passed.length && passed.length <= maxArgs;
    if (!validLength) {
        throw __WEBPACK_IMPORTED_MODULE_0__error__["g" /* invalidArgumentCount */](minArgs, maxArgs, name, passed.length);
    }
    for (var i = 0; i < passed.length; i++) {
        try {
            specs[i].validator(passed[i]);
        }
        catch (e) {
            if (e instanceof Error) {
                throw __WEBPACK_IMPORTED_MODULE_0__error__["f" /* invalidArgument */](i, name, e.message);
            }
            else {
                throw __WEBPACK_IMPORTED_MODULE_0__error__["f" /* invalidArgument */](i, name, e);
            }
        }
    }
}
/**
 * @struct
 */
var ArgSpec = /** @class */ (function () {
    function ArgSpec(validator, opt_optional) {
        var self = this;
        this.validator = function (p) {
            if (self.optional && !__WEBPACK_IMPORTED_MODULE_2__type__["c" /* isJustDef */](p)) {
                return;
            }
            validator(p);
        };
        this.optional = !!opt_optional;
    }
    return ArgSpec;
}());

function and_(v1, v2) {
    return function (p) {
        v1(p);
        v2(p);
    };
}
function stringSpec(opt_validator, opt_optional) {
    function stringValidator(p) {
        if (!__WEBPACK_IMPORTED_MODULE_2__type__["j" /* isString */](p)) {
            throw 'Expected string.';
        }
    }
    var validator;
    if (opt_validator) {
        validator = and_(stringValidator, opt_validator);
    }
    else {
        validator = stringValidator;
    }
    return new ArgSpec(validator, opt_optional);
}
function uploadDataSpec() {
    function validator(p) {
        var valid = p instanceof Uint8Array ||
            p instanceof ArrayBuffer ||
            (__WEBPACK_IMPORTED_MODULE_2__type__["e" /* isNativeBlobDefined */]() && p instanceof Blob);
        if (!valid) {
            throw 'Expected Blob or File.';
        }
    }
    return new ArgSpec(validator);
}
function metadataSpec(opt_optional) {
    return new ArgSpec(__WEBPACK_IMPORTED_MODULE_1__metadata__["c" /* metadataValidator */], opt_optional);
}
function nonNegativeNumberSpec() {
    function validator(p) {
        var valid = __WEBPACK_IMPORTED_MODULE_2__type__["h" /* isNumber */](p) && p >= 0;
        if (!valid) {
            throw 'Expected a number 0 or greater.';
        }
    }
    return new ArgSpec(validator);
}
function looseObjectSpec(opt_validator, opt_optional) {
    function validator(p) {
        var isLooseObject = p === null || (__WEBPACK_IMPORTED_MODULE_2__type__["a" /* isDef */](p) && p instanceof Object);
        if (!isLooseObject) {
            throw 'Expected an Object.';
        }
        if (opt_validator !== undefined && opt_validator !== null) {
            opt_validator(p);
        }
    }
    return new ArgSpec(validator, opt_optional);
}
function nullFunctionSpec(opt_optional) {
    function validator(p) {
        var valid = p === null || __WEBPACK_IMPORTED_MODULE_2__type__["b" /* isFunction */](p);
        if (!valid) {
            throw 'Expected a Function.';
        }
    }
    return new ArgSpec(validator, opt_optional);
}

//# sourceMappingURL=args.js.map


/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export noXform_ */
/* unused harmony export Mapping */
/* unused harmony export xformPath */
/* harmony export (immutable) */ __webpack_exports__["b"] = getMappings;
/* unused harmony export addRef */
/* unused harmony export fromResource */
/* harmony export (immutable) */ __webpack_exports__["a"] = fromResourceString;
/* harmony export (immutable) */ __webpack_exports__["d"] = toResourceString;
/* harmony export (immutable) */ __webpack_exports__["c"] = metadataValidator;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__json__ = __webpack_require__(157);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__location__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__path__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__type__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__url__ = __webpack_require__(38);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





function noXform_(metadata, value) {
    return value;
}
/**
 * @struct
 */
var Mapping = /** @class */ (function () {
    function Mapping(server, opt_local, opt_writable, opt_xform) {
        this.server = server;
        this.local = opt_local || server;
        this.writable = !!opt_writable;
        this.xform = opt_xform || noXform_;
    }
    return Mapping;
}());

var mappings_ = null;
function xformPath(fullPath) {
    var valid = __WEBPACK_IMPORTED_MODULE_3__type__["j" /* isString */](fullPath);
    if (!valid || fullPath.length < 2) {
        return fullPath;
    }
    else {
        fullPath = fullPath;
        return __WEBPACK_IMPORTED_MODULE_2__path__["b" /* lastComponent */](fullPath);
    }
}
function getMappings() {
    if (mappings_) {
        return mappings_;
    }
    var mappings = [];
    mappings.push(new Mapping('bucket'));
    mappings.push(new Mapping('generation'));
    mappings.push(new Mapping('metageneration'));
    mappings.push(new Mapping('name', 'fullPath', true));
    function mappingsXformPath(metadata, fullPath) {
        return xformPath(fullPath);
    }
    var nameMapping = new Mapping('name');
    nameMapping.xform = mappingsXformPath;
    mappings.push(nameMapping);
    /**
     * Coerces the second param to a number, if it is defined.
     */
    function xformSize(metadata, size) {
        if (__WEBPACK_IMPORTED_MODULE_3__type__["a" /* isDef */](size)) {
            return +size;
        }
        else {
            return size;
        }
    }
    var sizeMapping = new Mapping('size');
    sizeMapping.xform = xformSize;
    mappings.push(sizeMapping);
    mappings.push(new Mapping('timeCreated'));
    mappings.push(new Mapping('updated'));
    mappings.push(new Mapping('md5Hash', null, true));
    mappings.push(new Mapping('cacheControl', null, true));
    mappings.push(new Mapping('contentDisposition', null, true));
    mappings.push(new Mapping('contentEncoding', null, true));
    mappings.push(new Mapping('contentLanguage', null, true));
    mappings.push(new Mapping('contentType', null, true));
    mappings.push(new Mapping('metadata', 'customMetadata', true));
    /**
     * Transforms a comma-separated string of tokens into a list of download
     * URLs.
     */
    function xformTokens(metadata, tokens) {
        var valid = __WEBPACK_IMPORTED_MODULE_3__type__["j" /* isString */](tokens) && tokens.length > 0;
        if (!valid) {
            // This can happen if objects are uploaded through GCS and retrieved
            // through list, so we don't want to throw an Error.
            return [];
        }
        var encode = encodeURIComponent;
        var tokensList = tokens.split(',');
        var urls = tokensList.map(function (token) {
            var bucket = metadata['bucket'];
            var path = metadata['fullPath'];
            var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
            var base = __WEBPACK_IMPORTED_MODULE_4__url__["a" /* makeDownloadUrl */](urlPart);
            var queryString = __WEBPACK_IMPORTED_MODULE_4__url__["c" /* makeQueryString */]({
                alt: 'media',
                token: token
            });
            return base + queryString;
        });
        return urls;
    }
    mappings.push(new Mapping('downloadTokens', 'downloadURLs', false, xformTokens));
    mappings_ = mappings;
    return mappings_;
}
function addRef(metadata, authWrapper) {
    function generateRef() {
        var bucket = metadata['bucket'];
        var path = metadata['fullPath'];
        var loc = new __WEBPACK_IMPORTED_MODULE_1__location__["a" /* Location */](bucket, path);
        return authWrapper.makeStorageReference(loc);
    }
    Object.defineProperty(metadata, 'ref', { get: generateRef });
}
function fromResource(authWrapper, resource, mappings) {
    var metadata = {};
    metadata['type'] = 'file';
    var len = mappings.length;
    for (var i = 0; i < len; i++) {
        var mapping = mappings[i];
        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
    }
    addRef(metadata, authWrapper);
    return metadata;
}
function fromResourceString(authWrapper, resourceString, mappings) {
    var obj = __WEBPACK_IMPORTED_MODULE_0__json__["a" /* jsonObjectOrNull */](resourceString);
    if (obj === null) {
        return null;
    }
    var resource = obj;
    return fromResource(authWrapper, resource, mappings);
}
function toResourceString(metadata, mappings) {
    var resource = {};
    var len = mappings.length;
    for (var i = 0; i < len; i++) {
        var mapping = mappings[i];
        if (mapping.writable) {
            resource[mapping.server] = metadata[mapping.local];
        }
    }
    return JSON.stringify(resource);
}
function metadataValidator(p) {
    var validType = p && __WEBPACK_IMPORTED_MODULE_3__type__["i" /* isObject */](p);
    if (!validType) {
        throw 'Expected Metadata object.';
    }
    for (var key in p) {
        var val = p[key];
        if (key === 'customMetadata') {
            if (!__WEBPACK_IMPORTED_MODULE_3__type__["i" /* isObject */](val)) {
                throw 'Expected object for \'customMetadata\' mapping.';
            }
        }
        else {
            if (__WEBPACK_IMPORTED_MODULE_3__type__["g" /* isNonNullObject */](val)) {
                throw "Mapping for '" + key + "' cannot be an object.";
            }
        }
    }
}

//# sourceMappingURL=metadata.js.map


/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = makeNormalUrl;
/* harmony export (immutable) */ __webpack_exports__["a"] = makeDownloadUrl;
/* harmony export (immutable) */ __webpack_exports__["d"] = makeUploadUrl;
/* harmony export (immutable) */ __webpack_exports__["c"] = makeQueryString;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__object__ = __webpack_require__(13);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Functions to create and manipulate URLs for the server API.
 */


function makeNormalUrl(urlPart) {
    return __WEBPACK_IMPORTED_MODULE_0__constants__["f" /* domainBase */] + __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* apiBaseUrl */] + urlPart;
}
function makeDownloadUrl(urlPart) {
    return __WEBPACK_IMPORTED_MODULE_0__constants__["g" /* downloadBase */] + __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* apiBaseUrl */] + urlPart;
}
function makeUploadUrl(urlPart) {
    return __WEBPACK_IMPORTED_MODULE_0__constants__["f" /* domainBase */] + __WEBPACK_IMPORTED_MODULE_0__constants__["b" /* apiUploadBaseUrl */] + urlPart;
}
function makeQueryString(params) {
    var encode = encodeURIComponent;
    var queryPart = '?';
    __WEBPACK_IMPORTED_MODULE_1__object__["b" /* forEach */](params, function (key, val) {
        var nextPart = encode(key) + '=' + encode(val);
        queryPart = queryPart + nextPart + '&';
    });
    // Chop off the extra '&' or '?' on the end
    queryPart = queryPart.slice(0, -1);
    return queryPart;
}

//# sourceMappingURL=url.js.map


/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = contains;
/* harmony export (immutable) */ __webpack_exports__["a"] = clone;
/* harmony export (immutable) */ __webpack_exports__["c"] = remove;
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns true if the object is contained in the array (compared with ===).
 * @template T
 */
function contains(array, elem) {
    return array.indexOf(elem) !== -1;
}
/**
 * Returns a shallow copy of the array or array-like object (e.g. arguments).
 * @template T
 */
function clone(arraylike) {
    return Array.prototype.slice.call(arraylike);
}
/**
 * Removes the given element from the given array, if it is contained.
 * Directly modifies the passed-in array.
 * @template T
 */
function remove(array, elem) {
    var i = array.indexOf(elem);
    if (i !== -1) {
        array.splice(i, 1);
    }
}

//# sourceMappingURL=array.js.map


/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const TILEDATA = {
  "A": {
    freq: 9,
    pts: 1
  },
  "B": {
    freq: 2,
    pts: 3
  },
  "C": {
    freq: 2,
    pts: 3
  },
  "D": {
    freq: 4,
    pts: 2
  },
  "E": {
    freq: 12,
    pts: 1
  },
  "F": {
    freq: 2,
    pts: 4
  },
  "G": {
    freq: 3,
    pts: 2
  },
  "H": {
    freq: 2,
    pts: 4
  },
  "I": {
    freq: 9,
    pts: 1
  },
  "J": {
    freq: 1,
    pts: 8
  },
  "K": {
    freq: 1,
    pts: 5
  },
  "L": {
    freq: 4,
    pts: 1
  },
  "M": {
    freq: 2,
    pts: 3
  },
  "N": {
    freq: 6,
    pts: 1
  },
  "O": {
    freq: 8,
    pts: 1
  },
  "P": {
    freq: 2,
    pts: 3
  },
  "Q": {
    freq: 1,
    pts: 10
  },
  "R": {
    freq: 6,
    pts: 1
  },
  "S": {
    freq: 4,
    pts: 1
  },
  "T": {
    freq: 6,
    pts: 1
  },
  "U": {
    freq: 4,
    pts: 1
  },
  "V": {
    freq: 2,
    pts: 4
  },
  "W": {
    freq: 2,
    pts: 4
  },
  "X": {
    freq: 1,
    pts: 8
  },
  "Y": {
    freq: 2,
    pts: 4
  },
  "Z": {
    freq: 1,
    pts: 10
  }
};

class Tiles {
  constructor() {

    this.allTiles = [];
    this.populateAllTiles = this.populateAllTiles.bind(this);
    this.populateAllTiles();
  }

  value(letter) {
    //letter is a string
    return TILEDATA[letter].pts;
  }

  randomInt() {
    return Math.floor(Math.random() * (this.allTiles.length));
  }

  randomTile() {
    let tileObj = {};
    let randomNum = this.randomInt();
    let letter = this.allTiles[randomNum];
    tileObj.letter = letter;
    tileObj.value = TILEDATA[letter].pts;
    this.allTiles.splice(randomNum,1);
    return tileObj;
  }

  populateAllTiles() {
    Object.keys(TILEDATA).forEach( letterString => {
      for (let i = 0; i < TILEDATA[letterString].freq; i++) {
        this.allTiles.push(letterString);
      }
    });
  }
}

/* harmony default export */ __webpack_exports__["a"] = (Tiles);


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
class SubmittedWords {
  constructor($el) {
    this.$el = $el;

    this.list = [];
  }

  

}

/* harmony default export */ __webpack_exports__["default"] = (SubmittedWords);


/***/ }),
/* 42 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(29);
/**
 * Throws an error if the provided assertion is falsy
 * @param {*} assertion The assertion to be tested for falsiness
 * @param {!string} message The message to display if the check fails
 */
exports.assert = function (assertion, message) {
    if (!assertion) {
        throw exports.assertionError(message);
    }
};
/**
 * Returns an Error object suitable for throwing.
 * @param {string} message
 * @return {!Error}
 */
exports.assertionError = function (message) {
    return new Error('Firebase Database (' +
        constants_1.CONSTANTS.SDK_VERSION +
        ') INTERNAL ASSERT FAILED: ' +
        message);
};

//# sourceMappingURL=assert.js.map


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var stringToByteArray = function (str) {
    // TODO(user): Use native implementations if/when available
    var out = [], p = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
            out[p++] = c;
        }
        else if (c < 2048) {
            out[p++] = (c >> 6) | 192;
            out[p++] = (c & 63) | 128;
        }
        else if ((c & 0xfc00) == 0xd800 &&
            i + 1 < str.length &&
            (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
            out[p++] = (c >> 18) | 240;
            out[p++] = ((c >> 12) & 63) | 128;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
        else {
            out[p++] = (c >> 12) | 224;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param {Array<number>} bytes Array of numbers representing characters.
 * @return {string} Stringification of the array.
 */
var byteArrayToString = function (bytes) {
    // TODO(user): Use native implementations if/when available
    var out = [], pos = 0, c = 0;
    while (pos < bytes.length) {
        var c1 = bytes[pos++];
        if (c1 < 128) {
            out[c++] = String.fromCharCode(c1);
        }
        else if (c1 > 191 && c1 < 224) {
            var c2 = bytes[pos++];
            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
        }
        else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            var c4 = bytes[pos++];
            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                0x10000;
            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
        }
        else {
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
        }
    }
    return out.join('');
};
// Static lookup maps, lazily populated by init_()
exports.base64 = {
    /**
     * Maps bytes to characters.
     * @type {Object}
     * @private
     */
    byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     * @type {Object}
     * @private
     */
    charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @type {Object}
     * @private
     */
    byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @type {Object}
     * @private
     */
    charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     * @type {string}
     */
    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     * @type {string}
     */
    get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     * @type {string}
     */
    get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     * @type {boolean}
     */
    HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param {boolean=} opt_webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return {string} The base64 encoded string.
     */
    encodeByteArray: function (input, opt_webSafe) {
        if (!Array.isArray(input)) {
            throw Error('encodeByteArray takes an array as a parameter');
        }
        this.init_();
        var byteToCharMap = opt_webSafe
            ? this.byteToCharMapWebSafe_
            : this.byteToCharMap_;
        var output = [];
        for (var i = 0; i < input.length; i += 3) {
            var byte1 = input[i];
            var haveByte2 = i + 1 < input.length;
            var byte2 = haveByte2 ? input[i + 1] : 0;
            var haveByte3 = i + 2 < input.length;
            var byte3 = haveByte3 ? input[i + 2] : 0;
            var outByte1 = byte1 >> 2;
            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
            var outByte4 = byte3 & 0x3f;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) {
                    outByte3 = 64;
                }
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param {string} input A string to encode.
     * @param {boolean=} opt_webSafe If true, we should use the
     *     alternative alphabet.
     * @return {string} The base64 encoded string.
     */
    encodeString: function (input, opt_webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {
            return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param {string} input to decode.
     * @param {boolean=} opt_webSafe True if we should use the
     *     alternative alphabet.
     * @return {string} string representing the decoded value.
     */
    decodeString: function (input, opt_webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {
            return atob(input);
        }
        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param {string} input Input to decode.
     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.
     * @return {!Array<number>} bytes representing the decoded value.
     */
    decodeStringToByteArray: function (input, opt_webSafe) {
        this.init_();
        var charToByteMap = opt_webSafe
            ? this.charToByteMapWebSafe_
            : this.charToByteMap_;
        var output = [];
        for (var i = 0; i < input.length;) {
            var byte1 = charToByteMap[input.charAt(i++)];
            var haveByte2 = i < input.length;
            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte3 = i < input.length;
            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            var haveByte4 = i < input.length;
            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                throw Error();
            }
            var outByte1 = (byte1 << 2) | (byte2 >> 4);
            output.push(outByte1);
            if (byte3 != 64) {
                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                output.push(outByte2);
                if (byte4 != 64) {
                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */
    init_: function () {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {};
            this.charToByteMap_ = {};
            this.byteToCharMapWebSafe_ = {};
            this.charToByteMapWebSafe_ = {};
            // We want quick mappings back and forth, so we precompute two maps.
            for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * URL-safe base64 encoding
 * @param {!string} str
 * @return {!string}
 */
exports.base64Encode = function (str) {
    var utf8Bytes = stringToByteArray(str);
    return exports.base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param {string} str To be decoded
 * @return {?string} Decoded result, if possible
 */
exports.base64Decode = function (str) {
    try {
        return exports.base64.decodeString(str, true);
    }
    catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};

//# sourceMappingURL=crypt.js.map


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */
function jsonEval(str) {
    return JSON.parse(str);
}
exports.jsonEval = jsonEval;
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */
function stringify(data) {
    return JSON.stringify(data);
}
exports.stringify = stringify;

//# sourceMappingURL=json.js.map


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/
exports.contains = function (obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
};
exports.safeGet = function (obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key))
        return obj[key];
    // else return undefined.
};
/**
 * Enumerates the keys/values in an object, excluding keys defined on the prototype.
 *
 * @param {?Object.<K,V>} obj Object to enumerate.
 * @param {!function(K, V)} fn Function to call for each key and value.
 * @template K,V
 */
exports.forEach = function (obj, fn) {
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn(key, obj[key]);
        }
    }
};
/**
 * Copies all the (own) properties from one object to another.
 * @param {!Object} objTo
 * @param {!Object} objFrom
 * @return {!Object} objTo
 */
exports.extend = function (objTo, objFrom) {
    exports.forEach(objFrom, function (key, value) {
        objTo[key] = value;
    });
    return objTo;
};
/**
 * Returns a clone of the specified object.
 * @param {!Object} obj
 * @return {!Object} cloned obj.
 */
exports.clone = function (obj) {
    return exports.extend({}, obj);
};
/**
 * Returns true if obj has typeof "object" and is not null.  Unlike goog.isObject(), does not return true
 * for functions.
 *
 * @param obj {*} A potential object.
 * @returns {boolean} True if it's an object.
 */
exports.isNonNullObject = function (obj) {
    return typeof obj === 'object' && obj !== null;
};
exports.isEmpty = function (obj) {
    for (var key in obj) {
        return false;
    }
    return true;
};
exports.getCount = function (obj) {
    var rv = 0;
    for (var key in obj) {
        rv++;
    }
    return rv;
};
exports.map = function (obj, f, opt_obj) {
    var res = {};
    for (var key in obj) {
        res[key] = f.call(opt_obj, obj[key], key, obj);
    }
    return res;
};
exports.findKey = function (obj, fn, opt_this) {
    for (var key in obj) {
        if (fn.call(opt_this, obj[key], key, obj)) {
            return key;
        }
    }
    return undefined;
};
exports.findValue = function (obj, fn, opt_this) {
    var key = exports.findKey(obj, fn, opt_this);
    return key && obj[key];
};
exports.getAnyKey = function (obj) {
    for (var key in obj) {
        return key;
    }
};
exports.getValues = function (obj) {
    var res = [];
    var i = 0;
    for (var key in obj) {
        res[i++] = obj[key];
    }
    return res;
};
/**
 * Tests whether every key/value pair in an object pass the test implemented
 * by the provided function
 *
 * @param {?Object.<K,V>} obj Object to test.
 * @param {!function(K, V)} fn Function to call for each key and value.
 * @template K,V
 */
exports.every = function (obj, fn) {
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            if (!fn(key, obj[key])) {
                return false;
            }
        }
    }
    return true;
};

//# sourceMappingURL=obj.js.map


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(1);
var parser_1 = __webpack_require__(48);
var Path_1 = __webpack_require__(2);
var Reference_1 = __webpack_require__(30);
var Repo_1 = __webpack_require__(23);
var RepoManager_1 = __webpack_require__(35);
var util_2 = __webpack_require__(0);
var validation_1 = __webpack_require__(9);
/**
 * Class representing a firebase database.
 * @implements {FirebaseService}
 */
var Database = /** @class */ (function () {
    /**
     * The constructor should not be called by users of our public API.
     * @param {!Repo} repo_
     */
    function Database(repo_) {
        this.repo_ = repo_;
        if (!(repo_ instanceof Repo_1.Repo)) {
            util_1.fatal("Don't call new Database() directly - please use firebase.database().");
        }
        /** @type {Reference} */
        this.root_ = new Reference_1.Reference(repo_, Path_1.Path.Empty);
        this.INTERNAL = new DatabaseInternals(this);
    }
    Object.defineProperty(Database.prototype, "app", {
        get: function () {
            return this.repo_.app;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a reference to the root or the path specified in opt_pathString.
     * @param {string=} pathString
     * @return {!Reference} Firebase reference.
     */
    Database.prototype.ref = function (pathString) {
        this.checkDeleted_('ref');
        util_2.validateArgCount('database.ref', 0, 1, arguments.length);
        return pathString !== undefined ? this.root_.child(pathString) : this.root_;
    };
    /**
     * Returns a reference to the root or the path specified in url.
     * We throw a exception if the url is not in the same domain as the
     * current repo.
     * @param {string} url
     * @return {!Reference} Firebase reference.
     */
    Database.prototype.refFromURL = function (url) {
        /** @const {string} */
        var apiName = 'database.refFromURL';
        this.checkDeleted_(apiName);
        util_2.validateArgCount(apiName, 1, 1, arguments.length);
        var parsedURL = parser_1.parseRepoInfo(url);
        validation_1.validateUrl(apiName, 1, parsedURL);
        var repoInfo = parsedURL.repoInfo;
        if (repoInfo.host !== this.repo_.repoInfo_.host) {
            util_1.fatal(apiName +
                ': Host name does not match the current database: ' +
                '(found ' +
                repoInfo.host +
                ' but expected ' +
                this.repo_.repoInfo_.host +
                ')');
        }
        return this.ref(parsedURL.path.toString());
    };
    /**
     * @param {string} apiName
     */
    Database.prototype.checkDeleted_ = function (apiName) {
        if (this.repo_ === null) {
            util_1.fatal('Cannot call ' + apiName + ' on a deleted database.');
        }
    };
    // Make individual repo go offline.
    Database.prototype.goOffline = function () {
        util_2.validateArgCount('database.goOffline', 0, 0, arguments.length);
        this.checkDeleted_('goOffline');
        this.repo_.interrupt();
    };
    Database.prototype.goOnline = function () {
        util_2.validateArgCount('database.goOnline', 0, 0, arguments.length);
        this.checkDeleted_('goOnline');
        this.repo_.resume();
    };
    Database.ServerValue = {
        TIMESTAMP: {
            '.sv': 'timestamp'
        }
    };
    return Database;
}());
exports.Database = Database;
var DatabaseInternals = /** @class */ (function () {
    /** @param {!Database} database */
    function DatabaseInternals(database) {
        this.database = database;
    }
    /** @return {Promise<void>} */
    DatabaseInternals.prototype.delete = function () {
        this.database.checkDeleted_('delete');
        RepoManager_1.RepoManager.getInstance().deleteRepo(this.database.repo_);
        this.database.repo_ = null;
        this.database.root_ = null;
        this.database.INTERNAL = null;
        this.database = null;
        return Promise.resolve();
    };
    return DatabaseInternals;
}());
exports.DatabaseInternals = DatabaseInternals;

//# sourceMappingURL=Database.js.map


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Path_1 = __webpack_require__(2);
var RepoInfo_1 = __webpack_require__(49);
var util_1 = __webpack_require__(1);
/**
 * @param {!string} pathString
 * @return {string}
 */
function decodePath(pathString) {
    var pathStringDecoded = '';
    var pieces = pathString.split('/');
    for (var i = 0; i < pieces.length; i++) {
        if (pieces[i].length > 0) {
            var piece = pieces[i];
            try {
                piece = decodeURIComponent(piece.replace(/\+/g, ' '));
            }
            catch (e) { }
            pathStringDecoded += '/' + piece;
        }
    }
    return pathStringDecoded;
}
/**
 *
 * @param {!string} dataURL
 * @return {{repoInfo: !RepoInfo, path: !Path}}
 */
exports.parseRepoInfo = function (dataURL) {
    var parsedUrl = exports.parseURL(dataURL), namespace = parsedUrl.subdomain;
    if (parsedUrl.domain === 'firebase') {
        util_1.fatal(parsedUrl.host +
            ' is no longer supported. ' +
            'Please use <YOUR FIREBASE>.firebaseio.com instead');
    }
    // Catch common error of uninitialized namespace value.
    if (!namespace || namespace == 'undefined') {
        util_1.fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
    }
    if (!parsedUrl.secure) {
        util_1.warnIfPageIsSecure();
    }
    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
    return {
        repoInfo: new RepoInfo_1.RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),
        path: new Path_1.Path(parsedUrl.pathString)
    };
};
/**
 *
 * @param {!string} dataURL
 * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}
 */
exports.parseURL = function (dataURL) {
    // Default to empty strings in the event of a malformed string.
    var host = '', domain = '', subdomain = '', pathString = '';
    // Always default to SSL, unless otherwise specified.
    var secure = true, scheme = 'https', port = 443;
    // Don't do any validation here. The caller is responsible for validating the result of parsing.
    if (typeof dataURL === 'string') {
        // Parse scheme.
        var colonInd = dataURL.indexOf('//');
        if (colonInd >= 0) {
            scheme = dataURL.substring(0, colonInd - 1);
            dataURL = dataURL.substring(colonInd + 2);
        }
        // Parse host and path.
        var slashInd = dataURL.indexOf('/');
        if (slashInd === -1) {
            slashInd = dataURL.length;
        }
        host = dataURL.substring(0, slashInd);
        pathString = decodePath(dataURL.substring(slashInd));
        var parts = host.split('.');
        if (parts.length === 3) {
            // Normalize namespaces to lowercase to share storage / connection.
            domain = parts[1];
            subdomain = parts[0].toLowerCase();
        }
        else if (parts.length === 2) {
            domain = parts[0];
        }
        // If we have a port, use scheme for determining if it's secure.
        colonInd = host.indexOf(':');
        if (colonInd >= 0) {
            secure = scheme === 'https' || scheme === 'wss';
            port = parseInt(host.substring(colonInd + 1), 10);
        }
    }
    return {
        host: host,
        port: port,
        domain: domain,
        subdomain: subdomain,
        secure: secure,
        scheme: scheme,
        pathString: pathString
    };
};

//# sourceMappingURL=parser.js.map


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(0);
var storage_1 = __webpack_require__(18);
var Constants_1 = __webpack_require__(19);
/**
 * A class that holds metadata about a Repo object
 *
 * @constructor
 */
var RepoInfo = /** @class */ (function () {
    /**
     * @param {string} host Hostname portion of the url for the repo
     * @param {boolean} secure Whether or not this repo is accessed over ssl
     * @param {string} namespace The namespace represented by the repo
     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).
     * @param {string=} persistenceKey Override the default session persistence storage key
     */
    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {
        if (persistenceKey === void 0) { persistenceKey = ''; }
        this.secure = secure;
        this.namespace = namespace;
        this.webSocketOnly = webSocketOnly;
        this.persistenceKey = persistenceKey;
        this.host = host.toLowerCase();
        this.domain = this.host.substr(this.host.indexOf('.') + 1);
        this.internalHost = storage_1.PersistentStorage.get('host:' + host) || this.host;
    }
    RepoInfo.prototype.needsQueryParam = function () {
        return this.host !== this.internalHost;
    };
    RepoInfo.prototype.isCacheableHost = function () {
        return this.internalHost.substr(0, 2) === 's-';
    };
    RepoInfo.prototype.isDemoHost = function () {
        return this.domain === 'firebaseio-demo.com';
    };
    RepoInfo.prototype.isCustomHost = function () {
        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');
    };
    RepoInfo.prototype.updateHost = function (newHost) {
        if (newHost !== this.internalHost) {
            this.internalHost = newHost;
            if (this.isCacheableHost()) {
                storage_1.PersistentStorage.set('host:' + this.host, this.internalHost);
            }
        }
    };
    /**
     * Returns the websocket URL for this repo
     * @param {string} type of connection
     * @param {Object} params list
     * @return {string} The URL for this repo
     */
    RepoInfo.prototype.connectionURL = function (type, params) {
        util_1.assert(typeof type === 'string', 'typeof type must == string');
        util_1.assert(typeof params === 'object', 'typeof params must == object');
        var connURL;
        if (type === Constants_1.WEBSOCKET) {
            connURL =
                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';
        }
        else if (type === Constants_1.LONG_POLLING) {
            connURL =
                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';
        }
        else {
            throw new Error('Unknown connection type: ' + type);
        }
        if (this.needsQueryParam()) {
            params['ns'] = this.namespace;
        }
        var pairs = [];
        util_2.forEach(params, function (key, value) {
            pairs.push(key + '=' + value);
        });
        return connURL + pairs.join('&');
    };
    /** @return {string} */
    RepoInfo.prototype.toString = function () {
        var str = this.toURLString();
        if (this.persistenceKey) {
            str += '<' + this.persistenceKey + '>';
        }
        return str;
    };
    /** @return {string} */
    RepoInfo.prototype.toURLString = function () {
        return (this.secure ? 'https://' : 'http://') + this.host;
    };
    return RepoInfo;
}());
exports.RepoInfo = RepoInfo;

//# sourceMappingURL=RepoInfo.js.map


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var validation_1 = __webpack_require__(9);
var util_2 = __webpack_require__(1);
var util_3 = __webpack_require__(0);
/**
 * @constructor
 */
var OnDisconnect = /** @class */ (function () {
    /**
     * @param {!Repo} repo_
     * @param {!Path} path_
     */
    function OnDisconnect(repo_, path_) {
        this.repo_ = repo_;
        this.path_ = path_;
    }
    /**
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */
    OnDisconnect.prototype.cancel = function (onComplete) {
        util_1.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);
        util_1.validateCallback('OnDisconnect.cancel', 1, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */
    OnDisconnect.prototype.remove = function (onComplete) {
        util_1.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);
        validation_1.validateWritablePath('OnDisconnect.remove', this.path_);
        util_1.validateCallback('OnDisconnect.remove', 1, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {*} value
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */
    OnDisconnect.prototype.set = function (value, onComplete) {
        util_1.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);
        validation_1.validateWritablePath('OnDisconnect.set', this.path_);
        validation_1.validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);
        util_1.validateCallback('OnDisconnect.set', 2, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {*} value
     * @param {number|string|null} priority
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */
    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {
        util_1.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);
        validation_1.validateWritablePath('OnDisconnect.setWithPriority', this.path_);
        validation_1.validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);
        validation_1.validatePriority('OnDisconnect.setWithPriority', 2, priority, false);
        util_1.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {!Object} objectToMerge
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */
    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {
        util_1.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);
        validation_1.validateWritablePath('OnDisconnect.update', this.path_);
        if (Array.isArray(objectToMerge)) {
            var newObjectToMerge = {};
            for (var i = 0; i < objectToMerge.length; ++i) {
                newObjectToMerge['' + i] = objectToMerge[i];
            }
            objectToMerge = newObjectToMerge;
            util_2.warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +
                'existing data, or an Object with integer keys if you really do want to only update some of the children.');
        }
        validation_1.validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);
        util_1.validateCallback('OnDisconnect.update', 2, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    return OnDisconnect;
}());
exports.OnDisconnect = OnDisconnect;

//# sourceMappingURL=onDisconnect.js.map


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var KeyIndex_1 = __webpack_require__(14);
var PriorityIndex_1 = __webpack_require__(3);
var ValueIndex_1 = __webpack_require__(53);
var PathIndex_1 = __webpack_require__(57);
var util_2 = __webpack_require__(1);
var Path_1 = __webpack_require__(2);
var validation_1 = __webpack_require__(9);
var util_3 = __webpack_require__(0);
var EventRegistration_1 = __webpack_require__(117);
var util_4 = __webpack_require__(0);
var __referenceConstructor;
/**
 * A Query represents a filter to be applied to a firebase location.  This object purely represents the
 * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
 *
 * Since every Firebase reference is a query, Firebase inherits from this object.
 */
var Query = /** @class */ (function () {
    function Query(repo, path, queryParams_, orderByCalled_) {
        this.repo = repo;
        this.path = path;
        this.queryParams_ = queryParams_;
        this.orderByCalled_ = orderByCalled_;
    }
    Object.defineProperty(Query, "__referenceConstructor", {
        get: function () {
            util_1.assert(__referenceConstructor, 'Reference.ts has not been loaded');
            return __referenceConstructor;
        },
        set: function (val) {
            __referenceConstructor = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Validates start/end values for queries.
     * @param {!QueryParams} params
     * @private
     */
    Query.validateQueryEndpoints_ = function (params) {
        var startNode = null;
        var endNode = null;
        if (params.hasStart()) {
            startNode = params.getIndexStartValue();
        }
        if (params.hasEnd()) {
            endNode = params.getIndexEndValue();
        }
        if (params.getIndex() === KeyIndex_1.KEY_INDEX) {
            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +
                'startAt(), endAt(), or equalTo().';
            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +
                'or equalTo() must be a string.';
            if (params.hasStart()) {
                var startName = params.getIndexStartName();
                if (startName != util_2.MIN_NAME) {
                    throw new Error(tooManyArgsError);
                }
                else if (typeof startNode !== 'string') {
                    throw new Error(wrongArgTypeError);
                }
            }
            if (params.hasEnd()) {
                var endName = params.getIndexEndName();
                if (endName != util_2.MAX_NAME) {
                    throw new Error(tooManyArgsError);
                }
                else if (typeof endNode !== 'string') {
                    throw new Error(wrongArgTypeError);
                }
            }
        }
        else if (params.getIndex() === PriorityIndex_1.PRIORITY_INDEX) {
            if ((startNode != null && !validation_1.isValidPriority(startNode)) ||
                (endNode != null && !validation_1.isValidPriority(endNode))) {
                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +
                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');
            }
        }
        else {
            util_1.assert(params.getIndex() instanceof PathIndex_1.PathIndex ||
                params.getIndex() === ValueIndex_1.VALUE_INDEX, 'unknown index type.');
            if ((startNode != null && typeof startNode === 'object') ||
                (endNode != null && typeof endNode === 'object')) {
                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +
                    'an object.');
            }
        }
    };
    /**
     * Validates that limit* has been called with the correct combination of parameters
     * @param {!QueryParams} params
     * @private
     */
    Query.validateLimit_ = function (params) {
        if (params.hasStart() &&
            params.hasEnd() &&
            params.hasLimit() &&
            !params.hasAnchoredLimit()) {
            throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");
        }
    };
    /**
     * Validates that no other order by call has been made
     * @param {!string} fnName
     * @private
     */
    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {
        if (this.orderByCalled_ === true) {
            throw new Error(fnName + ": You can't combine multiple orderBy calls.");
        }
    };
    /**
     * @return {!QueryParams}
     */
    Query.prototype.getQueryParams = function () {
        return this.queryParams_;
    };
    /**
     * @return {!Reference}
     */
    Query.prototype.getRef = function () {
        util_3.validateArgCount('Query.ref', 0, 0, arguments.length);
        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.
        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this
        // method gets called.
        return new Query.__referenceConstructor(this.repo, this.path);
    };
    /**
     * @param {!string} eventType
     * @param {!function(DataSnapshot, string=)} callback
     * @param {(function(Error)|Object)=} cancelCallbackOrContext
     * @param {Object=} context
     * @return {!function(DataSnapshot, string=)}
     */
    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {
        util_3.validateArgCount('Query.on', 2, 4, arguments.length);
        validation_1.validateEventType('Query.on', 1, eventType, false);
        util_3.validateCallback('Query.on', 2, callback, false);
        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);
        if (eventType === 'value') {
            this.onValueEvent(callback, ret.cancel, ret.context);
        }
        else {
            var callbacks = {};
            callbacks[eventType] = callback;
            this.onChildEvent(callbacks, ret.cancel, ret.context);
        }
        return callback;
    };
    /**
     * @param {!function(!DataSnapshot)} callback
     * @param {?function(Error)} cancelCallback
     * @param {?Object} context
     * @protected
     */
    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {
        var container = new EventRegistration_1.ValueEventRegistration(callback, cancelCallback || null, context || null);
        this.repo.addEventCallbackForQuery(this, container);
    };
    /**
     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks
     * @param {?function(Error)} cancelCallback
     * @param {?Object} context
     * @protected
     */
    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {
        var container = new EventRegistration_1.ChildEventRegistration(callbacks, cancelCallback, context);
        this.repo.addEventCallbackForQuery(this, container);
    };
    /**
     * @param {string=} eventType
     * @param {(function(!DataSnapshot, ?string=))=} callback
     * @param {Object=} context
     */
    Query.prototype.off = function (eventType, callback, context) {
        util_3.validateArgCount('Query.off', 0, 3, arguments.length);
        validation_1.validateEventType('Query.off', 1, eventType, true);
        util_3.validateCallback('Query.off', 2, callback, true);
        util_3.validateContextObject('Query.off', 3, context, true);
        var container = null;
        var callbacks = null;
        if (eventType === 'value') {
            var valueCallback = callback || null;
            container = new EventRegistration_1.ValueEventRegistration(valueCallback, null, context || null);
        }
        else if (eventType) {
            if (callback) {
                callbacks = {};
                callbacks[eventType] = callback;
            }
            container = new EventRegistration_1.ChildEventRegistration(callbacks, null, context || null);
        }
        this.repo.removeEventCallbackForQuery(this, container);
    };
    /**
     * Attaches a listener, waits for the first event, and then removes the listener
     * @param {!string} eventType
     * @param {!function(!DataSnapshot, string=)} userCallback
     * @param cancelOrContext
     * @param context
     * @return {!firebase.Promise}
     */
    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {
        var _this = this;
        util_3.validateArgCount('Query.once', 1, 4, arguments.length);
        validation_1.validateEventType('Query.once', 1, eventType, false);
        util_3.validateCallback('Query.once', 2, userCallback, true);
        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);
        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)
        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change
        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is
        // against the Promise specification.
        var firstCall = true;
        var deferred = new util_4.Deferred();
        // A dummy error handler in case a user wasn't expecting promises
        deferred.promise.catch(function () { });
        var onceCallback = function (snapshot) {
            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)
            // triggers multiple events (e.g. child_added or child_changed).
            if (firstCall) {
                firstCall = false;
                _this.off(eventType, onceCallback);
                if (userCallback) {
                    userCallback.bind(ret.context)(snapshot);
                }
                deferred.resolve(snapshot);
            }
        };
        this.on(eventType, onceCallback, 
        /*cancel=*/ function (err) {
            _this.off(eventType, onceCallback);
            if (ret.cancel)
                ret.cancel.bind(ret.context)(err);
            deferred.reject(err);
        });
        return deferred.promise;
    };
    /**
     * Set a limit and anchor it to the start of the window.
     * @param {!number} limit
     * @return {!Query}
     */
    Query.prototype.limitToFirst = function (limit) {
        util_3.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);
        if (typeof limit !== 'number' ||
            Math.floor(limit) !== limit ||
            limit <= 0) {
            throw new Error('Query.limitToFirst: First argument must be a positive integer.');
        }
        if (this.queryParams_.hasLimit()) {
            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +
                'limitToFirst, or limitToLast).');
        }
        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);
    };
    /**
     * Set a limit and anchor it to the end of the window.
     * @param {!number} limit
     * @return {!Query}
     */
    Query.prototype.limitToLast = function (limit) {
        util_3.validateArgCount('Query.limitToLast', 1, 1, arguments.length);
        if (typeof limit !== 'number' ||
            Math.floor(limit) !== limit ||
            limit <= 0) {
            throw new Error('Query.limitToLast: First argument must be a positive integer.');
        }
        if (this.queryParams_.hasLimit()) {
            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +
                'limitToFirst, or limitToLast).');
        }
        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);
    };
    /**
     * Given a child path, return a new query ordered by the specified grandchild path.
     * @param {!string} path
     * @return {!Query}
     */
    Query.prototype.orderByChild = function (path) {
        util_3.validateArgCount('Query.orderByChild', 1, 1, arguments.length);
        if (path === '$key') {
            throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');
        }
        else if (path === '$priority') {
            throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');
        }
        else if (path === '$value') {
            throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');
        }
        validation_1.validatePathString('Query.orderByChild', 1, path, false);
        this.validateNoPreviousOrderByCall_('Query.orderByChild');
        var parsedPath = new Path_1.Path(path);
        if (parsedPath.isEmpty()) {
            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');
        }
        var index = new PathIndex_1.PathIndex(parsedPath);
        var newParams = this.queryParams_.orderBy(index);
        Query.validateQueryEndpoints_(newParams);
        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
    };
    /**
     * Return a new query ordered by the KeyIndex
     * @return {!Query}
     */
    Query.prototype.orderByKey = function () {
        util_3.validateArgCount('Query.orderByKey', 0, 0, arguments.length);
        this.validateNoPreviousOrderByCall_('Query.orderByKey');
        var newParams = this.queryParams_.orderBy(KeyIndex_1.KEY_INDEX);
        Query.validateQueryEndpoints_(newParams);
        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
    };
    /**
     * Return a new query ordered by the PriorityIndex
     * @return {!Query}
     */
    Query.prototype.orderByPriority = function () {
        util_3.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);
        this.validateNoPreviousOrderByCall_('Query.orderByPriority');
        var newParams = this.queryParams_.orderBy(PriorityIndex_1.PRIORITY_INDEX);
        Query.validateQueryEndpoints_(newParams);
        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
    };
    /**
     * Return a new query ordered by the ValueIndex
     * @return {!Query}
     */
    Query.prototype.orderByValue = function () {
        util_3.validateArgCount('Query.orderByValue', 0, 0, arguments.length);
        this.validateNoPreviousOrderByCall_('Query.orderByValue');
        var newParams = this.queryParams_.orderBy(ValueIndex_1.VALUE_INDEX);
        Query.validateQueryEndpoints_(newParams);
        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
    };
    /**
     * @param {number|string|boolean|null} value
     * @param {?string=} name
     * @return {!Query}
     */
    Query.prototype.startAt = function (value, name) {
        if (value === void 0) { value = null; }
        util_3.validateArgCount('Query.startAt', 0, 2, arguments.length);
        validation_1.validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);
        validation_1.validateKey('Query.startAt', 2, name, true);
        var newParams = this.queryParams_.startAt(value, name);
        Query.validateLimit_(newParams);
        Query.validateQueryEndpoints_(newParams);
        if (this.queryParams_.hasStart()) {
            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +
                'or equalTo).');
        }
        // Calling with no params tells us to start at the beginning.
        if (value === undefined) {
            value = null;
            name = null;
        }
        return new Query(this.repo, this.path, newParams, this.orderByCalled_);
    };
    /**
     * @param {number|string|boolean|null} value
     * @param {?string=} name
     * @return {!Query}
     */
    Query.prototype.endAt = function (value, name) {
        if (value === void 0) { value = null; }
        util_3.validateArgCount('Query.endAt', 0, 2, arguments.length);
        validation_1.validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);
        validation_1.validateKey('Query.endAt', 2, name, true);
        var newParams = this.queryParams_.endAt(value, name);
        Query.validateLimit_(newParams);
        Query.validateQueryEndpoints_(newParams);
        if (this.queryParams_.hasEnd()) {
            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +
                'equalTo).');
        }
        return new Query(this.repo, this.path, newParams, this.orderByCalled_);
    };
    /**
     * Load the selection of children with exactly the specified value, and, optionally,
     * the specified name.
     * @param {number|string|boolean|null} value
     * @param {string=} name
     * @return {!Query}
     */
    Query.prototype.equalTo = function (value, name) {
        util_3.validateArgCount('Query.equalTo', 1, 2, arguments.length);
        validation_1.validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);
        validation_1.validateKey('Query.equalTo', 2, name, true);
        if (this.queryParams_.hasStart()) {
            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +
                'equalTo).');
        }
        if (this.queryParams_.hasEnd()) {
            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +
                'equalTo).');
        }
        return this.startAt(value, name).endAt(value, name);
    };
    /**
     * @return {!string} URL for this location.
     */
    Query.prototype.toString = function () {
        util_3.validateArgCount('Query.toString', 0, 0, arguments.length);
        return this.repo.toString() + this.path.toUrlEncodedString();
    };
    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
    // for end-users.
    Query.prototype.toJSON = function () {
        // An optional spacer argument is unnecessary for a string.
        util_3.validateArgCount('Query.toJSON', 0, 1, arguments.length);
        return this.toString();
    };
    /**
     * An object representation of the query parameters used by this Query.
     * @return {!Object}
     */
    Query.prototype.queryObject = function () {
        return this.queryParams_.getQueryObject();
    };
    /**
     * @return {!string}
     */
    Query.prototype.queryIdentifier = function () {
        var obj = this.queryObject();
        var id = util_2.ObjectToUniqueKey(obj);
        return id === '{}' ? 'default' : id;
    };
    /**
     * Return true if this query and the provided query are equivalent; otherwise, return false.
     * @param {Query} other
     * @return {boolean}
     */
    Query.prototype.isEqual = function (other) {
        util_3.validateArgCount('Query.isEqual', 1, 1, arguments.length);
        if (!(other instanceof Query)) {
            var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
            throw new Error(error);
        }
        var sameRepo = this.repo === other.repo;
        var samePath = this.path.equals(other.path);
        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();
        return sameRepo && samePath && sameQueryIdentifier;
    };
    /**
     * Helper used by .on and .once to extract the context and or cancel arguments.
     * @param {!string} fnName The function name (on or once)
     * @param {(function(Error)|Object)=} cancelOrContext
     * @param {Object=} context
     * @return {{cancel: ?function(Error), context: ?Object}}
     * @private
     */
    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {
        var ret = { cancel: null, context: null };
        if (cancelOrContext && context) {
            ret.cancel = cancelOrContext;
            util_3.validateCallback(fnName, 3, ret.cancel, true);
            ret.context = context;
            util_3.validateContextObject(fnName, 4, ret.context, true);
        }
        else if (cancelOrContext) {
            // we have either a cancel callback or a context.
            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {
                // it's a context!
                ret.context = cancelOrContext;
            }
            else if (typeof cancelOrContext === 'function') {
                ret.cancel = cancelOrContext;
            }
            else {
                throw new Error(util_3.errorPrefix(fnName, 3, true) +
                    ' must either be a cancel callback or a context object.');
            }
        }
        return ret;
    };
    Object.defineProperty(Query.prototype, "ref", {
        get: function () {
            return this.getRef();
        },
        enumerable: true,
        configurable: true
    });
    return Query;
}());
exports.Query = Query;

//# sourceMappingURL=Query.js.map


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(1);
var util_3 = __webpack_require__(0);
var MAX_NODE;
function setMaxNode(val) {
    MAX_NODE = val;
}
exports.setMaxNode = setMaxNode;
/**
 * @param {(!string|!number)} priority
 * @return {!string}
 */
exports.priorityHashText = function (priority) {
    if (typeof priority === 'number')
        return 'number:' + util_2.doubleToIEEE754String(priority);
    else
        return 'string:' + priority;
};
/**
 * Validates that a priority snapshot Node is valid.
 *
 * @param {!Node} priorityNode
 */
exports.validatePriorityNode = function (priorityNode) {
    if (priorityNode.isLeafNode()) {
        var val = priorityNode.val();
        util_1.assert(typeof val === 'string' ||
            typeof val === 'number' ||
            (typeof val === 'object' && util_3.contains(val, '.sv')), 'Priority must be a string or number.');
    }
    else {
        util_1.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');
    }
    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
    util_1.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
};

//# sourceMappingURL=snap.js.map


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Index_1 = __webpack_require__(20);
var Node_1 = __webpack_require__(5);
var util_1 = __webpack_require__(1);
var nodeFromJSON_1 = __webpack_require__(15);
/**
 * @constructor
 * @extends {Index}
 * @private
 */
var ValueIndex = /** @class */ (function (_super) {
    __extends(ValueIndex, _super);
    function ValueIndex() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritDoc
     */
    ValueIndex.prototype.compare = function (a, b) {
        var indexCmp = a.node.compareTo(b.node);
        if (indexCmp === 0) {
            return util_1.nameCompare(a.name, b.name);
        }
        else {
            return indexCmp;
        }
    };
    /**
     * @inheritDoc
     */
    ValueIndex.prototype.isDefinedOn = function (node) {
        return true;
    };
    /**
     * @inheritDoc
     */
    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
        return !oldNode.equals(newNode);
    };
    /**
     * @inheritDoc
     */
    ValueIndex.prototype.minPost = function () {
        return Node_1.NamedNode.MIN;
    };
    /**
     * @inheritDoc
     */
    ValueIndex.prototype.maxPost = function () {
        return Node_1.NamedNode.MAX;
    };
    /**
     * @param {*} indexValue
     * @param {string} name
     * @return {!NamedNode}
     */
    ValueIndex.prototype.makePost = function (indexValue, name) {
        var valueNode = nodeFromJSON_1.nodeFromJSON(indexValue);
        return new Node_1.NamedNode(name, valueNode);
    };
    /**
     * @return {!string} String representation for inclusion in a query spec
     */
    ValueIndex.prototype.toString = function () {
        return '.value';
    };
    return ValueIndex;
}(Index_1.Index));
exports.ValueIndex = ValueIndex;
exports.VALUE_INDEX = new ValueIndex();

//# sourceMappingURL=ValueIndex.js.map


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var childSet_1 = __webpack_require__(55);
var util_2 = __webpack_require__(0);
var Node_1 = __webpack_require__(5);
var PriorityIndex_1 = __webpack_require__(3);
var KeyIndex_1 = __webpack_require__(14);
var _defaultIndexMap;
var fallbackObject = {};
/**
 *
 * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes
 * @param {Object.<string, Index>} indexSet
 * @constructor
 */
var IndexMap = /** @class */ (function () {
    function IndexMap(indexes_, indexSet_) {
        this.indexes_ = indexes_;
        this.indexSet_ = indexSet_;
    }
    Object.defineProperty(IndexMap, "Default", {
        /**
         * The default IndexMap for nodes without a priority
         * @type {!IndexMap}
         * @const
         */
        get: function () {
            util_1.assert(fallbackObject && PriorityIndex_1.PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
            _defaultIndexMap =
                _defaultIndexMap ||
                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PriorityIndex_1.PRIORITY_INDEX });
            return _defaultIndexMap;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * @param {!string} indexKey
     * @return {?SortedMap.<NamedNode, Node>}
     */
    IndexMap.prototype.get = function (indexKey) {
        var sortedMap = util_2.safeGet(this.indexes_, indexKey);
        if (!sortedMap)
            throw new Error('No index defined for ' + indexKey);
        if (sortedMap === fallbackObject) {
            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
            // regular child map
            return null;
        }
        else {
            return sortedMap;
        }
    };
    /**
     * @param {!Index} indexDefinition
     * @return {boolean}
     */
    IndexMap.prototype.hasIndex = function (indexDefinition) {
        return util_2.contains(this.indexSet_, indexDefinition.toString());
    };
    /**
     * @param {!Index} indexDefinition
     * @param {!SortedMap.<string, !Node>} existingChildren
     * @return {!IndexMap}
     */
    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {
        util_1.assert(indexDefinition !== KeyIndex_1.KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
        var childList = [];
        var sawIndexedValue = false;
        var iter = existingChildren.getIterator(Node_1.NamedNode.Wrap);
        var next = iter.getNext();
        while (next) {
            sawIndexedValue =
                sawIndexedValue || indexDefinition.isDefinedOn(next.node);
            childList.push(next);
            next = iter.getNext();
        }
        var newIndex;
        if (sawIndexedValue) {
            newIndex = childSet_1.buildChildSet(childList, indexDefinition.getCompare());
        }
        else {
            newIndex = fallbackObject;
        }
        var indexName = indexDefinition.toString();
        var newIndexSet = util_2.clone(this.indexSet_);
        newIndexSet[indexName] = indexDefinition;
        var newIndexes = util_2.clone(this.indexes_);
        newIndexes[indexName] = newIndex;
        return new IndexMap(newIndexes, newIndexSet);
    };
    /**
     * Ensure that this node is properly tracked in any indexes that we're maintaining
     * @param {!NamedNode} namedNode
     * @param {!SortedMap.<string, !Node>} existingChildren
     * @return {!IndexMap}
     */
    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {
        var _this = this;
        var newIndexes = util_2.map(this.indexes_, function (indexedChildren, indexName) {
            var index = util_2.safeGet(_this.indexSet_, indexName);
            util_1.assert(index, 'Missing index implementation for ' + indexName);
            if (indexedChildren === fallbackObject) {
                // Check to see if we need to index everything
                if (index.isDefinedOn(namedNode.node)) {
                    // We need to build this index
                    var childList = [];
                    var iter = existingChildren.getIterator(Node_1.NamedNode.Wrap);
                    var next = iter.getNext();
                    while (next) {
                        if (next.name != namedNode.name) {
                            childList.push(next);
                        }
                        next = iter.getNext();
                    }
                    childList.push(namedNode);
                    return childSet_1.buildChildSet(childList, index.getCompare());
                }
                else {
                    // No change, this remains a fallback
                    return fallbackObject;
                }
            }
            else {
                var existingSnap = existingChildren.get(namedNode.name);
                var newChildren = indexedChildren;
                if (existingSnap) {
                    newChildren = newChildren.remove(new Node_1.NamedNode(namedNode.name, existingSnap));
                }
                return newChildren.insert(namedNode, namedNode.node);
            }
        });
        return new IndexMap(newIndexes, this.indexSet_);
    };
    /**
     * Create a new IndexMap instance with the given value removed
     * @param {!NamedNode} namedNode
     * @param {!SortedMap.<string, !Node>} existingChildren
     * @return {!IndexMap}
     */
    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {
        var newIndexes = util_2.map(this.indexes_, function (indexedChildren) {
            if (indexedChildren === fallbackObject) {
                // This is the fallback. Just return it, nothing to do in this case
                return indexedChildren;
            }
            else {
                var existingSnap = existingChildren.get(namedNode.name);
                if (existingSnap) {
                    return indexedChildren.remove(new Node_1.NamedNode(namedNode.name, existingSnap));
                }
                else {
                    // No record of this child
                    return indexedChildren;
                }
            }
        });
        return new IndexMap(newIndexes, this.indexSet_);
    };
    return IndexMap;
}());
exports.IndexMap = IndexMap;

//# sourceMappingURL=IndexMap.js.map


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var SortedMap_1 = __webpack_require__(22);
var SortedMap_2 = __webpack_require__(22);
var LOG_2 = Math.log(2);
/**
 * @constructor
 */
var Base12Num = /** @class */ (function () {
    /**
     * @param {number} length
     */
    function Base12Num(length) {
        var logBase2 = function (num) {
            return parseInt((Math.log(num) / LOG_2), 10);
        };
        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };
        this.count = logBase2(length + 1);
        this.current_ = this.count - 1;
        var mask = bitMask(this.count);
        this.bits_ = (length + 1) & mask;
    }
    /**
     * @return {boolean}
     */
    Base12Num.prototype.nextBitIsOne = function () {
        //noinspection JSBitwiseOperatorUsage
        var result = !(this.bits_ & (0x1 << this.current_));
        this.current_--;
        return result;
    };
    return Base12Num;
}());
/**
 * Takes a list of child nodes and constructs a SortedSet using the given comparison
 * function
 *
 * Uses the algorithm described in the paper linked here:
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
 *
 * @template K, V
 * @param {Array.<!NamedNode>} childList Unsorted list of children
 * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used
 * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's
 *                                                        type is not NamedNode
 * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map
 * @return {SortedMap.<K, V>}
 */
exports.buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
    childList.sort(cmp);
    var buildBalancedTree = function (low, high) {
        var length = high - low;
        var namedNode;
        var key;
        if (length == 0) {
            return null;
        }
        else if (length == 1) {
            namedNode = childList[low];
            key = keyFn ? keyFn(namedNode) : namedNode;
            return new SortedMap_1.LLRBNode(key, namedNode.node, SortedMap_1.LLRBNode.BLACK, null, null);
        }
        else {
            var middle = parseInt((length / 2), 10) + low;
            var left = buildBalancedTree(low, middle);
            var right = buildBalancedTree(middle + 1, high);
            namedNode = childList[middle];
            key = keyFn ? keyFn(namedNode) : namedNode;
            return new SortedMap_1.LLRBNode(key, namedNode.node, SortedMap_1.LLRBNode.BLACK, left, right);
        }
    };
    var buildFrom12Array = function (base12) {
        var node = null;
        var root = null;
        var index = childList.length;
        var buildPennant = function (chunkSize, color) {
            var low = index - chunkSize;
            var high = index;
            index -= chunkSize;
            var childTree = buildBalancedTree(low + 1, high);
            var namedNode = childList[low];
            var key = keyFn ? keyFn(namedNode) : namedNode;
            attachPennant(new SortedMap_1.LLRBNode(key, namedNode.node, color, null, childTree));
        };
        var attachPennant = function (pennant) {
            if (node) {
                node.left = pennant;
                node = pennant;
            }
            else {
                root = pennant;
                node = pennant;
            }
        };
        for (var i = 0; i < base12.count; ++i) {
            var isOne = base12.nextBitIsOne();
            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
            var chunkSize = Math.pow(2, base12.count - (i + 1));
            if (isOne) {
                buildPennant(chunkSize, SortedMap_1.LLRBNode.BLACK);
            }
            else {
                // current == 2
                buildPennant(chunkSize, SortedMap_1.LLRBNode.BLACK);
                buildPennant(chunkSize, SortedMap_1.LLRBNode.RED);
            }
        }
        return root;
    };
    var base12 = new Base12Num(childList.length);
    var root = buildFrom12Array(base12);
    return new SortedMap_2.SortedMap(mapSortFn || cmp, root);
};

//# sourceMappingURL=childSet.js.map


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(1);
function NAME_ONLY_COMPARATOR(left, right) {
    return util_1.nameCompare(left.name, right.name);
}
exports.NAME_ONLY_COMPARATOR = NAME_ONLY_COMPARATOR;
function NAME_COMPARATOR(left, right) {
    return util_1.nameCompare(left, right);
}
exports.NAME_COMPARATOR = NAME_COMPARATOR;

//# sourceMappingURL=comparators.js.map


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(1);
var Index_1 = __webpack_require__(20);
var ChildrenNode_1 = __webpack_require__(4);
var Node_1 = __webpack_require__(5);
var nodeFromJSON_1 = __webpack_require__(15);
/**
 * @param {!Path} indexPath
 * @constructor
 * @extends {Index}
 */
var PathIndex = /** @class */ (function (_super) {
    __extends(PathIndex, _super);
    function PathIndex(indexPath_) {
        var _this = _super.call(this) || this;
        _this.indexPath_ = indexPath_;
        util_1.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', "Can't create PathIndex with empty path or .priority key");
        return _this;
    }
    /**
     * @param {!Node} snap
     * @return {!Node}
     * @protected
     */
    PathIndex.prototype.extractChild = function (snap) {
        return snap.getChild(this.indexPath_);
    };
    /**
     * @inheritDoc
     */
    PathIndex.prototype.isDefinedOn = function (node) {
        return !node.getChild(this.indexPath_).isEmpty();
    };
    /**
     * @inheritDoc
     */
    PathIndex.prototype.compare = function (a, b) {
        var aChild = this.extractChild(a.node);
        var bChild = this.extractChild(b.node);
        var indexCmp = aChild.compareTo(bChild);
        if (indexCmp === 0) {
            return util_2.nameCompare(a.name, b.name);
        }
        else {
            return indexCmp;
        }
    };
    /**
     * @inheritDoc
     */
    PathIndex.prototype.makePost = function (indexValue, name) {
        var valueNode = nodeFromJSON_1.nodeFromJSON(indexValue);
        var node = ChildrenNode_1.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
        return new Node_1.NamedNode(name, node);
    };
    /**
     * @inheritDoc
     */
    PathIndex.prototype.maxPost = function () {
        var node = ChildrenNode_1.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, ChildrenNode_1.MAX_NODE);
        return new Node_1.NamedNode(util_2.MAX_NAME, node);
    };
    /**
     * @inheritDoc
     */
    PathIndex.prototype.toString = function () {
        return this.indexPath_.slice().join('/');
    };
    return PathIndex;
}(Index_1.Index));
exports.PathIndex = PathIndex;

//# sourceMappingURL=PathIndex.js.map


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var Path_1 = __webpack_require__(2);
var SparseSnapshotTree_1 = __webpack_require__(59);
var LeafNode_1 = __webpack_require__(21);
var nodeFromJSON_1 = __webpack_require__(15);
var PriorityIndex_1 = __webpack_require__(3);
/**
 * Generate placeholders for deferred values.
 * @param {?Object} values
 * @return {!Object}
 */
exports.generateWithValues = function (values) {
    values = values || {};
    values['timestamp'] = values['timestamp'] || new Date().getTime();
    return values;
};
/**
 * Value to use when firing local events. When writing server values, fire
 * local events with an approximate value, otherwise return value as-is.
 * @param {(Object|string|number|boolean)} value
 * @param {!Object} serverValues
 * @return {!(string|number|boolean)}
 */
exports.resolveDeferredValue = function (value, serverValues) {
    if (!value || typeof value !== 'object') {
        return value;
    }
    else {
        util_1.assert('.sv' in value, 'Unexpected leaf node or priority contents');
        return serverValues[value['.sv']];
    }
};
/**
 * Recursively replace all deferred values and priorities in the tree with the
 * specified generated replacement values.
 * @param {!SparseSnapshotTree} tree
 * @param {!Object} serverValues
 * @return {!SparseSnapshotTree}
 */
exports.resolveDeferredValueTree = function (tree, serverValues) {
    var resolvedTree = new SparseSnapshotTree_1.SparseSnapshotTree();
    tree.forEachTree(new Path_1.Path(''), function (path, node) {
        resolvedTree.remember(path, exports.resolveDeferredValueSnapshot(node, serverValues));
    });
    return resolvedTree;
};
/**
 * Recursively replace all deferred values and priorities in the node with the
 * specified generated replacement values.  If there are no server values in the node,
 * it'll be returned as-is.
 * @param {!Node} node
 * @param {!Object} serverValues
 * @return {!Node}
 */
exports.resolveDeferredValueSnapshot = function (node, serverValues) {
    var rawPri = node.getPriority().val();
    var priority = exports.resolveDeferredValue(rawPri, serverValues);
    var newNode;
    if (node.isLeafNode()) {
        var leafNode = node;
        var value = exports.resolveDeferredValue(leafNode.getValue(), serverValues);
        if (value !== leafNode.getValue() ||
            priority !== leafNode.getPriority().val()) {
            return new LeafNode_1.LeafNode(value, nodeFromJSON_1.nodeFromJSON(priority));
        }
        else {
            return node;
        }
    }
    else {
        var childrenNode = node;
        newNode = childrenNode;
        if (priority !== childrenNode.getPriority().val()) {
            newNode = newNode.updatePriority(new LeafNode_1.LeafNode(priority));
        }
        childrenNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {
            var newChildNode = exports.resolveDeferredValueSnapshot(childNode, serverValues);
            if (newChildNode !== childNode) {
                newNode = newNode.updateImmediateChild(childName, newChildNode);
            }
        });
        return newNode;
    }
};

//# sourceMappingURL=ServerValues.js.map


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Path_1 = __webpack_require__(2);
var PriorityIndex_1 = __webpack_require__(3);
var CountedSet_1 = __webpack_require__(60);
/**
 * Helper class to store a sparse set of snapshots.
 *
 * @constructor
 */
var SparseSnapshotTree = /** @class */ (function () {
    function SparseSnapshotTree() {
        /**
         * @private
         * @type {Node}
         */
        this.value_ = null;
        /**
         * @private
         * @type {CountedSet}
         */
        this.children_ = null;
    }
    /**
     * Gets the node stored at the given path if one exists.
     *
     * @param {!Path} path Path to look up snapshot for.
     * @return {?Node} The retrieved node, or null.
     */
    SparseSnapshotTree.prototype.find = function (path) {
        if (this.value_ != null) {
            return this.value_.getChild(path);
        }
        else if (!path.isEmpty() && this.children_ != null) {
            var childKey = path.getFront();
            path = path.popFront();
            if (this.children_.contains(childKey)) {
                var childTree = this.children_.get(childKey);
                return childTree.find(path);
            }
            else {
                return null;
            }
        }
        else {
            return null;
        }
    };
    /**
     * Stores the given node at the specified path. If there is already a node
     * at a shallower path, it merges the new data into that snapshot node.
     *
     * @param {!Path} path Path to look up snapshot for.
     * @param {!Node} data The new data, or null.
     */
    SparseSnapshotTree.prototype.remember = function (path, data) {
        if (path.isEmpty()) {
            this.value_ = data;
            this.children_ = null;
        }
        else if (this.value_ !== null) {
            this.value_ = this.value_.updateChild(path, data);
        }
        else {
            if (this.children_ == null) {
                this.children_ = new CountedSet_1.CountedSet();
            }
            var childKey = path.getFront();
            if (!this.children_.contains(childKey)) {
                this.children_.add(childKey, new SparseSnapshotTree());
            }
            var child = this.children_.get(childKey);
            path = path.popFront();
            child.remember(path, data);
        }
    };
    /**
     * Purge the data at path from the cache.
     *
     * @param {!Path} path Path to look up snapshot for.
     * @return {boolean} True if this node should now be removed.
     */
    SparseSnapshotTree.prototype.forget = function (path) {
        if (path.isEmpty()) {
            this.value_ = null;
            this.children_ = null;
            return true;
        }
        else {
            if (this.value_ !== null) {
                if (this.value_.isLeafNode()) {
                    // We're trying to forget a node that doesn't exist
                    return false;
                }
                else {
                    var value = this.value_;
                    this.value_ = null;
                    var self_1 = this;
                    value.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, tree) {
                        self_1.remember(new Path_1.Path(key), tree);
                    });
                    return this.forget(path);
                }
            }
            else if (this.children_ !== null) {
                var childKey = path.getFront();
                path = path.popFront();
                if (this.children_.contains(childKey)) {
                    var safeToRemove = this.children_.get(childKey).forget(path);
                    if (safeToRemove) {
                        this.children_.remove(childKey);
                    }
                }
                if (this.children_.isEmpty()) {
                    this.children_ = null;
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return true;
            }
        }
    };
    /**
     * Recursively iterates through all of the stored tree and calls the
     * callback on each one.
     *
     * @param {!Path} prefixPath Path to look up node for.
     * @param {!Function} func The function to invoke for each tree.
     */
    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {
        if (this.value_ !== null) {
            func(prefixPath, this.value_);
        }
        else {
            this.forEachChild(function (key, tree) {
                var path = new Path_1.Path(prefixPath.toString() + '/' + key);
                tree.forEachTree(path, func);
            });
        }
    };
    /**
     * Iterates through each immediate child and triggers the callback.
     *
     * @param {!Function} func The function to invoke for each child.
     */
    SparseSnapshotTree.prototype.forEachChild = function (func) {
        if (this.children_ !== null) {
            this.children_.each(function (key, tree) {
                func(key, tree);
            });
        }
    };
    return SparseSnapshotTree;
}());
exports.SparseSnapshotTree = SparseSnapshotTree;

//# sourceMappingURL=SparseSnapshotTree.js.map


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
/**
 * Implements a set with a count of elements.
 *
 * @template K, V
 */
var CountedSet = /** @class */ (function () {
    function CountedSet() {
        this.set = {};
    }
    /**
     * @param {!K} item
     * @param {V} val
     */
    CountedSet.prototype.add = function (item, val) {
        this.set[item] = val !== null ? val : true;
    };
    /**
     * @param {!K} key
     * @return {boolean}
     */
    CountedSet.prototype.contains = function (key) {
        return util_1.contains(this.set, key);
    };
    /**
     * @param {!K} item
     * @return {V}
     */
    CountedSet.prototype.get = function (item) {
        return this.contains(item) ? this.set[item] : undefined;
    };
    /**
     * @param {!K} item
     */
    CountedSet.prototype.remove = function (item) {
        delete this.set[item];
    };
    /**
     * Deletes everything in the set
     */
    CountedSet.prototype.clear = function () {
        this.set = {};
    };
    /**
     * True if there's nothing in the set
     * @return {boolean}
     */
    CountedSet.prototype.isEmpty = function () {
        return util_1.isEmpty(this.set);
    };
    /**
     * @return {number} The number of items in the set
     */
    CountedSet.prototype.count = function () {
        return util_1.getCount(this.set);
    };
    /**
     * Run a function on each k,v pair in the set
     * @param {function(K, V)} fn
     */
    CountedSet.prototype.each = function (fn) {
        util_1.forEach(this.set, function (k, v) { return fn(k, v); });
    };
    /**
     * Mostly for debugging
     * @return {Array.<K>} The keys present in this CountedSet
     */
    CountedSet.prototype.keys = function () {
        var keys = [];
        util_1.forEach(this.set, function (k) {
            keys.push(k);
        });
        return keys;
    };
    return CountedSet;
}());
exports.CountedSet = CountedSet;

//# sourceMappingURL=CountedSet.js.map


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Operation_1 = __webpack_require__(10);
var Path_1 = __webpack_require__(2);
/**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @param {!Node} snap
 * @constructor
 * @implements {Operation}
 */
var Overwrite = /** @class */ (function () {
    function Overwrite(source, path, snap) {
        this.source = source;
        this.path = path;
        this.snap = snap;
        /** @inheritDoc */
        this.type = Operation_1.OperationType.OVERWRITE;
    }
    Overwrite.prototype.operationForChild = function (childName) {
        if (this.path.isEmpty()) {
            return new Overwrite(this.source, Path_1.Path.Empty, this.snap.getImmediateChild(childName));
        }
        else {
            return new Overwrite(this.source, this.path.popFront(), this.snap);
        }
    };
    return Overwrite;
}());
exports.Overwrite = Overwrite;

//# sourceMappingURL=Overwrite.js.map


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CacheNode_1 = __webpack_require__(24);
var ChildrenNode_1 = __webpack_require__(4);
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(0);
var ViewCache_1 = __webpack_require__(63);
var View_1 = __webpack_require__(123);
var __referenceConstructor;
/**
 * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
 * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
 * and user writes (set, transaction, update).
 *
 * It's responsible for:
 *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
 *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
 *    applyUserOverwrite, etc.)
 */
var SyncPoint = /** @class */ (function () {
    function SyncPoint() {
        /**
         * The Views being tracked at this location in the tree, stored as a map where the key is a
         * queryId and the value is the View for that query.
         *
         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
         *
         * @type {!Object.<!string, !View>}
         * @private
         */
        this.views_ = {};
    }
    Object.defineProperty(SyncPoint, "__referenceConstructor", {
        get: function () {
            util_1.assert(__referenceConstructor, 'Reference.ts has not been loaded');
            return __referenceConstructor;
        },
        set: function (val) {
            util_1.assert(!__referenceConstructor, '__referenceConstructor has already been defined');
            __referenceConstructor = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {boolean}
     */
    SyncPoint.prototype.isEmpty = function () {
        return util_2.isEmpty(this.views_);
    };
    /**
     *
     * @param {!Operation} operation
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} optCompleteServerCache
     * @return {!Array.<!Event>}
     */
    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {
        var queryId = operation.source.queryId;
        if (queryId !== null) {
            var view = util_2.safeGet(this.views_, queryId);
            util_1.assert(view != null, 'SyncTree gave us an op for an invalid query.');
            return view.applyOperation(operation, writesCache, optCompleteServerCache);
        }
        else {
            var events_1 = [];
            util_2.forEach(this.views_, function (key, view) {
                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));
            });
            return events_1;
        }
    };
    /**
     * Add an event callback for the specified query.
     *
     * @param {!Query} query
     * @param {!EventRegistration} eventRegistration
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} serverCache Complete server cache, if we have it.
     * @param {boolean} serverCacheComplete
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
        var queryId = query.queryIdentifier();
        var view = util_2.safeGet(this.views_, queryId);
        if (!view) {
            // TODO: make writesCache take flag for complete server node
            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);
            var eventCacheComplete = false;
            if (eventCache) {
                eventCacheComplete = true;
            }
            else if (serverCache instanceof ChildrenNode_1.ChildrenNode) {
                eventCache = writesCache.calcCompleteEventChildren(serverCache);
                eventCacheComplete = false;
            }
            else {
                eventCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                eventCacheComplete = false;
            }
            var viewCache = new ViewCache_1.ViewCache(new CacheNode_1.CacheNode(
            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode_1.CacheNode(
            /** @type {!Node} */ (serverCache), serverCacheComplete, false));
            view = new View_1.View(query, viewCache);
            this.views_[queryId] = view;
        }
        // This is guaranteed to exist now, we just created anything that was missing
        view.addEventRegistration(eventRegistration);
        return view.getInitialEvents(eventRegistration);
    };
    /**
     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
     *
     * If query is the default query, we'll check all views for the specified eventRegistration.
     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
     *
     * @param {!Query} query
     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events
     */
    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
        var queryId = query.queryIdentifier();
        var removed = [];
        var cancelEvents = [];
        var hadCompleteView = this.hasCompleteView();
        if (queryId === 'default') {
            // When you do ref.off(...), we search all views for the registration to remove.
            var self_1 = this;
            util_2.forEach(this.views_, function (viewQueryId, view) {
                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
                if (view.isEmpty()) {
                    delete self_1.views_[viewQueryId];
                    // We'll deal with complete views later.
                    if (!view
                        .getQuery()
                        .getQueryParams()
                        .loadsAllData()) {
                        removed.push(view.getQuery());
                    }
                }
            });
        }
        else {
            // remove the callback from the specific view.
            var view = util_2.safeGet(this.views_, queryId);
            if (view) {
                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
                if (view.isEmpty()) {
                    delete this.views_[queryId];
                    // We'll deal with complete views later.
                    if (!view
                        .getQuery()
                        .getQueryParams()
                        .loadsAllData()) {
                        removed.push(view.getQuery());
                    }
                }
            }
        }
        if (hadCompleteView && !this.hasCompleteView()) {
            // We removed our last complete view.
            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));
        }
        return { removed: removed, events: cancelEvents };
    };
    /**
     * @return {!Array.<!View>}
     */
    SyncPoint.prototype.getQueryViews = function () {
        var _this = this;
        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });
        return values.filter(function (view) {
            return !view
                .getQuery()
                .getQueryParams()
                .loadsAllData();
        });
    };
    /**
     *
     * @param {!Path} path The path to the desired complete snapshot
     * @return {?Node} A complete cache, if it exists
     */
    SyncPoint.prototype.getCompleteServerCache = function (path) {
        var serverCache = null;
        util_2.forEach(this.views_, function (key, view) {
            serverCache = serverCache || view.getCompleteServerCache(path);
        });
        return serverCache;
    };
    /**
     * @param {!Query} query
     * @return {?View}
     */
    SyncPoint.prototype.viewForQuery = function (query) {
        var params = query.getQueryParams();
        if (params.loadsAllData()) {
            return this.getCompleteView();
        }
        else {
            var queryId = query.queryIdentifier();
            return util_2.safeGet(this.views_, queryId);
        }
    };
    /**
     * @param {!Query} query
     * @return {boolean}
     */
    SyncPoint.prototype.viewExistsForQuery = function (query) {
        return this.viewForQuery(query) != null;
    };
    /**
     * @return {boolean}
     */
    SyncPoint.prototype.hasCompleteView = function () {
        return this.getCompleteView() != null;
    };
    /**
     * @return {?View}
     */
    SyncPoint.prototype.getCompleteView = function () {
        var completeView = util_2.findValue(this.views_, function (view) {
            return view
                .getQuery()
                .getQueryParams()
                .loadsAllData();
        });
        return completeView || null;
    };
    return SyncPoint;
}());
exports.SyncPoint = SyncPoint;

//# sourceMappingURL=SyncPoint.js.map


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ChildrenNode_1 = __webpack_require__(4);
var CacheNode_1 = __webpack_require__(24);
/**
 * Stores the data we have cached for a view.
 *
 * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
 *
 * @constructor
 */
var ViewCache = /** @class */ (function () {
    /**
     *
     * @param {!CacheNode} eventCache_
     * @param {!CacheNode} serverCache_
     */
    function ViewCache(eventCache_, serverCache_) {
        this.eventCache_ = eventCache_;
        this.serverCache_ = serverCache_;
    }
    /**
     * @param {!Node} eventSnap
     * @param {boolean} complete
     * @param {boolean} filtered
     * @return {!ViewCache}
     */
    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {
        return new ViewCache(new CacheNode_1.CacheNode(eventSnap, complete, filtered), this.serverCache_);
    };
    /**
     * @param {!Node} serverSnap
     * @param {boolean} complete
     * @param {boolean} filtered
     * @return {!ViewCache}
     */
    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {
        return new ViewCache(this.eventCache_, new CacheNode_1.CacheNode(serverSnap, complete, filtered));
    };
    /**
     * @return {!CacheNode}
     */
    ViewCache.prototype.getEventCache = function () {
        return this.eventCache_;
    };
    /**
     * @return {?Node}
     */
    ViewCache.prototype.getCompleteEventSnap = function () {
        return this.eventCache_.isFullyInitialized()
            ? this.eventCache_.getNode()
            : null;
    };
    /**
     * @return {!CacheNode}
     */
    ViewCache.prototype.getServerCache = function () {
        return this.serverCache_;
    };
    /**
     * @return {?Node}
     */
    ViewCache.prototype.getCompleteServerSnap = function () {
        return this.serverCache_.isFullyInitialized()
            ? this.serverCache_.getNode()
            : null;
    };
    /**
     * @const
     * @type {ViewCache}
     */
    ViewCache.Empty = new ViewCache(new CacheNode_1.CacheNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, 
    /*fullyInitialized=*/ false, 
    /*filtered=*/ false), new CacheNode_1.CacheNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, 
    /*fullyInitialized=*/ false, 
    /*filtered=*/ false));
    return ViewCache;
}());
exports.ViewCache = ViewCache;

//# sourceMappingURL=ViewCache.js.map


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
/**
 * Returns the delta from the previous call to get stats.
 *
 * @param collection_ The collection to "listen" to.
 * @constructor
 */
var StatsListener = /** @class */ (function () {
    function StatsListener(collection_) {
        this.collection_ = collection_;
        this.last_ = null;
    }
    StatsListener.prototype.get = function () {
        var newStats = this.collection_.get();
        var delta = util_1.clone(newStats);
        if (this.last_) {
            util_1.forEach(this.last_, function (stat, value) {
                delta[stat] = delta[stat] - value;
            });
        }
        this.last_ = newStats;
        return delta;
    };
    return StatsListener;
}());
exports.StatsListener = StatsListener;

//# sourceMappingURL=StatsListener.js.map


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var app_1 = __webpack_require__(8);
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(0);
var util_3 = __webpack_require__(0);
var util_4 = __webpack_require__(1);
var Path_1 = __webpack_require__(2);
var VisibilityMonitor_1 = __webpack_require__(135);
var OnlineMonitor_1 = __webpack_require__(136);
var util_5 = __webpack_require__(0);
var Connection_1 = __webpack_require__(67);
var util_6 = __webpack_require__(0);
var util_7 = __webpack_require__(0);
var ServerActions_1 = __webpack_require__(70);
var RECONNECT_MIN_DELAY = 1000;
var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)
var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)
var RECONNECT_DELAY_MULTIPLIER = 1.3;
var RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
var SERVER_KILL_INTERRUPT_REASON = 'server_kill';
// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
var INVALID_AUTH_TOKEN_THRESHOLD = 3;
/**
 * Firebase connection.  Abstracts wire protocol and handles reconnecting.
 *
 * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
 * in quotes to make sure the closure compiler does not minify them.
 */
var PersistentConnection = /** @class */ (function (_super) {
    __extends(PersistentConnection, _super);
    /**
     * @implements {ServerActions}
     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
     * @param onConnectStatus_
     * @param onServerInfoUpdate_
     * @param authTokenProvider_
     * @param authOverride_
     */
    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {
        var _this = _super.call(this) || this;
        _this.repoInfo_ = repoInfo_;
        _this.onDataUpdate_ = onDataUpdate_;
        _this.onConnectStatus_ = onConnectStatus_;
        _this.onServerInfoUpdate_ = onServerInfoUpdate_;
        _this.authTokenProvider_ = authTokenProvider_;
        _this.authOverride_ = authOverride_;
        // Used for diagnostic logging.
        _this.id = PersistentConnection.nextPersistentConnectionId_++;
        _this.log_ = util_4.logWrapper('p:' + _this.id + ':');
        /** @private {Object} */
        _this.interruptReasons_ = {};
        _this.listens_ = {};
        _this.outstandingPuts_ = [];
        _this.outstandingPutCount_ = 0;
        _this.onDisconnectRequestQueue_ = [];
        _this.connected_ = false;
        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
        _this.securityDebugCallback_ = null;
        _this.lastSessionId = null;
        /** @private {number|null} */
        _this.establishConnectionTimer_ = null;
        /** @private {boolean} */
        _this.visible_ = false;
        // Before we get connected, we keep a queue of pending messages to send.
        _this.requestCBHash_ = {};
        _this.requestNumber_ = 0;
        /** @private {?{
         *   sendRequest(Object),
         *   close()
         * }} */
        _this.realtime_ = null;
        /** @private {string|null} */
        _this.authToken_ = null;
        _this.forceTokenRefresh_ = false;
        _this.invalidAuthTokenCount_ = 0;
        _this.firstConnection_ = true;
        _this.lastConnectionAttemptTime_ = null;
        _this.lastConnectionEstablishedTime_ = null;
        if (authOverride_ && !util_7.isNodeSdk()) {
            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
        }
        _this.scheduleConnect_(0);
        VisibilityMonitor_1.VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);
        if (repoInfo_.host.indexOf('fblocal') === -1) {
            OnlineMonitor_1.OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);
        }
        return _this;
    }
    /**
     * @param {!string} action
     * @param {*} body
     * @param {function(*)=} onResponse
     * @protected
     */
    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {
        var curReqNum = ++this.requestNumber_;
        var msg = { r: curReqNum, a: action, b: body };
        this.log_(util_2.stringify(msg));
        util_3.assert(this.connected_, "sendRequest call when we're not connected not allowed.");
        this.realtime_.sendRequest(msg);
        if (onResponse) {
            this.requestCBHash_[curReqNum] = onResponse;
        }
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {
        var queryId = query.queryIdentifier();
        var pathString = query.path.toString();
        this.log_('Listen called for ' + pathString + ' ' + queryId);
        this.listens_[pathString] = this.listens_[pathString] || {};
        util_3.assert(query.getQueryParams().isDefault() ||
            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');
        util_3.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');
        var listenSpec = {
            onComplete: onComplete,
            hashFn: currentHashFn,
            query: query,
            tag: tag
        };
        this.listens_[pathString][queryId] = listenSpec;
        if (this.connected_) {
            this.sendListen_(listenSpec);
        }
    };
    /**
     * @param {!{onComplete(),
     *           hashFn():!string,
     *           query: !Query,
     *           tag: ?number}} listenSpec
     * @private
     */
    PersistentConnection.prototype.sendListen_ = function (listenSpec) {
        var _this = this;
        var query = listenSpec.query;
        var pathString = query.path.toString();
        var queryId = query.queryIdentifier();
        this.log_('Listen on ' + pathString + ' for ' + queryId);
        var req = { /*path*/ p: pathString };
        var action = 'q';
        // Only bother to send query if it's non-default.
        if (listenSpec.tag) {
            req['q'] = query.queryObject();
            req['t'] = listenSpec.tag;
        }
        req['h'] = listenSpec.hashFn();
        this.sendRequest(action, req, function (message) {
            var payload = message['d'];
            var status = message['s'];
            // print warnings in any case...
            PersistentConnection.warnOnListenWarnings_(payload, query);
            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];
            // only trigger actions if the listen hasn't been removed and readded
            if (currentListenSpec === listenSpec) {
                _this.log_('listen response', message);
                if (status !== 'ok') {
                    _this.removeListen_(pathString, queryId);
                }
                if (listenSpec.onComplete) {
                    listenSpec.onComplete(status, payload);
                }
            }
        });
    };
    /**
     * @param {*} payload
     * @param {!Query} query
     * @private
     */
    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {
        if (payload && typeof payload === 'object' && util_1.contains(payload, 'w')) {
            var warnings = util_1.safeGet(payload, 'w');
            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                var indexSpec = '".indexOn": "' +
                    query
                        .getQueryParams()
                        .getIndex()
                        .toString() +
                    '"';
                var indexPath = query.path.toString();
                util_4.warn("Using an unspecified index. Your data will be downloaded and " +
                    ("filtered on the client. Consider adding " + indexSpec + " at ") +
                    (indexPath + " to your security rules for better performance."));
            }
        }
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.refreshAuthToken = function (token) {
        this.authToken_ = token;
        this.log_('Auth token refreshed');
        if (this.authToken_) {
            this.tryAuth();
        }
        else {
            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
            //the credential so we dont become authenticated next time we connect.
            if (this.connected_) {
                this.sendRequest('unauth', {}, function () { });
            }
        }
        this.reduceReconnectDelayIfAdminCredential_(token);
    };
    /**
     * @param {!string} credential
     * @private
     */
    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {
        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
        var isFirebaseSecret = credential && credential.length === 40;
        if (isFirebaseSecret || util_5.isAdmin(credential)) {
            this.log_('Admin auth credential detected.  Reducing max reconnect time.');
            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
        }
    };
    /**
     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
     * a auth revoked (the connection is closed).
     */
    PersistentConnection.prototype.tryAuth = function () {
        var _this = this;
        if (this.connected_ && this.authToken_) {
            var token_1 = this.authToken_;
            var authMethod = util_5.isValidFormat(token_1) ? 'auth' : 'gauth';
            var requestData = { cred: token_1 };
            if (this.authOverride_ === null) {
                requestData['noauth'] = true;
            }
            else if (typeof this.authOverride_ === 'object') {
                requestData['authvar'] = this.authOverride_;
            }
            this.sendRequest(authMethod, requestData, function (res) {
                var status = res['s'];
                var data = res['d'] || 'error';
                if (_this.authToken_ === token_1) {
                    if (status === 'ok') {
                        _this.invalidAuthTokenCount_ = 0;
                    }
                    else {
                        // Triggers reconnect and force refresh for auth token
                        _this.onAuthRevoked_(status, data);
                    }
                }
            });
        }
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.unlisten = function (query, tag) {
        var pathString = query.path.toString();
        var queryId = query.queryIdentifier();
        this.log_('Unlisten called for ' + pathString + ' ' + queryId);
        util_3.assert(query.getQueryParams().isDefault() ||
            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');
        var listen = this.removeListen_(pathString, queryId);
        if (listen && this.connected_) {
            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);
        }
    };
    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {
        this.log_('Unlisten on ' + pathString + ' for ' + queryId);
        var req = { /*path*/ p: pathString };
        var action = 'n';
        // Only bother sending queryId if it's non-default.
        if (tag) {
            req['q'] = queryObj;
            req['t'] = tag;
        }
        this.sendRequest(action, req);
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {
        if (this.connected_) {
            this.sendOnDisconnect_('o', pathString, data, onComplete);
        }
        else {
            this.onDisconnectRequestQueue_.push({
                pathString: pathString,
                action: 'o',
                data: data,
                onComplete: onComplete
            });
        }
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {
        if (this.connected_) {
            this.sendOnDisconnect_('om', pathString, data, onComplete);
        }
        else {
            this.onDisconnectRequestQueue_.push({
                pathString: pathString,
                action: 'om',
                data: data,
                onComplete: onComplete
            });
        }
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {
        if (this.connected_) {
            this.sendOnDisconnect_('oc', pathString, null, onComplete);
        }
        else {
            this.onDisconnectRequestQueue_.push({
                pathString: pathString,
                action: 'oc',
                data: null,
                onComplete: onComplete
            });
        }
    };
    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {
        var request = { /*path*/ p: pathString, /*data*/ d: data };
        this.log_('onDisconnect ' + action, request);
        this.sendRequest(action, request, function (response) {
            if (onComplete) {
                setTimeout(function () {
                    onComplete(response['s'], response['d']);
                }, Math.floor(0));
            }
        });
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
        this.putInternal('p', pathString, data, onComplete, hash);
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {
        this.putInternal('m', pathString, data, onComplete, hash);
    };
    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {
        var request = {
            /*path*/ p: pathString,
            /*data*/ d: data
        };
        if (hash !== undefined)
            request['h'] = hash;
        // TODO: Only keep track of the most recent put for a given path?
        this.outstandingPuts_.push({
            action: action,
            request: request,
            onComplete: onComplete
        });
        this.outstandingPutCount_++;
        var index = this.outstandingPuts_.length - 1;
        if (this.connected_) {
            this.sendPut_(index);
        }
        else {
            this.log_('Buffering put: ' + pathString);
        }
    };
    PersistentConnection.prototype.sendPut_ = function (index) {
        var _this = this;
        var action = this.outstandingPuts_[index].action;
        var request = this.outstandingPuts_[index].request;
        var onComplete = this.outstandingPuts_[index].onComplete;
        this.outstandingPuts_[index].queued = this.connected_;
        this.sendRequest(action, request, function (message) {
            _this.log_(action + ' response', message);
            delete _this.outstandingPuts_[index];
            _this.outstandingPutCount_--;
            // Clean up array occasionally.
            if (_this.outstandingPutCount_ === 0) {
                _this.outstandingPuts_ = [];
            }
            if (onComplete)
                onComplete(message['s'], message['d']);
        });
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.reportStats = function (stats) {
        var _this = this;
        // If we're not connected, we just drop the stats.
        if (this.connected_) {
            var request = { /*counters*/ c: stats };
            this.log_('reportStats', request);
            this.sendRequest(/*stats*/ 's', request, function (result) {
                var status = result['s'];
                if (status !== 'ok') {
                    var errorReason = result['d'];
                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);
                }
            });
        }
    };
    /**
     * @param {*} message
     * @private
     */
    PersistentConnection.prototype.onDataMessage_ = function (message) {
        if ('r' in message) {
            // this is a response
            this.log_('from server: ' + util_2.stringify(message));
            var reqNum = message['r'];
            var onResponse = this.requestCBHash_[reqNum];
            if (onResponse) {
                delete this.requestCBHash_[reqNum];
                onResponse(message['b']);
            }
        }
        else if ('error' in message) {
            throw 'A server-side error has occurred: ' + message['error'];
        }
        else if ('a' in message) {
            // a and b are action and body, respectively
            this.onDataPush_(message['a'], message['b']);
        }
    };
    PersistentConnection.prototype.onDataPush_ = function (action, body) {
        this.log_('handleServerMessage', action, body);
        if (action === 'd')
            this.onDataUpdate_(body['p'], body['d'], 
            /*isMerge*/ false, body['t']);
        else if (action === 'm')
            this.onDataUpdate_(body['p'], body['d'], 
            /*isMerge=*/ true, body['t']);
        else if (action === 'c')
            this.onListenRevoked_(body['p'], body['q']);
        else if (action === 'ac')
            this.onAuthRevoked_(body['s'], body['d']);
        else if (action === 'sd')
            this.onSecurityDebugPacket_(body);
        else
            util_4.error('Unrecognized action received from server: ' +
                util_2.stringify(action) +
                '\nAre you using the latest client?');
    };
    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {
        this.log_('connection ready');
        this.connected_ = true;
        this.lastConnectionEstablishedTime_ = new Date().getTime();
        this.handleTimestamp_(timestamp);
        this.lastSessionId = sessionId;
        if (this.firstConnection_) {
            this.sendConnectStats_();
        }
        this.restoreState_();
        this.firstConnection_ = false;
        this.onConnectStatus_(true);
    };
    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {
        var _this = this;
        util_3.assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
        if (this.establishConnectionTimer_) {
            clearTimeout(this.establishConnectionTimer_);
        }
        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
        this.establishConnectionTimer_ = setTimeout(function () {
            _this.establishConnectionTimer_ = null;
            _this.establishConnection_();
        }, Math.floor(timeout));
    };
    /**
     * @param {boolean} visible
     * @private
     */
    PersistentConnection.prototype.onVisible_ = function (visible) {
        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
        if (visible &&
            !this.visible_ &&
            this.reconnectDelay_ === this.maxReconnectDelay_) {
            this.log_('Window became visible.  Reducing delay.');
            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            if (!this.realtime_) {
                this.scheduleConnect_(0);
            }
        }
        this.visible_ = visible;
    };
    PersistentConnection.prototype.onOnline_ = function (online) {
        if (online) {
            this.log_('Browser went online.');
            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            if (!this.realtime_) {
                this.scheduleConnect_(0);
            }
        }
        else {
            this.log_('Browser went offline.  Killing connection.');
            if (this.realtime_) {
                this.realtime_.close();
            }
        }
    };
    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {
        this.log_('data client disconnected');
        this.connected_ = false;
        this.realtime_ = null;
        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
        this.cancelSentTransactions_();
        // Clear out the pending requests.
        this.requestCBHash_ = {};
        if (this.shouldReconnect_()) {
            if (!this.visible_) {
                this.log_("Window isn't visible.  Delaying reconnect.");
                this.reconnectDelay_ = this.maxReconnectDelay_;
                this.lastConnectionAttemptTime_ = new Date().getTime();
            }
            else if (this.lastConnectionEstablishedTime_) {
                // If we've been connected long enough, reset reconnect delay to minimum.
                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)
                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                this.lastConnectionEstablishedTime_ = null;
            }
            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
            reconnectDelay = Math.random() * reconnectDelay;
            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
            this.scheduleConnect_(reconnectDelay);
            // Adjust reconnect delay for next time.
            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
        }
        this.onConnectStatus_(false);
    };
    PersistentConnection.prototype.establishConnection_ = function () {
        if (this.shouldReconnect_()) {
            this.log_('Making a connection attempt');
            this.lastConnectionAttemptTime_ = new Date().getTime();
            this.lastConnectionEstablishedTime_ = null;
            var onDataMessage_1 = this.onDataMessage_.bind(this);
            var onReady_1 = this.onReady_.bind(this);
            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;
            var self_1 = this;
            var lastSessionId_1 = this.lastSessionId;
            var canceled_1 = false;
            var connection_1 = null;
            var closeFn_1 = function () {
                if (connection_1) {
                    connection_1.close();
                }
                else {
                    canceled_1 = true;
                    onDisconnect_1();
                }
            };
            var sendRequestFn = function (msg) {
                util_3.assert(connection_1, "sendRequest call when we're not connected not allowed.");
                connection_1.sendRequest(msg);
            };
            this.realtime_ = {
                close: closeFn_1,
                sendRequest: sendRequestFn
            };
            var forceRefresh = this.forceTokenRefresh_;
            this.forceTokenRefresh_ = false;
            // First fetch auth token, and establish connection after fetching the token was successful
            this.authTokenProvider_
                .getToken(forceRefresh)
                .then(function (result) {
                if (!canceled_1) {
                    util_4.log('getToken() completed. Creating connection.');
                    self_1.authToken_ = result && result.accessToken;
                    connection_1 = new Connection_1.Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, 
                    /* onKill= */ function (reason) {
                        util_4.warn(reason + ' (' + self_1.repoInfo_.toString() + ')');
                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);
                    }, lastSessionId_1);
                }
                else {
                    util_4.log('getToken() completed but was canceled');
                }
            })
                .then(null, function (error) {
                self_1.log_('Failed to get token: ' + error);
                if (!canceled_1) {
                    if (util_6.CONSTANTS.NODE_ADMIN) {
                        // This may be a critical error for the Admin Node.js SDK, so log a warning.
                        // But getToken() may also just have temporarily failed, so we still want to
                        // continue retrying.
                        util_4.warn(error);
                    }
                    closeFn_1();
                }
            });
        }
    };
    /**
     * @param {string} reason
     */
    PersistentConnection.prototype.interrupt = function (reason) {
        util_4.log('Interrupting connection for reason: ' + reason);
        this.interruptReasons_[reason] = true;
        if (this.realtime_) {
            this.realtime_.close();
        }
        else {
            if (this.establishConnectionTimer_) {
                clearTimeout(this.establishConnectionTimer_);
                this.establishConnectionTimer_ = null;
            }
            if (this.connected_) {
                this.onRealtimeDisconnect_();
            }
        }
    };
    /**
     * @param {string} reason
     */
    PersistentConnection.prototype.resume = function (reason) {
        util_4.log('Resuming connection for reason: ' + reason);
        delete this.interruptReasons_[reason];
        if (util_1.isEmpty(this.interruptReasons_)) {
            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            if (!this.realtime_) {
                this.scheduleConnect_(0);
            }
        }
    };
    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {
        var delta = timestamp - new Date().getTime();
        this.onServerInfoUpdate_({ serverTimeOffset: delta });
    };
    PersistentConnection.prototype.cancelSentTransactions_ = function () {
        for (var i = 0; i < this.outstandingPuts_.length; i++) {
            var put = this.outstandingPuts_[i];
            if (put && /*hash*/ 'h' in put.request && put.queued) {
                if (put.onComplete)
                    put.onComplete('disconnect');
                delete this.outstandingPuts_[i];
                this.outstandingPutCount_--;
            }
        }
        // Clean up array occasionally.
        if (this.outstandingPutCount_ === 0)
            this.outstandingPuts_ = [];
    };
    /**
     * @param {!string} pathString
     * @param {Array.<*>=} query
     * @private
     */
    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {
        // Remove the listen and manufacture a "permission_denied" error for the failed listen.
        var queryId;
        if (!query) {
            queryId = 'default';
        }
        else {
            queryId = query.map(function (q) { return util_4.ObjectToUniqueKey(q); }).join('$');
        }
        var listen = this.removeListen_(pathString, queryId);
        if (listen && listen.onComplete)
            listen.onComplete('permission_denied');
    };
    /**
     * @param {!string} pathString
     * @param {!string} queryId
     * @return {{queries:Array.<Query>, onComplete:function(string)}}
     * @private
     */
    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {
        var normalizedPathString = new Path_1.Path(pathString).toString(); // normalize path.
        var listen;
        if (this.listens_[normalizedPathString] !== undefined) {
            listen = this.listens_[normalizedPathString][queryId];
            delete this.listens_[normalizedPathString][queryId];
            if (util_1.getCount(this.listens_[normalizedPathString]) === 0) {
                delete this.listens_[normalizedPathString];
            }
        }
        else {
            // all listens for this path has already been removed
            listen = undefined;
        }
        return listen;
    };
    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {
        util_4.log('Auth token revoked: ' + statusCode + '/' + explanation);
        this.authToken_ = null;
        this.forceTokenRefresh_ = true;
        this.realtime_.close();
        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
            // We'll wait a couple times before logging the warning / increasing the
            // retry period since oauth tokens will report as "invalid" if they're
            // just expired. Plus there may be transient issues that resolve themselves.
            this.invalidAuthTokenCount_++;
            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {
                // Set a long reconnect delay because recovery is unlikely
                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                // Notify the auth token provider that the token is invalid, which will log
                // a warning
                this.authTokenProvider_.notifyForInvalidToken();
            }
        }
    };
    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {
        if (this.securityDebugCallback_) {
            this.securityDebugCallback_(body);
        }
        else {
            if ('msg' in body && typeof console !== 'undefined') {
                console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
            }
        }
    };
    PersistentConnection.prototype.restoreState_ = function () {
        var _this = this;
        //Re-authenticate ourselves if we have a credential stored.
        this.tryAuth();
        // Puts depend on having received the corresponding data update from the server before they complete, so we must
        // make sure to send listens before puts.
        util_1.forEach(this.listens_, function (pathString, queries) {
            util_1.forEach(queries, function (key, listenSpec) {
                _this.sendListen_(listenSpec);
            });
        });
        for (var i = 0; i < this.outstandingPuts_.length; i++) {
            if (this.outstandingPuts_[i])
                this.sendPut_(i);
        }
        while (this.onDisconnectRequestQueue_.length) {
            var request = this.onDisconnectRequestQueue_.shift();
            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
        }
    };
    /**
     * Sends client stats for first connection
     * @private
     */
    PersistentConnection.prototype.sendConnectStats_ = function () {
        var stats = {};
        var clientName = 'js';
        if (util_6.CONSTANTS.NODE_ADMIN) {
            clientName = 'admin_node';
        }
        else if (util_6.CONSTANTS.NODE_CLIENT) {
            clientName = 'node';
        }
        stats['sdk.' + clientName + '.' + app_1.default.SDK_VERSION.replace(/\./g, '-')] = 1;
        if (util_7.isMobileCordova()) {
            stats['framework.cordova'] = 1;
        }
        else if (util_7.isReactNative()) {
            stats['framework.reactnative'] = 1;
        }
        this.reportStats(stats);
    };
    /**
     * @return {boolean}
     * @private
     */
    PersistentConnection.prototype.shouldReconnect_ = function () {
        var online = OnlineMonitor_1.OnlineMonitor.getInstance().currentlyOnline();
        return util_1.isEmpty(this.interruptReasons_) && online;
    };
    /**
     * @private
     */
    PersistentConnection.nextPersistentConnectionId_ = 0;
    /**
     * Counter for number of connections created. Mainly used for tagging in the logs
     * @type {number}
     * @private
     */
    PersistentConnection.nextConnectionId_ = 0;
    return PersistentConnection;
}(ServerActions_1.ServerActions));
exports.PersistentConnection = PersistentConnection;

//# sourceMappingURL=PersistentConnection.js.map


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
/**
 * Base class to be used if you want to emit events. Call the constructor with
 * the set of allowed event names.
 */
var EventEmitter = /** @class */ (function () {
    /**
     * @param {!Array.<string>} allowedEvents_
     */
    function EventEmitter(allowedEvents_) {
        this.allowedEvents_ = allowedEvents_;
        this.listeners_ = {};
        util_1.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
    }
    /**
     * To be called by derived classes to trigger events.
     * @param {!string} eventType
     * @param {...*} var_args
     */
    EventEmitter.prototype.trigger = function (eventType) {
        var var_args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            var_args[_i - 1] = arguments[_i];
        }
        if (Array.isArray(this.listeners_[eventType])) {
            // Clone the list, since callbacks could add/remove listeners.
            var listeners = this.listeners_[eventType].slice();
            for (var i = 0; i < listeners.length; i++) {
                listeners[i].callback.apply(listeners[i].context, var_args);
            }
        }
    };
    EventEmitter.prototype.on = function (eventType, callback, context) {
        this.validateEventType_(eventType);
        this.listeners_[eventType] = this.listeners_[eventType] || [];
        this.listeners_[eventType].push({ callback: callback, context: context });
        var eventData = this.getInitialEvent(eventType);
        if (eventData) {
            callback.apply(context, eventData);
        }
    };
    EventEmitter.prototype.off = function (eventType, callback, context) {
        this.validateEventType_(eventType);
        var listeners = this.listeners_[eventType] || [];
        for (var i = 0; i < listeners.length; i++) {
            if (listeners[i].callback === callback &&
                (!context || context === listeners[i].context)) {
                listeners.splice(i, 1);
                return;
            }
        }
    };
    EventEmitter.prototype.validateEventType_ = function (eventType) {
        util_1.assert(this.allowedEvents_.find(function (et) {
            return et === eventType;
        }), 'Unknown event: ' + eventType);
    };
    return EventEmitter;
}());
exports.EventEmitter = EventEmitter;

//# sourceMappingURL=EventEmitter.js.map


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(1);
var storage_1 = __webpack_require__(18);
var Constants_1 = __webpack_require__(19);
var TransportManager_1 = __webpack_require__(137);
// Abort upgrade attempt if it takes longer than 60s.
var UPGRADE_TIMEOUT = 60000;
// For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
// but we've sent/received enough bytes, we don't cancel the connection.
var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
var MESSAGE_TYPE = 't';
var MESSAGE_DATA = 'd';
var CONTROL_SHUTDOWN = 's';
var CONTROL_RESET = 'r';
var CONTROL_ERROR = 'e';
var CONTROL_PONG = 'o';
var SWITCH_ACK = 'a';
var END_TRANSMISSION = 'n';
var PING = 'p';
var SERVER_HELLO = 'h';
/**
 * Creates a new real-time connection to the server using whichever method works
 * best in the current browser.
 *
 * @constructor
 */
var Connection = /** @class */ (function () {
    /**
     * @param {!string} id - an id for this connection
     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to
     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives
     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.
     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost
     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.
     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
     */
    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
        this.id = id;
        this.repoInfo_ = repoInfo_;
        this.onMessage_ = onMessage_;
        this.onReady_ = onReady_;
        this.onDisconnect_ = onDisconnect_;
        this.onKill_ = onKill_;
        this.lastSessionId = lastSessionId;
        this.connectionCount = 0;
        this.pendingDataMessages = [];
        this.state_ = 0 /* CONNECTING */;
        this.log_ = util_1.logWrapper('c:' + this.id + ':');
        this.transportManager_ = new TransportManager_1.TransportManager(repoInfo_);
        this.log_('Connection created');
        this.start_();
    }
    /**
     * Starts a connection attempt
     * @private
     */
    Connection.prototype.start_ = function () {
        var _this = this;
        var conn = this.transportManager_.initialTransport();
        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);
        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
        // can consider the transport healthy.
        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
        var onMessageReceived = this.connReceiver_(this.conn_);
        var onConnectionLost = this.disconnReceiver_(this.conn_);
        this.tx_ = this.conn_;
        this.rx_ = this.conn_;
        this.secondaryConn_ = null;
        this.isHealthy_ = false;
        /*
         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
         * still have the context of your originating frame.
         */
        setTimeout(function () {
            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
        }, Math.floor(0));
        var healthyTimeout_ms = conn['healthyTimeout'] || 0;
        if (healthyTimeout_ms > 0) {
            this.healthyTimeout_ = util_1.setTimeoutNonBlocking(function () {
                _this.healthyTimeout_ = null;
                if (!_this.isHealthy_) {
                    if (_this.conn_ &&
                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                        _this.log_('Connection exceeded healthy timeout but has received ' +
                            _this.conn_.bytesReceived +
                            ' bytes.  Marking connection healthy.');
                        _this.isHealthy_ = true;
                        _this.conn_.markConnectionHealthy();
                    }
                    else if (_this.conn_ &&
                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                        _this.log_('Connection exceeded healthy timeout but has sent ' +
                            _this.conn_.bytesSent +
                            ' bytes.  Leaving connection alive.');
                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
                        // the server.
                    }
                    else {
                        _this.log_('Closing unhealthy connection after timeout.');
                        _this.close();
                    }
                }
            }, Math.floor(healthyTimeout_ms));
        }
    };
    /**
     * @return {!string}
     * @private
     */
    Connection.prototype.nextTransportId_ = function () {
        return 'c:' + this.id + ':' + this.connectionCount++;
    };
    Connection.prototype.disconnReceiver_ = function (conn) {
        var _this = this;
        return function (everConnected) {
            if (conn === _this.conn_) {
                _this.onConnectionLost_(everConnected);
            }
            else if (conn === _this.secondaryConn_) {
                _this.log_('Secondary connection lost.');
                _this.onSecondaryConnectionLost_();
            }
            else {
                _this.log_('closing an old connection');
            }
        };
    };
    Connection.prototype.connReceiver_ = function (conn) {
        var _this = this;
        return function (message) {
            if (_this.state_ != 2 /* DISCONNECTED */) {
                if (conn === _this.rx_) {
                    _this.onPrimaryMessageReceived_(message);
                }
                else if (conn === _this.secondaryConn_) {
                    _this.onSecondaryMessageReceived_(message);
                }
                else {
                    _this.log_('message on old connection');
                }
            }
        };
    };
    /**
     *
     * @param {Object} dataMsg An arbitrary data message to be sent to the server
     */
    Connection.prototype.sendRequest = function (dataMsg) {
        // wrap in a data message envelope and send it on
        var msg = { t: 'd', d: dataMsg };
        this.sendData_(msg);
    };
    Connection.prototype.tryCleanupConnection = function () {
        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
            this.conn_ = this.secondaryConn_;
            this.secondaryConn_ = null;
            // the server will shutdown the old connection
        }
    };
    Connection.prototype.onSecondaryControl_ = function (controlData) {
        if (MESSAGE_TYPE in controlData) {
            var cmd = controlData[MESSAGE_TYPE];
            if (cmd === SWITCH_ACK) {
                this.upgradeIfSecondaryHealthy_();
            }
            else if (cmd === CONTROL_RESET) {
                // Most likely the session wasn't valid. Abandon the switch attempt
                this.log_('Got a reset on secondary, closing it');
                this.secondaryConn_.close();
                // If we were already using this connection for something, than we need to fully close
                if (this.tx_ === this.secondaryConn_ ||
                    this.rx_ === this.secondaryConn_) {
                    this.close();
                }
            }
            else if (cmd === CONTROL_PONG) {
                this.log_('got pong on secondary.');
                this.secondaryResponsesRequired_--;
                this.upgradeIfSecondaryHealthy_();
            }
        }
    };
    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {
        var layer = util_1.requireKey('t', parsedData);
        var data = util_1.requireKey('d', parsedData);
        if (layer == 'c') {
            this.onSecondaryControl_(data);
        }
        else if (layer == 'd') {
            // got a data message, but we're still second connection. Need to buffer it up
            this.pendingDataMessages.push(data);
        }
        else {
            throw new Error('Unknown protocol layer: ' + layer);
        }
    };
    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {
        if (this.secondaryResponsesRequired_ <= 0) {
            this.log_('Secondary connection is healthy.');
            this.isHealthy_ = true;
            this.secondaryConn_.markConnectionHealthy();
            this.proceedWithUpgrade_();
        }
        else {
            // Send a ping to make sure the connection is healthy.
            this.log_('sending ping on secondary.');
            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });
        }
    };
    Connection.prototype.proceedWithUpgrade_ = function () {
        // tell this connection to consider itself open
        this.secondaryConn_.start();
        // send ack
        this.log_('sending client ack on secondary');
        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });
        // send end packet on primary transport, switch to sending on this one
        // can receive on this one, buffer responses until end received on primary transport
        this.log_('Ending transmission on primary');
        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });
        this.tx_ = this.secondaryConn_;
        this.tryCleanupConnection();
    };
    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {
        // Must refer to parsedData properties in quotes, so closure doesn't touch them.
        var layer = util_1.requireKey('t', parsedData);
        var data = util_1.requireKey('d', parsedData);
        if (layer == 'c') {
            this.onControl_(data);
        }
        else if (layer == 'd') {
            this.onDataMessage_(data);
        }
    };
    Connection.prototype.onDataMessage_ = function (message) {
        this.onPrimaryResponse_();
        // We don't do anything with data messages, just kick them up a level
        this.onMessage_(message);
    };
    Connection.prototype.onPrimaryResponse_ = function () {
        if (!this.isHealthy_) {
            this.primaryResponsesRequired_--;
            if (this.primaryResponsesRequired_ <= 0) {
                this.log_('Primary connection is healthy.');
                this.isHealthy_ = true;
                this.conn_.markConnectionHealthy();
            }
        }
    };
    Connection.prototype.onControl_ = function (controlData) {
        var cmd = util_1.requireKey(MESSAGE_TYPE, controlData);
        if (MESSAGE_DATA in controlData) {
            var payload = controlData[MESSAGE_DATA];
            if (cmd === SERVER_HELLO) {
                this.onHandshake_(payload);
            }
            else if (cmd === END_TRANSMISSION) {
                this.log_('recvd end transmission on primary');
                this.rx_ = this.secondaryConn_;
                for (var i = 0; i < this.pendingDataMessages.length; ++i) {
                    this.onDataMessage_(this.pendingDataMessages[i]);
                }
                this.pendingDataMessages = [];
                this.tryCleanupConnection();
            }
            else if (cmd === CONTROL_SHUTDOWN) {
                // This was previously the 'onKill' callback passed to the lower-level connection
                // payload in this case is the reason for the shutdown. Generally a human-readable error
                this.onConnectionShutdown_(payload);
            }
            else if (cmd === CONTROL_RESET) {
                // payload in this case is the host we should contact
                this.onReset_(payload);
            }
            else if (cmd === CONTROL_ERROR) {
                util_1.error('Server Error: ' + payload);
            }
            else if (cmd === CONTROL_PONG) {
                this.log_('got pong on primary.');
                this.onPrimaryResponse_();
                this.sendPingOnPrimaryIfNecessary_();
            }
            else {
                util_1.error('Unknown control packet command: ' + cmd);
            }
        }
    };
    /**
     *
     * @param {Object} handshake The handshake data returned from the server
     * @private
     */
    Connection.prototype.onHandshake_ = function (handshake) {
        var timestamp = handshake.ts;
        var version = handshake.v;
        var host = handshake.h;
        this.sessionId = handshake.s;
        this.repoInfo_.updateHost(host);
        // if we've already closed the connection, then don't bother trying to progress further
        if (this.state_ == 0 /* CONNECTING */) {
            this.conn_.start();
            this.onConnectionEstablished_(this.conn_, timestamp);
            if (Constants_1.PROTOCOL_VERSION !== version) {
                util_1.warn('Protocol version mismatch detected');
            }
            // TODO: do we want to upgrade? when? maybe a delay?
            this.tryStartUpgrade_();
        }
    };
    Connection.prototype.tryStartUpgrade_ = function () {
        var conn = this.transportManager_.upgradeTransport();
        if (conn) {
            this.startUpgrade_(conn);
        }
    };
    Connection.prototype.startUpgrade_ = function (conn) {
        var _this = this;
        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);
        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
        // can consider the transport healthy.
        this.secondaryResponsesRequired_ =
            conn['responsesRequiredToBeHealthy'] || 0;
        var onMessage = this.connReceiver_(this.secondaryConn_);
        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
        this.secondaryConn_.open(onMessage, onDisconnect);
        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
        util_1.setTimeoutNonBlocking(function () {
            if (_this.secondaryConn_) {
                _this.log_('Timed out trying to upgrade.');
                _this.secondaryConn_.close();
            }
        }, Math.floor(UPGRADE_TIMEOUT));
    };
    Connection.prototype.onReset_ = function (host) {
        this.log_('Reset packet received.  New host: ' + host);
        this.repoInfo_.updateHost(host);
        // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
        // We don't currently support resets after the connection has already been established
        if (this.state_ === 1 /* CONNECTED */) {
            this.close();
        }
        else {
            // Close whatever connections we have open and start again.
            this.closeConnections_();
            this.start_();
        }
    };
    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {
        var _this = this;
        this.log_('Realtime connection established.');
        this.conn_ = conn;
        this.state_ = 1 /* CONNECTED */;
        if (this.onReady_) {
            this.onReady_(timestamp, this.sessionId);
            this.onReady_ = null;
        }
        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
        // send some pings.
        if (this.primaryResponsesRequired_ === 0) {
            this.log_('Primary connection is healthy.');
            this.isHealthy_ = true;
        }
        else {
            util_1.setTimeoutNonBlocking(function () {
                _this.sendPingOnPrimaryIfNecessary_();
            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
        }
    };
    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {
        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {
            this.log_('sending ping on primary.');
            this.sendData_({ t: 'c', d: { t: PING, d: {} } });
        }
    };
    Connection.prototype.onSecondaryConnectionLost_ = function () {
        var conn = this.secondaryConn_;
        this.secondaryConn_ = null;
        if (this.tx_ === conn || this.rx_ === conn) {
            // we are relying on this connection already in some capacity. Therefore, a failure is real
            this.close();
        }
    };
    /**
     *
     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if
     * we should flush the host cache
     * @private
     */
    Connection.prototype.onConnectionLost_ = function (everConnected) {
        this.conn_ = null;
        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
        if (!everConnected && this.state_ === 0 /* CONNECTING */) {
            this.log_('Realtime connection failed.');
            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
            if (this.repoInfo_.isCacheableHost()) {
                storage_1.PersistentStorage.remove('host:' + this.repoInfo_.host);
                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
                this.repoInfo_.internalHost = this.repoInfo_.host;
            }
        }
        else if (this.state_ === 1 /* CONNECTED */) {
            this.log_('Realtime connection lost.');
        }
        this.close();
    };
    /**
     *
     * @param {string} reason
     * @private
     */
    Connection.prototype.onConnectionShutdown_ = function (reason) {
        this.log_('Connection shutdown command received. Shutting down...');
        if (this.onKill_) {
            this.onKill_(reason);
            this.onKill_ = null;
        }
        // We intentionally don't want to fire onDisconnect (kill is a different case),
        // so clear the callback.
        this.onDisconnect_ = null;
        this.close();
    };
    Connection.prototype.sendData_ = function (data) {
        if (this.state_ !== 1 /* CONNECTED */) {
            throw 'Connection is not connected';
        }
        else {
            this.tx_.send(data);
        }
    };
    /**
     * Cleans up this connection, calling the appropriate callbacks
     */
    Connection.prototype.close = function () {
        if (this.state_ !== 2 /* DISCONNECTED */) {
            this.log_('Closing realtime connection.');
            this.state_ = 2 /* DISCONNECTED */;
            this.closeConnections_();
            if (this.onDisconnect_) {
                this.onDisconnect_();
                this.onDisconnect_ = null;
            }
        }
    };
    /**
     *
     * @private
     */
    Connection.prototype.closeConnections_ = function () {
        this.log_('Shutting down all connections');
        if (this.conn_) {
            this.conn_.close();
            this.conn_ = null;
        }
        if (this.secondaryConn_) {
            this.secondaryConn_.close();
            this.secondaryConn_ = null;
        }
        if (this.healthyTimeout_) {
            clearTimeout(this.healthyTimeout_);
            this.healthyTimeout_ = null;
        }
    };
    return Connection;
}());
exports.Connection = Connection;

//# sourceMappingURL=Connection.js.map


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(1);
var CountedSet_1 = __webpack_require__(60);
var StatsManager_1 = __webpack_require__(34);
var PacketReceiver_1 = __webpack_require__(138);
var Constants_1 = __webpack_require__(19);
var util_2 = __webpack_require__(0);
var util_3 = __webpack_require__(0);
// URL query parameters associated with longpolling
exports.FIREBASE_LONGPOLL_START_PARAM = 'start';
exports.FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
exports.FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
exports.FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
exports.FIREBASE_LONGPOLL_ID_PARAM = 'id';
exports.FIREBASE_LONGPOLL_PW_PARAM = 'pw';
exports.FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
exports.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
exports.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
exports.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
exports.FIREBASE_LONGPOLL_DATA_PARAM = 'd';
exports.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';
exports.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
//Data size constants.
//TODO: Perf: the maximum length actually differs from browser to browser.
// We should check what browser we're on and set accordingly.
var MAX_URL_DATA_SIZE = 1870;
var SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
/**
 * Keepalive period
 * send a fresh request at minimum every 25 seconds. Opera has a maximum request
 * length of 30 seconds that we can't exceed.
 * @const
 * @type {number}
 */
var KEEPALIVE_REQUEST_INTERVAL = 25000;
/**
 * How long to wait before aborting a long-polling connection attempt.
 * @const
 * @type {number}
 */
var LP_CONNECT_TIMEOUT = 30000;
/**
 * This class manages a single long-polling connection.
 *
 * @constructor
 * @implements {Transport}
 */
var BrowserPollConnection = /** @class */ (function () {
    /**
     * @param {string} connId An identifier for this connection, used for logging
     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.
     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing
     *                                         transport session
     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a
     *                                     connection previously
     */
    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {
        this.connId = connId;
        this.repoInfo = repoInfo;
        this.transportSessionId = transportSessionId;
        this.lastSessionId = lastSessionId;
        this.bytesSent = 0;
        this.bytesReceived = 0;
        this.everConnected_ = false;
        this.log_ = util_1.logWrapper(connId);
        this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo);
        this.urlFn = function (params) {
            return repoInfo.connectionURL(Constants_1.LONG_POLLING, params);
        };
    }
    /**
     *
     * @param {function(Object)} onMessage Callback when messages arrive
     * @param {function()} onDisconnect Callback with connection lost.
     */
    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {
        var _this = this;
        this.curSegmentNum = 0;
        this.onDisconnect_ = onDisconnect;
        this.myPacketOrderer = new PacketReceiver_1.PacketReceiver(onMessage);
        this.isClosed_ = false;
        this.connectTimeoutTimer_ = setTimeout(function () {
            _this.log_('Timed out trying to connect.');
            // Make sure we clear the host cache
            _this.onClosed_();
            _this.connectTimeoutTimer_ = null;
        }, Math.floor(LP_CONNECT_TIMEOUT));
        // Ensure we delay the creation of the iframe until the DOM is loaded.
        util_1.executeWhenDOMReady(function () {
            if (_this.isClosed_)
                return;
            //Set up a callback that gets triggered once a connection is set up.
            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var command = args[0], arg1 = args[1], arg2 = args[2], arg3 = args[3], arg4 = args[4];
                _this.incrementIncomingBytes_(args);
                if (!_this.scriptTagHolder)
                    return; // we closed the connection.
                if (_this.connectTimeoutTimer_) {
                    clearTimeout(_this.connectTimeoutTimer_);
                    _this.connectTimeoutTimer_ = null;
                }
                _this.everConnected_ = true;
                if (command == exports.FIREBASE_LONGPOLL_START_PARAM) {
                    _this.id = arg1;
                    _this.password = arg2;
                }
                else if (command === exports.FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                    // Don't clear the host cache. We got a response from the server, so we know it's reachable
                    if (arg1) {
                        // We aren't expecting any more data (other than what the server's already in the process of sending us
                        // through our already open polls), so don't send any more.
                        _this.scriptTagHolder.sendNewPolls = false;
                        // arg1 in this case is the last response number sent by the server. We should try to receive
                        // all of the responses up to this one before closing
                        _this.myPacketOrderer.closeAfter(arg1, function () {
                            _this.onClosed_();
                        });
                    }
                    else {
                        _this.onClosed_();
                    }
                }
                else {
                    throw new Error('Unrecognized command received: ' + command);
                }
            }, function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var pN = args[0], data = args[1];
                _this.incrementIncomingBytes_(args);
                _this.myPacketOrderer.handleResponse(pN, data);
            }, function () {
                _this.onClosed_();
            }, _this.urlFn);
            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
            //from cache.
            var urlParams = {};
            urlParams[exports.FIREBASE_LONGPOLL_START_PARAM] = 't';
            urlParams[exports.FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
            if (_this.scriptTagHolder.uniqueCallbackIdentifier)
                urlParams[exports.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
            urlParams[Constants_1.VERSION_PARAM] = Constants_1.PROTOCOL_VERSION;
            if (_this.transportSessionId) {
                urlParams[Constants_1.TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
            }
            if (_this.lastSessionId) {
                urlParams[Constants_1.LAST_SESSION_PARAM] = _this.lastSessionId;
            }
            if (!util_3.isNodeSdk() &&
                typeof location !== 'undefined' &&
                location.href &&
                location.href.indexOf(Constants_1.FORGE_DOMAIN) !== -1) {
                urlParams[Constants_1.REFERER_PARAM] = Constants_1.FORGE_REF;
            }
            var connectURL = _this.urlFn(urlParams);
            _this.log_('Connecting via long-poll to ' + connectURL);
            _this.scriptTagHolder.addTag(connectURL, function () {
                /* do nothing */
            });
        });
    };
    /**
     * Call this when a handshake has completed successfully and we want to consider the connection established
     */
    BrowserPollConnection.prototype.start = function () {
        this.scriptTagHolder.startLongPoll(this.id, this.password);
        this.addDisconnectPingFrame(this.id, this.password);
    };
    /**
     * Forces long polling to be considered as a potential transport
     */
    BrowserPollConnection.forceAllow = function () {
        BrowserPollConnection.forceAllow_ = true;
    };
    /**
     * Forces longpolling to not be considered as a potential transport
     */
    BrowserPollConnection.forceDisallow = function () {
        BrowserPollConnection.forceDisallow_ = true;
    };
    // Static method, use string literal so it can be accessed in a generic way
    BrowserPollConnection.isAvailable = function () {
        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
        return (BrowserPollConnection.forceAllow_ ||
            (!BrowserPollConnection.forceDisallow_ &&
                typeof document !== 'undefined' &&
                document.createElement != null &&
                !util_1.isChromeExtensionContentScript() &&
                !util_1.isWindowsStoreApp() &&
                !util_3.isNodeSdk()));
    };
    /**
     * No-op for polling
     */
    BrowserPollConnection.prototype.markConnectionHealthy = function () { };
    /**
     * Stops polling and cleans up the iframe
     * @private
     */
    BrowserPollConnection.prototype.shutdown_ = function () {
        this.isClosed_ = true;
        if (this.scriptTagHolder) {
            this.scriptTagHolder.close();
            this.scriptTagHolder = null;
        }
        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
        if (this.myDisconnFrame) {
            document.body.removeChild(this.myDisconnFrame);
            this.myDisconnFrame = null;
        }
        if (this.connectTimeoutTimer_) {
            clearTimeout(this.connectTimeoutTimer_);
            this.connectTimeoutTimer_ = null;
        }
    };
    /**
     * Triggered when this transport is closed
     * @private
     */
    BrowserPollConnection.prototype.onClosed_ = function () {
        if (!this.isClosed_) {
            this.log_('Longpoll is closing itself');
            this.shutdown_();
            if (this.onDisconnect_) {
                this.onDisconnect_(this.everConnected_);
                this.onDisconnect_ = null;
            }
        }
    };
    /**
     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
     * that we've left.
     */
    BrowserPollConnection.prototype.close = function () {
        if (!this.isClosed_) {
            this.log_('Longpoll is being closed.');
            this.shutdown_();
        }
    };
    /**
     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
     * broken into chunks (since URLs have a small maximum length).
     * @param {!Object} data The JSON data to transmit.
     */
    BrowserPollConnection.prototype.send = function (data) {
        var dataStr = util_2.stringify(data);
        this.bytesSent += dataStr.length;
        this.stats_.incrementCounter('bytes_sent', dataStr.length);
        //first, lets get the base64-encoded data
        var base64data = util_2.base64Encode(dataStr);
        //We can only fit a certain amount in each URL, so we need to split this request
        //up into multiple pieces if it doesn't fit in one request.
        var dataSegs = util_1.splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
        //of segments so that we can reassemble the packet on the server.
        for (var i = 0; i < dataSegs.length; i++) {
            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
            this.curSegmentNum++;
        }
    };
    /**
     * This is how we notify the server that we're leaving.
     * We aren't able to send requests with DHTML on a window close event, but we can
     * trigger XHR requests in some browsers (everything but Opera basically).
     * @param {!string} id
     * @param {!string} pw
     */
    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {
        if (util_3.isNodeSdk())
            return;
        this.myDisconnFrame = document.createElement('iframe');
        var urlParams = {};
        urlParams[exports.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
        urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = id;
        urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = pw;
        this.myDisconnFrame.src = this.urlFn(urlParams);
        this.myDisconnFrame.style.display = 'none';
        document.body.appendChild(this.myDisconnFrame);
    };
    /**
     * Used to track the bytes received by this client
     * @param {*} args
     * @private
     */
    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {
        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
        var bytesReceived = util_2.stringify(args).length;
        this.bytesReceived += bytesReceived;
        this.stats_.incrementCounter('bytes_received', bytesReceived);
    };
    return BrowserPollConnection;
}());
exports.BrowserPollConnection = BrowserPollConnection;
/*********************************************************************************************
 * A wrapper around an iframe that is used as a long-polling script holder.
 * @constructor
 *********************************************************************************************/
var FirebaseIFrameScriptHolder = /** @class */ (function () {
    /**
     * @param commandCB - The callback to be called when control commands are recevied from the server.
     * @param onMessageCB - The callback to be triggered when responses arrive from the server.
     * @param onDisconnect - The callback to be triggered when this tag holder is closed
     * @param urlFn - A function that provides the URL of the endpoint to send data to.
     */
    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {
        this.onDisconnect = onDisconnect;
        this.urlFn = urlFn;
        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
        //problems in some browsers.
        /**
         * @type {CountedSet.<number, number>}
         */
        this.outstandingRequests = new CountedSet_1.CountedSet();
        //A queue of the pending segments waiting for transmission to the server.
        this.pendingSegs = [];
        //A serial number. We use this for two things:
        // 1) A way to ensure the browser doesn't cache responses to polls
        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
        //    JSONP code in the order it was added to the iframe.
        this.currentSerial = Math.floor(Math.random() * 100000000);
        // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
        // incoming data from the server that we're waiting for).
        this.sendNewPolls = true;
        if (!util_3.isNodeSdk()) {
            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
            //iframes where we put the long-polling script tags. We have two callbacks:
            //   1) Command Callback - Triggered for control issues, like starting a connection.
            //   2) Message Callback - Triggered when new data arrives.
            this.uniqueCallbackIdentifier = util_1.LUIDGenerator();
            window[exports.FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
            window[exports.FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
            //Create an iframe for us to add script tags to.
            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
            // Set the iframe's contents.
            var script = '';
            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
            // for ie9, but ie8 needs to do it again in the document itself.
            if (this.myIFrame.src &&
                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
                var currentDomain = document.domain;
                script = '<script>document.domain="' + currentDomain + '";</script>';
            }
            var iframeContents = '<html><body>' + script + '</body></html>';
            try {
                this.myIFrame.doc.open();
                this.myIFrame.doc.write(iframeContents);
                this.myIFrame.doc.close();
            }
            catch (e) {
                util_1.log('frame writing exception');
                if (e.stack) {
                    util_1.log(e.stack);
                }
                util_1.log(e);
            }
        }
        else {
            this.commandCB = commandCB;
            this.onMessageCB = onMessageCB;
        }
    }
    /**
     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
     * actually use.
     * @private
     * @return {Element}
     */
    FirebaseIFrameScriptHolder.createIFrame_ = function () {
        var iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        // This is necessary in order to initialize the document inside the iframe
        if (document.body) {
            document.body.appendChild(iframe);
            try {
                // If document.domain has been modified in IE, this will throw an error, and we need to set the
                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
                var a = iframe.contentWindow.document;
                if (!a) {
                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
                    util_1.log('No IE domain setting required');
                }
            }
            catch (e) {
                var domain = document.domain;
                iframe.src =
                    "javascript:void((function(){document.open();document.domain='" +
                        domain +
                        "';document.close();})())";
            }
        }
        else {
            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
            // never gets hit.
            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
        }
        // Get the document of the iframe in a browser-specific way.
        if (iframe.contentDocument) {
            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
        }
        else if (iframe.contentWindow) {
            iframe.doc = iframe.contentWindow.document; // Internet Explorer
        }
        else if (iframe.document) {
            iframe.doc = iframe.document; //others?
        }
        return iframe;
    };
    /**
     * Cancel all outstanding queries and remove the frame.
     */
    FirebaseIFrameScriptHolder.prototype.close = function () {
        var _this = this;
        //Mark this iframe as dead, so no new requests are sent.
        this.alive = false;
        if (this.myIFrame) {
            //We have to actually remove all of the html inside this iframe before removing it from the
            //window, or IE will continue loading and executing the script tags we've already added, which
            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
            this.myIFrame.doc.body.innerHTML = '';
            setTimeout(function () {
                if (_this.myIFrame !== null) {
                    document.body.removeChild(_this.myIFrame);
                    _this.myIFrame = null;
                }
            }, Math.floor(0));
        }
        if (util_3.isNodeSdk() && this.myID) {
            var urlParams = {};
            urlParams[exports.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';
            urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
            urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
            var theURL = this.urlFn(urlParams);
            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);
        }
        // Protect from being called recursively.
        var onDisconnect = this.onDisconnect;
        if (onDisconnect) {
            this.onDisconnect = null;
            onDisconnect();
        }
    };
    /**
     * Actually start the long-polling session by adding the first script tag(s) to the iframe.
     * @param {!string} id - The ID of this connection
     * @param {!string} pw - The password for this connection
     */
    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {
        this.myID = id;
        this.myPW = pw;
        this.alive = true;
        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
        while (this.newRequest_()) { }
    };
    /**
     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
     * too many outstanding requests and we are still alive.
     *
     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
     * needed.
     */
    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {
        // We keep one outstanding request open all the time to receive data, but if we need to send data
        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
        // close the old request.
        if (this.alive &&
            this.sendNewPolls &&
            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {
            //construct our url
            this.currentSerial++;
            var urlParams = {};
            urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
            urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
            urlParams[exports.FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
            var theURL = this.urlFn(urlParams);
            //Now add as much data as we can.
            var curDataString = '';
            var i = 0;
            while (this.pendingSegs.length > 0) {
                //first, lets see if the next segment will fit.
                var nextSeg = this.pendingSegs[0];
                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=
                    MAX_URL_DATA_SIZE) {
                    //great, the segment will fit. Lets append it.
                    var theSeg = this.pendingSegs.shift();
                    curDataString =
                        curDataString +
                            '&' +
                            exports.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +
                            i +
                            '=' +
                            theSeg.seg +
                            '&' +
                            exports.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +
                            i +
                            '=' +
                            theSeg.ts +
                            '&' +
                            exports.FIREBASE_LONGPOLL_DATA_PARAM +
                            i +
                            '=' +
                            theSeg.d;
                    i++;
                }
                else {
                    break;
                }
            }
            theURL = theURL + curDataString;
            this.addLongPollTag_(theURL, this.currentSerial);
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Queue a packet for transmission to the server.
     * @param segnum - A sequential id for this packet segment used for reassembly
     * @param totalsegs - The total number of segments in this packet
     * @param data - The data for this segment.
     */
    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {
        //add this to the queue of segments to send.
        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
        //send the data immediately if there isn't already data being transmitted, unless
        //startLongPoll hasn't been called yet.
        if (this.alive) {
            this.newRequest_();
        }
    };
    /**
     * Add a script tag for a regular long-poll request.
     * @param {!string} url - The URL of the script tag.
     * @param {!number} serial - The serial number of the request.
     * @private
     */
    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {
        var _this = this;
        //remember that we sent this request.
        this.outstandingRequests.add(serial, 1);
        var doNewRequest = function () {
            _this.outstandingRequests.remove(serial);
            _this.newRequest_();
        };
        // If this request doesn't return on its own accord (by the server sending us some data), we'll
        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
        var readyStateCB = function () {
            // Request completed.  Cancel the keepalive.
            clearTimeout(keepaliveTimeout);
            // Trigger a new request so we can continue receiving data.
            doNewRequest();
        };
        this.addTag(url, readyStateCB);
    };
    /**
     * Add an arbitrary script tag to the iframe.
     * @param {!string} url - The URL for the script tag source.
     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.
     */
    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {
        var _this = this;
        if (util_3.isNodeSdk()) {
            this.doNodeLongPoll(url, loadCB);
        }
        else {
            setTimeout(function () {
                try {
                    // if we're already closed, don't add this poll
                    if (!_this.sendNewPolls)
                        return;
                    var newScript_1 = _this.myIFrame.doc.createElement('script');
                    newScript_1.type = 'text/javascript';
                    newScript_1.async = true;
                    newScript_1.src = url;
                    newScript_1.onload = newScript_1.onreadystatechange = function () {
                        var rstate = newScript_1.readyState;
                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {
                            newScript_1.onload = newScript_1.onreadystatechange = null;
                            if (newScript_1.parentNode) {
                                newScript_1.parentNode.removeChild(newScript_1);
                            }
                            loadCB();
                        }
                    };
                    newScript_1.onerror = function () {
                        util_1.log('Long-poll script failed to load: ' + url);
                        _this.sendNewPolls = false;
                        _this.close();
                    };
                    _this.myIFrame.doc.body.appendChild(newScript_1);
                }
                catch (e) {
                    // TODO: we should make this error visible somehow
                }
            }, Math.floor(1));
        }
    };
    return FirebaseIFrameScriptHolder;
}());
exports.FirebaseIFrameScriptHolder = FirebaseIFrameScriptHolder;

//# sourceMappingURL=BrowserPollConnection.js.map


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var app_1 = __webpack_require__(8);
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(1);
var StatsManager_1 = __webpack_require__(34);
var Constants_1 = __webpack_require__(19);
var util_3 = __webpack_require__(0);
var storage_1 = __webpack_require__(18);
var util_4 = __webpack_require__(0);
var util_5 = __webpack_require__(0);
var WEBSOCKET_MAX_FRAME_SIZE = 16384;
var WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
var WebSocketImpl = null;
if (typeof MozWebSocket !== 'undefined') {
    WebSocketImpl = MozWebSocket;
}
else if (typeof WebSocket !== 'undefined') {
    WebSocketImpl = WebSocket;
}
function setWebSocketImpl(impl) {
    WebSocketImpl = impl;
}
exports.setWebSocketImpl = setWebSocketImpl;
/**
 * Create a new websocket connection with the given callbacks.
 * @constructor
 * @implements {Transport}
 */
var WebSocketConnection = /** @class */ (function () {
    /**
     * @param {string} connId identifier for this transport
     * @param {RepoInfo} repoInfo The info for the websocket endpoint.
     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
     *                                         session
     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
     */
    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {
        this.connId = connId;
        this.keepaliveTimer = null;
        this.frames = null;
        this.totalFrames = 0;
        this.bytesSent = 0;
        this.bytesReceived = 0;
        this.log_ = util_2.logWrapper(this.connId);
        this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo);
        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);
    }
    /**
     * @param {RepoInfo} repoInfo The info for the websocket endpoint.
     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
     *                                         session
     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
     * @return {string} connection url
     * @private
     */
    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {
        var urlParams = {};
        urlParams[Constants_1.VERSION_PARAM] = Constants_1.PROTOCOL_VERSION;
        if (!util_5.isNodeSdk() &&
            typeof location !== 'undefined' &&
            location.href &&
            location.href.indexOf(Constants_1.FORGE_DOMAIN) !== -1) {
            urlParams[Constants_1.REFERER_PARAM] = Constants_1.FORGE_REF;
        }
        if (transportSessionId) {
            urlParams[Constants_1.TRANSPORT_SESSION_PARAM] = transportSessionId;
        }
        if (lastSessionId) {
            urlParams[Constants_1.LAST_SESSION_PARAM] = lastSessionId;
        }
        return repoInfo.connectionURL(Constants_1.WEBSOCKET, urlParams);
    };
    /**
     *
     * @param onMessage Callback when messages arrive
     * @param onDisconnect Callback with connection lost.
     */
    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {
        var _this = this;
        this.onDisconnect = onDisconnect;
        this.onMessage = onMessage;
        this.log_('Websocket connecting to ' + this.connURL);
        this.everConnected_ = false;
        // Assume failure until proven otherwise.
        storage_1.PersistentStorage.set('previous_websocket_failure', true);
        try {
            if (util_5.isNodeSdk()) {
                var device = util_3.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';
                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>
                var options = {
                    headers: {
                        'User-Agent': "Firebase/" + Constants_1.PROTOCOL_VERSION + "/" + app_1.default.SDK_VERSION + "/" + process.platform + "/" + device
                    }
                };
                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.
                var env = process['env'];
                var proxy = this.connURL.indexOf('wss://') == 0
                    ? env['HTTPS_PROXY'] || env['https_proxy']
                    : env['HTTP_PROXY'] || env['http_proxy'];
                if (proxy) {
                    options['proxy'] = { origin: proxy };
                }
                this.mySock = new WebSocketImpl(this.connURL, [], options);
            }
            else {
                this.mySock = new WebSocketImpl(this.connURL);
            }
        }
        catch (e) {
            this.log_('Error instantiating WebSocket.');
            var error = e.message || e.data;
            if (error) {
                this.log_(error);
            }
            this.onClosed_();
            return;
        }
        this.mySock.onopen = function () {
            _this.log_('Websocket connected.');
            _this.everConnected_ = true;
        };
        this.mySock.onclose = function () {
            _this.log_('Websocket connection was disconnected.');
            _this.mySock = null;
            _this.onClosed_();
        };
        this.mySock.onmessage = function (m) {
            _this.handleIncomingFrame(m);
        };
        this.mySock.onerror = function (e) {
            _this.log_('WebSocket error.  Closing connection.');
            var error = e.message || e.data;
            if (error) {
                _this.log_(error);
            }
            _this.onClosed_();
        };
    };
    /**
     * No-op for websockets, we don't need to do anything once the connection is confirmed as open
     */
    WebSocketConnection.prototype.start = function () { };
    WebSocketConnection.forceDisallow = function () {
        WebSocketConnection.forceDisallow_ = true;
    };
    WebSocketConnection.isAvailable = function () {
        var isOldAndroid = false;
        if (typeof navigator !== 'undefined' && navigator.userAgent) {
            var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
            if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                if (parseFloat(oldAndroidMatch[1]) < 4.4) {
                    isOldAndroid = true;
                }
            }
        }
        return (!isOldAndroid &&
            WebSocketImpl !== null &&
            !WebSocketConnection.forceDisallow_);
    };
    /**
     * Returns true if we previously failed to connect with this transport.
     * @return {boolean}
     */
    WebSocketConnection.previouslyFailed = function () {
        // If our persistent storage is actually only in-memory storage,
        // we default to assuming that it previously failed to be safe.
        return (storage_1.PersistentStorage.isInMemoryStorage ||
            storage_1.PersistentStorage.get('previous_websocket_failure') === true);
    };
    WebSocketConnection.prototype.markConnectionHealthy = function () {
        storage_1.PersistentStorage.remove('previous_websocket_failure');
    };
    WebSocketConnection.prototype.appendFrame_ = function (data) {
        this.frames.push(data);
        if (this.frames.length == this.totalFrames) {
            var fullMess = this.frames.join('');
            this.frames = null;
            var jsonMess = util_4.jsonEval(fullMess);
            //handle the message
            this.onMessage(jsonMess);
        }
    };
    /**
     * @param {number} frameCount The number of frames we are expecting from the server
     * @private
     */
    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {
        this.totalFrames = frameCount;
        this.frames = [];
    };
    /**
     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
     * @param {!String} data
     * @return {?String} Any remaining data to be process, or null if there is none
     * @private
     */
    WebSocketConnection.prototype.extractFrameCount_ = function (data) {
        util_1.assert(this.frames === null, 'We already have a frame buffer');
        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
        if (data.length <= 6) {
            var frameCount = Number(data);
            if (!isNaN(frameCount)) {
                this.handleNewFrameCount_(frameCount);
                return null;
            }
        }
        this.handleNewFrameCount_(1);
        return data;
    };
    /**
     * Process a websocket frame that has arrived from the server.
     * @param mess The frame data
     */
    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {
        if (this.mySock === null)
            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
        var data = mess['data'];
        this.bytesReceived += data.length;
        this.stats_.incrementCounter('bytes_received', data.length);
        this.resetKeepAlive();
        if (this.frames !== null) {
            // we're buffering
            this.appendFrame_(data);
        }
        else {
            // try to parse out a frame count, otherwise, assume 1 and process it
            var remainingData = this.extractFrameCount_(data);
            if (remainingData !== null) {
                this.appendFrame_(remainingData);
            }
        }
    };
    /**
     * Send a message to the server
     * @param {Object} data The JSON object to transmit
     */
    WebSocketConnection.prototype.send = function (data) {
        this.resetKeepAlive();
        var dataStr = util_4.stringify(data);
        this.bytesSent += dataStr.length;
        this.stats_.incrementCounter('bytes_sent', dataStr.length);
        //We can only fit a certain amount in each websocket frame, so we need to split this request
        //up into multiple pieces if it doesn't fit in one request.
        var dataSegs = util_2.splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
        //Send the length header
        if (dataSegs.length > 1) {
            this.sendString_(String(dataSegs.length));
        }
        //Send the actual data in segments.
        for (var i = 0; i < dataSegs.length; i++) {
            this.sendString_(dataSegs[i]);
        }
    };
    WebSocketConnection.prototype.shutdown_ = function () {
        this.isClosed_ = true;
        if (this.keepaliveTimer) {
            clearInterval(this.keepaliveTimer);
            this.keepaliveTimer = null;
        }
        if (this.mySock) {
            this.mySock.close();
            this.mySock = null;
        }
    };
    WebSocketConnection.prototype.onClosed_ = function () {
        if (!this.isClosed_) {
            this.log_('WebSocket is closing itself');
            this.shutdown_();
            // since this is an internal close, trigger the close listener
            if (this.onDisconnect) {
                this.onDisconnect(this.everConnected_);
                this.onDisconnect = null;
            }
        }
    };
    /**
     * External-facing close handler.
     * Close the websocket and kill the connection.
     */
    WebSocketConnection.prototype.close = function () {
        if (!this.isClosed_) {
            this.log_('WebSocket is being closed');
            this.shutdown_();
        }
    };
    /**
     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
     * the last activity.
     */
    WebSocketConnection.prototype.resetKeepAlive = function () {
        var _this = this;
        clearInterval(this.keepaliveTimer);
        this.keepaliveTimer = setInterval(function () {
            //If there has been no websocket activity for a while, send a no-op
            if (_this.mySock) {
                _this.sendString_('0');
            }
            _this.resetKeepAlive();
        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
    };
    /**
     * Send a string over the websocket.
     *
     * @param {string} str String to send.
     * @private
     */
    WebSocketConnection.prototype.sendString_ = function (str) {
        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
        // calls for some unknown reason.  We treat these as an error and disconnect.
        // See https://app.asana.com/0/58926111402292/68021340250410
        try {
            this.mySock.send(str);
        }
        catch (e) {
            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
            setTimeout(this.onClosed_.bind(this), 0);
        }
    };
    /**
     * Number of response before we consider the connection "healthy."
     * @type {number}
     */
    WebSocketConnection.responsesRequiredToBeHealthy = 2;
    /**
     * Time to wait for the connection te become healthy before giving up.
     * @type {number}
     */
    WebSocketConnection.healthyTimeout = 30000;
    return WebSocketConnection;
}());
exports.WebSocketConnection = WebSocketConnection;

//# sourceMappingURL=WebSocketConnection.js.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(42)))

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Interface defining the set of actions that can be performed against the Firebase server
 * (basically corresponds to our wire protocol).
 *
 * @interface
 */
var ServerActions = /** @class */ (function () {
    function ServerActions() {
    }
    /**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, string)=} onComplete
     * @param {string=} hash
     */
    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };
    /**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, ?string)} onComplete
     * @param {string=} hash
     */
    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };
    /**
     * Refreshes the auth token for the current connection.
     * @param {string} token The authentication token
     */
    ServerActions.prototype.refreshAuthToken = function (token) { };
    /**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, string)=} onComplete
     */
    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };
    /**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, string)=} onComplete
     */
    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };
    /**
     * @param {string} pathString
     * @param {function(string, string)=} onComplete
     */
    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };
    /**
     * @param {Object.<string, *>} stats
     */
    ServerActions.prototype.reportStats = function (stats) { };
    return ServerActions;
}());
exports.ServerActions = ServerActions;

//# sourceMappingURL=ServerActions.js.map


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var IndexedFilter_1 = __webpack_require__(33);
var PriorityIndex_1 = __webpack_require__(3);
var Node_1 = __webpack_require__(5);
var ChildrenNode_1 = __webpack_require__(4);
/**
 * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
 *
 * @constructor
 * @implements {NodeFilter}
 */
var RangedFilter = /** @class */ (function () {
    /**
     * @param {!QueryParams} params
     */
    function RangedFilter(params) {
        this.indexedFilter_ = new IndexedFilter_1.IndexedFilter(params.getIndex());
        this.index_ = params.getIndex();
        this.startPost_ = RangedFilter.getStartPost_(params);
        this.endPost_ = RangedFilter.getEndPost_(params);
    }
    /**
     * @return {!NamedNode}
     */
    RangedFilter.prototype.getStartPost = function () {
        return this.startPost_;
    };
    /**
     * @return {!NamedNode}
     */
    RangedFilter.prototype.getEndPost = function () {
        return this.endPost_;
    };
    /**
     * @param {!NamedNode} node
     * @return {boolean}
     */
    RangedFilter.prototype.matches = function (node) {
        return (this.index_.compare(this.getStartPost(), node) <= 0 &&
            this.index_.compare(node, this.getEndPost()) <= 0);
    };
    /**
     * @inheritDoc
     */
    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
        if (!this.matches(new Node_1.NamedNode(key, newChild))) {
            newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        }
        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
    };
    /**
     * @inheritDoc
     */
    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
        if (newSnap.isLeafNode()) {
            // Make sure we have a children node with the correct index, not a leaf node;
            newSnap = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        }
        var filtered = newSnap.withIndex(this.index_);
        // Don't support priorities on queries
        filtered = filtered.updatePriority(ChildrenNode_1.ChildrenNode.EMPTY_NODE);
        var self = this;
        newSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
            if (!self.matches(new Node_1.NamedNode(key, childNode))) {
                filtered = filtered.updateImmediateChild(key, ChildrenNode_1.ChildrenNode.EMPTY_NODE);
            }
        });
        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
    };
    /**
     * @inheritDoc
     */
    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
        // Don't support priorities on queries
        return oldSnap;
    };
    /**
     * @inheritDoc
     */
    RangedFilter.prototype.filtersNodes = function () {
        return true;
    };
    /**
     * @inheritDoc
     */
    RangedFilter.prototype.getIndexedFilter = function () {
        return this.indexedFilter_;
    };
    /**
     * @inheritDoc
     */
    RangedFilter.prototype.getIndex = function () {
        return this.index_;
    };
    /**
     * @param {!QueryParams} params
     * @return {!NamedNode}
     * @private
     */
    RangedFilter.getStartPost_ = function (params) {
        if (params.hasStart()) {
            var startName = params.getIndexStartName();
            return params.getIndex().makePost(params.getIndexStartValue(), startName);
        }
        else {
            return params.getIndex().minPost();
        }
    };
    /**
     * @param {!QueryParams} params
     * @return {!NamedNode}
     * @private
     */
    RangedFilter.getEndPost_ = function (params) {
        if (params.hasEnd()) {
            var endName = params.getIndexEndName();
            return params.getIndex().makePost(params.getIndexEndValue(), endName);
        }
        else {
            return params.getIndex().maxPost();
        }
    };
    return RangedFilter;
}());
exports.RangedFilter = RangedFilter;

//# sourceMappingURL=RangedFilter.js.map


/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__firebase_util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__firebase_util___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__firebase_util__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_errors__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__models_token_manager__ = __webpack_require__(149);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__models_notification_permission__ = __webpack_require__(74);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var SENDER_ID_OPTION_NAME = 'messagingSenderId';
var ControllerInterface = /** @class */ (function () {
    /**
     * An interface of the Messaging Service API
     * @param {!firebase.app.App} app
     */
    function ControllerInterface(app) {
        var _this = this;
        this.errorFactory_ = new __WEBPACK_IMPORTED_MODULE_0__firebase_util__["ErrorFactory"]('messaging', 'Messaging', __WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].map);
        if (!app.options[SENDER_ID_OPTION_NAME] ||
            typeof app.options[SENDER_ID_OPTION_NAME] !== 'string') {
            throw this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.BAD_SENDER_ID);
        }
        this.messagingSenderId_ = app.options[SENDER_ID_OPTION_NAME];
        this.tokenManager_ = new __WEBPACK_IMPORTED_MODULE_2__models_token_manager__["a" /* default */]();
        this.app = app;
        this.INTERNAL = {};
        this.INTERNAL.delete = function () { return _this.delete; };
    }
    /**
     * @export
     * @return {Promise<string> | Promise<null>} Returns a promise that
     * resolves to an FCM token.
     */
    ControllerInterface.prototype.getToken = function () {
        var _this = this;
        // Check with permissions
        var currentPermission = this.getNotificationPermission_();
        if (currentPermission !== __WEBPACK_IMPORTED_MODULE_3__models_notification_permission__["a" /* default */].granted) {
            if (currentPermission === __WEBPACK_IMPORTED_MODULE_3__models_notification_permission__["a" /* default */].denied) {
                return Promise.reject(this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.NOTIFICATIONS_BLOCKED));
            }
            // We must wait for permission to be granted
            return Promise.resolve(null);
        }
        return this.getSWRegistration_().then(function (registration) {
            return _this.tokenManager_
                .getSavedToken(_this.messagingSenderId_, registration)
                .then(function (token) {
                if (token) {
                    return token;
                }
                return _this.tokenManager_.createToken(_this.messagingSenderId_, registration);
            });
        });
    };
    /**
     * This method deletes tokens that the token manager looks after and then
     * unregisters the push subscription if it exists.
     * @export
     * @param {string} token
     * @return {Promise<void>}
     */
    ControllerInterface.prototype.deleteToken = function (token) {
        var _this = this;
        return this.tokenManager_.deleteToken(token).then(function () {
            return _this.getSWRegistration_()
                .then(function (registration) {
                if (registration) {
                    return registration.pushManager.getSubscription();
                }
            })
                .then(function (subscription) {
                if (subscription) {
                    return subscription.unsubscribe();
                }
            });
        });
    };
    ControllerInterface.prototype.getSWRegistration_ = function () {
        throw this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.SHOULD_BE_INHERITED);
    };
    //
    // The following methods should only be available in the window.
    //
    ControllerInterface.prototype.requestPermission = function () {
        throw this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.AVAILABLE_IN_WINDOW);
    };
    /**
     * @export
     * @param {!ServiceWorkerRegistration} registration
     */
    ControllerInterface.prototype.useServiceWorker = function (registration) {
        throw this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.AVAILABLE_IN_WINDOW);
    };
    /**
     * @export
     * @param {!firebase.Observer|function(*)} nextOrObserver
     * @param {function(!Error)=} optError
     * @param {function()=} optCompleted
     * @return {!function()}
     */
    ControllerInterface.prototype.onMessage = function (nextOrObserver, optError, optCompleted) {
        throw this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.AVAILABLE_IN_WINDOW);
    };
    /**
     * @export
     * @param {!firebase.Observer|function()} nextOrObserver An observer object
     * or a function triggered on token refresh.
     * @param {function(!Error)=} optError Optional A function
     * triggered on token refresh error.
     * @param {function()=} optCompleted Optional function triggered when the
     * observer is removed.
     * @return {!function()} The unsubscribe function for the observer.
     */
    ControllerInterface.prototype.onTokenRefresh = function (nextOrObserver, optError, optCompleted) {
        throw this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.AVAILABLE_IN_WINDOW);
    };
    //
    // The following methods are used by the service worker only.
    //
    /**
     * @export
     * @param {function(Object)} callback
     */
    ControllerInterface.prototype.setBackgroundMessageHandler = function (callback) {
        throw this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.AVAILABLE_IN_SW);
    };
    //
    // The following methods are used by the service themselves and not exposed
    // publicly or not expected to be used by developers.
    //
    /**
     * This method is required to adhere to the Firebase interface.
     * It closes any currently open indexdb database connections.
     */
    ControllerInterface.prototype.delete = function () {
        return this.tokenManager_.closeDatabase();
    };
    /**
     * Returns the current Notification Permission state.
     * @private
     * @return {string} The currenct permission state.
     */
    ControllerInterface.prototype.getNotificationPermission_ = function () {
        return Notification.permission;
    };
    /**
     * @protected
     * @returns {TokenManager}
     */
    ControllerInterface.prototype.getTokenManager = function () {
        return this.tokenManager_;
    };
    return ControllerInterface;
}());
/* harmony default export */ __webpack_exports__["a"] = (ControllerInterface);

//# sourceMappingURL=controller-interface.js.map


/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var FCM_APPLICATION_SERVER_KEY = [
    0x04,
    0x33,
    0x94,
    0xf7,
    0xdf,
    0xa1,
    0xeb,
    0xb1,
    0xdc,
    0x03,
    0xa2,
    0x5e,
    0x15,
    0x71,
    0xdb,
    0x48,
    0xd3,
    0x2e,
    0xed,
    0xed,
    0xb2,
    0x34,
    0xdb,
    0xb7,
    0x47,
    0x3a,
    0x0c,
    0x8f,
    0xc4,
    0xcc,
    0xe1,
    0x6f,
    0x3c,
    0x8c,
    0x84,
    0xdf,
    0xab,
    0xb6,
    0x66,
    0x3e,
    0xf2,
    0x0c,
    0xd4,
    0x8b,
    0xfe,
    0xe3,
    0xf9,
    0x76,
    0x2f,
    0x14,
    0x1c,
    0x63,
    0x08,
    0x6a,
    0x6f,
    0x2d,
    0xb1,
    0x1a,
    0x95,
    0xb0,
    0xce,
    0x37,
    0xc0,
    0x9c,
    0x6e
];
var SUBSCRIPTION_DETAILS = {
    userVisibleOnly: true,
    applicationServerKey: new Uint8Array(FCM_APPLICATION_SERVER_KEY)
};
/* harmony default export */ __webpack_exports__["a"] = ({
    ENDPOINT: 'https://fcm.googleapis.com',
    APPLICATION_SERVER_KEY: FCM_APPLICATION_SERVER_KEY,
    SUBSCRIPTION_OPTIONS: SUBSCRIPTION_DETAILS
});

//# sourceMappingURL=fcm-details.js.map


/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ __webpack_exports__["a"] = ({
    granted: 'granted',
    default: 'default',
    denied: 'denied'
});

//# sourceMappingURL=notification-permission.js.map


/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// These fields are strings to prevent closure from thinking goog.getMsg
// should be used to initialise the values
var PARAMS = {
    TYPE_OF_MSG: 'firebase-messaging-msg-type',
    DATA: 'firebase-messaging-msg-data'
};
// This value isn't using the TYPE_OF_MSG short hand as closure
// expects the variable to be defined via goog.getMsg
var msgType = {
    PUSH_MSG_RECEIVED: 'push-msg-received',
    NOTIFICATION_CLICKED: 'notification-clicked'
};
var createNewMsg = function (msgType, msgData) {
    var message = (_a = {},
        _a[PARAMS.TYPE_OF_MSG] = msgType,
        _a[PARAMS.DATA] = msgData,
        _a);
    return message;
    var _a;
};
/* harmony default export */ __webpack_exports__["a"] = ({
    PARAMS: PARAMS,
    TYPES_OF_MSG: msgType,
    createNewMsg: createNewMsg
});

//# sourceMappingURL=worker-page-message.js.map


/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ErrorCode; });
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @enum{number}
 */
var ErrorCode;
(function (ErrorCode) {
    ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
    ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
    ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
})(ErrorCode || (ErrorCode = {}));

//# sourceMappingURL=xhrio.js.map


/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Reference; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__implementation_args__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__implementation_blob__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__implementation_error__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__implementation_location__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__implementation_metadata__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__implementation_object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__implementation_path__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__implementation_requests__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__implementation_string__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__implementation_type__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__task__ = __webpack_require__(160);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Defines the Firebase Storage Reference class.
 */












/**
 * Provides methods to interact with a bucket in the Firebase Storage service.
 * @param location An fbs.location, or the URL at
 *     which to base this object, in one of the following forms:
 *         gs://<bucket>/<object-path>
 *         http[s]://firebasestorage.googleapis.com/
 *                     <api-version>/b/<bucket>/o/<object-path>
 *     Any query or fragment strings will be ignored in the http[s]
 *     format. If no value is passed, the storage object will use a URL based on
 *     the project ID of the base firebase.App instance.
 */
var Reference = /** @class */ (function () {
    function Reference(authWrapper, location) {
        this.authWrapper = authWrapper;
        if (location instanceof __WEBPACK_IMPORTED_MODULE_3__implementation_location__["a" /* Location */]) {
            this.location = location;
        }
        else {
            this.location = __WEBPACK_IMPORTED_MODULE_3__implementation_location__["a" /* Location */].makeFromUrl(location);
        }
    }
    /**
     * @return The URL for the bucket and path this object references,
     *     in the form gs://<bucket>/<object-path>
     * @override
     */
    Reference.prototype.toString = function () {
        __WEBPACK_IMPORTED_MODULE_0__implementation_args__["g" /* validate */]('toString', [], arguments);
        return 'gs://' + this.location.bucket + '/' + this.location.path;
    };
    Reference.prototype.newRef = function (authWrapper, location) {
        return new Reference(authWrapper, location);
    };
    Reference.prototype.mappings = function () {
        return __WEBPACK_IMPORTED_MODULE_4__implementation_metadata__["b" /* getMappings */]();
    };
    /**
     * @return A reference to the object obtained by
     *     appending childPath, removing any duplicate, beginning, or trailing
     *     slashes.
     */
    Reference.prototype.child = function (childPath) {
        __WEBPACK_IMPORTED_MODULE_0__implementation_args__["g" /* validate */]('child', [__WEBPACK_IMPORTED_MODULE_0__implementation_args__["e" /* stringSpec */]()], arguments);
        var newPath = __WEBPACK_IMPORTED_MODULE_6__implementation_path__["a" /* child */](this.location.path, childPath);
        var location = new __WEBPACK_IMPORTED_MODULE_3__implementation_location__["a" /* Location */](this.location.bucket, newPath);
        return this.newRef(this.authWrapper, location);
    };
    Object.defineProperty(Reference.prototype, "parent", {
        /**
         * @return A reference to the parent of the
         *     current object, or null if the current object is the root.
         */
        get: function () {
            var newPath = __WEBPACK_IMPORTED_MODULE_6__implementation_path__["c" /* parent */](this.location.path);
            if (newPath === null) {
                return null;
            }
            var location = new __WEBPACK_IMPORTED_MODULE_3__implementation_location__["a" /* Location */](this.location.bucket, newPath);
            return this.newRef(this.authWrapper, location);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "root", {
        /**
         * @return An reference to the root of this
         *     object's bucket.
         */
        get: function () {
            var location = new __WEBPACK_IMPORTED_MODULE_3__implementation_location__["a" /* Location */](this.location.bucket, '');
            return this.newRef(this.authWrapper, location);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "bucket", {
        get: function () {
            return this.location.bucket;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "fullPath", {
        get: function () {
            return this.location.path;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "name", {
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_6__implementation_path__["b" /* lastComponent */](this.location.path);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "storage", {
        get: function () {
            return this.authWrapper.service();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Uploads a blob to this object's location.
     * @param data The blob to upload.
     * @return An UploadTask that lets you control and
     *     observe the upload.
     */
    Reference.prototype.put = function (data, metadata) {
        if (metadata === void 0) { metadata = null; }
        __WEBPACK_IMPORTED_MODULE_0__implementation_args__["g" /* validate */]('put', [__WEBPACK_IMPORTED_MODULE_0__implementation_args__["f" /* uploadDataSpec */](), __WEBPACK_IMPORTED_MODULE_0__implementation_args__["b" /* metadataSpec */](true)], arguments);
        this.throwIfRoot_('put');
        return new __WEBPACK_IMPORTED_MODULE_10__task__["a" /* UploadTask */](this, this.authWrapper, this.location, this.mappings(), new __WEBPACK_IMPORTED_MODULE_1__implementation_blob__["a" /* FbsBlob */](data), metadata);
    };
    /**
     * Uploads a string to this object's location.
     * @param string The string to upload.
     * @param opt_format The format of the string to upload.
     * @return An UploadTask that lets you control and
     *     observe the upload.
     */
    Reference.prototype.putString = function (string, format, opt_metadata) {
        if (format === void 0) { format = __WEBPACK_IMPORTED_MODULE_8__implementation_string__["a" /* StringFormat */].RAW; }
        __WEBPACK_IMPORTED_MODULE_0__implementation_args__["g" /* validate */]('putString', [
            __WEBPACK_IMPORTED_MODULE_0__implementation_args__["e" /* stringSpec */](),
            __WEBPACK_IMPORTED_MODULE_0__implementation_args__["e" /* stringSpec */](__WEBPACK_IMPORTED_MODULE_8__implementation_string__["c" /* formatValidator */], true),
            __WEBPACK_IMPORTED_MODULE_0__implementation_args__["b" /* metadataSpec */](true)
        ], arguments);
        this.throwIfRoot_('putString');
        var data = __WEBPACK_IMPORTED_MODULE_8__implementation_string__["b" /* dataFromString */](format, string);
        var metadata = __WEBPACK_IMPORTED_MODULE_5__implementation_object__["a" /* clone */](opt_metadata);
        if (!__WEBPACK_IMPORTED_MODULE_9__implementation_type__["a" /* isDef */](metadata['contentType']) && __WEBPACK_IMPORTED_MODULE_9__implementation_type__["a" /* isDef */](data.contentType)) {
            metadata['contentType'] = data.contentType;
        }
        return new __WEBPACK_IMPORTED_MODULE_10__task__["a" /* UploadTask */](this, this.authWrapper, this.location, this.mappings(), new __WEBPACK_IMPORTED_MODULE_1__implementation_blob__["a" /* FbsBlob */](data.data, true), metadata);
    };
    /**
     * Deletes the object at this location.
     * @return A promise that resolves if the deletion succeeds.
     */
    Reference.prototype.delete = function () {
        __WEBPACK_IMPORTED_MODULE_0__implementation_args__["g" /* validate */]('delete', [], arguments);
        this.throwIfRoot_('delete');
        var self = this;
        return this.authWrapper.getAuthToken().then(function (authToken) {
            var requestInfo = __WEBPACK_IMPORTED_MODULE_7__implementation_requests__["d" /* deleteObject */](self.authWrapper, self.location);
            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
        });
    };
    /**
     *     A promise that resolves with the metadata for this object. If this
     *     object doesn't exist or metadata cannot be retreived, the promise is
     *     rejected.
     */
    Reference.prototype.getMetadata = function () {
        __WEBPACK_IMPORTED_MODULE_0__implementation_args__["g" /* validate */]('getMetadata', [], arguments);
        this.throwIfRoot_('getMetadata');
        var self = this;
        return this.authWrapper.getAuthToken().then(function (authToken) {
            var requestInfo = __WEBPACK_IMPORTED_MODULE_7__implementation_requests__["e" /* getMetadata */](self.authWrapper, self.location, self.mappings());
            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
        });
    };
    /**
     * Updates the metadata for this object.
     * @param metadata The new metadata for the object.
     *     Only values that have been explicitly set will be changed. Explicitly
     *     setting a value to null will remove the metadata.
     * @return A promise that resolves
     *     with the new metadata for this object.
     *     @see firebaseStorage.Reference.prototype.getMetadata
     */
    Reference.prototype.updateMetadata = function (metadata) {
        __WEBPACK_IMPORTED_MODULE_0__implementation_args__["g" /* validate */]('updateMetadata', [__WEBPACK_IMPORTED_MODULE_0__implementation_args__["b" /* metadataSpec */]()], arguments);
        this.throwIfRoot_('updateMetadata');
        var self = this;
        return this.authWrapper.getAuthToken().then(function (authToken) {
            var requestInfo = __WEBPACK_IMPORTED_MODULE_7__implementation_requests__["i" /* updateMetadata */](self.authWrapper, self.location, metadata, self.mappings());
            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
        });
    };
    /**
     * @return A promise that resolves with the download
     *     URL for this object.
     */
    Reference.prototype.getDownloadURL = function () {
        __WEBPACK_IMPORTED_MODULE_0__implementation_args__["g" /* validate */]('getDownloadURL', [], arguments);
        this.throwIfRoot_('getDownloadURL');
        return this.getMetadata().then(function (metadata) {
            var url = metadata['downloadURLs'][0];
            if (__WEBPACK_IMPORTED_MODULE_9__implementation_type__["a" /* isDef */](url)) {
                return url;
            }
            else {
                throw __WEBPACK_IMPORTED_MODULE_2__implementation_error__["l" /* noDownloadURL */]();
            }
        });
    };
    Reference.prototype.throwIfRoot_ = function (name) {
        if (this.location.path === '') {
            throw __WEBPACK_IMPORTED_MODULE_2__implementation_error__["j" /* invalidRootOperation */](name);
        }
    };
    return Reference;
}());


//# sourceMappingURL=reference.js.map


/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = parent;
/* harmony export (immutable) */ __webpack_exports__["a"] = child;
/* harmony export (immutable) */ __webpack_exports__["b"] = lastComponent;
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Contains helper methods for manipulating paths.
 */
/**
 * @return Null if the path is already at the root.
 */
function parent(path) {
    if (path.length == 0) {
        return null;
    }
    var index = path.lastIndexOf('/');
    if (index === -1) {
        return '';
    }
    var newPath = path.slice(0, index);
    return newPath;
}
function child(path, childPath) {
    var canonicalChildPath = childPath
        .split('/')
        .filter(function (component) {
        return component.length > 0;
    })
        .join('/');
    if (path.length === 0) {
        return canonicalChildPath;
    }
    else {
        return path + '/' + canonicalChildPath;
    }
}
/**
 * Returns the last component of a path.
 * '/foo/bar' -> 'bar'
 * '/foo/bar/baz/' -> 'baz/'
 * '/a' -> 'a'
 */
function lastComponent(path) {
    var index = path.lastIndexOf('/', path.length - 2);
    if (index === -1) {
        return path;
    }
    else {
        return path.slice(index + 1);
    }
}

//# sourceMappingURL=path.js.map


/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FbsBlob; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__fs__ = __webpack_require__(158);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__string__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__type__ = __webpack_require__(6);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file Provides a Blob-like wrapper for various binary types (including the
 * native Blob type). This makes it possible to upload types like ArrayBuffers,
 * making uploads possible in environments without the native Blob type.
 */




/**
 * @param opt_elideCopy If true, doesn't copy mutable input data
 *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
 *     modified after this blob's construction.
 */
var FbsBlob = /** @class */ (function () {
    function FbsBlob(data, opt_elideCopy) {
        var size = 0;
        var blobType = '';
        if (__WEBPACK_IMPORTED_MODULE_2__type__["d" /* isNativeBlob */](data)) {
            this.data_ = data;
            size = data.size;
            blobType = data.type;
        }
        else if (data instanceof ArrayBuffer) {
            if (opt_elideCopy) {
                this.data_ = new Uint8Array(data);
            }
            else {
                this.data_ = new Uint8Array(data.byteLength);
                this.data_.set(new Uint8Array(data));
            }
            size = this.data_.length;
        }
        else if (data instanceof Uint8Array) {
            if (opt_elideCopy) {
                this.data_ = data;
            }
            else {
                this.data_ = new Uint8Array(data.length);
                this.data_.set(data);
            }
            size = data.length;
        }
        this.size_ = size;
        this.type_ = blobType;
    }
    FbsBlob.prototype.size = function () {
        return this.size_;
    };
    FbsBlob.prototype.type = function () {
        return this.type_;
    };
    FbsBlob.prototype.slice = function (startByte, endByte) {
        if (__WEBPACK_IMPORTED_MODULE_2__type__["d" /* isNativeBlob */](this.data_)) {
            var realBlob = this.data_;
            var sliced = __WEBPACK_IMPORTED_MODULE_0__fs__["b" /* sliceBlob */](realBlob, startByte, endByte);
            if (sliced === null) {
                return null;
            }
            return new FbsBlob(sliced);
        }
        else {
            var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
            return new FbsBlob(slice, true);
        }
    };
    FbsBlob.getBlob = function () {
        var var_args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            var_args[_i] = arguments[_i];
        }
        if (__WEBPACK_IMPORTED_MODULE_2__type__["e" /* isNativeBlobDefined */]()) {
            var blobby = var_args.map(function (val) {
                if (val instanceof FbsBlob) {
                    return val.data_;
                }
                else {
                    return val;
                }
            });
            return new FbsBlob(__WEBPACK_IMPORTED_MODULE_0__fs__["a" /* getBlob */].apply(null, blobby));
        }
        else {
            var uint8Arrays = var_args.map(function (val) {
                if (__WEBPACK_IMPORTED_MODULE_2__type__["j" /* isString */](val)) {
                    return __WEBPACK_IMPORTED_MODULE_1__string__["b" /* dataFromString */](__WEBPACK_IMPORTED_MODULE_1__string__["a" /* StringFormat */].RAW, val).data;
                }
                else {
                    // Blobs don't exist, so this has to be a Uint8Array.
                    return val.data_;
                }
            });
            var finalLength_1 = 0;
            uint8Arrays.forEach(function (array) {
                finalLength_1 += array.byteLength;
            });
            var merged_1 = new Uint8Array(finalLength_1);
            var index_1 = 0;
            uint8Arrays.forEach(function (array) {
                for (var i = 0; i < array.length; i++) {
                    merged_1[index_1++] = array[i];
                }
            });
            return new FbsBlob(merged_1, true);
        }
    };
    FbsBlob.prototype.uploadData = function () {
        return this.data_;
    };
    return FbsBlob;
}());


//# sourceMappingURL=blob.js.map


/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export handlerCheck */
/* unused harmony export metadataHandler */
/* unused harmony export sharedErrorHandler */
/* unused harmony export objectErrorHandler */
/* harmony export (immutable) */ __webpack_exports__["e"] = getMetadata;
/* harmony export (immutable) */ __webpack_exports__["i"] = updateMetadata;
/* harmony export (immutable) */ __webpack_exports__["d"] = deleteObject;
/* unused harmony export determineContentType_ */
/* unused harmony export metadataForUpload_ */
/* harmony export (immutable) */ __webpack_exports__["g"] = multipartUpload;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResumableUploadStatus; });
/* unused harmony export checkResumeHeader_ */
/* harmony export (immutable) */ __webpack_exports__["c"] = createResumableUpload;
/* harmony export (immutable) */ __webpack_exports__["f"] = getResumableUploadStatus;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return resumableUploadChunkSize; });
/* harmony export (immutable) */ __webpack_exports__["b"] = continueResumableUpload;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__array__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__blob__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__error__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__metadata__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__requestinfo__ = __webpack_require__(159);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__type__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__url__ = __webpack_require__(38);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * Throws the UNKNOWN FirebaseStorageError if cndn is false.
 */
function handlerCheck(cndn) {
    if (!cndn) {
        throw __WEBPACK_IMPORTED_MODULE_2__error__["s" /* unknown */]();
    }
}
function metadataHandler(authWrapper, mappings) {
    function handler(xhr, text) {
        var metadata = __WEBPACK_IMPORTED_MODULE_3__metadata__["a" /* fromResourceString */](authWrapper, text, mappings);
        handlerCheck(metadata !== null);
        return metadata;
    }
    return handler;
}
function sharedErrorHandler(location) {
    function errorHandler(xhr, err) {
        var newErr;
        if (xhr.getStatus() === 401) {
            newErr = __WEBPACK_IMPORTED_MODULE_2__error__["q" /* unauthenticated */]();
        }
        else {
            if (xhr.getStatus() === 402) {
                newErr = __WEBPACK_IMPORTED_MODULE_2__error__["n" /* quotaExceeded */](location.bucket);
            }
            else {
                if (xhr.getStatus() === 403) {
                    newErr = __WEBPACK_IMPORTED_MODULE_2__error__["r" /* unauthorized */](location.path);
                }
                else {
                    newErr = err;
                }
            }
        }
        newErr.setServerResponseProp(err.serverResponseProp());
        return newErr;
    }
    return errorHandler;
}
function objectErrorHandler(location) {
    var shared = sharedErrorHandler(location);
    function errorHandler(xhr, err) {
        var newErr = shared(xhr, err);
        if (xhr.getStatus() === 404) {
            newErr = __WEBPACK_IMPORTED_MODULE_2__error__["m" /* objectNotFound */](location.path);
        }
        newErr.setServerResponseProp(err.serverResponseProp());
        return newErr;
    }
    return errorHandler;
}
function getMetadata(authWrapper, location, mappings) {
    var urlPart = location.fullServerUrl();
    var url = __WEBPACK_IMPORTED_MODULE_7__url__["b" /* makeNormalUrl */](urlPart);
    var method = 'GET';
    var timeout = authWrapper.maxOperationRetryTime();
    var requestInfo = new __WEBPACK_IMPORTED_MODULE_5__requestinfo__["a" /* RequestInfo */](url, method, metadataHandler(authWrapper, mappings), timeout);
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
function updateMetadata(authWrapper, location, metadata, mappings) {
    var urlPart = location.fullServerUrl();
    var url = __WEBPACK_IMPORTED_MODULE_7__url__["b" /* makeNormalUrl */](urlPart);
    var method = 'PATCH';
    var body = __WEBPACK_IMPORTED_MODULE_3__metadata__["d" /* toResourceString */](metadata, mappings);
    var headers = { 'Content-Type': 'application/json; charset=utf-8' };
    var timeout = authWrapper.maxOperationRetryTime();
    var requestInfo = new __WEBPACK_IMPORTED_MODULE_5__requestinfo__["a" /* RequestInfo */](url, method, metadataHandler(authWrapper, mappings), timeout);
    requestInfo.headers = headers;
    requestInfo.body = body;
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
function deleteObject(authWrapper, location) {
    var urlPart = location.fullServerUrl();
    var url = __WEBPACK_IMPORTED_MODULE_7__url__["b" /* makeNormalUrl */](urlPart);
    var method = 'DELETE';
    var timeout = authWrapper.maxOperationRetryTime();
    function handler(xhr, text) { }
    var requestInfo = new __WEBPACK_IMPORTED_MODULE_5__requestinfo__["a" /* RequestInfo */](url, method, handler, timeout);
    requestInfo.successCodes = [200, 204];
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
function determineContentType_(metadata, blob) {
    return ((metadata && metadata['contentType']) ||
        (blob && blob.type()) ||
        'application/octet-stream');
}
function metadataForUpload_(location, blob, opt_metadata) {
    var metadata = __WEBPACK_IMPORTED_MODULE_4__object__["a" /* clone */](opt_metadata);
    metadata['fullPath'] = location.path;
    metadata['size'] = blob.size();
    if (!metadata['contentType']) {
        metadata['contentType'] = determineContentType_(null, blob);
    }
    return metadata;
}
function multipartUpload(authWrapper, location, mappings, blob, opt_metadata) {
    var urlPart = location.bucketOnlyServerUrl();
    var headers = {
        'X-Goog-Upload-Protocol': 'multipart'
    };
    function genBoundary() {
        var str = '';
        for (var i = 0; i < 2; i++) {
            str =
                str +
                    Math.random()
                        .toString()
                        .slice(2);
        }
        return str;
    }
    var boundary = genBoundary();
    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
    var metadata = metadataForUpload_(location, blob, opt_metadata);
    var metadataString = __WEBPACK_IMPORTED_MODULE_3__metadata__["d" /* toResourceString */](metadata, mappings);
    var preBlobPart = '--' +
        boundary +
        '\r\n' +
        'Content-Type: application/json; charset=utf-8\r\n\r\n' +
        metadataString +
        '\r\n--' +
        boundary +
        '\r\n' +
        'Content-Type: ' +
        metadata['contentType'] +
        '\r\n\r\n';
    var postBlobPart = '\r\n--' + boundary + '--';
    var body = __WEBPACK_IMPORTED_MODULE_1__blob__["a" /* FbsBlob */].getBlob(preBlobPart, blob, postBlobPart);
    if (body === null) {
        throw __WEBPACK_IMPORTED_MODULE_2__error__["d" /* cannotSliceBlob */]();
    }
    var urlParams = { name: metadata['fullPath'] };
    var url = __WEBPACK_IMPORTED_MODULE_7__url__["d" /* makeUploadUrl */](urlPart);
    var method = 'POST';
    var timeout = authWrapper.maxUploadRetryTime();
    var requestInfo = new __WEBPACK_IMPORTED_MODULE_5__requestinfo__["a" /* RequestInfo */](url, method, metadataHandler(authWrapper, mappings), timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.headers = headers;
    requestInfo.body = body.uploadData();
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
/**
 * @param current The number of bytes that have been uploaded so far.
 * @param total The total number of bytes in the upload.
 * @param opt_finalized True if the server has finished the upload.
 * @param opt_metadata The upload metadata, should
 *     only be passed if opt_finalized is true.
 * @struct
 */
var ResumableUploadStatus = /** @class */ (function () {
    function ResumableUploadStatus(current, total, finalized, metadata) {
        this.current = current;
        this.total = total;
        this.finalized = !!finalized;
        this.metadata = metadata || null;
    }
    return ResumableUploadStatus;
}());

function checkResumeHeader_(xhr, opt_allowed) {
    var status;
    try {
        status = xhr.getResponseHeader('X-Goog-Upload-Status');
    }
    catch (e) {
        handlerCheck(false);
    }
    var allowed = opt_allowed || ['active'];
    handlerCheck(__WEBPACK_IMPORTED_MODULE_0__array__["b" /* contains */](allowed, status));
    return status;
}
function createResumableUpload(authWrapper, location, mappings, blob, opt_metadata) {
    var urlPart = location.bucketOnlyServerUrl();
    var metadata = metadataForUpload_(location, blob, opt_metadata);
    var urlParams = { name: metadata['fullPath'] };
    var url = __WEBPACK_IMPORTED_MODULE_7__url__["d" /* makeUploadUrl */](urlPart);
    var method = 'POST';
    var headers = {
        'X-Goog-Upload-Protocol': 'resumable',
        'X-Goog-Upload-Command': 'start',
        'X-Goog-Upload-Header-Content-Length': blob.size(),
        'X-Goog-Upload-Header-Content-Type': metadata['contentType'],
        'Content-Type': 'application/json; charset=utf-8'
    };
    var body = __WEBPACK_IMPORTED_MODULE_3__metadata__["d" /* toResourceString */](metadata, mappings);
    var timeout = authWrapper.maxUploadRetryTime();
    function handler(xhr, text) {
        checkResumeHeader_(xhr);
        var url;
        try {
            url = xhr.getResponseHeader('X-Goog-Upload-URL');
        }
        catch (e) {
            handlerCheck(false);
        }
        handlerCheck(__WEBPACK_IMPORTED_MODULE_6__type__["j" /* isString */](url));
        return url;
    }
    var requestInfo = new __WEBPACK_IMPORTED_MODULE_5__requestinfo__["a" /* RequestInfo */](url, method, handler, timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.headers = headers;
    requestInfo.body = body;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 */
function getResumableUploadStatus(authWrapper, location, url, blob) {
    var headers = { 'X-Goog-Upload-Command': 'query' };
    function handler(xhr, text) {
        var status = checkResumeHeader_(xhr, ['active', 'final']);
        var sizeString;
        try {
            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
        }
        catch (e) {
            handlerCheck(false);
        }
        var size = parseInt(sizeString, 10);
        handlerCheck(!isNaN(size));
        return new ResumableUploadStatus(size, blob.size(), status === 'final');
    }
    var method = 'POST';
    var timeout = authWrapper.maxUploadRetryTime();
    var requestInfo = new __WEBPACK_IMPORTED_MODULE_5__requestinfo__["a" /* RequestInfo */](url, method, handler, timeout);
    requestInfo.headers = headers;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
/**
 * Any uploads via the resumable upload API must transfer a number of bytes
 * that is a multiple of this number.
 */
var resumableUploadChunkSize = 256 * 1024;
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 * @param chunkSize Number of bytes to upload.
 * @param opt_status The previous status.
 *     If not passed or null, we start from the beginning.
 * @throws fbs.Error If the upload is already complete, the passed in status
 *     has a final size inconsistent with the blob, or the blob cannot be sliced
 *     for upload.
 */
function continueResumableUpload(location, authWrapper, url, blob, chunkSize, mappings, opt_status, opt_progressCallback) {
    // TODO(andysoto): standardize on internal asserts
    // assert(!(opt_status && opt_status.finalized));
    var status = new ResumableUploadStatus(0, 0);
    if (opt_status) {
        status.current = opt_status.current;
        status.total = opt_status.total;
    }
    else {
        status.current = 0;
        status.total = blob.size();
    }
    if (blob.size() !== status.total) {
        throw __WEBPACK_IMPORTED_MODULE_2__error__["p" /* serverFileWrongSize */]();
    }
    var bytesLeft = status.total - status.current;
    var bytesToUpload = bytesLeft;
    if (chunkSize > 0) {
        bytesToUpload = Math.min(bytesToUpload, chunkSize);
    }
    var startByte = status.current;
    var endByte = startByte + bytesToUpload;
    var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
    var headers = {
        'X-Goog-Upload-Command': uploadCommand,
        'X-Goog-Upload-Offset': status.current
    };
    var body = blob.slice(startByte, endByte);
    if (body === null) {
        throw __WEBPACK_IMPORTED_MODULE_2__error__["d" /* cannotSliceBlob */]();
    }
    function handler(xhr, text) {
        // TODO(andysoto): Verify the MD5 of each uploaded range:
        // the 'x-range-md5' header comes back with status code 308 responses.
        // We'll only be able to bail out though, because you can't re-upload a
        // range that you previously uploaded.
        var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
        var newCurrent = status.current + bytesToUpload;
        var size = blob.size();
        var metadata;
        if (uploadStatus === 'final') {
            metadata = metadataHandler(authWrapper, mappings)(xhr, text);
        }
        else {
            metadata = null;
        }
        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
    }
    var method = 'POST';
    var timeout = authWrapper.maxUploadRetryTime();
    var requestInfo = new __WEBPACK_IMPORTED_MODULE_5__requestinfo__["a" /* RequestInfo */](url, method, handler, timeout);
    requestInfo.headers = headers;
    requestInfo.body = body.uploadData();
    requestInfo.progressCallback = opt_progressCallback || null;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}

//# sourceMappingURL=requests.js.map


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(82);


/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__game__ = __webpack_require__(83);


$( () => {
  const game = new __WEBPACK_IMPORTED_MODULE_0__game__["a" /* default */]();
  $('#play').on('click', game.handlePlayButtonClick.bind(game));
});


/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__tile__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__score__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__board__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__leaderboard__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__current_selection__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__timer__ = __webpack_require__(171);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__submitted_words__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__play_button__ = __webpack_require__(172);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__play_button___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__play_button__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__dictionary__ = __webpack_require__(173);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__sound__ = __webpack_require__(175);












class Game {
  constructor() {
      this.dictionaryFile = new __WEBPACK_IMPORTED_MODULE_8__dictionary__["a" /* default */]();

      this.timer = new __WEBPACK_IMPORTED_MODULE_5__timer__["a" /* default */]($("#timer div"), this.gameOver.bind(this));
      this.score = new __WEBPACK_IMPORTED_MODULE_1__score__["a" /* default */]($("#score"));
      this.scoreValue = $("#score").children();
      this.playButton = new __WEBPACK_IMPORTED_MODULE_7__play_button___default.a($("#play"));
      this.handlePlayButton = this.playButton.handlePlayButtonClick.bind(this.playButton);
      this.tiles = new __WEBPACK_IMPORTED_MODULE_0__tile__["a" /* default */]();
      this.currentSelection = new __WEBPACK_IMPORTED_MODULE_4__current_selection__["a" /* default */]($("#current-selection"));

      this.gameOverSound = new __WEBPACK_IMPORTED_MODULE_9__sound__["a" /* default */]('assets/sounds/mlg-airhorn.mp3');
      this.leaderboard = new __WEBPACK_IMPORTED_MODULE_3__leaderboard__["a" /* default */]($("#leaderboard"));

      this.board = new __WEBPACK_IMPORTED_MODULE_2__board__["a" /* default */](
        $("#board"),
        this.currentSelection,
        this.isValidWord.bind(this),
        this.processValidWord.bind(this),
        this.alreadySubmitted.bind(this)
      );

      this.submittedWords = new __WEBPACK_IMPORTED_MODULE_6__submitted_words__["default"]($("#submitted-words"));
      this.resetGame = this.resetGame.bind(this);
  }

  //
  // addToScore(wordArr){
  //   wordArr.forEach( wordObj => {
  //     this.score += wordObj.value;
  //   });
  //   this.$scoreValue.html(this.score);
  // }


  handlePlayButtonClick(e) {
    e.preventDefault();
    if (this.playButton.label === "START") {
      this.handlePlayButton(e, this.begin.bind(this));
    } else {
      this.handlePlayButton(e, this.resetGame.bind(this));
    }
  }


  begin() {
    this.board.activateBoard();
    this.board.populateBoard();
    this.resetScore();
    this.resetSubmittedWords();
    this.timer.start();
  }

  resetGame() {
    this.reset();

    // this.board.populateBoard();
    this.timer.$el.parent().parent().removeClass("red");
    this.board.deactivateBoard();
  }

  gameOver() {
    this.board.deactivateBoard();
    this.gameOverSound.play();
    $("#board").children().children().removeClass("chosen").addClass("not-chosen");
    this.currentSelection.clear();

    if (this.leaderboard.isTopTen(this.score.value)) {
      // $("#nameform").removeClass("hidden").addClass("visible");
      $("#nameform").on("submit", this.leaderboard.handleNameSubmission);
    }
  }

  isValidWord(wordArr) {
    let word = this.wordArrToWordString(wordArr).toLowerCase();
    if (Object.keys(this.dictionaryFile.dictObj).includes(word) &&
      this.alreadySubmitted(word.toUpperCase()) === false) {
      return true;
    }
    return false;
  }

  wordArrToWordString(wordArr) {
    let wordString = "";
    wordArr.forEach( tileObj => {
      wordString += (tileObj.letter);
    });
    return wordString;
  }

  alreadySubmitted(word) {
    if (this.submittedWords.list.includes(word)) {
      return true;
    }
    return false;
  }

  processValidWord(wordArr) {

    this.addWordToSubmittedWords(wordArr);
    let newScore = this.score.addValue(wordArr);
    this.currentSelection.clear();
    // this.addToScore(newScore);
  }

  reset() {
    this.timer.reset();
    this.resetScore();
    this.resetSubmittedWords();
    $("#board").children().children().removeClass("chosen").addClass("not-chosen");
  }

  resetScore() {
    this.score.value = 0;
    this.scoreValue.html(0);
  }

  resetSubmittedWords() {
    this.submittedWords.list = [];
    this.submittedWords.$el.find(".submitted-words-word").remove();
  }

  addWordToSubmittedWords(wordArr) {
    let letters = [];
    wordArr.forEach( letterObj => {
      letters.push(letterObj.letter);
    });
    let word = letters.join("");
    this.submittedWords.list.push(word);
    this.renderSubmittedWordList(word);
  }

  renderSubmittedWordList(word) {

    let $li = $("<li>");
    $li.append($("<span class='submitted-words-word'></span>"));
    $li.children().html(word);
    $("#submitted-words-list").append($li);
  }
}

/* harmony default export */ __webpack_exports__["a"] = (Game);


/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const SubmittedWords = __webpack_require__(41);

class Score {
  constructor($el) {
    this.$el = $el;
    this.value = 0;
    this.$el.html(`<div id="scoreVal"> ${this.value} </div>`);
    this.updateScoreView = this.updateScoreView.bind(this);
  }

  addValue(wordArr) {
    this.value += this.valueWord(wordArr);
    this.updateScoreView();
  }

  valueWord(wordArr) {
    let points = 0;
    wordArr.forEach( tileObj => {
      points += tileObj.value;
    });
    return points;
  }

  updateScoreView() {
    $("#scoreVal").html(this.value);
  }
}

/* harmony default export */ __webpack_exports__["a"] = (Score);


/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__tile__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sound__ = __webpack_require__(175);



class Board {
  constructor($el, currentSelection, isValidWord, submitWordCB, alreadySubmittedCB) {
    this.$el = $el;
    this.currentSelection = currentSelection;
    this.isValidWord = isValidWord;
    this.tiles = new __WEBPACK_IMPORTED_MODULE_0__tile__["a" /* default */]();
    this.processValidWordCB = submitWordCB;
    this.alreadySubmittedCB = alreadySubmittedCB;

    this.mouseSound = new __WEBPACK_IMPORTED_MODULE_1__sound__["a" /* default */]('assets/sounds/click2.wav');
    this.goodWordSound = new __WEBPACK_IMPORTED_MODULE_1__sound__["a" /* default */]('assets/sounds/ShabbaRanks_Shabba.mp3');
    this.badWordSound = new __WEBPACK_IMPORTED_MODULE_1__sound__["a" /* default */]('assets/sounds/CollieBuddz_Nanananano.mp3');

    this.handleTileMousedown = this.handleTileMousedown.bind(this);
    this.handleTileMouseenter = this.handleTileMouseenter.bind(this);
    this.handleWordSubmission = this.handleWordSubmission.bind(this);

    this.resetCurrentSelection = this.resetCurrentSelection.bind(this);
    this.setup();
    this.isDragging = false;
    this.previousTilePos = [];
  }

  setup() {
    this.$el.children().remove();
    const $ul = $("<ul>");

    for (let row = 0; row < 4; row++) {
      for (let col = 0; col < 4; col++) {
        let $li = $("<li>");
        $li.data("pos", [col, row]);
        $li.append($("<span class='board-tile letter'></span>"));
        $li.append($("<span class='board-tile points'></span>"));
        $ul.append($li);
      }
    }

    this.$el.append($ul);
    this.populateBoard();
  }

  populateBoard() {
    $("#board li").each( (idx, li) => {
      let randomTile = this.tiles.randomTile();
      $(li).addClass("not-chosen");
      $(li).data({tileObj: { letter : randomTile.letter, value : randomTile.value}});
      $(li).children(".points").html(randomTile.value);
      $(li).children(".letter").html(randomTile.letter);
    });
    this.tiles.populateAllTiles();
  }

  activateBoard() {
    $("#board li").mousedown( (e) =>{
      this.handleTileMousedown(e);
    }).mouseenter( (e) => {
      if (this.isDragging) {
        this.handleTileMouseenter(e);
      }
    });

    $("body")
    .on("mouseup mouseleave", this.handleWordSubmission);
  }

  deactivateBoard() {
    $("#board li").off();
    $("body").off();
  }

  handleTileMousedown(e) {
    this.mouseSound.play();
    e.preventDefault();
    $(e.currentTarget).removeClass("not-chosen").addClass("chosen");
    this.updateCurrentSelection($(e.currentTarget).data().tileObj);
    this.isDragging = true;
    this.previousTilePos.push($(e.currentTarget).data().pos);
  }

  handleTileMouseenter(e) {
    this.mouseSound.play();
    e.preventDefault();
    $(e.currentTarget).removeClass("not-chosen").addClass("chosen");

    if (this.isDragging === true && this.isValidSelection($(e.currentTarget).data().pos)) {

      this.updateCurrentSelection($(e.currentTarget).data().tileObj);
      this.previousTilePos.push($(e.currentTarget).data().pos);
    }
  }

  handleWordSubmission(e) {
    e.preventDefault();
    const wasDragging = this.isDragging;
    this.isDragging = false;
    if (wasDragging) {
      if (this.isValidWord(this.currentSelection.currentWord)) {
        this.processValidWordCB(this.currentSelection.currentWord);
        this.goodWordSound.play();
      } else {
        this.badWordSound.play();
      }
      this.resetCurrentSelection();
    }
    $("#board").children().children().removeClass("chosen").addClass("not-chosen");
    this.previousTilePos = [];
  }

  isValidSelection(pos) {
    // verifies the e.currentTarget is
    // next to the previous currentTarget
    // only for handleTileMousenter
    let length = this.previousTilePos.length;
    let x = this.previousTilePos[length-1][0];
    let y = this.previousTilePos[length-1][1];
    if (
      (this.previousTilePos.includes(pos) === false) &&
      ((((pos[0] - 1) === x) && ([(y-1), y, (y+1)].includes(pos[1]))) ||
      (((pos[0]) === x) && ([(y-1),(y+1)].includes(pos[1]))) ||
      (((pos[0] + 1) === x) && ([(y-1), y, (y+1)].includes(pos[1]))))
      ) {
        return true;
    }
    return false;
  }



  updateCurrentSelection(tileObj) {
    // adds tileObj to currentSelection array

    this.currentSelection.receiveCurrentTile(tileObj);
  }

  resetCurrentSelection() {
    this.currentSelection.clear();
  }

}

/* harmony default export */ __webpack_exports__["a"] = (Board);


/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__db__ = __webpack_require__(87);


class Leaderboard {
  constructor($el) {
    this.$el = $el;
    this.leaders = [{name: "Dae", value: 0}];
    this.db = __WEBPACK_IMPORTED_MODULE_0__db__["a" /* default */];
    // this.setup = this.setup.bind(this);
    this.sortLeaders = this.sortLeaders.bind(this);
    this.mapLeaderboard = this.mapLeaderboard.bind(this);
    this.handleNameSubmission = this.handleNameSubmission.bind(this);
    this.mapLeaderboard();

  }

  updateLeaderboard(username, score) {
    this.leaders.push({name: username, value: score});
    this.sortLeaders();
    this.leaders.slice(0,11);
    this.mapLeaderboard();
  }

  mapLeaderboard() {
    $("#leaders").empty();
    debugger
    this.leaders.forEach( (leader, idx) => {

      let $li = $("<li>");
      $li.append($(`<span class='leaderboard-entry num'>${idx + 1}</span>`));
      $li.append($(`<span class='leaderboard-entry name'>${leader.name}</span>`));
      $li.append($(`<span class='leaderboard-entry score'>${leader.value}</span>`));
      $("#leaders").append($li);
    });

  }

  sortLeaders() {
    this.leaders.sort( (a,b) => {
      return b.value - a.value;
    });
  }


  handleNameSubmission(e) {
    e.preventDefault();
    let newName = $(e.currentTarget).children().first()[0].value;
    let newValue = parseInt($("#scoreVal").html());
    debugger
    this.updateLeaderboard(newName, newValue);
    // $("#nameform").removeClass("visible").addClass("hidden");

  }

  isTopTen(score) {
    if ((this.leaders[this.leaders.length-1].value < score) || (this.leaders.length === 0)){
      return true;
    }
    return false;
  }

  //
  // setup() {
  //
  // }
  //
  // addToLeaderboard() {
  //   let letters = [];
  //   wordArr.forEach( letterObj => {
  //     letters.push(letterObj.letter);
  //   });
  //   let word = letters.join("");
  //   this.submittedWords.list.push(word);
  //   this.renderSubmittedWordList(word);
  // }
  //
  // renderLeaderboard(word) {
  //
  //   let $li = $("<li>");
  //   $li.append($("<span class='leaderboard-entry'></span>"));
  //   $li.children().html(word);
  //   $("#leaderboard-entry").append($li);
  // }

}

/* harmony default export */ __webpack_exports__["a"] = (Leaderboard);


/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_firebase__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_firebase___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_firebase__);


const config = {
  apiKey: "AIzaSyADhkBhnWPpR6E-t_lO9vuf8Z4yTLi4S50",
  authDomain: "words-with-myself.firebaseapp.com",
  databaseURL: "https://words-with-myself.firebaseio.com",
  projectId: "words-with-myself",
  storageBucket: "words-with-myself.appspot.com",
  messagingSenderId: "617204252921"
};
__WEBPACK_IMPORTED_MODULE_0_firebase___default.a.initializeApp(config);

const db = __WEBPACK_IMPORTED_MODULE_0_firebase___default.a.database();

/* harmony default export */ __webpack_exports__["a"] = (db);


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var firebase = __webpack_require__(89);
__webpack_require__(109);
__webpack_require__(111);
__webpack_require__(146);
__webpack_require__(153);

module.exports = firebase;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

__webpack_require__(90);
module.exports = __webpack_require__(8).default;


/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_polyfills_promise__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_polyfills_promise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__src_polyfills_promise__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_shims_find__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_shims_find___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__src_shims_find__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_shims_findIndex__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_shims_findIndex___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__src_shims_findIndex__);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




//# sourceMappingURL=index.js.map


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __global = (function () {
    if (typeof global !== 'undefined') {
        return global;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    throw new Error('unable to locate global object');
})();
// Polyfill Promise
if (typeof Promise === 'undefined') {
    // HACK: TS throws an error if I attempt to use 'dot-notation'
    __global['Promise'] = Promise = __webpack_require__(92);
}

//# sourceMappingURL=promise.js.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(setImmediate) {(function (root) {

  // Store setTimeout reference so promise-polyfill will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var setTimeoutFunc = setTimeout;

  function noop() {}
  
  // Polyfill for Function.prototype.bind
  function bind(fn, thisArg) {
    return function () {
      fn.apply(thisArg, arguments);
    };
  }

  function Promise(fn) {
    if (!(this instanceof Promise)) throw new TypeError('Promises must be constructed via new');
    if (typeof fn !== 'function') throw new TypeError('not a function');
    this._state = 0;
    this._handled = false;
    this._value = undefined;
    this._deferreds = [];

    doResolve(fn, this);
  }

  function handle(self, deferred) {
    while (self._state === 3) {
      self = self._value;
    }
    if (self._state === 0) {
      self._deferreds.push(deferred);
      return;
    }
    self._handled = true;
    Promise._immediateFn(function () {
      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
        return;
      }
      var ret;
      try {
        ret = cb(self._value);
      } catch (e) {
        reject(deferred.promise, e);
        return;
      }
      resolve(deferred.promise, ret);
    });
  }

  function resolve(self, newValue) {
    try {
      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');
      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = newValue.then;
        if (newValue instanceof Promise) {
          self._state = 3;
          self._value = newValue;
          finale(self);
          return;
        } else if (typeof then === 'function') {
          doResolve(bind(then, newValue), self);
          return;
        }
      }
      self._state = 1;
      self._value = newValue;
      finale(self);
    } catch (e) {
      reject(self, e);
    }
  }

  function reject(self, newValue) {
    self._state = 2;
    self._value = newValue;
    finale(self);
  }

  function finale(self) {
    if (self._state === 2 && self._deferreds.length === 0) {
      Promise._immediateFn(function() {
        if (!self._handled) {
          Promise._unhandledRejectionFn(self._value);
        }
      });
    }

    for (var i = 0, len = self._deferreds.length; i < len; i++) {
      handle(self, self._deferreds[i]);
    }
    self._deferreds = null;
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, self) {
    var done = false;
    try {
      fn(function (value) {
        if (done) return;
        done = true;
        resolve(self, value);
      }, function (reason) {
        if (done) return;
        done = true;
        reject(self, reason);
      });
    } catch (ex) {
      if (done) return;
      done = true;
      reject(self, ex);
    }
  }

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };

  Promise.prototype.then = function (onFulfilled, onRejected) {
    var prom = new (this.constructor)(noop);

    handle(this, new Handler(onFulfilled, onRejected, prom));
    return prom;
  };

  Promise.all = function (arr) {
    return new Promise(function (resolve, reject) {
      if (!arr || typeof arr.length === 'undefined') throw new TypeError('Promise.all accepts an array');
      var args = Array.prototype.slice.call(arr);
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        try {
          if (val && (typeof val === 'object' || typeof val === 'function')) {
            var then = val.then;
            if (typeof then === 'function') {
              then.call(val, function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
          args[i] = val;
          if (--remaining === 0) {
            resolve(args);
          }
        } catch (ex) {
          reject(ex);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.resolve = function (value) {
    if (value && typeof value === 'object' && value.constructor === Promise) {
      return value;
    }

    return new Promise(function (resolve) {
      resolve(value);
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      for (var i = 0, len = values.length; i < len; i++) {
        values[i].then(resolve, reject);
      }
    });
  };

  // Use polyfill for setImmediate for performance gains
  Promise._immediateFn = (typeof setImmediate === 'function' && function (fn) { setImmediate(fn); }) ||
    function (fn) {
      setTimeoutFunc(fn, 0);
    };

  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
    if (typeof console !== 'undefined' && console) {
      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
    }
  };

  /**
   * Set the immediate function to execute callbacks
   * @param fn {function} Function to execute
   * @deprecated
   */
  Promise._setImmediateFn = function _setImmediateFn(fn) {
    Promise._immediateFn = fn;
  };

  /**
   * Change the function to execute on unhandled rejection
   * @param {function} fn Function to execute on unhandled rejection
   * @deprecated
   */
  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {
    Promise._unhandledRejectionFn = fn;
  };
  
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Promise;
  } else if (!root.Promise) {
    root.Promise = Promise;
  }

})(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(93).setImmediate))

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(94);
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28), __webpack_require__(42)))

/***/ }),
/* 95 */
/***/ (function(module, exports) {

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This is the Array.prototype.find polyfill from MDN
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
 * https://tc39.github.io/ecma262/#sec-array.prototype.find
 */
if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
        value: function (predicate) {
            // 1. Let O be ? ToObject(this value).
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If IsCallable(predicate) is false, throw a TypeError exception.
            if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
            }
            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
            var thisArg = arguments[1];
            // 5. Let k be 0.
            var k = 0;
            // 6. Repeat, while k < len
            while (k < len) {
                // a. Let Pk be ! ToString(k).
                // b. Let kValue be ? Get(O, Pk).
                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                // d. If testResult is true, return kValue.
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return kValue;
                }
                // e. Increase k by 1.
                k++;
            }
            // 7. Return undefined.
            return undefined;
        }
    });
}

//# sourceMappingURL=find.js.map


/***/ }),
/* 96 */
/***/ (function(module, exports) {

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This is the Array.prototype.findIndex polyfill from MDN
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
 * https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
 */
if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
        value: function (predicate) {
            // 1. Let O be ? ToObject(this value).
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If IsCallable(predicate) is false, throw a TypeError exception.
            if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
            }
            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
            var thisArg = arguments[1];
            // 5. Let k be 0.
            var k = 0;
            // 6. Repeat, while k < len
            while (k < len) {
                // a. Let Pk be ! ToString(k).
                // b. Let kValue be ? Get(O, Pk).
                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                // d. If testResult is true, return k.
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return k;
                }
                // e. Increase k by 1.
                k++;
            }
            // 7. Return -1.
            return -1;
        }
    });
}

//# sourceMappingURL=findIndex.js.map


/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createFirebaseNamespace;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__firebase_util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__firebase_util___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__firebase_util__);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var contains = function (obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
};
var DEFAULT_ENTRY_NAME = '[DEFAULT]';
// An array to capture listeners before the true auth functions
// exist
var tokenListeners = [];
/**
 * Global context object for a collection of services using
 * a shared authentication state.
 */
var FirebaseAppImpl = /** @class */ (function () {
    function FirebaseAppImpl(options, name, firebase_) {
        this.firebase_ = firebase_;
        this.isDeleted_ = false;
        this.services_ = {};
        this.name_ = name;
        this.options_ = Object(__WEBPACK_IMPORTED_MODULE_0__firebase_util__["deepCopy"])(options);
        this.INTERNAL = {
            getUid: function () { return null; },
            getToken: function () { return Promise.resolve(null); },
            addAuthTokenListener: function (callback) {
                tokenListeners.push(callback);
                // Make sure callback is called, asynchronously, in the absence of the auth module
                setTimeout(function () { return callback(null); }, 0);
            },
            removeAuthTokenListener: function (callback) {
                tokenListeners = tokenListeners.filter(function (listener) { return listener !== callback; });
            }
        };
    }
    Object.defineProperty(FirebaseAppImpl.prototype, "name", {
        get: function () {
            this.checkDestroyed_();
            return this.name_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl.prototype, "options", {
        get: function () {
            this.checkDestroyed_();
            return this.options_;
        },
        enumerable: true,
        configurable: true
    });
    FirebaseAppImpl.prototype.delete = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.checkDestroyed_();
            resolve();
        })
            .then(function () {
            _this.firebase_.INTERNAL.removeApp(_this.name_);
            var services = [];
            Object.keys(_this.services_).forEach(function (serviceKey) {
                Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {
                    services.push(_this.services_[serviceKey][instanceKey]);
                });
            });
            return Promise.all(services.map(function (service) {
                return service.INTERNAL.delete();
            }));
        })
            .then(function () {
            _this.isDeleted_ = true;
            _this.services_ = {};
        });
    };
    /**
     * Return a service instance associated with this app (creating it
     * on demand), identified by the passed instanceIdentifier.
     *
     * NOTE: Currently storage is the only one that is leveraging this
     * functionality. They invoke it by calling:
     *
     * ```javascript
     * firebase.app().storage('STORAGE BUCKET ID')
     * ```
     *
     * The service name is passed to this already
     * @internal
     */
    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
        this.checkDestroyed_();
        if (!this.services_[name]) {
            this.services_[name] = {};
        }
        if (!this.services_[name][instanceIdentifier]) {
            /**
             * If a custom instance has been defined (i.e. not '[DEFAULT]')
             * then we will pass that instance on, otherwise we pass `null`
             */
            var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME
                ? instanceIdentifier
                : undefined;
            var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);
            this.services_[name][instanceIdentifier] = service;
        }
        return this.services_[name][instanceIdentifier];
    };
    /**
     * Callback function used to extend an App instance at the time
     * of service instance creation.
     */
    FirebaseAppImpl.prototype.extendApp = function (props) {
        var _this = this;
        // Copy the object onto the FirebaseAppImpl prototype
        Object(__WEBPACK_IMPORTED_MODULE_0__firebase_util__["deepExtend"])(this, props);
        /**
         * If the app has overwritten the addAuthTokenListener stub, forward
         * the active token listeners on to the true fxn.
         *
         * TODO: This function is required due to our current module
         * structure. Once we are able to rely strictly upon a single module
         * implementation, this code should be refactored and Auth should
         * provide these stubs and the upgrade logic
         */
        if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {
            tokenListeners.forEach(function (listener) {
                _this.INTERNAL.addAuthTokenListener(listener);
            });
            tokenListeners = [];
        }
    };
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */
    FirebaseAppImpl.prototype.checkDestroyed_ = function () {
        if (this.isDeleted_) {
            error('app-deleted', { name: this.name_ });
        }
    };
    return FirebaseAppImpl;
}());
// Prevent dead-code elimination of these methods w/o invalid property
// copying.
(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
    FirebaseAppImpl.prototype.delete ||
    console.log('dc');
/**
 * Return a firebase namespace object.
 *
 * In production, this will be called exactly once and the result
 * assigned to the 'firebase' global.  It may be called multiple times
 * in unit tests.
 */
function createFirebaseNamespace() {
    var apps_ = {};
    var factories = {};
    var appHooks = {};
    // A namespace is a plain JavaScript Object.
    var namespace = {
        // Hack to prevent Babel from modifying the object returned
        // as the firebase namespace.
        __esModule: true,
        initializeApp: initializeApp,
        app: app,
        apps: null,
        Promise: Promise,
        SDK_VERSION: '4.9.0',
        INTERNAL: {
            registerService: registerService,
            createFirebaseNamespace: createFirebaseNamespace,
            extendNamespace: extendNamespace,
            createSubscribe: __WEBPACK_IMPORTED_MODULE_0__firebase_util__["createSubscribe"],
            ErrorFactory: __WEBPACK_IMPORTED_MODULE_0__firebase_util__["ErrorFactory"],
            removeApp: removeApp,
            factories: factories,
            useAsService: useAsService,
            Promise: Promise,
            deepExtend: __WEBPACK_IMPORTED_MODULE_0__firebase_util__["deepExtend"]
        }
    };
    // Inject a circular default export to allow Babel users who were previously
    // using:
    //
    //   import firebase from 'firebase';
    //   which becomes: var firebase = require('firebase').default;
    //
    // instead of
    //
    //   import * as firebase from 'firebase';
    //   which becomes: var firebase = require('firebase');
    Object(__WEBPACK_IMPORTED_MODULE_0__firebase_util__["patchProperty"])(namespace, 'default', namespace);
    // firebase.apps is a read-only getter.
    Object.defineProperty(namespace, 'apps', {
        get: getApps
    });
    /**
     * Called by App.delete() - but before any services associated with the App
     * are deleted.
     */
    function removeApp(name) {
        var app = apps_[name];
        callAppHooks(app, 'delete');
        delete apps_[name];
    }
    /**
     * Get the App object for a given name (or DEFAULT).
     */
    function app(name) {
        name = name || DEFAULT_ENTRY_NAME;
        if (!contains(apps_, name)) {
            error('no-app', { name: name });
        }
        return apps_[name];
    }
    Object(__WEBPACK_IMPORTED_MODULE_0__firebase_util__["patchProperty"])(app, 'App', FirebaseAppImpl);
    /**
     * Create a new App instance (name must be unique).
     */
    function initializeApp(options, name) {
        if (name === undefined) {
            name = DEFAULT_ENTRY_NAME;
        }
        else {
            if (typeof name !== 'string' || name === '') {
                error('bad-app-name', { name: name + '' });
            }
        }
        if (contains(apps_, name)) {
            error('duplicate-app', { name: name });
        }
        var app = new FirebaseAppImpl(options, name, namespace);
        apps_[name] = app;
        callAppHooks(app, 'create');
        return app;
    }
    /*
     * Return an array of all the non-deleted FirebaseApps.
     */
    function getApps() {
        // Make a copy so caller cannot mutate the apps list.
        return Object.keys(apps_).map(function (name) { return apps_[name]; });
    }
    /*
     * Register a Firebase Service.
     *
     * firebase.INTERNAL.registerService()
     *
     * TODO: Implement serviceProperties.
     */
    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {
        // Cannot re-register a service that already exists
        if (factories[name]) {
            error('duplicate-service', { name: name });
        }
        // Capture the service factory for later service instantiation
        factories[name] = createService;
        // Capture the appHook, if passed
        if (appHook) {
            appHooks[name] = appHook;
            // Run the **new** app hook on all existing apps
            getApps().forEach(function (app) {
                appHook('create', app);
            });
        }
        // The Service namespace is an accessor function ...
        var serviceNamespace = function (appArg) {
            if (appArg === void 0) { appArg = app(); }
            if (typeof appArg[name] !== 'function') {
                // Invalid argument.
                // This happens in the following case: firebase.storage('gs:/')
                error('invalid-app-argument', { name: name });
            }
            // Forward service instance lookup to the FirebaseApp.
            return appArg[name]();
        };
        // ... and a container for service-level properties.
        if (serviceProperties !== undefined) {
            Object(__WEBPACK_IMPORTED_MODULE_0__firebase_util__["deepExtend"])(serviceNamespace, serviceProperties);
        }
        // Monkey-patch the serviceNamespace onto the firebase namespace
        namespace[name] = serviceNamespace;
        // Patch the FirebaseAppImpl prototype
        FirebaseAppImpl.prototype[name] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var serviceFxn = this._getService.bind(this, name);
            return serviceFxn.apply(this, allowMultipleInstances ? args : []);
        };
        return serviceNamespace;
    }
    /**
     * Patch the top-level firebase namespace with additional properties.
     *
     * firebase.INTERNAL.extendNamespace()
     */
    function extendNamespace(props) {
        Object(__WEBPACK_IMPORTED_MODULE_0__firebase_util__["deepExtend"])(namespace, props);
    }
    function callAppHooks(app, eventName) {
        Object.keys(factories).forEach(function (serviceName) {
            // Ignore virtual services
            var factoryName = useAsService(app, serviceName);
            if (factoryName === null) {
                return;
            }
            if (appHooks[factoryName]) {
                appHooks[factoryName](eventName, app);
            }
        });
    }
    // Map the requested service to a registered service name
    // (used to map auth to serverAuth service when needed).
    function useAsService(app, name) {
        if (name === 'serverAuth') {
            return null;
        }
        var useService = name;
        var options = app.options;
        return useService;
    }
    return namespace;
}
function error(code, args) {
    throw appErrors.create(code, args);
}
// TypeScript does not support non-string indexes!
// let errors: {[code: AppError: string} = {
var errors = {
    'no-app': "No Firebase App '{$name}' has been created - " +
        'call Firebase App.initializeApp()',
    'bad-app-name': "Illegal App name: '{$name}",
    'duplicate-app': "Firebase App named '{$name}' already exists",
    'app-deleted': "Firebase App named '{$name}' already deleted",
    'duplicate-service': "Firebase service named '{$name}' already registered",
    'sa-not-supported': 'Initializing the Firebase SDK with a service ' +
        'account is only allowed in a Node.js environment. On client ' +
        'devices, you should instead initialize the SDK with an api key and ' +
        'auth domain',
    'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +
        'Firebase App instance.'
};
var appErrors = new __WEBPACK_IMPORTED_MODULE_0__firebase_util__["ErrorFactory"]('app', 'Firebase', errors);


//# sourceMappingURL=firebaseApp.js.map


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */
function deepCopy(value) {
    return deepExtend(undefined, value);
}
exports.deepCopy = deepCopy;
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 */
function deepExtend(target, source) {
    if (!(source instanceof Object)) {
        return source;
    }
    switch (source.constructor) {
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            var dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) {
                target = {};
            }
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for (var prop in source) {
        if (!source.hasOwnProperty(prop)) {
            continue;
        }
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
exports.deepExtend = deepExtend;
// TODO: Really needed (for JSCompiler type checking)?
function patchProperty(obj, prop, value) {
    obj[prop] = value;
}
exports.patchProperty = patchProperty;

//# sourceMappingURL=deepCopy.js.map


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback
     * @return {!function(?(Error), ?=)}
     */
    Deferred.prototype.wrapCallback = function (callback) {
        var _this = this;
        return function (error, value) {
            if (error) {
                _this.reject(error);
            }
            else {
                _this.resolve(value);
            }
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                _this.promise.catch(function () { });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) {
                    callback(error);
                }
                else {
                    callback(error, value);
                }
            }
        };
    };
    return Deferred;
}());
exports.Deferred = Deferred;

//# sourceMappingURL=deferred.js.map


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(29);
/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return {string} user agent string
 */
exports.getUA = function () {
    if (typeof navigator !== 'undefined' &&
        typeof navigator['userAgent'] === 'string') {
        return navigator['userAgent'];
    }
    else {
        return '';
    }
};
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor
 * Cordova `onDeviceReady`, which would normally wait for a callback.
 *
 * @return {boolean} isMobileCordova
 */
exports.isMobileCordova = function () {
    return (typeof window !== 'undefined' &&
        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(exports.getUA()));
};
/**
 * Detect React Native.
 *
 * @return {boolean} True if ReactNative environment is detected.
 */
exports.isReactNative = function () {
    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
};
/**
 * Detect Node.js.
 *
 * @return {boolean} True if Node.js environment is detected.
 */
exports.isNodeSdk = function () {
    return constants_1.CONSTANTS.NODE_CLIENT === true || constants_1.CONSTANTS.NODE_ADMIN === true;
};

//# sourceMappingURL=environment.js.map


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ERROR_NAME = 'FirebaseError';
var captureStackTrace = Error
    .captureStackTrace;
// Export for faking in tests
function patchCapture(captureFake) {
    var result = captureStackTrace;
    captureStackTrace = captureFake;
    return result;
}
exports.patchCapture = patchCapture;
var FirebaseError = /** @class */ (function () {
    function FirebaseError(code, message) {
        this.code = code;
        this.message = message;
        var stack;
        // We want the stack value, if implemented by Error
        if (captureStackTrace) {
            // Patches this.stack, omitted calls above ErrorFactory#create
            captureStackTrace(this, ErrorFactory.prototype.create);
        }
        else {
            var err_1 = Error.apply(this, arguments);
            this.name = ERROR_NAME;
            // Make non-enumerable getter for the property.
            Object.defineProperty(this, 'stack', {
                get: function () {
                    return err_1.stack;
                }
            });
        }
    }
    return FirebaseError;
}());
exports.FirebaseError = FirebaseError;
// Back-door inheritance
FirebaseError.prototype = Object.create(Error.prototype);
FirebaseError.prototype.constructor = FirebaseError;
FirebaseError.prototype.name = ERROR_NAME;
var ErrorFactory = /** @class */ (function () {
    function ErrorFactory(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
        // Matches {$name}, by default.
        this.pattern = /\{\$([^}]+)}/g;
        // empty
    }
    ErrorFactory.prototype.create = function (code, data) {
        if (data === undefined) {
            data = {};
        }
        var template = this.errors[code];
        var fullCode = this.service + '/' + code;
        var message;
        if (template === undefined) {
            message = 'Error';
        }
        else {
            message = template.replace(this.pattern, function (match, key) {
                var value = data[key];
                return value !== undefined ? value.toString() : '<' + key + '?>';
            });
        }
        // Service: Error message (service/code).
        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';
        var err = new FirebaseError(fullCode, message);
        // Populate the Error object with message parts for programmatic
        // accesses (e.g., e.file).
        for (var prop in data) {
            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {
                continue;
            }
            err[prop] = data[prop];
        }
        return err;
    };
    return ErrorFactory;
}());
exports.ErrorFactory = ErrorFactory;

//# sourceMappingURL=errors.js.map


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var crypt_1 = __webpack_require__(44);
var json_1 = __webpack_require__(45);
/**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {{header: *, claims: *, data: *, signature: string}}
 */
exports.decode = function (token) {
    var header = {}, claims = {}, data = {}, signature = '';
    try {
        var parts = token.split('.');
        header = json_1.jsonEval(crypt_1.base64Decode(parts[0]) || '');
        claims = json_1.jsonEval(crypt_1.base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {};
        delete claims['d'];
    }
    catch (e) { }
    return {
        header: header,
        claims: claims,
        data: data,
        signature: signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {boolean}
 */
exports.isValidTimestamp = function (token) {
    var claims = exports.decode(token).claims, now = Math.floor(new Date().getTime() / 1000), validSince, validUntil;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) {
            validSince = claims['nbf'];
        }
        else if (claims.hasOwnProperty('iat')) {
            validSince = claims['iat'];
        }
        if (claims.hasOwnProperty('exp')) {
            validUntil = claims['exp'];
        }
        else {
            // token will expire after 24h by default
            validUntil = validSince + 86400;
        }
    }
    return (now && validSince && validUntil && now >= validSince && now <= validUntil);
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {?number}
 */
exports.issuedAtTime = function (token) {
    var claims = exports.decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
        return claims['iat'];
    }
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time and non-empty
 * signature.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {boolean}
 */
exports.isValidFormat = function (token) {
    var decoded = exports.decode(token), claims = decoded.claims;
    return (!!decoded.signature &&
        !!claims &&
        typeof claims === 'object' &&
        claims.hasOwnProperty('iat'));
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {boolean}
 */
exports.isAdmin = function (token) {
    var claims = exports.decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};

//# sourceMappingURL=jwt.js.map


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var obj_1 = __webpack_require__(46);
/**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params
 * object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 *
 * @param {!Object} querystringParams
 * @return {string}
 */
exports.querystring = function (querystringParams) {
    var params = [];
    obj_1.forEach(querystringParams, function (key, value) {
        if (Array.isArray(value)) {
            value.forEach(function (arrayVal) {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
            });
        }
        else {
            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
        }
    });
    return params.length ? '&' + params.join('&') : '';
};
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})
 *
 * @param {string} querystring
 * @return {!Object}
 */
exports.querystringDecode = function (querystring) {
    var obj = {};
    var tokens = querystring.replace(/^\?/, '').split('&');
    tokens.forEach(function (token) {
        if (token) {
            var key = token.split('=');
            obj[key[0]] = key[1];
        }
    });
    return obj;
};

//# sourceMappingURL=query.js.map


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var hash_1 = __webpack_require__(105);
/**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */
/**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @extends {Hash}
 * @final
 * @struct
 */
var Sha1 = /** @class */ (function (_super) {
    __extends(Sha1, _super);
    function Sha1() {
        var _this = _super.call(this) || this;
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @type {!Array<number>}
         * @private
         */
        _this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @type {!Array<number>}
         * @private
         */
        _this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @type {!Array<number>}
         * @private
         */
        _this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @type {!Array<number>}
         * @private
         */
        _this.pad_ = [];
        /**
         * @private {number}
         */
        _this.inbuf_ = 0;
        /**
         * @private {number}
         */
        _this.total_ = 0;
        _this.blockSize = 512 / 8;
        _this.pad_[0] = 128;
        for (var i = 1; i < _this.blockSize; ++i) {
            _this.pad_[i] = 0;
        }
        _this.reset();
        return _this;
    }
    Sha1.prototype.reset = function () {
        this.chain_[0] = 0x67452301;
        this.chain_[1] = 0xefcdab89;
        this.chain_[2] = 0x98badcfe;
        this.chain_[3] = 0x10325476;
        this.chain_[4] = 0xc3d2e1f0;
        this.inbuf_ = 0;
        this.total_ = 0;
    };
    /**
     * Internal compress helper function.
     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.
     * @param {number=} opt_offset Offset of the block in the buffer.
     * @private
     */
    Sha1.prototype.compress_ = function (buf, opt_offset) {
        if (!opt_offset) {
            opt_offset = 0;
        }
        var W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') {
            for (var i = 0; i < 16; i++) {
                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                // have a bug that turns the post-increment ++ operator into pre-increment
                // during JIT compilation.  We have code that depends heavily on SHA-1 for
                // correctness and which is affected by this bug, so I've removed all uses
                // of post-increment ++ in which the result value is used.  We can revert
                // this change once the Safari bug
                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                // most clients have been updated.
                W[i] =
                    (buf.charCodeAt(opt_offset) << 24) |
                        (buf.charCodeAt(opt_offset + 1) << 16) |
                        (buf.charCodeAt(opt_offset + 2) << 8) |
                        buf.charCodeAt(opt_offset + 3);
                opt_offset += 4;
            }
        }
        else {
            for (var i = 0; i < 16; i++) {
                W[i] =
                    (buf[opt_offset] << 24) |
                        (buf[opt_offset + 1] << 16) |
                        (buf[opt_offset + 2] << 8) |
                        buf[opt_offset + 3];
                opt_offset += 4;
            }
        }
        // expand to 80 words
        for (var i = 16; i < 80; i++) {
            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
        }
        var a = this.chain_[0];
        var b = this.chain_[1];
        var c = this.chain_[2];
        var d = this.chain_[3];
        var e = this.chain_[4];
        var f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for (var i = 0; i < 80; i++) {
            if (i < 40) {
                if (i < 20) {
                    f = d ^ (b & (c ^ d));
                    k = 0x5a827999;
                }
                else {
                    f = b ^ c ^ d;
                    k = 0x6ed9eba1;
                }
            }
            else {
                if (i < 60) {
                    f = (b & c) | (d & (b | c));
                    k = 0x8f1bbcdc;
                }
                else {
                    f = b ^ c ^ d;
                    k = 0xca62c1d6;
                }
            }
            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
            e = d;
            d = c;
            c = ((b << 30) | (b >>> 2)) & 0xffffffff;
            b = a;
            a = t;
        }
        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
    };
    Sha1.prototype.update = function (bytes, opt_length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) {
            return;
        }
        if (opt_length === undefined) {
            opt_length = bytes.length;
        }
        var lengthMinusBlock = opt_length - this.blockSize;
        var n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        var buf = this.buf_;
        var inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while (n < opt_length) {
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf == 0) {
                while (n <= lengthMinusBlock) {
                    this.compress_(bytes, n);
                    n += this.blockSize;
                }
            }
            if (typeof bytes === 'string') {
                while (n < opt_length) {
                    buf[inbuf] = bytes.charCodeAt(n);
                    ++inbuf;
                    ++n;
                    if (inbuf == this.blockSize) {
                        this.compress_(buf);
                        inbuf = 0;
                        // Jump to the outer loop so we use the full-block optimization.
                        break;
                    }
                }
            }
            else {
                while (n < opt_length) {
                    buf[inbuf] = bytes[n];
                    ++inbuf;
                    ++n;
                    if (inbuf == this.blockSize) {
                        this.compress_(buf);
                        inbuf = 0;
                        // Jump to the outer loop so we use the full-block optimization.
                        break;
                    }
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += opt_length;
    };
    /** @override */
    Sha1.prototype.digest = function () {
        var digest = [];
        var totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) {
            this.update(this.pad_, 56 - this.inbuf_);
        }
        else {
            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        }
        // Add # bits.
        for (var i = this.blockSize - 1; i >= 56; i--) {
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        var n = 0;
        for (var i = 0; i < 5; i++) {
            for (var j = 24; j >= 0; j -= 8) {
                digest[n] = (this.chain_[i] >> j) & 255;
                ++n;
            }
        }
        return digest;
    };
    return Sha1;
}(hash_1.Hash));
exports.Sha1 = Sha1;

//# sourceMappingURL=sha1.js.map


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Abstract cryptographic hash interface.
 *
 * See Sha1 and Md5 for sample implementations.
 *
 */
/**
 * Create a cryptographic hash instance.
 *
 * @constructor
 * @struct
 */
var Hash = /** @class */ (function () {
    function Hash() {
        /**
         * The block size for the hasher.
         * @type {number}
         */
        this.blockSize = -1;
    }
    return Hash;
}());
exports.Hash = Hash;

//# sourceMappingURL=hash.js.map


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */
function createSubscribe(executor, onNoObservers) {
    var proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
exports.createSubscribe = createSubscribe;
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */
var ObserverProxy = /** @class */ (function () {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function ObserverProxy(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task
            .then(function () {
            executor(_this);
        })
            .catch(function (e) {
            _this.error(e);
        });
    }
    ObserverProxy.prototype.next = function (value) {
        this.forEachObserver(function (observer) {
            observer.next(value);
        });
    };
    ObserverProxy.prototype.error = function (error) {
        this.forEachObserver(function (observer) {
            observer.error(error);
        });
        this.close(error);
    };
    ObserverProxy.prototype.complete = function () {
        this.forEachObserver(function (observer) {
            observer.complete();
        });
        this.close();
    };
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */
    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === undefined &&
            error === undefined &&
            complete === undefined) {
            throw new Error('Missing Observer.');
        }
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
            observer = nextOrObserver;
        }
        else {
            observer = {
                next: nextOrObserver,
                error: error,
                complete: complete
            };
        }
        if (observer.next === undefined) {
            observer.next = noop;
        }
        if (observer.error === undefined) {
            observer.error = noop;
        }
        if (observer.complete === undefined) {
            observer.complete = noop;
        }
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) {
            this.task.then(function () {
                try {
                    if (_this.finalError) {
                        observer.error(_this.finalError);
                    }
                    else {
                        observer.complete();
                    }
                }
                catch (e) {
                    // nothing
                }
                return;
            });
        }
        this.observers.push(observer);
        return unsub;
    };
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    ObserverProxy.prototype.unsubscribeOne = function (i) {
        if (this.observers === undefined || this.observers[i] === undefined) {
            return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) {
            this.onNoObservers(this);
        }
    };
    ObserverProxy.prototype.forEachObserver = function (fn) {
        if (this.finalized) {
            // Already closed by previous event....just eat the additional values.
            return;
        }
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for (var i = 0; i < this.observers.length; i++) {
            this.sendOne(i, fn);
        }
    };
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    ObserverProxy.prototype.sendOne = function (i, fn) {
        var _this = this;
        // Execute the callback asynchronously
        this.task.then(function () {
            if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                try {
                    fn(_this.observers[i]);
                }
                catch (e) {
                    // Ignore exceptions raised in Observers or missing methods of an
                    // Observer.
                    // Log error to console. b/31404806
                    if (typeof console !== 'undefined' && console.error) {
                        console.error(e);
                    }
                }
            }
        });
    };
    ObserverProxy.prototype.close = function (err) {
        var _this = this;
        if (this.finalized) {
            return;
        }
        this.finalized = true;
        if (err !== undefined) {
            this.finalError = err;
        }
        // Proxy is no longer needed - garbage collect references
        this.task.then(function () {
            _this.observers = undefined;
            _this.onNoObservers = undefined;
        });
    };
    return ObserverProxy;
}());
/** Turn synchronous function into one called asynchronously. */
function async(fn, onError) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        Promise.resolve(true)
            .then(function () {
            fn.apply(void 0, args);
        })
            .catch(function (error) {
            if (onError) {
                onError(error);
            }
        });
    };
}
exports.async = async;
/**
 * Return true if the object passed in implements any of the named methods.
 */
function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) {
        return false;
    }
    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
        var method = methods_1[_i];
        if (method in obj && typeof obj[method] === 'function') {
            return true;
        }
    }
    return false;
}
function noop() {
    // do nothing
}

//# sourceMappingURL=subscribe.js.map


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param {!string} fnName The function name
 * @param {!number} minCount The minimum number of arguments to allow for the function call
 * @param {!number} maxCount The maximum number of argument to allow for the function call
 * @param {!number} argCount The actual number of arguments provided.
 */
exports.validateArgCount = function (fnName, minCount, maxCount, argCount) {
    var argError;
    if (argCount < minCount) {
        argError = 'at least ' + minCount;
    }
    else if (argCount > maxCount) {
        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    }
    if (argError) {
        var error = fnName +
            ' failed: Was called with ' +
            argCount +
            (argCount === 1 ? ' argument.' : ' arguments.') +
            ' Expects ' +
            argError +
            '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param {!string} fnName The function name
 * @param {!number} argumentNumber The index of the argument
 * @param {boolean} optional Whether or not the argument is optional
 * @return {!string} The prefix to add to the error thrown for validation.
 */
function errorPrefix(fnName, argumentNumber, optional) {
    var argName = '';
    switch (argumentNumber) {
        case 1:
            argName = optional ? 'first' : 'First';
            break;
        case 2:
            argName = optional ? 'second' : 'Second';
            break;
        case 3:
            argName = optional ? 'third' : 'Third';
            break;
        case 4:
            argName = optional ? 'fourth' : 'Fourth';
            break;
        default:
            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
    }
    var error = fnName + ' failed: ';
    error += argName + ' argument ';
    return error;
}
exports.errorPrefix = errorPrefix;
/**
 * @param {!string} fnName
 * @param {!number} argumentNumber
 * @param {!string} namespace
 * @param {boolean} optional
 */
function validateNamespace(fnName, argumentNumber, namespace, optional) {
    if (optional && !namespace)
        return;
    if (typeof namespace !== 'string') {
        //TODO: I should do more validation here. We only allow certain chars in namespaces.
        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid firebase namespace.');
    }
}
exports.validateNamespace = validateNamespace;
function validateCallback(fnName, argumentNumber, callback, optional) {
    if (optional && !callback)
        return;
    if (typeof callback !== 'function')
        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid function.');
}
exports.validateCallback = validateCallback;
function validateContextObject(fnName, argumentNumber, context, optional) {
    if (optional && !context)
        return;
    if (typeof context !== 'object' || context === null)
        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid context object.');
}
exports.validateContextObject = validateContextObject;

//# sourceMappingURL=validation.js.map


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __webpack_require__(43);
// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */
exports.stringToByteArray = function (str) {
    var out = [], p = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 0xd800 && c <= 0xdbff) {
            var high = c - 0xd800; // the high 10 bits.
            i++;
            assert_1.assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
            c = 0x10000 + (high << 10) + low;
        }
        if (c < 128) {
            out[p++] = c;
        }
        else if (c < 2048) {
            out[p++] = (c >> 6) | 192;
            out[p++] = (c & 63) | 128;
        }
        else if (c < 65536) {
            out[p++] = (c >> 12) | 224;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
        else {
            out[p++] = (c >> 18) | 240;
            out[p++] = ((c >> 12) & 63) | 128;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */
exports.stringLength = function (str) {
    var p = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
            p++;
        }
        else if (c < 2048) {
            p += 2;
        }
        else if (c >= 0xd800 && c <= 0xdbff) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        }
        else {
            p += 3;
        }
    }
    return p;
};

//# sourceMappingURL=utf8.js.map


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

__webpack_require__(110);


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {(function() {
  var firebase = __webpack_require__(8).default;
  var h,aa=aa||{},k=this;function m(a){return"string"==typeof a}function ba(a){return"boolean"==typeof a}function ca(){}
function da(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function ea(a){return null===a}function fa(a){return"array"==da(a)}function ha(a){var b=da(a);return"array"==b||"object"==b&&"number"==typeof a.length}function p(a){return"function"==da(a)}function q(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}var ia="closure_uid_"+(1E9*Math.random()>>>0),ja=0;function ka(a,b,c){return a.call.apply(a.bind,arguments)}
function la(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function r(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?r=ka:r=la;return r.apply(null,arguments)}
function ma(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var na=Date.now||function(){return+new Date};function t(a,b){function c(){}c.prototype=b.prototype;a.ib=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Rc=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function u(a){if(Error.captureStackTrace)Error.captureStackTrace(this,u);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}t(u,Error);u.prototype.name="CustomError";function oa(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")}var pa=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")};
function qa(a){if(!ra.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(sa,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(ta,"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(ua,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(va,"&quot;"));-1!=a.indexOf("'")&&(a=a.replace(wa,"&#39;"));-1!=a.indexOf("\x00")&&(a=a.replace(xa,"&#0;"));return a}var sa=/&/g,ta=/</g,ua=/>/g,va=/"/g,wa=/'/g,xa=/\x00/g,ra=/[\x00&<>"']/;function v(a,b){return-1!=a.indexOf(b)}function ya(a,b){return a<b?-1:a>b?1:0};function za(a,b){b.unshift(a);u.call(this,oa.apply(null,b));b.shift()}t(za,u);za.prototype.name="AssertionError";function Aa(a,b){throw new za("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));};var Ba=Array.prototype.indexOf?function(a,b,c){return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(m(a))return m(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},w=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=m(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};
function Ca(a,b){var c=a.length,d=m(a)?a.split(""):a;for(--c;0<=c;--c)c in d&&b.call(void 0,d[c],c,a)}var Da=Array.prototype.map?function(a,b,c){return Array.prototype.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=m(a)?a.split(""):a,g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e},Ea=Array.prototype.some?function(a,b,c){return Array.prototype.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=m(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};
function Fa(a){a:{var b=Ga;for(var c=a.length,d=m(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:m(a)?a.charAt(b):a[b]}function Ha(a,b){return 0<=Ba(a,b)}function Ia(a,b){b=Ba(a,b);var c;(c=0<=b)&&Array.prototype.splice.call(a,b,1);return c}function Ja(a,b){var c=0;Ca(a,function(d,e){b.call(void 0,d,e,a)&&1==Array.prototype.splice.call(a,e,1).length&&c++})}function Ka(a){return Array.prototype.concat.apply([],arguments)}
function La(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};var Ma;a:{var Na=k.navigator;if(Na){var Oa=Na.userAgent;if(Oa){Ma=Oa;break a}}Ma=""}function x(a){return v(Ma,a)};function Pa(a,b){for(var c in a)b.call(void 0,a[c],c,a)}function Qa(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function Ra(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function Sa(a){for(var b in a)return!1;return!0}function Ta(a,b){for(var c in a)if(!(c in b)||a[c]!==b[c])return!1;for(c in b)if(!(c in a))return!1;return!0}function Ua(a){var b={},c;for(c in a)b[c]=a[c];return b}var Va="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
function Wa(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Va.length;f++)c=Va[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Xa(a){Xa[" "](a);return a}Xa[" "]=ca;function Ya(a,b){var c=Za;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var $a=x("Opera"),y=x("Trident")||x("MSIE"),ab=x("Edge"),bb=ab||y,cb=x("Gecko")&&!(v(Ma.toLowerCase(),"webkit")&&!x("Edge"))&&!(x("Trident")||x("MSIE"))&&!x("Edge"),db=v(Ma.toLowerCase(),"webkit")&&!x("Edge");function eb(){var a=k.document;return a?a.documentMode:void 0}var fb;
a:{var gb="",hb=function(){var a=Ma;if(cb)return/rv\:([^\);]+)(\)|;)/.exec(a);if(ab)return/Edge\/([\d\.]+)/.exec(a);if(y)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(db)return/WebKit\/(\S+)/.exec(a);if($a)return/(?:Version)[ \/]?(\S+)/.exec(a)}();hb&&(gb=hb?hb[1]:"");if(y){var ib=eb();if(null!=ib&&ib>parseFloat(gb)){fb=String(ib);break a}}fb=gb}var Za={};
function jb(a){return Ya(a,function(){for(var b=0,c=pa(String(fb)).split("."),d=pa(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var g=c[f]||"",l=d[f]||"";do{g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];l=/(\d*)(\D*)(.*)/.exec(l)||["","","",""];if(0==g[0].length&&0==l[0].length)break;b=ya(0==g[1].length?0:parseInt(g[1],10),0==l[1].length?0:parseInt(l[1],10))||ya(0==g[2].length,0==l[2].length)||ya(g[2],l[2]);g=g[3];l=l[3]}while(0==b)}return 0<=b})}var kb;var lb=k.document;
kb=lb&&y?eb()||("CSS1Compat"==lb.compatMode?parseInt(fb,10):5):void 0;function mb(a){a.prototype.then=a.prototype.then;a.prototype.$goog_Thenable=!0}function nb(a){if(!a)return!1;try{return!!a.$goog_Thenable}catch(b){return!1}};function ob(a,b,c){this.f=c;this.c=a;this.g=b;this.b=0;this.a=null}ob.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};function pb(a,b){a.g(b);a.b<a.f&&(a.b++,b.next=a.a,a.a=b)};var rb=new ob(function(){return new qb},function(a){a.reset()},100);function sb(){var a=tb,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function qb(){this.next=this.b=this.a=null}qb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};qb.prototype.reset=function(){this.next=this.b=this.a=null};function ub(a){k.setTimeout(function(){throw a;},0)}var wb;
function xb(){var a=k.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!x("Presto")&&(a=function(){var a=document.createElement("IFRAME");a.style.display="none";a.src="";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write("");a.close();var c="callImmediate"+Math.random(),d="file:"==b.location.protocol?"*":b.location.protocol+"//"+b.location.host;a=r(function(a){if(("*"==d||a.origin==d)&&a.data==
c)this.port1.onmessage()},this);b.addEventListener("message",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if("undefined"!==typeof a&&!x("Trident")&&!x("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.pb;c.pb=null;a()}};return function(a){d.next={pb:a};d=d.next;b.port2.postMessage(0)}}return"undefined"!==typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(a){var b=document.createElement("SCRIPT");
b.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};function yb(a,b){zb||Ab();Bb||(zb(),Bb=!0);var c=tb,d=rb.get();d.set(a,b);c.b?c.b.next=d:c.a=d;c.b=d}var zb;function Ab(){if(-1!=String(k.Promise).indexOf("[native code]")){var a=k.Promise.resolve(void 0);zb=function(){a.then(Cb)}}else zb=function(){var a=Cb;!p(k.setImmediate)||k.Window&&k.Window.prototype&&!x("Edge")&&k.Window.prototype.setImmediate==k.setImmediate?(wb||(wb=xb()),wb(a)):k.setImmediate(a)}}var Bb=!1,tb=new function(){this.b=this.a=null};
function Cb(){for(var a;a=sb();){try{a.a.call(a.b)}catch(b){ub(b)}pb(rb,a)}Bb=!1};function z(a,b){this.a=Db;this.i=void 0;this.f=this.b=this.c=null;this.g=this.h=!1;if(a!=ca)try{var c=this;a.call(b,function(a){Eb(c,Fb,a)},function(a){if(!(a instanceof Gb))try{if(a instanceof Error)throw a;throw Error("Promise rejected.");}catch(e){}Eb(c,Hb,a)})}catch(d){Eb(this,Hb,d)}}var Db=0,Fb=2,Hb=3;function Ib(){this.next=this.f=this.b=this.g=this.a=null;this.c=!1}Ib.prototype.reset=function(){this.f=this.b=this.g=this.a=null;this.c=!1};
var Jb=new ob(function(){return new Ib},function(a){a.reset()},100);function Kb(a,b,c){var d=Jb.get();d.g=a;d.b=b;d.f=c;return d}function A(a){if(a instanceof z)return a;var b=new z(ca);Eb(b,Fb,a);return b}function B(a){return new z(function(b,c){c(a)})}function Lb(a,b,c){Mb(a,b,c,null)||yb(ma(b,a))}function Nb(a){return new z(function(b,c){var d=a.length,e=[];if(d)for(var f=function(a,c){d--;e[a]=c;0==d&&b(e)},g=function(a){c(a)},l=0,n;l<a.length;l++)n=a[l],Lb(n,ma(f,l),g);else b(e)})}
function Ob(a){return new z(function(b){var c=a.length,d=[];if(c)for(var e=function(a,e,f){c--;d[a]=e?{Ub:!0,value:f}:{Ub:!1,reason:f};0==c&&b(d)},f=0,g;f<a.length;f++)g=a[f],Lb(g,ma(e,f,!0),ma(e,f,!1));else b(d)})}z.prototype.then=function(a,b,c){return Pb(this,p(a)?a:null,p(b)?b:null,c)};mb(z);function Qb(a,b){b=Kb(b,b,void 0);b.c=!0;Rb(a,b);return a}h=z.prototype;h.s=function(a,b){return Pb(this,null,a,b)};h.cancel=function(a){this.a==Db&&yb(function(){var b=new Gb(a);Sb(this,b)},this)};
function Sb(a,b){if(a.a==Db)if(a.c){var c=a.c;if(c.b){for(var d=0,e=null,f=null,g=c.b;g&&(g.c||(d++,g.a==a&&(e=g),!(e&&1<d)));g=g.next)e||(f=g);e&&(c.a==Db&&1==d?Sb(c,b):(f?(d=f,d.next==c.f&&(c.f=d),d.next=d.next.next):Tb(c),Ub(c,e,Hb,b)))}a.c=null}else Eb(a,Hb,b)}function Rb(a,b){a.b||a.a!=Fb&&a.a!=Hb||Vb(a);a.f?a.f.next=b:a.b=b;a.f=b}
function Pb(a,b,c,d){var e=Kb(null,null,null);e.a=new z(function(a,g){e.g=b?function(c){try{var e=b.call(d,c);a(e)}catch(D){g(D)}}:a;e.b=c?function(b){try{var e=c.call(d,b);void 0===e&&b instanceof Gb?g(b):a(e)}catch(D){g(D)}}:g});e.a.c=a;Rb(a,e);return e.a}h.Ac=function(a){this.a=Db;Eb(this,Fb,a)};h.Bc=function(a){this.a=Db;Eb(this,Hb,a)};
function Eb(a,b,c){a.a==Db&&(a===c&&(b=Hb,c=new TypeError("Promise cannot resolve to itself")),a.a=1,Mb(c,a.Ac,a.Bc,a)||(a.i=c,a.a=b,a.c=null,Vb(a),b!=Hb||c instanceof Gb||Wb(a,c)))}function Mb(a,b,c,d){if(a instanceof z)return Rb(a,Kb(b||ca,c||null,d)),!0;if(nb(a))return a.then(b,c,d),!0;if(q(a))try{var e=a.then;if(p(e))return Xb(a,e,b,c,d),!0}catch(f){return c.call(d,f),!0}return!1}
function Xb(a,b,c,d,e){function f(a){l||(l=!0,d.call(e,a))}function g(a){l||(l=!0,c.call(e,a))}var l=!1;try{b.call(a,g,f)}catch(n){f(n)}}function Vb(a){a.h||(a.h=!0,yb(a.Qb,a))}function Tb(a){var b=null;a.b&&(b=a.b,a.b=b.next,b.next=null);a.b||(a.f=null);return b}h.Qb=function(){for(var a;a=Tb(this);)Ub(this,a,this.a,this.i);this.h=!1};
function Ub(a,b,c,d){if(c==Hb&&b.b&&!b.c)for(;a&&a.g;a=a.c)a.g=!1;if(b.a)b.a.c=null,Yb(b,c,d);else try{b.c?b.g.call(b.f):Yb(b,c,d)}catch(e){Zb.call(null,e)}pb(Jb,b)}function Yb(a,b,c){b==Fb?a.g.call(a.f,c):a.b&&a.b.call(a.f,c)}function Wb(a,b){a.g=!0;yb(function(){a.g&&Zb.call(null,b)})}var Zb=ub;function Gb(a){u.call(this,a)}t(Gb,u);Gb.prototype.name="cancel";var $b=!y||9<=Number(kb);function ac(){this.a="";this.b=bc}ac.prototype.la=!0;ac.prototype.ja=function(){return this.a};ac.prototype.toString=function(){return"Const{"+this.a+"}"};function cc(a){if(a instanceof ac&&a.constructor===ac&&a.b===bc)return a.a;Aa("expected object of type Const, got '"+a+"'");return"type_error:Const"}var bc={};function dc(a){var b=new ac;b.a=a;return b}dc("");function ec(){this.a="";this.b=fc}ec.prototype.la=!0;ec.prototype.ja=function(){return this.a};ec.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};function gc(a){if(a instanceof ec&&a.constructor===ec&&a.b===fc)return a.a;Aa("expected object of type TrustedResourceUrl, got '"+a+"' of type "+da(a));return"type_error:TrustedResourceUrl"}function hc(a,b){a=ic(a,b);b=new ec;b.a=a;return b}
function ic(a,b){var c=cc(a);if(!jc.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);return c.replace(kc,function(a,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));a=b[e];return a instanceof ac?cc(a):encodeURIComponent(String(a))})}var kc=/%{(\w+)}/g,jc=/^(?:https:)?\/\/[0-9a-z.:[\]-]+\/|^\/[^\/\\]|^about:blank(#|$)/i,fc={};function lc(){this.a="";this.b=mc}lc.prototype.la=!0;lc.prototype.ja=function(){return this.a};lc.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};function nc(a){if(a instanceof lc&&a.constructor===lc&&a.b===mc)return a.a;Aa("expected object of type SafeUrl, got '"+a+"' of type "+da(a));return"type_error:SafeUrl"}var oc=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
function pc(a){if(a instanceof lc)return a;a=a.la?a.ja():String(a);oc.test(a)||(a="about:invalid#zClosurez");return qc(a)}var mc={};function qc(a){var b=new lc;b.a=a;return b}qc("about:blank");function rc(){this.a="";this.b=sc}rc.prototype.la=!0;rc.prototype.ja=function(){return this.a};rc.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};function uc(a){if(a instanceof rc&&a.constructor===rc&&a.b===sc)return a.a;Aa("expected object of type SafeHtml, got '"+a+"' of type "+da(a));return"type_error:SafeHtml"}var sc={};function vc(a){var b=new rc;b.a=a;return b}vc("<!DOCTYPE html>");vc("");vc("<br>");function wc(a){var b=document;return m(a)?b.getElementById(a):a}function xc(a,b){Pa(b,function(b,d){b&&b.la&&(b=b.ja());"style"==d?a.style.cssText=b:"class"==d?a.className=b:"for"==d?a.htmlFor=b:yc.hasOwnProperty(d)?a.setAttribute(yc[d],b):0==d.lastIndexOf("aria-",0)||0==d.lastIndexOf("data-",0)?a.setAttribute(d,b):a[d]=b})}
var yc={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};
function zc(a,b,c){var d=arguments,e=document,f=String(d[0]),g=d[1];if(!$b&&g&&(g.name||g.type)){f=["<",f];g.name&&f.push(' name="',qa(g.name),'"');if(g.type){f.push(' type="',qa(g.type),'"');var l={};Wa(l,g);delete l.type;g=l}f.push(">");f=f.join("")}f=e.createElement(f);g&&(m(g)?f.className=g:fa(g)?f.className=g.join(" "):xc(f,g));2<d.length&&Ac(e,f,d);return f}
function Ac(a,b,c){function d(c){c&&b.appendChild(m(c)?a.createTextNode(c):c)}for(var e=2;e<c.length;e++){var f=c[e];!ha(f)||q(f)&&0<f.nodeType?d(f):w(Bc(f)?La(f):f,d)}}function Bc(a){if(a&&"number"==typeof a.length){if(q(a))return"function"==typeof a.item||"string"==typeof a.item;if(p(a))return"function"==typeof a.item}return!1};function Cc(a){var b=[];Dc(new Ec,a,b);return b.join("")}function Ec(){}
function Dc(a,b,c){if(null==b)c.push("null");else{if("object"==typeof b){if(fa(b)){var d=b;b=d.length;c.push("[");for(var e="",f=0;f<b;f++)c.push(e),Dc(a,d[f],c),e=",";c.push("]");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push("{");e="";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],"function"!=typeof f&&(c.push(e),Fc(d,c),c.push(":"),Dc(a,f,c),e=","));c.push("}");return}}switch(typeof b){case "string":Fc(b,c);break;case "number":c.push(isFinite(b)&&
!isNaN(b)?String(b):"null");break;case "boolean":c.push(String(b));break;case "function":c.push("null");break;default:throw Error("Unknown type: "+typeof b);}}}var Gc={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},Hc=/\uffff/.test("\uffff")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g;
function Fc(a,b){b.push('"',a.replace(Hc,function(a){var b=Gc[a];b||(b="\\u"+(a.charCodeAt(0)|65536).toString(16).substr(1),Gc[a]=b);return b}),'"')};function Ic(){0!=Jc&&(Kc[this[ia]||(this[ia]=++ja)]=this);this.oa=this.oa;this.Fa=this.Fa}var Jc=0,Kc={};Ic.prototype.oa=!1;function Lc(a){a.oa||(a.oa=!0,a.ta(),0!=Jc&&(a=a[ia]||(a[ia]=++ja),delete Kc[a]))}Ic.prototype.ta=function(){if(this.Fa)for(;this.Fa.length;)this.Fa.shift()()};var Mc=Object.freeze||function(a){return a};var Nc=!y||9<=Number(kb),Oc=y&&!jb("9"),Pc=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0}});k.addEventListener("test",ca,b);k.removeEventListener("test",ca,b);return a}();function C(a,b){this.type=a;this.b=this.target=b;this.Bb=!0}C.prototype.c=function(){this.Bb=!1};function Qc(a,b){C.call(this,a?a.type:"");this.relatedTarget=this.b=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.a=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.b=b;if(b=a.relatedTarget){if(cb){a:{try{Xa(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else"mouseover"==c?b=
a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
a.metaKey;this.pointerId=a.pointerId||0;this.pointerType=m(a.pointerType)?a.pointerType:Rc[a.pointerType]||"";this.a=a;a.defaultPrevented&&this.c()}}t(Qc,C);var Rc=Mc({2:"touch",3:"pen",4:"mouse"});Qc.prototype.c=function(){Qc.ib.c.call(this);var a=this.a;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Oc)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};Qc.prototype.g=function(){return this.a};var Sc="closure_listenable_"+(1E6*Math.random()|0),Tc=0;function Uc(a,b,c,d,e){this.listener=a;this.a=null;this.src=b;this.type=c;this.capture=!!d;this.La=e;this.key=++Tc;this.ma=this.Ha=!1}function Vc(a){a.ma=!0;a.listener=null;a.a=null;a.src=null;a.La=null};function Wc(a){this.src=a;this.a={};this.b=0}function Xc(a,b,c,d,e,f){var g=b.toString();b=a.a[g];b||(b=a.a[g]=[],a.b++);var l=Yc(b,c,e,f);-1<l?(a=b[l],d||(a.Ha=!1)):(a=new Uc(c,a.src,g,!!e,f),a.Ha=d,b.push(a));return a}function Zc(a,b){var c=b.type;c in a.a&&Ia(a.a[c],b)&&(Vc(b),0==a.a[c].length&&(delete a.a[c],a.b--))}function Yc(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.ma&&f.listener==b&&f.capture==!!c&&f.La==d)return e}return-1};var $c="closure_lm_"+(1E6*Math.random()|0),ad={},bd=0;function cd(a,b,c,d,e){if(d&&d.once)dd(a,b,c,d,e);else if(fa(b))for(var f=0;f<b.length;f++)cd(a,b[f],c,d,e);else c=ed(c),a&&a[Sc]?fd(a,b,c,q(d)?!!d.capture:!!d,e):gd(a,b,c,!1,d,e)}
function gd(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=q(e)?!!e.capture:!!e,l=hd(a);l||(a[$c]=l=new Wc(a));c=Xc(l,b,c,d,g,f);if(!c.a){d=id();c.a=d;d.src=a;d.listener=c;if(a.addEventListener)Pc||(e=g),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(jd(b.toString()),d);else throw Error("addEventListener and attachEvent are unavailable.");bd++}}
function id(){var a=kd,b=Nc?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function dd(a,b,c,d,e){if(fa(b))for(var f=0;f<b.length;f++)dd(a,b[f],c,d,e);else c=ed(c),a&&a[Sc]?ld(a,b,c,q(d)?!!d.capture:!!d,e):gd(a,b,c,!0,d,e)}
function E(a,b,c,d,e){if(fa(b))for(var f=0;f<b.length;f++)E(a,b[f],c,d,e);else(d=q(d)?!!d.capture:!!d,c=ed(c),a&&a[Sc])?(a=a.u,b=String(b).toString(),b in a.a&&(f=a.a[b],c=Yc(f,c,d,e),-1<c&&(Vc(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=hd(a))&&(b=a.a[b.toString()],a=-1,b&&(a=Yc(b,c,d,e)),(c=-1<a?b[a]:null)&&md(c))}
function md(a){if("number"!=typeof a&&a&&!a.ma){var b=a.src;if(b&&b[Sc])Zc(b.u,a);else{var c=a.type,d=a.a;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent&&b.detachEvent(jd(c),d);bd--;(c=hd(b))?(Zc(c,a),0==c.b&&(c.src=null,b[$c]=null)):Vc(a)}}}function jd(a){return a in ad?ad[a]:ad[a]="on"+a}function nd(a,b,c,d){var e=!0;if(a=hd(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.ma&&(f=od(f,d),e=e&&!1!==f)}return e}
function od(a,b){var c=a.listener,d=a.La||a.src;a.Ha&&md(a);return c.call(d,b)}
function kd(a,b){if(a.ma)return!0;if(!Nc){if(!b)a:{b=["window","event"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new Qc(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(g){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.b;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.b=d[e];var f=nd(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.b=d[e],f=nd(d[e],a,!1,b),c=c&&f}return c}return od(a,
new Qc(b,this))}function hd(a){a=a[$c];return a instanceof Wc?a:null}var pd="__closure_events_fn_"+(1E9*Math.random()>>>0);function ed(a){if(p(a))return a;a[pd]||(a[pd]=function(b){return a.handleEvent(b)});return a[pd]};function F(){Ic.call(this);this.u=new Wc(this);this.Ib=this;this.Ra=null}t(F,Ic);F.prototype[Sc]=!0;F.prototype.removeEventListener=function(a,b,c,d){E(this,a,b,c,d)};
function G(a,b){var c,d=a.Ra;if(d)for(c=[];d;d=d.Ra)c.push(d);a=a.Ib;d=b.type||b;if(m(b))b=new C(b,a);else if(b instanceof C)b.target=b.target||a;else{var e=b;b=new C(d,a);Wa(b,e)}e=!0;if(c)for(var f=c.length-1;0<=f;f--){var g=b.b=c[f];e=qd(g,d,!0,b)&&e}g=b.b=a;e=qd(g,d,!0,b)&&e;e=qd(g,d,!1,b)&&e;if(c)for(f=0;f<c.length;f++)g=b.b=c[f],e=qd(g,d,!1,b)&&e}
F.prototype.ta=function(){F.ib.ta.call(this);if(this.u){var a=this.u,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,Vc(d[e]);delete a.a[c];a.b--}}this.Ra=null};function fd(a,b,c,d,e){Xc(a.u,String(b),c,!1,d,e)}function ld(a,b,c,d,e){Xc(a.u,String(b),c,!0,d,e)}function qd(a,b,c,d){b=a.u.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var g=b[f];if(g&&!g.ma&&g.capture==c){var l=g.listener,n=g.La||g.src;g.Ha&&Zc(a.u,g);e=!1!==l.call(n,d)&&e}}return e&&0!=d.Bb};function rd(a,b,c){if(p(a))c&&(a=r(a,c));else if(a&&"function"==typeof a.handleEvent)a=r(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)}function sd(a){var b=null;return(new z(function(c,d){b=rd(function(){c(void 0)},a);-1==b&&d(Error("Failed to schedule timer."))})).s(function(a){k.clearTimeout(b);throw a;})};function td(a,b,c,d,e){this.reset(a,b,c,d,e)}td.prototype.a=null;var ud=0;td.prototype.reset=function(a,b,c,d,e){"number"==typeof e||ud++;d||na();this.b=b;delete this.a};function vd(a){this.f=a;this.b=this.c=this.a=null}function wd(a,b){this.name=a;this.value=b}wd.prototype.toString=function(){return this.name};var xd=new wd("SEVERE",1E3),yd=new wd("CONFIG",700),zd=new wd("FINE",500);function Ad(a){if(a.c)return a.c;if(a.a)return Ad(a.a);Aa("Root logger has no level set.");return null}
vd.prototype.log=function(a,b,c){if(a.value>=Ad(this).value)for(p(b)&&(b=b()),a=new td(a,String(b),this.f),c&&(a.a=c),c="log:"+a.b,(a=k.console)&&a.timeStamp&&a.timeStamp(c),(a=k.msWriteProfilerMark)&&a(c),c=this;c;)c=c.a};var Bd={},Cd=null;function Dd(a){Cd||(Cd=new vd(""),Bd[""]=Cd,Cd.c=yd);var b;if(!(b=Bd[a])){b=new vd(a);var c=a.lastIndexOf("."),d=a.substr(c+1);c=Dd(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;Bd[a]=b}return b};function Ed(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a){a instanceof Ed?(c=a.S(),d=a.P()):(c=Ra(a),d=Qa(a));for(var e=0;e<c.length;e++)this.set(c[e],d[e])}}h=Ed.prototype;h.P=function(){Fd(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};h.S=function(){Fd(this);return this.a.concat()};
h.clear=function(){this.b={};this.c=this.a.length=0};function Fd(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];Gd(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],Gd(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}h.get=function(a,b){return Gd(this.b,a)?this.b[a]:b};h.set=function(a,b){Gd(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};
h.forEach=function(a,b){for(var c=this.S(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function Gd(a,b){return Object.prototype.hasOwnProperty.call(a,b)};function H(a,b){a&&a.log(zd,b,void 0)};function Hd(a){return Da(a,function(a){a=a.toString(16);return 1<a.length?a:"0"+a}).join("")};var Id=null,Jd=null;function Kd(a){var b="";Ld(a,function(a){b+=String.fromCharCode(a)});return b}function Ld(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=Jd[c];if(null!=e)return e;if(!/^[\s\xa0]*$/.test(c))throw Error("Unknown base64 encoding at char: "+c);}return b}Md();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),l=c(64);if(64===l&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=l&&b(g<<6&192|l))}}
function Md(){if(!Id){Id={};Jd={};for(var a=0;65>a;a++)Id[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a),Jd[Id[a]]=a,62<=a&&(Jd["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a)]=a)}};/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
function Nd(a,b){this.g=[];this.v=a;this.o=b||null;this.f=this.a=!1;this.c=void 0;this.u=this.w=this.i=!1;this.h=0;this.b=null;this.l=0}Nd.prototype.cancel=function(a){if(this.a)this.c instanceof Nd&&this.c.cancel();else{if(this.b){var b=this.b;delete this.b;a?b.cancel(a):(b.l--,0>=b.l&&b.cancel())}this.v?this.v.call(this.o,this):this.u=!0;this.a||(a=new Od,Pd(this),Qd(this,!1,a))}};Nd.prototype.m=function(a,b){this.i=!1;Qd(this,a,b)};function Qd(a,b,c){a.a=!0;a.c=c;a.f=!b;Rd(a)}
function Pd(a){if(a.a){if(!a.u)throw new Sd;a.u=!1}}Nd.prototype.A=function(a){Pd(this);Qd(this,!0,a)};function Td(a,b){Ud(a,null,b,void 0)}function Ud(a,b,c,d){a.g.push([b,c,d]);a.a&&Rd(a)}Nd.prototype.then=function(a,b,c){var d,e,f=new z(function(a,b){d=a;e=b});Ud(this,d,function(a){a instanceof Od?f.cancel():e(a)});return f.then(a,b,c)};mb(Nd);function Vd(a){return Ea(a.g,function(a){return p(a[1])})}
function Rd(a){if(a.h&&a.a&&Vd(a)){var b=a.h,c=Wd[b];c&&(k.clearTimeout(c.a),delete Wd[b]);a.h=0}a.b&&(a.b.l--,delete a.b);b=a.c;for(var d=c=!1;a.g.length&&!a.i;){var e=a.g.shift(),f=e[0],g=e[1];e=e[2];if(f=a.f?g:f)try{var l=f.call(e||a.o,b);void 0!==l&&(a.f=a.f&&(l==b||l instanceof Error),a.c=b=l);if(nb(b)||"function"===typeof k.Promise&&b instanceof k.Promise)d=!0,a.i=!0}catch(n){b=n,a.f=!0,Vd(a)||(c=!0)}}a.c=b;d&&(l=r(a.m,a,!0),d=r(a.m,a,!1),b instanceof Nd?(Ud(b,l,d),b.w=!0):b.then(l,d));c&&(b=
new Xd(b),Wd[b.a]=b,a.h=b.a)}function Sd(){u.call(this)}t(Sd,u);Sd.prototype.message="Deferred has already fired";Sd.prototype.name="AlreadyCalledError";function Od(){u.call(this)}t(Od,u);Od.prototype.message="Deferred was canceled";Od.prototype.name="CanceledError";function Xd(a){this.a=k.setTimeout(r(this.c,this),0);this.b=a}Xd.prototype.c=function(){delete Wd[this.a];throw this.b;};var Wd={};function Yd(){this.b=-1};function Zd(a,b){this.b=-1;this.b=$d;this.f=k.Uint8Array?new Uint8Array(this.b):Array(this.b);this.g=this.c=0;this.a=[];this.i=a;this.h=b;this.l=k.Int32Array?new Int32Array(64):Array(64);ae||(k.Int32Array?ae=new Int32Array(be):ae=be);this.reset()}var ae;t(Zd,Yd);for(var $d=64,ce=$d-1,de=[],ee=0;ee<ce;ee++)de[ee]=0;var fe=Ka(128,de);Zd.prototype.reset=function(){this.g=this.c=0;this.a=k.Int32Array?new Int32Array(this.h):La(this.h)};
function ge(a){for(var b=a.f,c=a.l,d=0,e=0;e<b.length;)c[d++]=b[e]<<24|b[e+1]<<16|b[e+2]<<8|b[e+3],e=4*d;for(b=16;64>b;b++){e=c[b-15]|0;d=c[b-2]|0;var f=(c[b-16]|0)+((e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3)|0,g=(c[b-7]|0)+((d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10)|0;c[b]=f+g|0}d=a.a[0]|0;e=a.a[1]|0;var l=a.a[2]|0,n=a.a[3]|0,D=a.a[4]|0,vb=a.a[5]|0,tc=a.a[6]|0;f=a.a[7]|0;for(b=0;64>b;b++){var Bj=((d>>>2|d<<30)^(d>>>13|d<<19)^(d>>>22|d<<10))+(d&e^d&l^e&l)|0;g=D&vb^~D&tc;f=f+((D>>>6|D<<26)^(D>>>11|D<<21)^(D>>>
25|D<<7))|0;g=g+(ae[b]|0)|0;g=f+(g+(c[b]|0)|0)|0;f=tc;tc=vb;vb=D;D=n+g|0;n=l;l=e;e=d;d=g+Bj|0}a.a[0]=a.a[0]+d|0;a.a[1]=a.a[1]+e|0;a.a[2]=a.a[2]+l|0;a.a[3]=a.a[3]+n|0;a.a[4]=a.a[4]+D|0;a.a[5]=a.a[5]+vb|0;a.a[6]=a.a[6]+tc|0;a.a[7]=a.a[7]+f|0}
function he(a,b,c){void 0===c&&(c=b.length);var d=0,e=a.c;if(m(b))for(;d<c;)a.f[e++]=b.charCodeAt(d++),e==a.b&&(ge(a),e=0);else if(ha(b))for(;d<c;){var f=b[d++];if(!("number"==typeof f&&0<=f&&255>=f&&f==(f|0)))throw Error("message must be a byte array");a.f[e++]=f;e==a.b&&(ge(a),e=0)}else throw Error("message must be string or array");a.c=e;a.g+=c}
var be=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,
4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function ie(){Zd.call(this,8,je)}t(ie,Zd);var je=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function ke(a){if(a.P&&"function"==typeof a.P)return a.P();if(m(a))return a.split("");if(ha(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Qa(a)}function le(a){if(a.S&&"function"==typeof a.S)return a.S();if(!a.P||"function"!=typeof a.P){if(ha(a)||m(a)){var b=[];a=a.length;for(var c=0;c<a;c++)b.push(c);return b}return Ra(a)}}
function me(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(ha(a)||m(a))w(a,b,void 0);else for(var c=le(a),d=ke(a),e=d.length,f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)};var ne=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function oe(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"")}}};function pe(a,b){this.b=this.l=this.c="";this.i=null;this.h=this.g="";this.f=!1;if(a instanceof pe){this.f=void 0!==b?b:a.f;qe(this,a.c);this.l=a.l;this.b=a.b;re(this,a.i);this.g=a.g;b=a.a;var c=new se;c.c=b.c;b.a&&(c.a=new Ed(b.a),c.b=b.b);te(this,c);this.h=a.h}else a&&(c=String(a).match(ne))?(this.f=!!b,qe(this,c[1]||"",!0),this.l=ue(c[2]||""),this.b=ue(c[3]||"",!0),re(this,c[4]),this.g=ue(c[5]||"",!0),te(this,c[6]||"",!0),this.h=ue(c[7]||"")):(this.f=!!b,this.a=new se(null,0,this.f))}
pe.prototype.toString=function(){var a=[],b=this.c;b&&a.push(ve(b,we,!0),":");var c=this.b;if(c||"file"==b)a.push("//"),(b=this.l)&&a.push(ve(b,we,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.i,null!=c&&a.push(":",String(c));if(c=this.g)this.b&&"/"!=c.charAt(0)&&a.push("/"),a.push(ve(c,"/"==c.charAt(0)?xe:ye,!0));(c=this.a.toString())&&a.push("?",c);(c=this.h)&&a.push("#",ve(c,ze));return a.join("")};
function qe(a,b,c){a.c=c?ue(b,!0):b;a.c&&(a.c=a.c.replace(/:$/,""))}function re(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.i=b}else a.i=null}function te(a,b,c){b instanceof se?(a.a=b,Ae(a.a,a.f)):(c||(b=ve(b,Be)),a.a=new se(b,0,a.f))}function I(a,b,c){a.a.set(b,c)}function Ce(a,b){return a.a.get(b)}function De(a){return a instanceof pe?new pe(a):new pe(a,void 0)}function Ee(a,b){var c=new pe(null,void 0);qe(c,"https");a&&(c.b=a);b&&(c.g=b);return c}
function ue(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function ve(a,b,c){return m(a)?(a=encodeURI(a).replace(b,Fe),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function Fe(a){a=a.charCodeAt(0);return"%"+(a>>4&15).toString(16)+(a&15).toString(16)}var we=/[#\/\?@]/g,ye=/[\#\?:]/g,xe=/[\#\?]/g,Be=/[\#\?@]/g,ze=/#/g;function se(a,b,c){this.b=this.a=null;this.c=a||null;this.f=!!c}
function Ge(a){a.a||(a.a=new Ed,a.b=0,a.c&&oe(a.c,function(b,c){He(a,decodeURIComponent(b.replace(/\+/g," ")),c)}))}function Ie(a){var b=le(a);if("undefined"==typeof b)throw Error("Keys are undefined");var c=new se(null,0,void 0);a=ke(a);for(var d=0;d<b.length;d++){var e=b[d],f=a[d];fa(f)?Je(c,e,f):He(c,e,f)}return c}function He(a,b,c){Ge(a);a.c=null;b=Ke(a,b);var d=a.a.get(b);d||a.a.set(b,d=[]);d.push(c);a.b+=1}
function Le(a,b){Ge(a);b=Ke(a,b);Gd(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,a=a.a,Gd(a.b,b)&&(delete a.b[b],a.c--,a.a.length>2*a.c&&Fd(a)))}h=se.prototype;h.clear=function(){this.a=this.c=null;this.b=0};function Me(a,b){Ge(a);b=Ke(a,b);return Gd(a.a.b,b)}h.forEach=function(a,b){Ge(this);this.a.forEach(function(c,d){w(c,function(c){a.call(b,c,d,this)},this)},this)};h.S=function(){Ge(this);for(var a=this.a.P(),b=this.a.S(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};
h.P=function(a){Ge(this);var b=[];if(m(a))Me(this,a)&&(b=Ka(b,this.a.get(Ke(this,a))));else{a=this.a.P();for(var c=0;c<a.length;c++)b=Ka(b,a[c])}return b};h.set=function(a,b){Ge(this);this.c=null;a=Ke(this,a);Me(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};h.get=function(a,b){a=a?this.P(a):[];return 0<a.length?String(a[0]):b};function Je(a,b,c){Le(a,b);0<c.length&&(a.c=null,a.a.set(Ke(a,b),La(c)),a.b+=c.length)}
h.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var a=[],b=this.a.S(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.P(d);for(var f=0;f<d.length;f++){var g=e;""!==d[f]&&(g+="="+encodeURIComponent(String(d[f])));a.push(g)}}return this.c=a.join("&")};function Ke(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function Ae(a,b){b&&!a.f&&(Ge(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(Le(this,b),Je(this,c,a))},a));a.f=b};function Ne(){}Ne.prototype.c=null;function Oe(a){return a.c||(a.c=a.b())};var Pe;function Qe(){}t(Qe,Ne);Qe.prototype.a=function(){var a=Re(this);return a?new ActiveXObject(a):new XMLHttpRequest};Qe.prototype.b=function(){var a={};Re(this)&&(a[0]=!0,a[1]=!0);return a};
function Re(a){if(!a.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.f=d}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.f}Pe=new Qe;function Se(a){F.call(this);this.headers=new Ed;this.w=a||null;this.b=!1;this.v=this.a=null;this.g=this.I=this.i="";this.c=this.G=this.h=this.A=!1;this.f=0;this.m=null;this.l=Te;this.o=this.N=!1}t(Se,F);var Te="",Ue=Se.prototype,Ve=Dd("goog.net.XhrIo");Ue.J=Ve;var We=/^https?$/i,Xe=["POST","PUT"];
function Ye(a,b,c,d,e){if(a.a)throw Error("[goog.net.XhrIo] Object is active with another request="+a.i+"; newUri="+b);c=c?c.toUpperCase():"GET";a.i=b;a.g="";a.I=c;a.A=!1;a.b=!0;a.a=a.w?a.w.a():Pe.a();a.v=a.w?Oe(a.w):Oe(Pe);a.a.onreadystatechange=r(a.Ab,a);try{H(a.J,Ze(a,"Opening Xhr")),a.G=!0,a.a.open(c,String(b),!0),a.G=!1}catch(g){H(a.J,Ze(a,"Error opening Xhr: "+g.message));$e(a,g);return}b=d||"";var f=new Ed(a.headers);e&&me(e,function(a,b){f.set(b,a)});e=Fa(f.S());d=k.FormData&&b instanceof
k.FormData;!Ha(Xe,c)||e||d||f.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");f.forEach(function(a,b){this.a.setRequestHeader(b,a)},a);a.l&&(a.a.responseType=a.l);"withCredentials"in a.a&&a.a.withCredentials!==a.N&&(a.a.withCredentials=a.N);try{af(a),0<a.f&&(a.o=bf(a.a),H(a.J,Ze(a,"Will abort after "+a.f+"ms if incomplete, xhr2 "+a.o)),a.o?(a.a.timeout=a.f,a.a.ontimeout=r(a.Ea,a)):a.m=rd(a.Ea,a.f,a)),H(a.J,Ze(a,"Sending request")),a.h=!0,a.a.send(b),a.h=!1}catch(g){H(a.J,Ze(a,
"Send error: "+g.message)),$e(a,g)}}function bf(a){return y&&jb(9)&&"number"==typeof a.timeout&&void 0!==a.ontimeout}function Ga(a){return"content-type"==a.toLowerCase()}h=Se.prototype;h.Ea=function(){"undefined"!=typeof aa&&this.a&&(this.g="Timed out after "+this.f+"ms, aborting",H(this.J,Ze(this,this.g)),G(this,"timeout"),this.abort(8))};function $e(a,b){a.b=!1;a.a&&(a.c=!0,a.a.abort(),a.c=!1);a.g=b;cf(a);df(a)}function cf(a){a.A||(a.A=!0,G(a,"complete"),G(a,"error"))}
h.abort=function(){this.a&&this.b&&(H(this.J,Ze(this,"Aborting")),this.b=!1,this.c=!0,this.a.abort(),this.c=!1,G(this,"complete"),G(this,"abort"),df(this))};h.ta=function(){this.a&&(this.b&&(this.b=!1,this.c=!0,this.a.abort(),this.c=!1),df(this,!0));Se.ib.ta.call(this)};h.Ab=function(){this.oa||(this.G||this.h||this.c?ef(this):this.jc())};h.jc=function(){ef(this)};
function ef(a){if(a.b&&"undefined"!=typeof aa)if(a.v[1]&&4==ff(a)&&2==gf(a))H(a.J,Ze(a,"Local request error detected and ignored"));else if(a.h&&4==ff(a))rd(a.Ab,0,a);else if(G(a,"readystatechange"),4==ff(a)){H(a.J,Ze(a,"Request complete"));a.b=!1;try{var b=gf(a);a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.i).match(ne)[1]||null;if(!f&&k.self&&k.self.location){var g=k.self.location.protocol;
f=g.substr(0,g.length-1)}e=!We.test(f?f.toLowerCase():"")}d=e}if(d)G(a,"complete"),G(a,"success");else{try{var l=2<ff(a)?a.a.statusText:""}catch(n){H(a.J,"Can not get status: "+n.message),l=""}a.g=l+" ["+gf(a)+"]";cf(a)}}finally{df(a)}}}function df(a,b){if(a.a){af(a);var c=a.a,d=a.v[0]?ca:null;a.a=null;a.v=null;b||G(a,"ready");try{c.onreadystatechange=d}catch(e){(a=a.J)&&a.log(xd,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}
function af(a){a.a&&a.o&&(a.a.ontimeout=null);"number"==typeof a.m&&(k.clearTimeout(a.m),a.m=null)}function ff(a){return a.a?a.a.readyState:0}function gf(a){try{return 2<ff(a)?a.a.status:-1}catch(b){return-1}}function hf(a){try{return a.a?a.a.responseText:""}catch(b){return H(a.J,"Can not get responseText: "+b.message),""}}
h.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.l){case Te:case "text":return this.a.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var a=this.J;a&&a.log(xd,"Response type "+this.l+" is not supported on this browser",void 0);return null}catch(b){return H(this.J,"Can not get response: "+b.message),null}};function Ze(a,b){return b+" ["+a.I+" "+a.i+" "+gf(a)+"]"};var jf=/^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;function kf(a){var b={},c=b.document||document,d=gc(a),e=document.createElement("SCRIPT"),f={Cb:e,Ea:void 0},g=new Nd(lf,f),l=null,n=null!=b.timeout?b.timeout:5E3;0<n&&(l=window.setTimeout(function(){mf(e,!0);var a=new nf(of,"Timeout reached for loading script "+d);Pd(g);Qd(g,!1,a)},n),f.Ea=l);e.onload=e.onreadystatechange=function(){e.readyState&&"loaded"!=e.readyState&&"complete"!=e.readyState||(mf(e,b.Sc||!1,l),g.A(null))};e.onerror=function(){mf(e,!0,l);var a=new nf(pf,"Error while loading script "+
d);Pd(g);Qd(g,!1,a)};f=b.attributes||{};Wa(f,{type:"text/javascript",charset:"UTF-8"});xc(e,f);e.src=gc(a);qf(c).appendChild(e);return g}function qf(a){var b;return(b=(a||document).getElementsByTagName("HEAD"))&&0!=b.length?b[0]:a.documentElement}function lf(){if(this&&this.Cb){var a=this.Cb;a&&"SCRIPT"==a.tagName&&mf(a,!0,this.Ea)}}
function mf(a,b,c){null!=c&&k.clearTimeout(c);a.onload=ca;a.onerror=ca;a.onreadystatechange=ca;b&&window.setTimeout(function(){a&&a.parentNode&&a.parentNode.removeChild(a)},0)}var pf=0,of=1;function nf(a,b){var c="Jsloader error (code #"+a+")";b&&(c+=": "+b);u.call(this,c);this.code=a}t(nf,u);function rf(){}t(rf,Ne);rf.prototype.a=function(){var a=new XMLHttpRequest;if("withCredentials"in a)return a;if("undefined"!=typeof XDomainRequest)return new sf;throw Error("Unsupported browser");};rf.prototype.b=function(){return{}};
function sf(){this.a=new XDomainRequest;this.readyState=0;this.onreadystatechange=null;this.responseText="";this.status=-1;this.statusText=this.responseXML=null;this.a.onload=r(this.Wb,this);this.a.onerror=r(this.xb,this);this.a.onprogress=r(this.Xb,this);this.a.ontimeout=r(this.Yb,this)}h=sf.prototype;h.open=function(a,b,c){if(null!=c&&!c)throw Error("Only async requests are supported.");this.a.open(a,b)};
h.send=function(a){if(a)if("string"==typeof a)this.a.send(a);else throw Error("Only string data is supported");else this.a.send()};h.abort=function(){this.a.abort()};h.setRequestHeader=function(){};h.getResponseHeader=function(a){return"content-type"==a.toLowerCase()?this.a.contentType:""};h.Wb=function(){this.status=200;this.responseText=this.a.responseText;tf(this,4)};h.xb=function(){this.status=500;this.responseText="";tf(this,4)};h.Yb=function(){this.xb()};
h.Xb=function(){this.status=200;tf(this,1)};function tf(a,b){a.readyState=b;if(a.onreadystatechange)a.onreadystatechange()}h.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType};function uf(){var a=J();return y&&!!kb&&11==kb||/Edge\/\d+/.test(a)}function vf(){return k.window&&k.window.location.href||""}function wf(a,b){b=b||k.window;var c="about:blank";a&&(c=nc(pc(a)));b.location.href=c}function xf(a,b){var c=[],d;for(d in a)d in b?typeof a[d]!=typeof b[d]?c.push(d):fa(a[d])?Ta(a[d],b[d])||c.push(d):"object"==typeof a[d]&&null!=a[d]&&null!=b[d]?0<xf(a[d],b[d]).length&&c.push(d):a[d]!==b[d]&&c.push(d):c.push(d);for(d in b)d in a||c.push(d);return c}
function yf(){var a=J();a=zf(a)!=Af?null:(a=a.match(/\sChrome\/(\d+)/i))&&2==a.length?parseInt(a[1],10):null;return a&&30>a?!1:!y||!kb||9<kb}function Bf(a){a=(a||J()).toLowerCase();return a.match(/android/)||a.match(/webos/)||a.match(/iphone|ipad|ipod/)||a.match(/blackberry/)||a.match(/windows phone/)||a.match(/iemobile/)?!0:!1}function Cf(a){a=a||k.window;try{a.close()}catch(b){}}
function Df(a,b,c){var d=Math.floor(1E9*Math.random()).toString();b=b||500;c=c||600;var e=(window.screen.availHeight-c)/2,f=(window.screen.availWidth-b)/2;b={width:b,height:c,top:0<e?e:0,left:0<f?f:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1};c=J().toLowerCase();d&&(b.target=d,v(c,"crios/")&&(b.target="_blank"));zf(J())==Ef&&(a=a||"http://localhost",b.scrollbars=!0);c=a||"";(d=b)||(d={});a=window;b=c instanceof lc?c:pc("undefined"!=typeof c.href?c.href:String(c));c=d.target||c.target;e=[];
for(g in d)switch(g){case "width":case "height":case "top":case "left":e.push(g+"="+d[g]);break;case "target":case "noreferrer":break;default:e.push(g+"="+(d[g]?1:0))}var g=e.join(",");(x("iPhone")&&!x("iPod")&&!x("iPad")||x("iPad")||x("iPod"))&&a.navigator&&a.navigator.standalone&&c&&"_self"!=c?(g=a.document.createElement("A"),b instanceof lc||b instanceof lc||(b=b.la?b.ja():String(b),oc.test(b)||(b="about:invalid#zClosurez"),b=qc(b)),g.href=nc(b),g.setAttribute("target",c),d.noreferrer&&g.setAttribute("rel",
"noreferrer"),d=document.createEvent("MouseEvent"),d.initMouseEvent("click",!0,!0,a,1),g.dispatchEvent(d),g={}):d.noreferrer?(g=a.open("",c,g),a=nc(b),g&&(bb&&v(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'"),g.opener=null,dc("b/12014412, meta tag with sanitized URL"),a='<META HTTP-EQUIV="refresh" content="0; url='+qa(a)+'">',a=vc(a),g.document.write(uc(a)),g.document.close())):g=a.open(nc(b),c,g);if(g)try{g.focus()}catch(l){}return g}
function Ff(a){return new z(function(b){function c(){sd(2E3).then(function(){if(!a||a.closed)b();else return c()})}return c()})}var Gf=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;function Hf(){var a=null;return(new z(function(b){"complete"==k.document.readyState?b():(a=function(){b()},dd(window,"load",a))})).s(function(b){E(window,"load",a);throw b;})}
function If(){return Jf(void 0)?Hf().then(function(){return new z(function(a,b){var c=k.document,d=setTimeout(function(){b(Error("Cordova framework is not ready."))},1E3);c.addEventListener("deviceready",function(){clearTimeout(d);a()},!1)})}):B(Error("Cordova must run in an Android or iOS file scheme."))}function Jf(a){a=a||J();return!("file:"!==Kf()||!a.toLowerCase().match(/iphone|ipad|ipod|android/))}function Lf(){var a=k.window;try{return!(!a||a==a.top)}catch(b){return!1}}
function K(){return firebase.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":firebase.INTERNAL.hasOwnProperty("node")?"Node":"Browser"}function Mf(){var a=K();return"ReactNative"===a||"Node"===a}var Ef="Firefox",Af="Chrome";
function zf(a){var b=a.toLowerCase();if(v(b,"opera/")||v(b,"opr/")||v(b,"opios/"))return"Opera";if(v(b,"iemobile"))return"IEMobile";if(v(b,"msie")||v(b,"trident/"))return"IE";if(v(b,"edge/"))return"Edge";if(v(b,"firefox/"))return Ef;if(v(b,"silk/"))return"Silk";if(v(b,"blackberry"))return"Blackberry";if(v(b,"webos"))return"Webos";if(!v(b,"safari/")||v(b,"chrome/")||v(b,"crios/")||v(b,"android"))if(!v(b,"chrome/")&&!v(b,"crios/")||v(b,"edge/")){if(v(b,"android"))return"Android";if((a=a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&
2==a.length)return a[1]}else return Af;else return"Safari";return"Other"}var Nf={Gc:"FirebaseCore-web",Ic:"FirebaseUI-web"};function Of(a,b){b=b||[];var c=[],d={},e;for(e in Nf)d[Nf[e]]=!0;for(e=0;e<b.length;e++)"undefined"!==typeof d[b[e]]&&(delete d[b[e]],c.push(b[e]));c.sort();b=c;b.length||(b=["FirebaseCore-web"]);c=K();d="";"Browser"===c?d=zf(J()):d=c;return d+"/JsCore/"+a+"/"+b.join(",")}function J(){return k.navigator&&k.navigator.userAgent||""}
function L(a,b){a=a.split(".");b=b||k;for(var c=0;c<a.length&&"object"==typeof b&&null!=b;c++)b=b[a[c]];c!=a.length&&(b=void 0);return b}function Pf(){try{var a=k.localStorage,b=Qf();if(a)return a.setItem(b,"1"),a.removeItem(b),uf()?!!k.indexedDB:!0}catch(c){}return!1}function Rf(){return(Sf()||"chrome-extension:"===Kf()||Jf())&&!Mf()&&Pf()}function Sf(){return"http:"===Kf()||"https:"===Kf()}function Kf(){return k.location&&k.location.protocol||null}
function Tf(a){a=a||J();return Bf(a)||zf(a)==Ef?!1:!0}function Uf(a){return"undefined"===typeof a?null:Cc(a)}function Vf(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&null!==a[c]&&void 0!==a[c]&&(b[c]=a[c]);return b}function Wf(a){if(null!==a)return JSON.parse(a)}function Qf(a){return a?a:""+Math.floor(1E9*Math.random()).toString()}function Xf(a){a=a||J();return"Safari"==zf(a)||a.toLowerCase().match(/iphone|ipad|ipod/)?!1:!0}
function Yf(){var a=k.___jsl;if(a&&a.H)for(var b in a.H)if(a.H[b].r=a.H[b].r||[],a.H[b].L=a.H[b].L||[],a.H[b].r=a.H[b].L.concat(),a.CP)for(var c=0;c<a.CP.length;c++)a.CP[c]=null}function Zf(){var a=k.navigator;return a&&"boolean"===typeof a.onLine&&(Sf()||"chrome-extension:"===Kf()||"undefined"!==typeof a.connection)?a.onLine:!0}function $f(a,b,c,d){if(a>b)throw Error("Short delay should be less than long delay!");this.c=a;this.b=b;a=c||J();d=d||K();this.a=Bf(a)||"ReactNative"===d}
$f.prototype.get=function(){return this.a?this.b:this.c};function ag(){var a=k.document;return a&&"undefined"!==typeof a.visibilityState?"visible"==a.visibilityState:!0}function bg(){var a=k.document,b=null;return ag()||!a?A():(new z(function(c){b=function(){ag()&&(a.removeEventListener("visibilitychange",b,!1),c())};a.addEventListener("visibilitychange",b,!1)})).s(function(c){a.removeEventListener("visibilitychange",b,!1);throw c;})}
function cg(a){try{var b=new Date(parseInt(a,10));if(!isNaN(b.getTime())&&!/[^0-9]/.test(a))return b.toUTCString()}catch(c){}return null};var dg={};var eg;try{var fg={};Object.defineProperty(fg,"abcd",{configurable:!0,enumerable:!0,value:1});Object.defineProperty(fg,"abcd",{configurable:!0,enumerable:!0,value:2});eg=2==fg.abcd}catch(a){eg=!1}function M(a,b,c){eg?Object.defineProperty(a,b,{configurable:!0,enumerable:!0,value:c}):a[b]=c}function gg(a,b){if(b)for(var c in b)b.hasOwnProperty(c)&&M(a,c,b[c])}function hg(a){var b={};gg(b,a);return b}function ig(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}
function jg(a,b){if(!b||!b.length)return!0;if(!a)return!1;for(var c=0;c<b.length;c++){var d=a[b[c]];if(void 0===d||null===d||""===d)return!1}return!0}function kg(a){var b=a;if("object"==typeof a&&null!=a){b="length"in a?[]:{};for(var c in a)M(b,c,kg(a[c]))}return b};function lg(a){var b={},c=a[mg],d=a[ng];a=a[og];if(!c||!a)throw Error("Invalid provider user info!");b[pg]=d||null;b[qg]=c;M(this,rg,a);M(this,sg,kg(b))}var mg="email",ng="newEmail",og="requestType",qg="email",pg="fromEmail",sg="data",rg="operation";function N(a,b){this.code=tg+a;this.message=b||ug[a]||""}t(N,Error);N.prototype.B=function(){return{code:this.code,message:this.message}};N.prototype.toJSON=function(){return this.B()};function vg(a){var b=a&&a.code;return b?new N(b.substring(tg.length),a.message):null}
var tg="auth/",ug={"argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
"code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
"dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
"invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"The user's credential is no longer valid. The user must sign in again.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.",
"invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.",
"invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
"invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
"invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.",
"auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.",
"missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
"network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",
timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","user-cancelled":"User did not grant your application the permissions it requested.",
"user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};function wg(a){var b=a[xg];if("undefined"===typeof b)throw new N("missing-continue-uri");if("string"!==typeof b||"string"===typeof b&&!b.length)throw new N("invalid-continue-uri");this.h=b;this.c=this.a=null;this.g=!1;var c=a[yg];if(c&&"object"===typeof c){b=c[zg];var d=c[Ag];c=c[Bg];if("string"===typeof b&&b.length){this.a=b;if("undefined"!==typeof d&&"boolean"!==typeof d)throw new N("argument-error",Ag+" property must be a boolean when specified.");this.g=!!d;if("undefined"!==typeof c&&("string"!==
typeof c||"string"===typeof c&&!c.length))throw new N("argument-error",Bg+" property must be a non empty string when specified.");this.c=c||null}else{if("undefined"!==typeof b)throw new N("argument-error",zg+" property must be a non empty string when specified.");if("undefined"!==typeof d||"undefined"!==typeof c)throw new N("missing-android-pkg-name");}}else if("undefined"!==typeof c)throw new N("argument-error",yg+" property must be a non null object when specified.");this.b=null;if((b=a[Cg])&&"object"===
typeof b)if(b=b[Dg],"string"===typeof b&&b.length)this.b=b;else{if("undefined"!==typeof b)throw new N("argument-error",Dg+" property must be a non empty string when specified.");}else if("undefined"!==typeof b)throw new N("argument-error",Cg+" property must be a non null object when specified.");a=a[Eg];if("undefined"!==typeof a&&"boolean"!==typeof a)throw new N("argument-error",Eg+" property must be a boolean when specified.");if((this.f=!!a)&&!this.b&&!this.a)throw new N("argument-error",Eg+" property can't be true when no mobile application is provided.");
}var yg="android",Eg="handleCodeInApp",Cg="iOS",xg="url",Ag="installApp",Bg="minimumVersion",zg="packageName",Dg="bundleId";function Fg(a){var b={};b.continueUrl=a.h;b.canHandleCodeInApp=a.f;if(b.androidPackageName=a.a)b.androidMinimumVersion=a.c,b.androidInstallApp=a.g;b.iOSBundleId=a.b;for(var c in b)null===b[c]&&delete b[c];return b};function Gg(a){this.b=a.sub;na();this.a=a.provider_id||a.firebase&&a.firebase.sign_in_provider||null}function Hg(a){a=a.split(".");if(3!=a.length)return null;a=a[1];for(var b=(4-a.length%4)%4,c=0;c<b;c++)a+=".";try{var d=JSON.parse(Kd(a));if(d.sub&&d.iss&&d.aud&&d.exp)return new Gg(d)}catch(e){}return null};var Ig="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Jg=["client_id","response_type","scope","redirect_uri","state"],Kg={Hc:{Ma:"locale",za:500,ya:600,Na:"facebook.com",$a:Jg},Jc:{Ma:null,za:500,ya:620,Na:"github.com",$a:Jg},Kc:{Ma:"hl",za:515,ya:680,Na:"google.com",$a:Jg},Qc:{Ma:"lang",za:485,ya:705,Na:"twitter.com",$a:Ig}};function Lg(a){for(var b in Kg)if(Kg[b].Na==a)return Kg[b];return null};function Mg(a){var b={};b["facebook.com"]=Ng;b["google.com"]=Og;b["github.com"]=Pg;b["twitter.com"]=Qg;var c=a&&a[Rg];try{if(c)return b[c]?new b[c](a):new Sg(a);if("undefined"!==typeof a[Tg])return new Ug(a)}catch(d){}return null}var Tg="idToken",Rg="providerId";
function Ug(a){var b=a[Rg];if(!b&&a[Tg]){var c=Hg(a[Tg]);c&&c.a&&(b=c.a)}if(!b)throw Error("Invalid additional user info!");if("anonymous"==b||"custom"==b)b=null;c=!1;"undefined"!==typeof a.isNewUser?c=!!a.isNewUser:"identitytoolkit#SignupNewUserResponse"===a.kind&&(c=!0);M(this,"providerId",b);M(this,"isNewUser",c)}function Sg(a){Ug.call(this,a);a=Wf(a.rawUserInfo||"{}");M(this,"profile",kg(a||{}))}t(Sg,Ug);
function Ng(a){Sg.call(this,a);if("facebook.com"!=this.providerId)throw Error("Invalid provider ID!");}t(Ng,Sg);function Pg(a){Sg.call(this,a);if("github.com"!=this.providerId)throw Error("Invalid provider ID!");M(this,"username",this.profile&&this.profile.login||null)}t(Pg,Sg);function Og(a){Sg.call(this,a);if("google.com"!=this.providerId)throw Error("Invalid provider ID!");}t(Og,Sg);
function Qg(a){Sg.call(this,a);if("twitter.com"!=this.providerId)throw Error("Invalid provider ID!");M(this,"username",a.screenName||null)}t(Qg,Sg);function Vg(a,b){return a.then(function(a){if(a[O]){var c=Hg(a[O]);if(!c||b!=c.b)throw new N("user-mismatch");return a}throw new N("user-mismatch");}).s(function(a){throw a&&a.code&&a.code==tg+"user-not-found"?new N("user-mismatch"):a;})}
function Wg(a,b){if(b.idToken||b.accessToken)b.idToken&&M(this,"idToken",b.idToken),b.accessToken&&M(this,"accessToken",b.accessToken);else if(b.oauthToken&&b.oauthTokenSecret)M(this,"accessToken",b.oauthToken),M(this,"secret",b.oauthTokenSecret);else throw new N("internal-error","failed to construct a credential");M(this,"providerId",a)}Wg.prototype.wa=function(a){return Xg(a,Yg(this))};Wg.prototype.b=function(a,b){var c=Yg(this);c.idToken=b;return Zg(a,c)};
Wg.prototype.c=function(a,b){var c=Yg(this);return Vg($g(a,c),b)};function Yg(a){var b={};a.idToken&&(b.id_token=a.idToken);a.accessToken&&(b.access_token=a.accessToken);a.secret&&(b.oauth_token_secret=a.secret);b.providerId=a.providerId;return{postBody:Ie(b).toString(),requestUri:"http://localhost"}}
Wg.prototype.B=function(){var a={providerId:this.providerId};this.idToken&&(a.oauthIdToken=this.idToken);this.accessToken&&(a.oauthAccessToken=this.accessToken);this.secret&&(a.oauthTokenSecret=this.secret);return a};function ah(a,b){this.rc=b||[];gg(this,{providerId:a,isOAuthProvider:!0});this.rb={};this.Wa=(Lg(a)||{}).Ma||null;this.Ua=null}ah.prototype.Ba=function(a){this.rb=Ua(a);return this};function P(a){ah.call(this,a,Jg);this.a=[]}t(P,ah);
P.prototype.sa=function(a){Ha(this.a,a)||this.a.push(a);return this};P.prototype.wb=function(){return La(this.a)};P.prototype.credential=function(a,b){if(!a&&!b)throw new N("argument-error","credential failed: must provide the ID token and/or the access token.");return new Wg(this.providerId,{idToken:a||null,accessToken:b||null})};function bh(){P.call(this,"facebook.com")}t(bh,P);M(bh,"PROVIDER_ID","facebook.com");
function ch(a){if(!a)throw new N("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;q(a)&&(b=a.accessToken);return(new bh).credential(null,b)}function dh(){P.call(this,"github.com")}t(dh,P);M(dh,"PROVIDER_ID","github.com");function eh(a){if(!a)throw new N("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;q(a)&&(b=a.accessToken);return(new dh).credential(null,b)}
function fh(){P.call(this,"google.com");this.sa("profile")}t(fh,P);M(fh,"PROVIDER_ID","google.com");function gh(a,b){var c=a;q(a)&&(c=a.idToken,b=a.accessToken);return(new fh).credential(c,b)}function hh(){ah.call(this,"twitter.com",Ig)}t(hh,ah);M(hh,"PROVIDER_ID","twitter.com");
function ih(a,b){var c=a;q(c)||(c={oauthToken:a,oauthTokenSecret:b});if(!c.oauthToken||!c.oauthTokenSecret)throw new N("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new Wg("twitter.com",c)}function jh(a,b){this.a=a;this.f=b;M(this,"providerId","password")}jh.prototype.wa=function(a){return Q(a,kh,{email:this.a,password:this.f})};jh.prototype.b=function(a,b){return Q(a,lh,{idToken:b,email:this.a,password:this.f})};
jh.prototype.c=function(a,b){return Vg(this.wa(a),b)};jh.prototype.B=function(){return{email:this.a,password:this.f}};function mh(){gg(this,{providerId:"password",isOAuthProvider:!1})}gg(mh,{PROVIDER_ID:"password"});function nh(a){if(!(a.Pa&&a.Oa||a.Da&&a.Y))throw new N("internal-error");this.a=a;M(this,"providerId","phone")}nh.prototype.wa=function(a){return a.Qa(oh(this))};nh.prototype.b=function(a,b){var c=oh(this);c.idToken=b;return Q(a,ph,c)};
nh.prototype.c=function(a,b){var c=oh(this);c.operation="REAUTH";a=Q(a,qh,c);return Vg(a,b)};nh.prototype.B=function(){var a={providerId:"phone"};this.a.Pa&&(a.verificationId=this.a.Pa);this.a.Oa&&(a.verificationCode=this.a.Oa);this.a.Da&&(a.temporaryProof=this.a.Da);this.a.Y&&(a.phoneNumber=this.a.Y);return a};function oh(a){return a.a.Da&&a.a.Y?{temporaryProof:a.a.Da,phoneNumber:a.a.Y}:{sessionInfo:a.a.Pa,code:a.a.Oa}}
function rh(a){try{this.a=a||firebase.auth()}catch(b){throw new N("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");}gg(this,{providerId:"phone",isOAuthProvider:!1})}
rh.prototype.Qa=function(a,b){var c=this.a.c;return A(b.verify()).then(function(d){if(!m(d))throw new N("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(b.type){case "recaptcha":return sh(c,{phoneNumber:a,recaptchaToken:d}).then(function(a){"function"===typeof b.reset&&b.reset();return a},function(a){"function"===typeof b.reset&&b.reset();throw a;});default:throw new N("argument-error",
'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');}})};function th(a,b){if(!a)throw new N("missing-verification-id");if(!b)throw new N("missing-verification-code");return new nh({Pa:a,Oa:b})}gg(rh,{PROVIDER_ID:"phone"});
function uh(a){if(a.temporaryProof&&a.phoneNumber)return new nh({Da:a.temporaryProof,Y:a.phoneNumber});var b=a&&a.providerId;if(!b||"password"===b)return null;var c=a&&a.oauthAccessToken,d=a&&a.oauthTokenSecret;a=a&&a.oauthIdToken;try{switch(b){case "google.com":return gh(a,c);case "facebook.com":return ch(c);case "github.com":return eh(c);case "twitter.com":return ih(c,d);default:return(new P(b)).credential(a,c)}}catch(e){return null}}
function vh(a){if(!a.isOAuthProvider)throw new N("invalid-oauth-provider");};function wh(a,b,c,d,e){this.b=a;this.c=b||null;this.f=c||null;this.g=d||null;this.a=e||null;if(this.f||this.a){if(this.f&&this.a)throw new N("invalid-auth-event");if(this.f&&!this.g)throw new N("invalid-auth-event");}else throw new N("invalid-auth-event");}wh.prototype.B=function(){return{type:this.b,eventId:this.c,urlResponse:this.f,sessionId:this.g,error:this.a&&this.a.B()}};function xh(a){a=a||{};return a.type?new wh(a.type,a.eventId,a.urlResponse,a.sessionId,a.error&&vg(a.error)):null};function yh(a){var b="unauthorized-domain",c=void 0,d=De(a);a=d.b;d=d.c;"chrome-extension"==d?c=oa("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):"http"==d||"https"==d?c=oa("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):b="operation-not-supported-in-this-environment";
N.call(this,b,c)}t(yh,N);function zh(a,b,c){N.call(this,a,c);a=b||{};a.sb&&M(this,"email",a.sb);a.Y&&M(this,"phoneNumber",a.Y);a.credential&&M(this,"credential",a.credential)}t(zh,N);zh.prototype.B=function(){var a={code:this.code,message:this.message};this.email&&(a.email=this.email);this.phoneNumber&&(a.phoneNumber=this.phoneNumber);var b=this.credential&&this.credential.B();b&&Wa(a,b);return a};zh.prototype.toJSON=function(){return this.B()};
function Ah(a){if(a.code){var b=a.code||"";0==b.indexOf(tg)&&(b=b.substring(tg.length));var c={credential:uh(a)};if(a.email)c.sb=a.email;else if(a.phoneNumber)c.Y=a.phoneNumber;else return new N(b,a.message||void 0);return new zh(b,c,a.message)}return null};function Bh(a){this.f=a}t(Bh,Ne);Bh.prototype.a=function(){return new this.f};Bh.prototype.b=function(){return{}};
function Ch(a,b,c){var d="Node"==K();d=k.XMLHttpRequest||d&&firebase.INTERNAL.node&&firebase.INTERNAL.node.XMLHttpRequest;if(!d)throw new N("internal-error","The XMLHttpRequest compatibility library was not found.");this.b=a;a=b||{};this.i=a.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token";this.l=a.secureTokenTimeout||Dh;this.c=Ua(a.secureTokenHeaders||Eh);this.g=a.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.h=a.firebaseTimeout||Fh;this.a=
Ua(a.firebaseHeaders||Gh);c&&(this.a["X-Client-Version"]=c,this.c["X-Client-Version"]=c);this.f=new rf;this.o=new Bh(d)}var Hh,O="idToken",Dh=new $f(3E4,6E4),Eh={"Content-Type":"application/x-www-form-urlencoded"},Fh=new $f(3E4,6E4),Gh={"Content-Type":"application/json"};function Ih(a,b){b?a.a["X-Firebase-Locale"]=b:delete a.a["X-Firebase-Locale"]}function Jh(a,b){b?(a.a["X-Client-Version"]=b,a.c["X-Client-Version"]=b):(delete a.a["X-Client-Version"],delete a.c["X-Client-Version"])}
function Kh(a,b,c,d,e,f,g){Zf()?(yf()?a=r(a.m,a):(Hh||(Hh=new z(function(a,b){Lh(a,b)})),a=r(a.u,a)),a(b,c,d,e,f,g)):c&&c(null)}
Ch.prototype.m=function(a,b,c,d,e,f){var g="Node"==K(),l=Mf()?g?new Se(this.o):new Se:new Se(this.f);if(f){l.f=Math.max(0,f);var n=setTimeout(function(){G(l,"timeout")},f)}fd(l,"complete",function(){n&&clearTimeout(n);var a=null;try{a=JSON.parse(hf(this))||null}catch(vb){a=null}b&&b(a)});ld(l,"ready",function(){n&&clearTimeout(n);Lc(this)});ld(l,"timeout",function(){n&&clearTimeout(n);Lc(this);b&&b(null)});Ye(l,a,c,d,e)};
var Mh=dc("https://apis.google.com/js/client.js?onload=%{onload}"),Nh="__fcb"+Math.floor(1E6*Math.random()).toString();function Lh(a,b){if(((window.gapi||{}).client||{}).request)a();else{k[Nh]=function(){((window.gapi||{}).client||{}).request?a():b(Error("CORS_UNSUPPORTED"))};var c=hc(Mh,{onload:Nh});Td(kf(c),function(){b(Error("CORS_UNSUPPORTED"))})}}
Ch.prototype.u=function(a,b,c,d,e){var f=this;Hh.then(function(){window.gapi.client.setApiKey(f.b);var g=window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({path:a,method:c,body:d,headers:e,authType:"none",callback:function(a){window.gapi.auth.setToken(g);b&&b(a)}})}).s(function(a){b&&b({error:{message:a&&a.message||"CORS_UNSUPPORTED"}})})};
function Oh(a,b){return new z(function(c,d){"refresh_token"==b.grant_type&&b.refresh_token||"authorization_code"==b.grant_type&&b.code?Kh(a,a.i+"?key="+encodeURIComponent(a.b),function(a){a?a.error?d(Ph(a)):a.access_token&&a.refresh_token?c(a):d(new N("internal-error")):d(new N("network-request-failed"))},"POST",Ie(b).toString(),a.c,a.l.get()):d(new N("internal-error"))})}
function Qh(a,b,c,d,e,f){var g=De(a.g+b);I(g,"key",a.b);f&&I(g,"cb",na().toString());var l="GET"==c;if(l)for(var n in d)d.hasOwnProperty(n)&&I(g,n,d[n]);return new z(function(b,f){Kh(a,g.toString(),function(a){a?a.error?f(Ph(a,e||{})):b(a):f(new N("network-request-failed"))},c,l?void 0:Cc(Vf(d)),a.a,a.h.get())})}function Rh(a){if(!jf.test(a.email))throw new N("invalid-email");}function Sh(a){"email"in a&&Rh(a)}
function Th(a,b){return Q(a,Uh,{identifier:b,continueUri:Sf()?vf():"http://localhost"}).then(function(a){return a.allProviders||[]})}function Vh(a){return Q(a,Wh,{}).then(function(a){return a.authorizedDomains||[]})}function Xh(a){if(!a[O])throw new N("internal-error");}
function Yh(a){if(a.phoneNumber||a.temporaryProof){if(!a.phoneNumber||!a.temporaryProof)throw new N("internal-error");}else{if(!a.sessionInfo)throw new N("missing-verification-id");if(!a.code)throw new N("missing-verification-code");}}Ch.prototype.gb=function(){return Q(this,Zh,{})};Ch.prototype.kb=function(a,b){return Q(this,$h,{idToken:a,email:b})};Ch.prototype.lb=function(a,b){return Q(this,lh,{idToken:a,password:b})};var ai={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};h=Ch.prototype;
h.mb=function(a,b){var c={idToken:a},d=[];Pa(ai,function(a,f){var e=b[f];null===e?d.push(a):f in b&&(c[f]=e)});d.length&&(c.deleteAttribute=d);return Q(this,$h,c)};h.cb=function(a,b){a={requestType:"PASSWORD_RESET",email:a};Wa(a,b);return Q(this,bi,a)};h.bb=function(a,b){a={requestType:"VERIFY_EMAIL",idToken:a};Wa(a,b);return Q(this,ci,a)};function sh(a,b){return Q(a,di,b)}h.Qa=function(a){return Q(this,ei,a)};function fi(a,b,c){return Q(a,gi,{idToken:b,deleteProvider:c})}
function hi(a){if(!a.requestUri||!a.sessionId&&!a.postBody)throw new N("internal-error");}function ii(a){var b=null;a.needConfirmation?(a.code="account-exists-with-different-credential",b=Ah(a)):"FEDERATED_USER_ID_ALREADY_LINKED"==a.errorMessage?(a.code="credential-already-in-use",b=Ah(a)):"EMAIL_EXISTS"==a.errorMessage?(a.code="email-already-in-use",b=Ah(a)):a.errorMessage&&(b=ji(a.errorMessage));if(b)throw b;if(!a[O])throw new N("internal-error");}
function Xg(a,b){b.returnIdpCredential=!0;return Q(a,ki,b)}function Zg(a,b){b.returnIdpCredential=!0;return Q(a,li,b)}function $g(a,b){b.returnIdpCredential=!0;b.autoCreate=!1;return Q(a,mi,b)}function ni(a){if(!a.oobCode)throw new N("invalid-action-code");}h.Ta=function(a,b){return Q(this,oi,{oobCode:a,newPassword:b})};h.Ia=function(a){return Q(this,pi,{oobCode:a})};h.Sa=function(a){return Q(this,qi,{oobCode:a})};
var qi={endpoint:"setAccountInfo",D:ni,ga:"email"},pi={endpoint:"resetPassword",D:ni,O:function(a){if(!a.email||!a.requestType)throw new N("internal-error");}},ri={endpoint:"signupNewUser",D:function(a){Rh(a);if(!a.password)throw new N("weak-password");},O:Xh,T:!0},Uh={endpoint:"createAuthUri"},si={endpoint:"deleteAccount",ea:["idToken"]},gi={endpoint:"setAccountInfo",ea:["idToken","deleteProvider"],D:function(a){if(!fa(a.deleteProvider))throw new N("internal-error");}},ti={endpoint:"getAccountInfo"},
ci={endpoint:"getOobConfirmationCode",ea:["idToken","requestType"],D:function(a){if("VERIFY_EMAIL"!=a.requestType)throw new N("internal-error");},ga:"email"},bi={endpoint:"getOobConfirmationCode",ea:["requestType"],D:function(a){if("PASSWORD_RESET"!=a.requestType)throw new N("internal-error");Rh(a)},ga:"email"},Wh={nb:!0,endpoint:"getProjectConfig",zb:"GET"},ui={nb:!0,endpoint:"getRecaptchaParam",zb:"GET",O:function(a){if(!a.recaptchaSiteKey)throw new N("internal-error");}},oi={endpoint:"resetPassword",
D:ni,ga:"email"},di={endpoint:"sendVerificationCode",ea:["phoneNumber","recaptchaToken"],ga:"sessionInfo"},$h={endpoint:"setAccountInfo",ea:["idToken"],D:Sh,T:!0},lh={endpoint:"setAccountInfo",ea:["idToken"],D:function(a){Sh(a);if(!a.password)throw new N("weak-password");},O:Xh,T:!0},Zh={endpoint:"signupNewUser",O:Xh,T:!0},ki={endpoint:"verifyAssertion",D:hi,O:ii,T:!0},mi={endpoint:"verifyAssertion",D:hi,O:function(a){if(a.errorMessage&&"USER_NOT_FOUND"==a.errorMessage)throw new N("user-not-found");
if(a.errorMessage)throw ji(a.errorMessage);if(!a[O])throw new N("internal-error");},T:!0},li={endpoint:"verifyAssertion",D:function(a){hi(a);if(!a.idToken)throw new N("internal-error");},O:ii,T:!0},vi={endpoint:"verifyCustomToken",D:function(a){if(!a.token)throw new N("invalid-custom-token");},O:Xh,T:!0},kh={endpoint:"verifyPassword",D:function(a){Rh(a);if(!a.password)throw new N("wrong-password");},O:Xh,T:!0},ei={endpoint:"verifyPhoneNumber",D:Yh,O:Xh},ph={endpoint:"verifyPhoneNumber",D:function(a){if(!a.idToken)throw new N("internal-error");
Yh(a)},O:function(a){if(a.temporaryProof)throw a.code="credential-already-in-use",Ah(a);Xh(a)}},qh={Pb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",D:Yh,O:Xh};
function Q(a,b,c){if(!jg(c,b.ea))return B(new N("internal-error"));var d=b.zb||"POST",e;return A(c).then(b.D).then(function(){b.T&&(c.returnSecureToken=!0);return Qh(a,b.endpoint,d,c,b.Pb,b.nb||!1)}).then(function(a){return e=a}).then(b.O).then(function(){if(!b.ga)return e;if(!(b.ga in e))throw new N("internal-error");return e[b.ga]})}function ji(a){return Ph({error:{errors:[{message:a}],code:400,message:a}})}
function Ph(a,b){var c=(a.error&&a.error.errors&&a.error.errors[0]||{}).reason||"";var d={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(c=d[c]?new N(d[c]):null)return c;c=a.error&&a.error.message||"";d={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",
MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",
INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",
INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",
UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash"};Wa(d,b||{});b=(b=c.match(/^[^\s]+\s*:\s*(.*)$/))&&1<b.length?b[1]:void 0;for(var e in d)if(0===c.indexOf(e))return new N(d[e],b);!b&&a&&(b=Uf(a));return new N("internal-error",b)};var wi={Mc:{Va:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",ab:"https://securetoken.googleapis.com/v1/token",id:"p"},Oc:{Va:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",ab:"https://staging-securetoken.sandbox.googleapis.com/v1/token",id:"s"},Pc:{Va:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",ab:"https://test-securetoken.sandbox.googleapis.com/v1/token",id:"t"}};
function xi(a){for(var b in wi)if(wi[b].id===a)return a=wi[b],{firebaseEndpoint:a.Va,secureTokenEndpoint:a.ab};return null}var yi;yi=xi("__EID__")?"__EID__":void 0;function zi(a){this.b=a;this.a=null;this.Ya=Ai(this)}
function Ai(a){return Bi().then(function(){return new z(function(b,c){L("gapi.iframes.getContext")().open({where:document.body,url:a.b,messageHandlersFilter:L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(d){function e(){clearTimeout(f);b()}a.a=d;a.a.restyle({setHideOnLeave:!1});var f=setTimeout(function(){c(Error("Network Error"))},Ci.get());d.ping(e).then(e,function(){c(Error("Network Error"))})})})})}
function Di(a,b){return a.Ya.then(function(){return new z(function(c){a.a.send(b.type,b,c,L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})})}function Ei(a,b){a.Ya.then(function(){a.a.register("authEvent",b,L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})}var Fi=dc("https://apis.google.com/js/api.js?onload=%{onload}"),Gi=new $f(3E4,6E4),Ci=new $f(5E3,15E3),Hi=null;
function Bi(){return Hi?Hi:Hi=(new z(function(a,b){if(Zf()){var c=function(){Yf();L("gapi.load")("gapi.iframes",{callback:a,ontimeout:function(){Yf();b(Error("Network Error"))},timeout:Gi.get()})};if(L("gapi.iframes.Iframe"))a();else if(L("gapi.load"))c();else{var d="__iframefcb"+Math.floor(1E6*Math.random()).toString();k[d]=function(){L("gapi.load")?c():b(Error("Network Error"))};d=hc(Fi,{onload:d});A(kf(d)).s(function(){b(Error("Network Error"))})}}else b(Error("Network Error"))})).s(function(a){Hi=
null;throw a;})};function Ii(a,b,c){this.i=a;this.g=b;this.h=c;this.f=null;this.a=Ee(this.i,"/__/auth/iframe");I(this.a,"apiKey",this.g);I(this.a,"appName",this.h);this.b=null;this.c=[]}Ii.prototype.toString=function(){this.f?I(this.a,"v",this.f):Le(this.a.a,"v");this.b?I(this.a,"eid",this.b):Le(this.a.a,"eid");this.c.length?I(this.a,"fw",this.c.join(",")):Le(this.a.a,"fw");return this.a.toString()};function Ji(a,b,c,d,e){this.m=a;this.u=b;this.c=c;this.l=d;this.i=this.g=this.h=null;this.a=e;this.f=null}
Ji.prototype.toString=function(){var a=Ee(this.m,"/__/auth/handler");I(a,"apiKey",this.u);I(a,"appName",this.c);I(a,"authType",this.l);if(this.a.isOAuthProvider){var b=this.a;try{var c=firebase.app(this.c).auth().$()}catch(l){c=null}b.Ua=c;I(a,"providerId",this.a.providerId);b=this.a;c=Vf(b.rb);for(var d in c)c[d]=c[d].toString();d=b.rc;c=Ua(c);for(var e=0;e<d.length;e++){var f=d[e];f in c&&delete c[f]}b.Wa&&b.Ua&&!c[b.Wa]&&(c[b.Wa]=b.Ua);Sa(c)||I(a,"customParameters",Uf(c))}"function"===typeof this.a.wb&&
(b=this.a.wb(),b.length&&I(a,"scopes",b.join(",")));this.h?I(a,"redirectUrl",this.h):Le(a.a,"redirectUrl");this.g?I(a,"eventId",this.g):Le(a.a,"eventId");this.i?I(a,"v",this.i):Le(a.a,"v");if(this.b)for(var g in this.b)this.b.hasOwnProperty(g)&&!Ce(a,g)&&I(a,g,this.b[g]);this.f?I(a,"eid",this.f):Le(a.a,"eid");g=Ki(this.c);g.length&&I(a,"fw",g.join(","));return a.toString()};function Ki(a){try{return firebase.app(a).auth().Ka()}catch(b){return[]}}
function Li(a,b,c,d,e){this.u=a;this.f=b;this.b=c;this.c=d||null;this.h=e||null;this.m=this.o=this.v=null;this.g=[];this.l=this.a=null}
function Mi(a){var b=vf();return Vh(a).then(function(a){a:{var c=De(b),e=c.c;c=c.b;for(var f=0;f<a.length;f++){var g=a[f];var l=c;var n=e;0==g.indexOf("chrome-extension://")?l=De(g).b==l&&"chrome-extension"==n:"http"!=n&&"https"!=n?l=!1:Gf.test(g)?l=l==g:(g=g.split(".").join("\\."),l=(new RegExp("^(.+\\."+g+"|"+g+")$","i")).test(l));if(l){a=!0;break a}}a=!1}if(!a)throw new yh(vf());})}
function Ni(a){if(a.l)return a.l;a.l=Hf().then(function(){if(!a.o){var b=a.c,c=a.h,d=Ki(a.b),e=new Ii(a.u,a.f,a.b);e.f=b;e.b=c;e.c=La(d||[]);a.o=e.toString()}a.i=new zi(a.o);Oi(a)});return a.l}h=Li.prototype;h.Ca=function(a,b,c){var d=new N("popup-closed-by-user"),e=new N("web-storage-unsupported"),f=this,g=!1;return this.ba().then(function(){Pi(f).then(function(c){c||(a&&Cf(a),b(e),g=!0)})}).s(function(){}).then(function(){if(!g)return Ff(a)}).then(function(){if(!g)return sd(c).then(function(){b(d)})})};
h.Db=function(){var a=J();return!Tf(a)&&!Xf(a)};h.yb=function(){return!1};
h.vb=function(a,b,c,d,e,f,g){if(!a)return B(new N("popup-blocked"));if(g&&!Tf())return this.ba().s(function(b){Cf(a);e(b)}),d(),A();this.a||(this.a=Mi(Qi(this)));var l=this;return this.a.then(function(){var b=l.ba().s(function(b){Cf(a);e(b);throw b;});d();return b}).then(function(){vh(c);if(!g){var d=Ri(l.u,l.f,l.b,b,c,null,f,l.c,void 0,l.h);wf(d,a)}}).s(function(a){"auth/network-request-failed"==a.code&&(l.a=null);throw a;})};
function Qi(a){a.m||(a.v=a.c?Of(a.c,Ki(a.b)):null,a.m=new Ch(a.f,xi(a.h),a.v));return a.m}h.Aa=function(a,b,c){this.a||(this.a=Mi(Qi(this)));var d=this;return this.a.then(function(){vh(b);var e=Ri(d.u,d.f,d.b,a,b,vf(),c,d.c,void 0,d.h);wf(e)}).s(function(a){"auth/network-request-failed"==a.code&&(d.a=null);throw a;})};h.ba=function(){var a=this;return Ni(this).then(function(){return a.i.Ya}).s(function(){a.a=null;throw new N("network-request-failed");})};h.Hb=function(){return!0};
function Ri(a,b,c,d,e,f,g,l,n,D){a=new Ji(a,b,c,d,e);a.h=f;a.g=g;a.i=l;a.b=Ua(n||null);a.f=D;return a.toString()}function Oi(a){if(!a.i)throw Error("IfcHandler must be initialized!");Ei(a.i,function(b){var c={};if(b&&b.authEvent){var d=!1;b=xh(b.authEvent);for(c=0;c<a.g.length;c++)d=a.g[c](b)||d;c={};c.status=d?"ACK":"ERROR";return A(c)}c.status="ERROR";return A(c)})}
function Pi(a){var b={type:"webStorageSupport"};return Ni(a).then(function(){return Di(a.i,b)}).then(function(a){if(a&&a.length&&"undefined"!==typeof a[0].webStorageSupport)return a[0].webStorageSupport;throw Error();})}h.ua=function(a){this.g.push(a)};h.Ja=function(a){Ja(this.g,function(b){return b==a})};function Si(a){this.a=a||firebase.INTERNAL.reactNative&&firebase.INTERNAL.reactNative.AsyncStorage;if(!this.a)throw new N("internal-error","The React Native compatibility library was not found.");}h=Si.prototype;h.get=function(a){return A(this.a.getItem(a)).then(function(a){return a&&Wf(a)})};h.set=function(a,b){return A(this.a.setItem(a,Uf(b)))};h.X=function(a){return A(this.a.removeItem(a))};h.ia=function(){};h.da=function(){};function Ti(){this.a={}}h=Ti.prototype;h.get=function(a){return A(this.a[a])};h.set=function(a,b){this.a[a]=b;return A()};h.X=function(a){delete this.a[a];return A()};h.ia=function(){};h.da=function(){};function Ui(a,b,c,d,e,f){try{var g=!!k.indexedDB}catch(l){g=!1}if(!g)throw new N("web-storage-unsupported");this.u=a;this.h=b;this.g=c;this.l=d;this.m=e;this.f={};this.c=[];this.a=0;this.o=f||k.indexedDB}var Vi;function Wi(a){return new z(function(b,c){var d=a.o.open(a.u,a.m);d.onerror=function(a){c(Error(a.target.errorCode))};d.onupgradeneeded=function(b){b=b.target.result;try{b.createObjectStore(a.h,{keyPath:a.g})}catch(f){c(f)}};d.onsuccess=function(a){b(a.target.result)}})}
function Xi(a){a.i||(a.i=Wi(a));return a.i}function Yi(a,b){return b.objectStore(a.h)}function Zi(a,b,c){return b.transaction([a.h],c?"readwrite":"readonly")}function $i(a){return new z(function(b,c){a.onsuccess=function(a){a&&a.target?b(a.target.result):b()};a.onerror=function(a){c(Error(a.target.errorCode))}})}h=Ui.prototype;
h.set=function(a,b){var c=!1,d,e=this;return Qb(Xi(this).then(function(b){d=b;b=Yi(e,Zi(e,d,!0));return $i(b.get(a))}).then(function(f){var g=Yi(e,Zi(e,d,!0));if(f)return f.value=b,$i(g.put(f));e.a++;c=!0;f={};f[e.g]=a;f[e.l]=b;return $i(g.add(f))}).then(function(){e.f[a]=b}),function(){c&&e.a--})};h.get=function(a){var b=this;return Xi(this).then(function(c){return $i(Yi(b,Zi(b,c,!1)).get(a))}).then(function(a){return a&&a.value})};
h.X=function(a){var b=!1,c=this;return Qb(Xi(this).then(function(d){b=!0;c.a++;return $i(Yi(c,Zi(c,d,!0))["delete"](a))}).then(function(){delete c.f[a]}),function(){b&&c.a--})};
h.zc=function(){var a=this;return Xi(this).then(function(b){var c=Yi(a,Zi(a,b,!1));return c.getAll?$i(c.getAll()):new z(function(a,b){var d=[],e=c.openCursor();e.onsuccess=function(b){(b=b.target.result)?(d.push(b.value),b["continue"]()):a(d)};e.onerror=function(a){b(Error(a.target.errorCode))}})}).then(function(b){var c={},d=[];if(0==a.a){for(d=0;d<b.length;d++)c[b[d][a.g]]=b[d][a.l];d=xf(a.f,c);a.f=c}return d})};h.ia=function(a){0==this.c.length&&aj(this);this.c.push(a)};
h.da=function(a){Ja(this.c,function(b){return b==a});0==this.c.length&&this.b&&this.b.cancel("STOP_EVENT")};function aj(a){function b(){a.b=sd(800).then(r(a.zc,a)).then(function(b){0<b.length&&w(a.c,function(a){a(b)})}).then(b).s(function(a){"STOP_EVENT"!=a.message&&b()});return a.b}a.b&&a.b.cancel("STOP_EVENT");b()};function bj(){if(!cj()){if("Node"==K())throw new N("internal-error","The LocalStorage compatibility library was not found.");throw new N("web-storage-unsupported");}this.a=dj()||firebase.INTERNAL.node.localStorage}function dj(){try{var a=k.localStorage,b=Qf();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
function cj(){var a="Node"==K();a=dj()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.localStorage;if(!a)return!1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return!1}}h=bj.prototype;h.get=function(a){var b=this;return A().then(function(){var c=b.a.getItem(a);return Wf(c)})};h.set=function(a,b){var c=this;return A().then(function(){var d=Uf(b);null===d?c.X(a):c.a.setItem(a,d)})};h.X=function(a){var b=this;return A().then(function(){b.a.removeItem(a)})};
h.ia=function(a){k.window&&cd(k.window,"storage",a)};h.da=function(a){k.window&&E(k.window,"storage",a)};function ej(){}h=ej.prototype;h.get=function(){return A(null)};h.set=function(){return A()};h.X=function(){return A()};h.ia=function(){};h.da=function(){};function fj(){if(!gj()){if("Node"==K())throw new N("internal-error","The SessionStorage compatibility library was not found.");throw new N("web-storage-unsupported");}this.a=hj()||firebase.INTERNAL.node.sessionStorage}function hj(){try{var a=k.sessionStorage,b=Qf();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
function gj(){var a="Node"==K();a=hj()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.sessionStorage;if(!a)return!1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return!1}}h=fj.prototype;h.get=function(a){var b=this;return A().then(function(){var c=b.a.getItem(a);return Wf(c)})};h.set=function(a,b){var c=this;return A().then(function(){var d=Uf(b);null===d?c.X(a):c.a.setItem(a,d)})};h.X=function(a){var b=this;return A().then(function(){b.a.removeItem(a)})};h.ia=function(){};
h.da=function(){};function ij(){var a={};a.Browser=jj;a.Node=kj;a.ReactNative=lj;this.a=a[K()]}var mj,jj={C:bj,jb:fj},kj={C:bj,jb:fj},lj={C:Si,jb:ej};var nj={Lc:"local",NONE:"none",Nc:"session"};function oj(a){var b=new N("invalid-persistence-type"),c=new N("unsupported-persistence-type");a:{for(d in nj)if(nj[d]==a){var d=!0;break a}d=!1}if(!d||"string"!==typeof a)throw b;switch(K()){case "ReactNative":if("session"===a)throw c;break;case "Node":if("none"!==a)throw c;break;default:if(!Pf()&&"none"!==a)throw c;}}
function pj(a,b,c,d,e){this.i=a;this.g=b;this.A=c;this.u=d;this.v=e;this.a={};mj||(mj=new ij);a=mj;try{if(uf()){Vi||(Vi=new Ui("firebaseLocalStorageDb","firebaseLocalStorage","fbase_key","value",1));var f=Vi}else f=new a.a.C;this.l=f}catch(g){this.l=new Ti,this.u=!0}try{this.o=new a.a.jb}catch(g){this.o=new Ti}this.w=new Ti;this.h=r(this.m,this);this.b={}}var qj;function rj(){qj||(qj=new pj("firebase",":",!Xf(J())&&Lf()?!0:!1,Tf(),Pf()));return qj}
function sj(a,b){switch(b){case "session":return a.o;case "none":return a.w;default:return a.l}}function tj(a,b,c){return a.i+a.g+b.name+(c?a.g+c:"")}pj.prototype.get=function(a,b){return sj(this,a.C).get(tj(this,a,b))};function uj(a,b,c){c=tj(a,b,c);"local"==b.C&&(a.b[c]=null);return sj(a,b.C).X(c)}pj.prototype.set=function(a,b,c){var d=tj(this,a,c),e=this,f=sj(this,a.C);return f.set(d,b).then(function(){return f.get(d)}).then(function(b){"local"==a.C&&(e.b[d]=b)})};
function vj(a,b,c,d){b=tj(a,b,c);a.v&&(a.b[b]=k.localStorage.getItem(b));Sa(a.a)&&(sj(a,"local").ia(a.h),a.u||uf()||!a.v||wj(a));a.a[b]||(a.a[b]=[]);a.a[b].push(d)}function xj(a,b,c){b=tj(a,yj("local"),b);a.a[b]&&(Ja(a.a[b],function(a){return a==c}),0==a.a[b].length&&delete a.a[b]);Sa(a.a)&&zj(a)}
function wj(a){Aj(a);a.f=setInterval(function(){for(var b in a.a){var c=k.localStorage.getItem(b),d=a.b[b];c!=d&&(a.b[b]=c,c=new Qc({type:"storage",key:b,target:window,oldValue:d,newValue:c,a:!0}),a.m(c))}},1E3)}function Aj(a){a.f&&(clearInterval(a.f),a.f=null)}function zj(a){sj(a,"local").da(a.h);Aj(a)}
pj.prototype.m=function(a){if(a&&a.g){var b=a.a.key;if(null==b)for(var c in this.a){var d=this.b[c];"undefined"===typeof d&&(d=null);var e=k.localStorage.getItem(c);e!==d&&(this.b[c]=e,this.c(c))}else if(0==b.indexOf(this.i+this.g)&&this.a[b]){"undefined"!==typeof a.a.a?sj(this,"local").da(this.h):Aj(this);if(this.A)if(c=k.localStorage.getItem(b),d=a.a.newValue,d!==c)null!==d?k.localStorage.setItem(b,d):k.localStorage.removeItem(b);else if(this.b[b]===d&&"undefined"===typeof a.a.a)return;var f=this;
c=function(){if("undefined"!==typeof a.a.a||f.b[b]!==k.localStorage.getItem(b))f.b[b]=k.localStorage.getItem(b),f.c(b)};y&&kb&&10==kb&&k.localStorage.getItem(b)!==a.a.newValue&&a.a.newValue!==a.a.oldValue?setTimeout(c,10):c()}}else w(a,r(this.c,this))};pj.prototype.c=function(a){this.a[a]&&w(this.a[a],function(a){a()})};function Cj(a){this.a=a;this.b=rj()}var Dj={name:"authEvent",C:"local"};function Ej(a){return a.b.get(Dj,a.a).then(function(a){return xh(a)})};function Fj(){this.a=rj()};function Gj(a,b,c,d,e,f,g){this.u=a;this.i=b;this.l=c;this.m=d||null;this.o=g||null;this.h=b+":"+c;this.A=new Fj;this.g=new Cj(this.h);this.f=null;this.b=[];this.v=e||500;this.w=f||2E3;this.a=this.c=null}function Hj(a){return new N("invalid-cordova-configuration",a)}h=Gj.prototype;
h.ba=function(){return this.xa?this.xa:this.xa=If().then(function(){if("function"!==typeof L("universalLinks.subscribe",k))throw Hj("cordova-universal-links-plugin is not installed");if("undefined"===typeof L("BuildInfo.packageName",k))throw Hj("cordova-plugin-buildinfo is not installed");if("function"!==typeof L("cordova.plugins.browsertab.openUrl",k))throw Hj("cordova-plugin-browsertab is not installed");if("function"!==typeof L("cordova.InAppBrowser.open",k))throw Hj("cordova-plugin-inappbrowser is not installed");
},function(){throw new N("cordova-not-ready");})};function Ij(){for(var a=20,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}function Jj(a){var b=new ie;he(b,a);a=[];var c=8*b.g;56>b.c?he(b,fe,56-b.c):he(b,fe,b.b-(b.c-56));for(var d=63;56<=d;d--)b.f[d]=c&255,c/=256;ge(b);for(d=c=0;d<b.i;d++)for(var e=24;0<=e;e-=8)a[c++]=b.a[d]>>e&255;return Hd(a)}
h.Ca=function(a,b){b(new N("operation-not-supported-in-this-environment"));return A()};h.vb=function(){return B(new N("operation-not-supported-in-this-environment"))};h.Hb=function(){return!1};h.Db=function(){return!0};h.yb=function(){return!0};
h.Aa=function(a,b,c){if(this.c)return B(new N("redirect-operation-pending"));var d=this,e=k.document,f=null,g=null,l=null,n=null;return this.c=Qb(A().then(function(){vh(b);return Kj(d)}).then(function(){return Lj(d,a,b,c)}).then(function(){return(new z(function(a,b){g=function(){var b=L("cordova.plugins.browsertab.close",k);a();"function"===typeof b&&b();d.a&&"function"===typeof d.a.close&&(d.a.close(),d.a=null);return!1};d.ua(g);l=function(){f||(f=sd(d.w).then(function(){b(new N("redirect-cancelled-by-user"))}))};
n=function(){ag()&&l()};e.addEventListener("resume",l,!1);J().toLowerCase().match(/android/)||e.addEventListener("visibilitychange",n,!1)})).s(function(a){return Mj(d).then(function(){throw a;})})}),function(){l&&e.removeEventListener("resume",l,!1);n&&e.removeEventListener("visibilitychange",n,!1);f&&f.cancel();g&&d.Ja(g);d.c=null})};
function Lj(a,b,c,d){var e=Ij(),f=new wh(b,d,null,e,new N("no-auth-event")),g=L("BuildInfo.packageName",k);if("string"!==typeof g)throw new N("invalid-cordova-configuration");var l=L("BuildInfo.displayName",k),n={};if(J().toLowerCase().match(/iphone|ipad|ipod/))n.ibi=g;else if(J().toLowerCase().match(/android/))n.apn=g;else return B(new N("operation-not-supported-in-this-environment"));l&&(n.appDisplayName=l);e=Jj(e);n.sessionId=e;var D=Ri(a.u,a.i,a.l,b,c,null,d,a.m,n,a.o);return a.ba().then(function(){var b=
a.h;return a.A.a.set(Dj,f.B(),b)}).then(function(){var b=L("cordova.plugins.browsertab.isAvailable",k);if("function"!==typeof b)throw new N("invalid-cordova-configuration");var c=null;b(function(b){if(b){c=L("cordova.plugins.browsertab.openUrl",k);if("function"!==typeof c)throw new N("invalid-cordova-configuration");c(D)}else{c=L("cordova.InAppBrowser.open",k);if("function"!==typeof c)throw new N("invalid-cordova-configuration");b=J();b=!(!b.match(/(iPad|iPhone|iPod).*OS 7_\d/i)&&!b.match(/(iPad|iPhone|iPod).*OS 8_\d/i));
a.a=c(D,b?"_blank":"_system","location=yes")}})})}function Nj(a,b){for(var c=0;c<a.b.length;c++)try{a.b[c](b)}catch(d){}}function Kj(a){a.f||(a.f=a.ba().then(function(){return new z(function(b){function c(d){b(d);a.Ja(c);return!1}a.ua(c);Oj(a)})}));return a.f}function Mj(a){var b=null;return Ej(a.g).then(function(c){b=c;c=a.g;return uj(c.b,Dj,c.a)}).then(function(){return b})}
function Oj(a){function b(b){e=!0;f&&f.cancel();Mj(a).then(function(c){var e=d;if(c&&b&&b.url){e=null;var f=b.url;var g=De(f),l=Ce(g,"link"),n=Ce(De(l),"link");g=Ce(g,"deep_link_id");f=Ce(De(g),"link")||g||n||l||f;-1!=f.indexOf("/__/auth/callback")&&(e=De(f),e=Wf(Ce(e,"firebaseError")||null),e=(e="object"===typeof e?vg(e):null)?new wh(c.b,c.c,null,null,e):new wh(c.b,c.c,f,c.g));e=e||d}Nj(a,e)})}var c=L("universalLinks.subscribe",k);if("function"!==typeof c)throw new N("invalid-cordova-configuration");
var d=new wh("unknown",null,null,null,new N("no-auth-event")),e=!1,f=sd(a.v).then(function(){return Mj(a).then(function(){e||Nj(a,d)})}),g=k.handleOpenURL;k.handleOpenURL=function(a){0==a.toLowerCase().indexOf(L("BuildInfo.packageName",k).toLowerCase()+"://")&&b({url:a});if("function"===typeof g)try{g(a)}catch(n){console.error(n)}};c(null,b)}
h.ua=function(a){this.b.push(a);Kj(this).s(function(b){"auth/invalid-cordova-configuration"===b.code&&(b=new wh("unknown",null,null,null,new N("no-auth-event")),a(b))})};h.Ja=function(a){Ja(this.b,function(b){return b==a})};function Pj(a){this.a=a;this.b=rj()}var Qj={name:"pendingRedirect",C:"session"};function Rj(a){return a.b.set(Qj,"pending",a.a)}function Sj(a){return uj(a.b,Qj,a.a)}function Tj(a){return a.b.get(Qj,a.a).then(function(a){return"pending"==a})};function Uj(a,b,c){this.v=a;this.l=b;this.u=c;this.h=[];this.f=!1;this.i=r(this.m,this);this.c=new Vj;this.o=new Wj;this.g=new Pj(this.l+":"+this.u);this.b={};this.b.unknown=this.c;this.b.signInViaRedirect=this.c;this.b.linkViaRedirect=this.c;this.b.reauthViaRedirect=this.c;this.b.signInViaPopup=this.o;this.b.linkViaPopup=this.o;this.b.reauthViaPopup=this.o;this.a=Xj(this.v,this.l,this.u,yi)}
function Xj(a,b,c,d){var e=firebase.SDK_VERSION||null;return Jf()?new Gj(a,b,c,e,void 0,void 0,d):new Li(a,b,c,e,d)}Uj.prototype.reset=function(){this.f=!1;this.a.Ja(this.i);this.a=Xj(this.v,this.l,this.u)};function Yj(a){a.f||(a.f=!0,a.a.ua(a.i));var b=a.a;return a.a.ba().s(function(c){a.a==b&&a.reset();throw c;})}function Zj(a){a.a.Db()&&Yj(a).s(function(b){var c=new wh("unknown",null,null,null,new N("operation-not-supported-in-this-environment"));ak(b)&&a.m(c)});a.a.yb()||bk(a.c)}
Uj.prototype.subscribe=function(a){Ha(this.h,a)||this.h.push(a);if(!this.f){var b=this;Tj(this.g).then(function(a){a?Sj(b.g).then(function(){Yj(b).s(function(a){var c=new wh("unknown",null,null,null,new N("operation-not-supported-in-this-environment"));ak(a)&&b.m(c)})}):Zj(b)}).s(function(){Zj(b)})}};Uj.prototype.unsubscribe=function(a){Ja(this.h,function(b){return b==a})};
Uj.prototype.m=function(a){if(!a)throw new N("invalid-auth-event");for(var b=!1,c=0;c<this.h.length;c++){var d=this.h[c];if(d.ob(a.b,a.c)){(b=this.b[a.b])&&b.h(a,d);b=!0;break}}bk(this.c);return b};var ck=new $f(2E3,1E4),dk=new $f(3E4,6E4);Uj.prototype.aa=function(){return this.c.aa()};function ek(a,b,c,d,e,f){return a.a.vb(b,c,d,function(){a.f||(a.f=!0,a.a.ua(a.i))},function(){a.reset()},e,f)}function ak(a){return a&&"auth/cordova-not-ready"==a.code?!0:!1}
Uj.prototype.Aa=function(a,b,c){var d=this,e;return Rj(this.g).then(function(){return d.a.Aa(a,b,c).s(function(a){if(ak(a))throw new N("operation-not-supported-in-this-environment");e=a;return Sj(d.g).then(function(){throw e;})}).then(function(){return d.a.Hb()?new z(function(){}):Sj(d.g).then(function(){return d.aa()}).then(function(){}).s(function(){})})})};Uj.prototype.Ca=function(a,b,c,d){return this.a.Ca(c,function(c){a.fa(b,null,c,d)},ck.get())};var fk={};
function gk(a,b,c){var d=b+":"+c;fk[d]||(fk[d]=new Uj(a,b,c));return fk[d]}function Vj(){this.b=null;this.f=[];this.c=[];this.a=null;this.g=!1}Vj.prototype.reset=function(){this.b=null;this.a&&(this.a.cancel(),this.a=null)};
Vj.prototype.h=function(a,b){if(!a)return B(new N("invalid-auth-event"));this.reset();this.g=!0;var c=a.b,d=a.c,e=a.a&&"auth/web-storage-unsupported"==a.a.code,f=a.a&&"auth/operation-not-supported-in-this-environment"==a.a.code;"unknown"!=c||e||f?a.a?(hk(this,!0,null,a.a),a=A()):a=b.va(c,d)?ik(this,a,b):B(new N("invalid-auth-event")):(hk(this,!1,null,null),a=A());return a};function bk(a){a.g||(a.g=!0,hk(a,!1,null,null))}
function ik(a,b,c){c=c.va(b.b,b.c);var d=b.f,e=b.g,f=!!b.b.match(/Redirect$/);return c(d,e).then(function(b){hk(a,f,b,null)}).s(function(b){hk(a,f,null,b)})}function jk(a,b){a.b=function(){return B(b)};if(a.c.length)for(var c=0;c<a.c.length;c++)a.c[c](b)}function kk(a,b){a.b=function(){return A(b)};if(a.f.length)for(var c=0;c<a.f.length;c++)a.f[c](b)}function hk(a,b,c,d){b?d?jk(a,d):kk(a,c):kk(a,{user:null});a.f=[];a.c=[]}
Vj.prototype.aa=function(){var a=this;return new z(function(b,c){a.b?a.b().then(b,c):(a.f.push(b),a.c.push(c),lk(a))})};function lk(a){var b=new N("timeout");a.a&&a.a.cancel();a.a=sd(dk.get()).then(function(){a.b||hk(a,!0,null,b)})}function Wj(){}Wj.prototype.h=function(a,b){if(!a)return B(new N("invalid-auth-event"));var c=a.b,d=a.c;a.a?(b.fa(a.b,null,a.a,a.c),a=A()):a=b.va(c,d)?mk(a,b):B(new N("invalid-auth-event"));return a};
function mk(a,b){var c=a.c,d=a.b;return b.va(d,c)(a.f,a.g).then(function(a){b.fa(d,a,null,c)}).s(function(a){b.fa(d,null,a,c)})};function nk(a,b){this.a=b;M(this,"verificationId",a)}nk.prototype.confirm=function(a){a=th(this.verificationId,a);return this.a(a)};function ok(a,b,c,d){return(new rh(a)).Qa(b,c).then(function(a){return new nk(a,d)})};function pk(a,b,c,d,e,f){this.h=a;this.i=b;this.g=c;this.c=d;this.f=e;this.l=!!f;this.b=null;this.a=this.c;if(this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!");}pk.prototype.start=function(){this.a=this.c;qk(this,!0)};function rk(a,b){if(b)return a.a=a.c,a.g();b=a.a;a.a*=2;a.a>a.f&&(a.a=a.f);return b}
function qk(a,b){sk(a);a.b=sd(rk(a,b)).then(function(){return a.l?A():bg()}).then(function(){return a.h()}).then(function(){qk(a,!0)}).s(function(b){a.i(b)&&qk(a,!1)})}function sk(a){a.b&&(a.b.cancel(),a.b=null)};function tk(a){this.f=a;this.b=this.a=null;this.c=0}tk.prototype.B=function(){return{apiKey:this.f.b,refreshToken:this.a,accessToken:this.b,expirationTime:this.c}};function uk(a,b){var c=b[O],d=b.refreshToken;b=vk(b.expiresIn);a.b=c;a.c=b;a.a=d}function vk(a){return na()+1E3*parseInt(a,10)}
function wk(a,b){return Oh(a.f,b).then(function(b){a.b=b.access_token;a.c=vk(b.expires_in);a.a=b.refresh_token;return{accessToken:a.b,expirationTime:a.c,refreshToken:a.a}}).s(function(b){"auth/user-token-expired"==b.code&&(a.a=null);throw b;})}tk.prototype.getToken=function(a){a=!!a;return this.b&&!this.a?B(new N("user-token-expired")):a||!this.b||na()>this.c-3E4?this.a?wk(this,{grant_type:"refresh_token",refresh_token:this.a}):A(null):A({accessToken:this.b,expirationTime:this.c,refreshToken:this.a})};function xk(a,b){this.a=a||null;this.b=b||null;gg(this,{lastSignInTime:cg(b||null),creationTime:cg(a||null)})}function yk(a){return new xk(a.a,a.b)}xk.prototype.B=function(){return{lastLoginAt:this.b,createdAt:this.a}};function zk(a,b,c,d,e,f){gg(this,{uid:a,displayName:d||null,photoURL:e||null,email:c||null,phoneNumber:f||null,providerId:b})}function Ak(a,b){C.call(this,a);for(var c in b)this[c]=b[c]}t(Ak,C);
function Bk(a,b,c){this.A=[];this.G=a.apiKey;this.o=a.appName;this.w=a.authDomain||null;a=firebase.SDK_VERSION?Of(firebase.SDK_VERSION):null;this.c=new Ch(this.G,xi(yi),a);this.h=new tk(this.c);Ck(this,b[O]);uk(this.h,b);M(this,"refreshToken",this.h.a);Dk(this,c||{});F.call(this);this.I=!1;this.w&&Rf()&&(this.a=gk(this.w,this.G,this.o));this.N=[];this.i=null;this.l=Ek(this);this.U=r(this.Ga,this);var d=this;this.ha=null;this.ra=function(a){d.na(a.h)};this.W=null;this.R=[];this.qa=function(a){Fk(d,
a.f)};this.V=null}t(Bk,F);Bk.prototype.na=function(a){this.ha=a;Ih(this.c,a)};Bk.prototype.$=function(){return this.ha};function Gk(a,b){a.W&&E(a.W,"languageCodeChanged",a.ra);(a.W=b)&&cd(b,"languageCodeChanged",a.ra)}function Fk(a,b){a.R=b;Jh(a.c,firebase.SDK_VERSION?Of(firebase.SDK_VERSION,a.R):null)}Bk.prototype.Ka=function(){return La(this.R)};function Hk(a,b){a.V&&E(a.V,"frameworkChanged",a.qa);(a.V=b)&&cd(b,"frameworkChanged",a.qa)}Bk.prototype.Ga=function(){this.l.b&&(sk(this.l),this.l.start())};
function Ik(a){try{return firebase.app(a.o).auth()}catch(b){throw new N("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+a.o+"'!");}}function Ek(a){return new pk(function(){return a.F(!0)},function(a){return a&&"auth/network-request-failed"==a.code?!0:!1},function(){var b=a.h.c-na()-3E5;return 0<b?b:0},3E4,96E4,!1)}function Jk(a){a.m||a.l.b||(a.l.start(),E(a,"tokenChanged",a.U),cd(a,"tokenChanged",a.U))}function Kk(a){E(a,"tokenChanged",a.U);sk(a.l)}
function Ck(a,b){a.pa=b;M(a,"_lat",b)}function Lk(a,b){Ja(a.N,function(a){return a==b})}function Mk(a){for(var b=[],c=0;c<a.N.length;c++)b.push(a.N[c](a));return Ob(b).then(function(){return a})}function Nk(a){a.a&&!a.I&&(a.I=!0,a.a.subscribe(a))}
function Dk(a,b){gg(a,{uid:b.uid,displayName:b.displayName||null,photoURL:b.photoURL||null,email:b.email||null,emailVerified:b.emailVerified||!1,phoneNumber:b.phoneNumber||null,isAnonymous:b.isAnonymous||!1,metadata:new xk(b.createdAt,b.lastLoginAt),providerData:[]})}M(Bk.prototype,"providerId","firebase");function Ok(){}function Pk(a){return A().then(function(){if(a.m)throw new N("app-deleted");})}function Qk(a){return Da(a.providerData,function(a){return a.providerId})}
function Rk(a,b){b&&(Sk(a,b.providerId),a.providerData.push(b))}function Sk(a,b){Ja(a.providerData,function(a){return a.providerId==b})}function Tk(a,b,c){("uid"!=b||c)&&a.hasOwnProperty(b)&&M(a,b,c)}
function Uk(a,b){a!=b&&(gg(a,{uid:b.uid,displayName:b.displayName,photoURL:b.photoURL,email:b.email,emailVerified:b.emailVerified,phoneNumber:b.phoneNumber,isAnonymous:b.isAnonymous,providerData:[]}),b.metadata?M(a,"metadata",yk(b.metadata)):M(a,"metadata",new xk),w(b.providerData,function(b){Rk(a,b)}),a.h=b.h,M(a,"refreshToken",a.h.a))}h=Bk.prototype;h.reload=function(){var a=this;return R(this,Pk(this).then(function(){return Vk(a).then(function(){return Mk(a)}).then(Ok)}))};
function Vk(a){return a.F().then(function(b){var c=a.isAnonymous;return Wk(a,b).then(function(){c||Tk(a,"isAnonymous",!1);return b})})}h.F=function(a){var b=this;return R(this,Pk(this).then(function(){return b.h.getToken(a)}).then(function(a){if(!a)throw new N("internal-error");a.accessToken!=b.pa&&(Ck(b,a.accessToken),G(b,new Ak("tokenChanged")));Tk(b,"refreshToken",a.refreshToken);return a.accessToken}))};
h.getToken=function(a){dg["firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."]||(dg["firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."]=!0,"undefined"!==typeof console&&"function"===typeof console.warn&&console.warn("firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."));return this.F(a)};
function Xk(a,b){b[O]&&a.pa!=b[O]&&(uk(a.h,b),G(a,new Ak("tokenChanged")),Ck(a,b[O]),Tk(a,"refreshToken",a.h.a))}function Wk(a,b){return Q(a.c,ti,{idToken:b}).then(r(a.kc,a))}
h.kc=function(a){a=a.users;if(!a||!a.length)throw new N("internal-error");a=a[0];Dk(this,{uid:a.localId,displayName:a.displayName,photoURL:a.photoUrl,email:a.email,emailVerified:!!a.emailVerified,phoneNumber:a.phoneNumber,lastLoginAt:a.lastLoginAt,createdAt:a.createdAt});for(var b=Yk(a),c=0;c<b.length;c++)Rk(this,b[c]);Tk(this,"isAnonymous",!(this.email&&a.passwordHash)&&!(this.providerData&&this.providerData.length))};
function Yk(a){return(a=a.providerUserInfo)&&a.length?Da(a,function(a){return new zk(a.rawId,a.providerId,a.email,a.displayName,a.photoUrl,a.phoneNumber)}):[]}h.Za=function(a){var b=this,c=null;return R(this,a.c(this.c,this.uid).then(function(a){Xk(b,a);c=Zk(b,a,"reauthenticate");b.i=null;return b.reload()}).then(function(){return c}),!0)};h.mc=function(a){return this.Za(a).then(function(){})};
function $k(a,b){return Vk(a).then(function(){if(Ha(Qk(a),b))return Mk(a).then(function(){throw new N("provider-already-linked");})})}h.Xa=function(a){var b=this,c=null;return R(this,$k(this,a.providerId).then(function(){return b.F()}).then(function(c){return a.b(b.c,c)}).then(function(a){c=Zk(b,a,"link");return al(b,a)}).then(function(){return c}))};h.cc=function(a){return this.Xa(a).then(function(a){return a.user})};
h.dc=function(a,b){var c=this;return R(this,$k(this,"phone").then(function(){return ok(Ik(c),a,b,r(c.Xa,c))}))};h.nc=function(a,b){var c=this;return R(this,A().then(function(){return ok(Ik(c),a,b,r(c.Za,c))}),!0)};function Zk(a,b,c){var d=uh(b);b=Mg(b);return hg({user:a,credential:d,additionalUserInfo:b,operationType:c})}function al(a,b){Xk(a,b);return a.reload().then(function(){return a})}
h.kb=function(a){var b=this;return R(this,this.F().then(function(c){return b.c.kb(c,a)}).then(function(a){Xk(b,a);return b.reload()}))};h.Dc=function(a){var b=this;return R(this,this.F().then(function(c){return a.b(b.c,c)}).then(function(a){Xk(b,a);return b.reload()}))};h.lb=function(a){var b=this;return R(this,this.F().then(function(c){return b.c.lb(c,a)}).then(function(a){Xk(b,a);return b.reload()}))};
h.mb=function(a){if(void 0===a.displayName&&void 0===a.photoURL)return Pk(this);var b=this;return R(this,this.F().then(function(c){return b.c.mb(c,{displayName:a.displayName,photoUrl:a.photoURL})}).then(function(a){Xk(b,a);Tk(b,"displayName",a.displayName||null);Tk(b,"photoURL",a.photoUrl||null);w(b.providerData,function(a){"password"===a.providerId&&(M(a,"displayName",b.displayName),M(a,"photoURL",b.photoURL))});return Mk(b)}).then(Ok))};
h.Cc=function(a){var b=this;return R(this,Vk(this).then(function(c){return Ha(Qk(b),a)?fi(b.c,c,[a]).then(function(a){var c={};w(a.providerUserInfo||[],function(a){c[a.providerId]=!0});w(Qk(b),function(a){c[a]||Sk(b,a)});c[rh.PROVIDER_ID]||M(b,"phoneNumber",null);return Mk(b)}):Mk(b).then(function(){throw new N("no-such-provider");})}))};
h.delete=function(){var a=this;return R(this,this.F().then(function(b){return Q(a.c,si,{idToken:b})}).then(function(){G(a,new Ak("userDeleted"))})).then(function(){for(var b=0;b<a.A.length;b++)a.A[b].cancel("app-deleted");Gk(a,null);Hk(a,null);a.A=[];a.m=!0;Kk(a);M(a,"refreshToken",null);a.a&&a.a.unsubscribe(a)})};
h.ob=function(a,b){return"linkViaPopup"==a&&(this.g||null)==b&&this.f||"reauthViaPopup"==a&&(this.g||null)==b&&this.f||"linkViaRedirect"==a&&(this.Z||null)==b||"reauthViaRedirect"==a&&(this.Z||null)==b?!0:!1};h.fa=function(a,b,c,d){"linkViaPopup"!=a&&"reauthViaPopup"!=a||d!=(this.g||null)||(c&&this.v?this.v(c):b&&!c&&this.f&&this.f(b),this.b&&(this.b.cancel(),this.b=null),delete this.f,delete this.v)};
h.va=function(a,b){return"linkViaPopup"==a&&b==(this.g||null)?r(this.tb,this):"reauthViaPopup"==a&&b==(this.g||null)?r(this.ub,this):"linkViaRedirect"==a&&(this.Z||null)==b?r(this.tb,this):"reauthViaRedirect"==a&&(this.Z||null)==b?r(this.ub,this):null};h.ec=function(a){var b=this;return bl(this,"linkViaPopup",a,function(){return $k(b,a.providerId).then(function(){return Mk(b)})},!1)};h.oc=function(a){return bl(this,"reauthViaPopup",a,function(){return A()},!0)};
function bl(a,b,c,d,e){if(!Rf())return B(new N("operation-not-supported-in-this-environment"));if(a.i&&!e)return B(a.i);var f=Lg(c.providerId),g=Qf(a.uid+":::"),l=null;(!Tf()||Lf())&&a.w&&c.isOAuthProvider&&(l=Ri(a.w,a.G,a.o,b,c,null,g,firebase.SDK_VERSION||null));var n=Df(l,f&&f.za,f&&f.ya);d=d().then(function(){cl(a);if(!e)return a.F().then(function(){})}).then(function(){return ek(a.a,n,b,c,g,!!l)}).then(function(){return new z(function(c,d){a.fa(b,null,new N("cancelled-popup-request"),a.g||null);
a.f=c;a.v=d;a.g=g;a.b=a.a.Ca(a,b,n,g)})}).then(function(a){n&&Cf(n);return a?hg(a):null}).s(function(a){n&&Cf(n);throw a;});return R(a,d,e)}h.fc=function(a){var b=this;return dl(this,"linkViaRedirect",a,function(){return $k(b,a.providerId)},!1)};h.pc=function(a){return dl(this,"reauthViaRedirect",a,function(){return A()},!0)};
function dl(a,b,c,d,e){if(!Rf())return B(new N("operation-not-supported-in-this-environment"));if(a.i&&!e)return B(a.i);var f=null,g=Qf(a.uid+":::");d=d().then(function(){cl(a);if(!e)return a.F().then(function(){})}).then(function(){a.Z=g;return Mk(a)}).then(function(b){a.ca&&(b=a.ca,b=b.b.set(el,a.B(),b.a));return b}).then(function(){return a.a.Aa(b,c,g)}).s(function(b){f=b;if(a.ca)return fl(a.ca);throw f;}).then(function(){if(f)throw f;});return R(a,d,e)}
function cl(a){if(!a.a||!a.I){if(a.a&&!a.I)throw new N("internal-error");throw new N("auth-domain-config-required");}}h.tb=function(a,b){var c=this;this.b&&(this.b.cancel(),this.b=null);var d=null,e=this.F().then(function(d){return Zg(c.c,{requestUri:a,sessionId:b,idToken:d})}).then(function(a){d=Zk(c,a,"link");return al(c,a)}).then(function(){return d});return R(this,e)};
h.ub=function(a,b){var c=this;this.b&&(this.b.cancel(),this.b=null);var d=null,e=A().then(function(){return Vg($g(c.c,{requestUri:a,sessionId:b}),c.uid)}).then(function(a){d=Zk(c,a,"reauthenticate");Xk(c,a);c.i=null;return c.reload()}).then(function(){return d});return R(this,e,!0)};h.bb=function(a){var b=this,c=null;return R(this,this.F().then(function(b){c=b;return"undefined"===typeof a||Sa(a)?{}:Fg(new wg(a))}).then(function(a){return b.c.bb(c,a)}).then(function(a){if(b.email!=a)return b.reload()}).then(function(){}))};
function R(a,b,c){var d=gl(a,b,c);a.A.push(d);Qb(d,function(){Ia(a.A,d)});return d}function gl(a,b,c){return a.i&&!c?(b.cancel(),B(a.i)):b.s(function(b){!b||"auth/user-disabled"!=b.code&&"auth/user-token-expired"!=b.code||(a.i||G(a,new Ak("userInvalidated")),a.i=b);throw b;})}h.toJSON=function(){return this.B()};
h.B=function(){var a={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,providerData:[],apiKey:this.G,appName:this.o,authDomain:this.w,stsTokenManager:this.h.B(),redirectEventId:this.Z||null};this.metadata&&Wa(a,this.metadata.B());w(this.providerData,function(b){a.providerData.push(ig(b))});return a};
function hl(a){if(!a.apiKey)return null;var b={apiKey:a.apiKey,authDomain:a.authDomain,appName:a.appName},c={};if(a.stsTokenManager&&a.stsTokenManager.accessToken&&a.stsTokenManager.expirationTime)c[O]=a.stsTokenManager.accessToken,c.refreshToken=a.stsTokenManager.refreshToken||null,c.expiresIn=(a.stsTokenManager.expirationTime-na())/1E3;else return null;var d=new Bk(b,c,a);a.providerData&&w(a.providerData,function(a){a&&Rk(d,hg(a))});a.redirectEventId&&(d.Z=a.redirectEventId);return d}
function il(a,b,c,d){var e=new Bk(a,b);c&&(e.ca=c);d&&Fk(e,d);return e.reload().then(function(){return e})};function jl(a){this.a=a;this.b=rj()}var el={name:"redirectUser",C:"session"};function fl(a){return uj(a.b,el,a.a)}function kl(a,b){return a.b.get(el,a.a).then(function(a){a&&b&&(a.authDomain=b);return hl(a||{})})};function ll(a,b){this.a=a;this.b=b||rj();this.c=null;this.f=ml(this);vj(this.b,yj("local"),this.a,r(this.g,this))}ll.prototype.g=function(){var a=this,b=yj("local");nl(this,function(){return A().then(function(){return a.c&&"local"!=a.c.C?a.b.get(b,a.a):null}).then(function(c){if(c)return ol(a,"local").then(function(){a.c=b})})})};function ol(a,b){var c=[],d;for(d in nj)nj[d]!==b&&c.push(uj(a.b,yj(nj[d]),a.a));c.push(uj(a.b,pl,a.a));return Nb(c)}
function ml(a){var b=yj("local"),c=yj("session"),d=yj("none");return a.b.get(c,a.a).then(function(e){return e?c:a.b.get(d,a.a).then(function(c){return c?d:a.b.get(b,a.a).then(function(c){return c?b:a.b.get(pl,a.a).then(function(a){return a?yj(a):b})})})}).then(function(b){a.c=b;return ol(a,b.C)}).s(function(){a.c||(a.c=b)})}var pl={name:"persistence",C:"session"};function yj(a){return{name:"authUser",C:a}}
ll.prototype.eb=function(a){var b=null,c=this;oj(a);return nl(this,function(){return a!=c.c.C?c.b.get(c.c,c.a).then(function(d){b=d;return ol(c,a)}).then(function(){c.c=yj(a);if(b)return c.b.set(c.c,b,c.a)}):A()})};function ql(a){return nl(a,function(){return a.b.set(pl,a.c.C,a.a)})}function rl(a,b){return nl(a,function(){return a.b.set(a.c,b.B(),a.a)})}function sl(a){return nl(a,function(){return uj(a.b,a.c,a.a)})}
function tl(a,b){return nl(a,function(){return a.b.get(a.c,a.a).then(function(a){a&&b&&(a.authDomain=b);return hl(a||{})})})}function nl(a,b){a.f=a.f.then(b,b);return a.f};function ul(a){this.l=!1;M(this,"app",a);if(S(this).options&&S(this).options.apiKey)a=firebase.SDK_VERSION?Of(firebase.SDK_VERSION):null,this.c=new Ch(S(this).options&&S(this).options.apiKey,xi(yi),a);else throw new N("invalid-api-key");this.N=[];this.m=[];this.I=[];this.Kb=firebase.INTERNAL.createSubscribe(r(this.ac,this));this.R=void 0;this.Lb=firebase.INTERNAL.createSubscribe(r(this.bc,this));vl(this,null);this.h=new ll(S(this).options.apiKey+":"+S(this).name);this.G=new jl(S(this).options.apiKey+
":"+S(this).name);this.U=T(this,wl(this));this.i=T(this,xl(this));this.W=!1;this.ha=r(this.yc,this);this.Ga=r(this.ka,this);this.pa=r(this.Tb,this);this.qa=r(this.Zb,this);this.ra=r(this.$b,this);yl(this);this.INTERNAL={};this.INTERNAL["delete"]=r(this.delete,this);this.INTERNAL.logFramework=r(this.gc,this);this.o=0;F.call(this);zl(this);this.A=[]}t(ul,F);function Al(a){C.call(this,"languageCodeChanged");this.h=a}t(Al,C);function Bl(a){C.call(this,"frameworkChanged");this.f=a}t(Bl,C);h=ul.prototype;
h.eb=function(a){a=this.h.eb(a);return T(this,a)};h.na=function(a){this.V===a||this.l||(this.V=a,Ih(this.c,this.V),G(this,new Al(this.$())))};h.$=function(){return this.V};h.Ec=function(){var a=k.navigator;this.na(a?a.languages&&a.languages[0]||a.language||a.userLanguage||null:null)};h.gc=function(a){this.A.push(a);Jh(this.c,firebase.SDK_VERSION?Of(firebase.SDK_VERSION,this.A):null);G(this,new Bl(this.A))};h.Ka=function(){return La(this.A)};
function zl(a){Object.defineProperty(a,"lc",{get:function(){return this.$()},set:function(a){this.na(a)},enumerable:!1});a.V=null}h.toJSON=function(){return{apiKey:S(this).options.apiKey,authDomain:S(this).options.authDomain,appName:S(this).name,currentUser:U(this)&&U(this).B()}};function Cl(a){return a.Jb||B(new N("auth-domain-config-required"))}
function yl(a){var b=S(a).options.authDomain,c=S(a).options.apiKey;b&&Rf()&&(a.Jb=a.U.then(function(){if(!a.l){a.a=gk(b,c,S(a).name);a.a.subscribe(a);U(a)&&Nk(U(a));if(a.w){Nk(a.w);var d=a.w;d.na(a.$());Gk(d,a);d=a.w;Fk(d,a.A);Hk(d,a);a.w=null}return a.a}}))}h.ob=function(a,b){switch(a){case "unknown":case "signInViaRedirect":return!0;case "signInViaPopup":return this.g==b&&!!this.f;default:return!1}};
h.fa=function(a,b,c,d){"signInViaPopup"==a&&this.g==d&&(c&&this.v?this.v(c):b&&!c&&this.f&&this.f(b),this.b&&(this.b.cancel(),this.b=null),delete this.f,delete this.v)};h.va=function(a,b){return"signInViaRedirect"==a||"signInViaPopup"==a&&this.g==b&&this.f?r(this.Sb,this):null};
h.Sb=function(a,b){var c=this;a={requestUri:a,sessionId:b};this.b&&(this.b.cancel(),this.b=null);var d=null,e=null,f=Xg(c.c,a).then(function(a){d=uh(a);e=Mg(a);return a});a=c.U.then(function(){return f}).then(function(a){return Dl(c,a)}).then(function(){return hg({user:U(c),credential:d,additionalUserInfo:e,operationType:"signIn"})});return T(this,a)};
h.wc=function(a){if(!Rf())return B(new N("operation-not-supported-in-this-environment"));var b=this,c=Lg(a.providerId),d=Qf(),e=null;(!Tf()||Lf())&&S(this).options.authDomain&&a.isOAuthProvider&&(e=Ri(S(this).options.authDomain,S(this).options.apiKey,S(this).name,"signInViaPopup",a,null,d,firebase.SDK_VERSION||null));var f=Df(e,c&&c.za,c&&c.ya);c=Cl(this).then(function(b){return ek(b,f,"signInViaPopup",a,d,!!e)}).then(function(){return new z(function(a,c){b.fa("signInViaPopup",null,new N("cancelled-popup-request"),
b.g);b.f=a;b.v=c;b.g=d;b.b=b.a.Ca(b,"signInViaPopup",f,d)})}).then(function(a){f&&Cf(f);return a?hg(a):null}).s(function(a){f&&Cf(f);throw a;});return T(this,c)};h.xc=function(a){if(!Rf())return B(new N("operation-not-supported-in-this-environment"));var b=this,c=Cl(this).then(function(){return ql(b.h)}).then(function(){return b.a.Aa("signInViaRedirect",a)});return T(this,c)};
h.aa=function(){if(!Rf())return B(new N("operation-not-supported-in-this-environment"));var a=this,b=Cl(this).then(function(){return a.a.aa()}).then(function(a){return a?hg(a):null});return T(this,b)};function Dl(a,b){var c={};c.apiKey=S(a).options.apiKey;c.authDomain=S(a).options.authDomain;c.appName=S(a).name;return a.U.then(function(){return il(c,b,a.G,a.Ka())}).then(function(b){if(U(a)&&b.uid==U(a).uid)return Uk(U(a),b),a.ka(b);vl(a,b);Nk(b);return a.ka(b)}).then(function(){El(a)})}
function vl(a,b){U(a)&&(Lk(U(a),a.Ga),E(U(a),"tokenChanged",a.pa),E(U(a),"userDeleted",a.qa),E(U(a),"userInvalidated",a.ra),Kk(U(a)));b&&(b.N.push(a.Ga),cd(b,"tokenChanged",a.pa),cd(b,"userDeleted",a.qa),cd(b,"userInvalidated",a.ra),0<a.o&&Jk(b));M(a,"currentUser",b);b&&(b.na(a.$()),Gk(b,a),Fk(b,a.A),Hk(b,a))}h.hb=function(){var a=this,b=this.i.then(function(){if(!U(a))return A();vl(a,null);return sl(a.h).then(function(){El(a)})});return T(this,b)};
function Fl(a){var b=kl(a.G,S(a).options.authDomain).then(function(b){if(a.w=b)b.ca=a.G;return fl(a.G)});return T(a,b)}function wl(a){var b=S(a).options.authDomain,c=Fl(a).then(function(){return tl(a.h,b)}).then(function(b){return b?(b.ca=a.G,a.w&&(a.w.Z||null)==(b.Z||null)?b:b.reload().then(function(){return rl(a.h,b).then(function(){return b})}).s(function(c){return"auth/network-request-failed"==c.code?b:sl(a.h)})):null}).then(function(b){vl(a,b||null)});return T(a,c)}
function xl(a){return a.U.then(function(){return a.aa()}).s(function(){}).then(function(){if(!a.l)return a.ha()}).s(function(){}).then(function(){if(!a.l){a.W=!0;var b=a.h;vj(b.b,yj("local"),b.a,a.ha)}})}
h.yc=function(){var a=this;return tl(this.h,S(this).options.authDomain).then(function(b){if(!a.l){var c;if(c=U(a)&&b){c=U(a).uid;var d=b.uid;c=void 0===c||null===c||""===c||void 0===d||null===d||""===d?!1:c==d}if(c)return Uk(U(a),b),U(a).F();if(U(a)||b)vl(a,b),b&&(Nk(b),b.ca=a.G),a.a&&a.a.subscribe(a),El(a)}})};h.ka=function(a){return rl(this.h,a)};h.Tb=function(){El(this);this.ka(U(this))};h.Zb=function(){this.hb()};h.$b=function(){this.hb()};
function Gl(a,b){var c=null,d=null;return T(a,b.then(function(b){c=uh(b);d=Mg(b);return Dl(a,b)}).then(function(){return hg({user:U(a),credential:c,additionalUserInfo:d,operationType:"signIn"})}))}h.ac=function(a){var b=this;this.addAuthTokenListener(function(){a.next(U(b))})};h.bc=function(a){var b=this;Hl(this,function(){a.next(U(b))})};h.ic=function(a,b,c){var d=this;this.W&&firebase.Promise.resolve().then(function(){p(a)?a(U(d)):p(a.next)&&a.next(U(d))});return this.Kb(a,b,c)};
h.hc=function(a,b,c){var d=this;this.W&&firebase.Promise.resolve().then(function(){d.R=d.getUid();p(a)?a(U(d)):p(a.next)&&a.next(U(d))});return this.Lb(a,b,c)};h.Vb=function(a){var b=this,c=this.i.then(function(){return U(b)?U(b).F(a).then(function(a){return{accessToken:a}}):null});return T(this,c)};h.tc=function(a){return this.Eb(a).then(function(a){return a.user})};
h.Eb=function(a){var b=this;return this.i.then(function(){return Gl(b,Q(b.c,vi,{token:a}))}).then(function(a){var c=a.user;Tk(c,"isAnonymous",!1);b.ka(c);return a})};h.Fb=function(a,b){var c=this;return this.i.then(function(){return Gl(c,Q(c.c,kh,{email:a,password:b}))})};h.uc=function(a,b){return this.Fb(a,b).then(function(a){return a.user})};h.Ob=function(a,b){return this.qb(a,b).then(function(a){return a.user})};
h.qb=function(a,b){var c=this;return this.i.then(function(){return Gl(c,Q(c.c,ri,{email:a,password:b}))})};h.sc=function(a){return this.fb(a).then(function(a){return a.user})};h.fb=function(a){var b=this;return this.i.then(function(){return Gl(b,a.wa(b.c))})};h.gb=function(){return this.Gb().then(function(a){return a.user})};
h.Gb=function(){var a=this;return this.i.then(function(){var b=U(a);if(b&&b.isAnonymous){var c=hg({providerId:null,isNewUser:!1});return hg({user:b,credential:null,additionalUserInfo:c,operationType:"signIn"})}return Gl(a,a.c.gb()).then(function(b){var c=b.user;Tk(c,"isAnonymous",!0);a.ka(c);return b})})};function S(a){return a.app}function U(a){return a.currentUser}h.getUid=function(){return U(this)&&U(this).uid||null};function Il(a){return U(a)&&U(a)._lat||null}
function El(a){if(a.W){for(var b=0;b<a.m.length;b++)if(a.m[b])a.m[b](Il(a));if(a.R!==a.getUid()&&a.I.length)for(a.R=a.getUid(),b=0;b<a.I.length;b++)if(a.I[b])a.I[b](Il(a))}}h.Mb=function(a){this.addAuthTokenListener(a);this.o++;0<this.o&&U(this)&&Jk(U(this))};h.qc=function(a){var b=this;w(this.m,function(c){c==a&&b.o--});0>this.o&&(this.o=0);0==this.o&&U(this)&&Kk(U(this));this.removeAuthTokenListener(a)};
h.addAuthTokenListener=function(a){var b=this;this.m.push(a);T(this,this.i.then(function(){b.l||Ha(b.m,a)&&a(Il(b))}))};h.removeAuthTokenListener=function(a){Ja(this.m,function(b){return b==a})};function Hl(a,b){a.I.push(b);T(a,a.i.then(function(){!a.l&&Ha(a.I,b)&&a.R!==a.getUid()&&(a.R=a.getUid(),b(Il(a)))}))}h.delete=function(){this.l=!0;for(var a=0;a<this.N.length;a++)this.N[a].cancel("app-deleted");this.N=[];this.h&&(a=this.h,xj(a.b,a.a,this.ha));this.a&&this.a.unsubscribe(this);return firebase.Promise.resolve()};
function T(a,b){a.N.push(b);Qb(b,function(){Ia(a.N,b)});return b}h.Rb=function(a){return T(this,Th(this.c,a))};h.Fc=function(a){return this.Ia(a).then(function(a){return a.data.email})};h.Ta=function(a,b){return T(this,this.c.Ta(a,b).then(function(){}))};h.Ia=function(a){return T(this,this.c.Ia(a).then(function(a){return new lg(a)}))};h.Sa=function(a){return T(this,this.c.Sa(a).then(function(){}))};
h.cb=function(a,b){var c=this;return T(this,A().then(function(){return"undefined"===typeof b||Sa(b)?{}:Fg(new wg(b))}).then(function(b){return c.c.cb(a,b)}).then(function(){}))};h.vc=function(a,b){return T(this,ok(this,a,b,r(this.fb,this)))};function Jl(a,b,c,d){a:{c=Array.prototype.slice.call(c);var e=0;for(var f=!1,g=0;g<b.length;g++)if(b[g].optional)f=!0;else{if(f)throw new N("internal-error","Argument validator encountered a required argument after an optional argument.");e++}f=b.length;if(c.length<e||f<c.length)d="Expected "+(e==f?1==e?"1 argument":e+" arguments":e+"-"+f+" arguments")+" but got "+c.length+".";else{for(e=0;e<c.length;e++)if(f=b[e].optional&&void 0===c[e],!b[e].M(c[e])&&!f){b=b[e];if(0>e||e>=Kl.length)throw new N("internal-error",
"Argument validator received an unsupported number of arguments.");c=Kl[e];d=(d?"":c+" argument ")+(b.name?'"'+b.name+'" ':"")+"must be "+b.K+".";break a}d=null}}if(d)throw new N("argument-error",a+" failed: "+d);}var Kl="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function V(a,b){return{name:a||"",K:"a valid string",optional:!!b,M:m}}function Ll(){return{name:"opt_forceRefresh",K:"a boolean",optional:!0,M:ba}}
function W(a,b){return{name:a||"",K:"a valid object",optional:!!b,M:q}}function Ml(a,b){return{name:a||"",K:"a function",optional:!!b,M:p}}function Nl(a,b){return{name:a||"",K:"null",optional:!!b,M:ea}}function Ol(){return{name:"",K:"an HTML element",optional:!1,M:function(a){return!!(a&&a instanceof Element)}}}function Pl(){return{name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(a){return!!(a&&a instanceof ul)}}}
function Ql(){return{name:"app",K:"an instance of Firebase App",optional:!0,M:function(a){return!!(a&&a instanceof firebase.app.App)}}}function Rl(a){return{name:a?a+"Credential":"credential",K:a?"a valid "+a+" credential":"a valid credential",optional:!1,M:function(b){if(!b)return!1;var c=!a||b.providerId===a;return!(!b.wa||!c)}}}
function Sl(){return{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(a){return!!(a&&a.providerId&&a.hasOwnProperty&&a.hasOwnProperty("isOAuthProvider"))}}}function Tl(){return{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(a){return!!(a&&m(a.type)&&p(a.verify))}}}function X(a,b,c,d){return{name:c||"",K:a.K+" or "+b.K,optional:!!d,M:function(c){return a.M(c)||b.M(c)}}};function Ul(a,b,c,d,e,f){M(this,"type","recaptcha");this.b=this.c=null;this.m=!1;this.l=b;this.a=c||{theme:"light",type:"image"};this.g=[];if(this.a[Vl])throw new N("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");this.h="invisible"===this.a[Wl];if(!wc(b)||!this.h&&wc(b).hasChildNodes())throw new N("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.u=new Ch(a,f||null,e||null);
this.o=d||function(){return null};var g=this;this.i=[];var l=this.a[Xl];this.a[Xl]=function(a){Yl(g,a);if("function"===typeof l)l(a);else if("string"===typeof l){var b=L(l,k);"function"===typeof b&&b(a)}};var n=this.a[Zl];this.a[Zl]=function(){Yl(g,null);if("function"===typeof n)n();else if("string"===typeof n){var a=L(n,k);"function"===typeof a&&a()}}}var Xl="callback",Zl="expired-callback",Vl="sitekey",Wl="size";function Yl(a,b){for(var c=0;c<a.i.length;c++)try{a.i[c](b)}catch(d){}}
function $l(a,b){Ja(a.i,function(a){return a==b})}function am(a,b){a.g.push(b);Qb(b,function(){Ia(a.g,b)});return b}h=Ul.prototype;
h.xa=function(){var a=this;return this.c?this.c:this.c=am(this,A().then(function(){if(Sf())return Hf();throw new N("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");}).then(function(){return bm(cm(),a.o())}).then(function(){return Q(a.u,ui,{})}).then(function(b){a.a[Vl]=b.recaptchaSiteKey}).s(function(b){a.c=null;throw b;}))};
h.render=function(){dm(this);var a=this;return am(this,this.xa().then(function(){if(null===a.b){var b=a.l;if(!a.h){var c=wc(b);b=zc("DIV");c.appendChild(b)}a.b=grecaptcha.render(b,a.a)}return a.b}))};h.verify=function(){dm(this);var a=this;return am(this,this.render().then(function(b){return new z(function(c){var d=grecaptcha.getResponse(b);if(d)c(d);else{var e=function(b){b&&($l(a,e),c(b))};a.i.push(e);a.h&&grecaptcha.execute(a.b)}})}))};h.reset=function(){dm(this);null!==this.b&&grecaptcha.reset(this.b)};
function dm(a){if(a.m)throw new N("internal-error","RecaptchaVerifier instance has been destroyed.");}h.clear=function(){dm(this);this.m=!0;cm().b--;for(var a=0;a<this.g.length;a++)this.g[a].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.h){a=wc(this.l);for(var b;b=a.firstChild;)a.removeChild(b)}};var em=dc("https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}");
function fm(){this.b=k.grecaptcha?Infinity:0;this.c=null;this.a="__rcb"+Math.floor(1E6*Math.random()).toString()}
function bm(a,b){return new z(function(c,d){if(Zf())if(!k.grecaptcha||b!==a.c&&!a.b){k[a.a]=function(){if(k.grecaptcha){a.c=b;var e=k.grecaptcha.render;k.grecaptcha.render=function(b,c){b=e(b,c);a.b++;return b};c()}else d(new N("internal-error"));delete k[a.a]};var e=hc(em,{onload:a.a,hl:b||""});A(kf(e)).s(function(){d(new N("internal-error","Unable to load external reCAPTCHA dependencies!"))})}else c();else d(new N("network-request-failed"))})}var gm=null;
function cm(){gm||(gm=new fm);return gm}function hm(a,b,c){try{this.f=c||firebase.app()}catch(f){throw new N("argument-error","No firebase.app.App instance is currently initialized.");}if(this.f.options&&this.f.options.apiKey)c=this.f.options.apiKey;else throw new N("invalid-api-key");var d=this,e=null;try{e=this.f.auth().Ka()}catch(f){}e=firebase.SDK_VERSION?Of(firebase.SDK_VERSION,e):null;Ul.call(this,c,a,b,function(){try{var a=d.f.auth().$()}catch(g){a=null}return a},e,xi(yi))}t(hm,Ul);function Y(a,b){for(var c in b){var d=b[c].name;a[d]=im(d,a[c],b[c].j)}}function Z(a,b,c,d){a[b]=im(b,c,d)}function im(a,b,c){function d(){var a=Array.prototype.slice.call(arguments);Jl(e,c,a);return b.apply(this,a)}if(!c)return b;var e=jm(a),f;for(f in b)d[f]=b[f];for(f in b.prototype)d.prototype[f]=b.prototype[f];return d}function jm(a){a=a.split(".");return a[a.length-1]};Y(ul.prototype,{Sa:{name:"applyActionCode",j:[V("code")]},Ia:{name:"checkActionCode",j:[V("code")]},Ta:{name:"confirmPasswordReset",j:[V("code"),V("newPassword")]},Ob:{name:"createUserWithEmailAndPassword",j:[V("email"),V("password")]},qb:{name:"createUserAndRetrieveDataWithEmailAndPassword",j:[V("email"),V("password")]},Rb:{name:"fetchProvidersForEmail",j:[V("email")]},aa:{name:"getRedirectResult",j:[]},hc:{name:"onAuthStateChanged",j:[X(W(),Ml(),"nextOrObserver"),Ml("opt_error",!0),Ml("opt_completed",
!0)]},ic:{name:"onIdTokenChanged",j:[X(W(),Ml(),"nextOrObserver"),Ml("opt_error",!0),Ml("opt_completed",!0)]},cb:{name:"sendPasswordResetEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),Nl(null,!0),"opt_actionCodeSettings",!0)]},eb:{name:"setPersistence",j:[V("persistence")]},fb:{name:"signInAndRetrieveDataWithCredential",j:[Rl()]},gb:{name:"signInAnonymously",j:[]},Gb:{name:"signInAnonymouslyAndRetrieveData",j:[]},sc:{name:"signInWithCredential",j:[Rl()]},tc:{name:"signInWithCustomToken",j:[V("token")]},
Eb:{name:"signInAndRetrieveDataWithCustomToken",j:[V("token")]},uc:{name:"signInWithEmailAndPassword",j:[V("email"),V("password")]},Fb:{name:"signInAndRetrieveDataWithEmailAndPassword",j:[V("email"),V("password")]},vc:{name:"signInWithPhoneNumber",j:[V("phoneNumber"),Tl()]},wc:{name:"signInWithPopup",j:[Sl()]},xc:{name:"signInWithRedirect",j:[Sl()]},hb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[V(null,!0)]},Ec:{name:"useDeviceLanguage",j:[]},Fc:{name:"verifyPasswordResetCode",j:[V("code")]}});
(function(a,b){for(var c in b){var d=b[c].name;if(d!==c){var e=b[c].Nb;Object.defineProperty(a,d,{get:function(){return this[c]},set:function(a){Jl(d,[e],[a],!0);this[c]=a},enumerable:!0})}}})(ul.prototype,{lc:{name:"languageCode",Nb:X(V(),Nl(),"languageCode")}});ul.Persistence=nj;ul.Persistence.LOCAL="local";ul.Persistence.SESSION="session";ul.Persistence.NONE="none";
Y(Bk.prototype,{"delete":{name:"delete",j:[]},F:{name:"getIdToken",j:[Ll()]},getToken:{name:"getToken",j:[Ll()]},Xa:{name:"linkAndRetrieveDataWithCredential",j:[Rl()]},cc:{name:"linkWithCredential",j:[Rl()]},dc:{name:"linkWithPhoneNumber",j:[V("phoneNumber"),Tl()]},ec:{name:"linkWithPopup",j:[Sl()]},fc:{name:"linkWithRedirect",j:[Sl()]},Za:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Rl()]},mc:{name:"reauthenticateWithCredential",j:[Rl()]},nc:{name:"reauthenticateWithPhoneNumber",j:[V("phoneNumber"),
Tl()]},oc:{name:"reauthenticateWithPopup",j:[Sl()]},pc:{name:"reauthenticateWithRedirect",j:[Sl()]},reload:{name:"reload",j:[]},bb:{name:"sendEmailVerification",j:[X(W("opt_actionCodeSettings",!0),Nl(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[V(null,!0)]},Cc:{name:"unlink",j:[V("provider")]},kb:{name:"updateEmail",j:[V("email")]},lb:{name:"updatePassword",j:[V("password")]},Dc:{name:"updatePhoneNumber",j:[Rl("phone")]},mb:{name:"updateProfile",j:[W("profile")]}});
Y(z.prototype,{s:{name:"catch"},then:{name:"then"}});Y(nk.prototype,{confirm:{name:"confirm",j:[V("verificationCode")]}});Z(mh,"credential",function(a,b){return new jh(a,b)},[V("email"),V("password")]);Y(bh.prototype,{sa:{name:"addScope",j:[V("scope")]},Ba:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(bh,"credential",ch,[X(V(),W(),"token")]);Y(dh.prototype,{sa:{name:"addScope",j:[V("scope")]},Ba:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});
Z(dh,"credential",eh,[X(V(),W(),"token")]);Y(fh.prototype,{sa:{name:"addScope",j:[V("scope")]},Ba:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(fh,"credential",gh,[X(V(),X(W(),Nl()),"idToken"),X(V(),Nl(),"accessToken",!0)]);Y(hh.prototype,{Ba:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(hh,"credential",ih,[X(V(),W(),"token"),V("secret",!0)]);
Y(P.prototype,{sa:{name:"addScope",j:[V("scope")]},credential:{name:"credential",j:[X(V(),Nl(),"idToken",!0),X(V(),Nl(),"accessToken",!0)]},Ba:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(rh,"credential",th,[V("verificationId"),V("verificationCode")]);Y(rh.prototype,{Qa:{name:"verifyPhoneNumber",j:[V("phoneNumber"),Tl()]}});Y(N.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(zh.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});
Y(yh.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(hm.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}});
(function(){if("undefined"!==typeof firebase&&firebase.INTERNAL&&firebase.INTERNAL.registerService){var a={Auth:ul,Error:N};Z(a,"EmailAuthProvider",mh,[]);Z(a,"FacebookAuthProvider",bh,[]);Z(a,"GithubAuthProvider",dh,[]);Z(a,"GoogleAuthProvider",fh,[]);Z(a,"TwitterAuthProvider",hh,[]);Z(a,"OAuthProvider",P,[V("providerId")]);Z(a,"PhoneAuthProvider",rh,[Pl()]);Z(a,"RecaptchaVerifier",hm,[X(V(),Ol(),"recaptchaContainer"),W("recaptchaParameters",!0),Ql()]);firebase.INTERNAL.registerService("auth",function(a,
c){a=new ul(a);c({INTERNAL:{getUid:r(a.getUid,a),getToken:r(a.Vb,a),addAuthTokenListener:r(a.Mb,a),removeAuthTokenListener:r(a.qc,a)}});return a},a,function(a,c){if("create"===a)try{c.auth()}catch(d){}});firebase.INTERNAL.extendNamespace({User:Bk})}else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");})();
}).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module.exports = __webpack_require__(112);


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var app_1 = __webpack_require__(8);
var Database_1 = __webpack_require__(47);
exports.Database = Database_1.Database;
var Query_1 = __webpack_require__(51);
exports.Query = Query_1.Query;
var Reference_1 = __webpack_require__(30);
exports.Reference = Reference_1.Reference;
var util_1 = __webpack_require__(1);
exports.enableLogging = util_1.enableLogging;
var RepoManager_1 = __webpack_require__(35);
var INTERNAL = __webpack_require__(144);
var TEST_ACCESS = __webpack_require__(145);
var util_2 = __webpack_require__(0);
var ServerValue = Database_1.Database.ServerValue;
exports.ServerValue = ServerValue;
function registerDatabase(instance) {
    // Register the Database Service with the 'firebase' namespace.
    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager_1.RepoManager.getInstance().databaseFromApp(app, url); }, 
    // firebase.database namespace properties
    {
        Reference: Reference_1.Reference,
        Query: Query_1.Query,
        Database: Database_1.Database,
        enableLogging: util_1.enableLogging,
        INTERNAL: INTERNAL,
        ServerValue: ServerValue,
        TEST_ACCESS: TEST_ACCESS
    }, null, true);
    if (util_2.isNodeSdk()) {
        module.exports = namespace;
    }
}
exports.registerDatabase = registerDatabase;
registerDatabase(app_1.default);
var DataSnapshot_1 = __webpack_require__(31);
exports.DataSnapshot = DataSnapshot_1.DataSnapshot;
var onDisconnect_1 = __webpack_require__(50);
exports.OnDisconnect = onDisconnect_1.OnDisconnect;

//# sourceMappingURL=index.js.map


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
/**
 * Wraps a DOM Storage object and:
 * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
 * - prefixes names with "firebase:" to avoid collisions with app data.
 *
 * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
 * and one for localStorage.
 *
 * @constructor
 */
var DOMStorageWrapper = /** @class */ (function () {
    /**
     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)
     */
    function DOMStorageWrapper(domStorage_) {
        this.domStorage_ = domStorage_;
        // Use a prefix to avoid collisions with other stuff saved by the app.
        this.prefix_ = 'firebase:';
    }
    /**
     * @param {string} key The key to save the value under
     * @param {?Object} value The value being stored, or null to remove the key.
     */
    DOMStorageWrapper.prototype.set = function (key, value) {
        if (value == null) {
            this.domStorage_.removeItem(this.prefixedName_(key));
        }
        else {
            this.domStorage_.setItem(this.prefixedName_(key), util_1.stringify(value));
        }
    };
    /**
     * @param {string} key
     * @return {*} The value that was stored under this key, or null
     */
    DOMStorageWrapper.prototype.get = function (key) {
        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
        if (storedVal == null) {
            return null;
        }
        else {
            return util_1.jsonEval(storedVal);
        }
    };
    /**
     * @param {string} key
     */
    DOMStorageWrapper.prototype.remove = function (key) {
        this.domStorage_.removeItem(this.prefixedName_(key));
    };
    /**
     * @param {string} name
     * @return {string}
     */
    DOMStorageWrapper.prototype.prefixedName_ = function (name) {
        return this.prefix_ + name;
    };
    DOMStorageWrapper.prototype.toString = function () {
        return this.domStorage_.toString();
    };
    return DOMStorageWrapper;
}());
exports.DOMStorageWrapper = DOMStorageWrapper;

//# sourceMappingURL=DOMStorageWrapper.js.map


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
/**
 * An in-memory storage implementation that matches the API of DOMStorageWrapper
 * (TODO: create interface for both to implement).
 *
 * @constructor
 */
var MemoryStorage = /** @class */ (function () {
    function MemoryStorage() {
        this.cache_ = {};
        this.isInMemoryStorage = true;
    }
    MemoryStorage.prototype.set = function (key, value) {
        if (value == null) {
            delete this.cache_[key];
        }
        else {
            this.cache_[key] = value;
        }
    };
    MemoryStorage.prototype.get = function (key) {
        if (util_1.contains(this.cache_, key)) {
            return this.cache_[key];
        }
        return null;
    };
    MemoryStorage.prototype.remove = function (key) {
        delete this.cache_[key];
    };
    return MemoryStorage;
}());
exports.MemoryStorage = MemoryStorage;

//# sourceMappingURL=MemoryStorage.js.map


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var TransactionResult = /** @class */ (function () {
    /**
     * A type for the resolve value of Firebase.transaction.
     * @constructor
     * @dict
     * @param {boolean} committed
     * @param {DataSnapshot} snapshot
     */
    function TransactionResult(committed, snapshot) {
        this.committed = committed;
        this.snapshot = snapshot;
    }
    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
    // for end-users
    TransactionResult.prototype.toJSON = function () {
        util_1.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);
        return { committed: this.committed, snapshot: this.snapshot.toJSON() };
    };
    return TransactionResult;
}());
exports.TransactionResult = TransactionResult;

//# sourceMappingURL=TransactionResult.js.map


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
/**
 * Fancy ID generator that creates 20-character string identifiers with the
 * following properties:
 *
 * 1. They're based on timestamp so that they sort *after* any existing ids.
 * 2. They contain 72-bits of random data after the timestamp so that IDs won't
 *    collide with other clients' IDs.
 * 3. They sort *lexicographically* (so the timestamp is converted to characters
 *    that will sort properly).
 * 4. They're monotonically increasing. Even if you generate more than one in
 *    the same timestamp, the latter ones will sort after the former ones. We do
 *    this by using the previous random bits but "incrementing" them by 1 (only
 *    in the case of a timestamp collision).
 */
exports.nextPushId = (function () {
    // Modeled after base64 web-safe chars, but ordered by ASCII.
    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
    // Timestamp of last push, used to prevent local collisions if you push twice
    // in one ms.
    var lastPushTime = 0;
    // We generate 72-bits of randomness which get turned into 12 characters and
    // appended to the timestamp to prevent collisions with other clients. We
    // store the last characters we generated because in the event of a collision,
    // we'll use those same characters except "incremented" by one.
    var lastRandChars = [];
    return function (now) {
        var duplicateTime = now === lastPushTime;
        lastPushTime = now;
        var i;
        var timeStampChars = new Array(8);
        for (i = 7; i >= 0; i--) {
            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
            // NOTE: Can't use << here because javascript will convert to int and lose
            // the upper bits.
            now = Math.floor(now / 64);
        }
        util_1.assert(now === 0, 'Cannot push at time == 0');
        var id = timeStampChars.join('');
        if (!duplicateTime) {
            for (i = 0; i < 12; i++) {
                lastRandChars[i] = Math.floor(Math.random() * 64);
            }
        }
        else {
            // If the timestamp hasn't changed since last push, use the same random
            // number, except incremented by 1.
            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
                lastRandChars[i] = 0;
            }
            lastRandChars[i]++;
        }
        for (i = 0; i < 12; i++) {
            id += PUSH_CHARS.charAt(lastRandChars[i]);
        }
        util_1.assert(id.length === 20, 'nextPushId: Length should be 20.');
        return id;
    };
})();

//# sourceMappingURL=NextPushId.js.map


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var DataSnapshot_1 = __webpack_require__(31);
var Event_1 = __webpack_require__(118);
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(0);
/**
 * Represents registration for 'value' events.
 */
var ValueEventRegistration = /** @class */ (function () {
    /**
     * @param {?function(!DataSnapshot)} callback_
     * @param {?function(Error)} cancelCallback_
     * @param {?Object} context_
     */
    function ValueEventRegistration(callback_, cancelCallback_, context_) {
        this.callback_ = callback_;
        this.cancelCallback_ = cancelCallback_;
        this.context_ = context_;
    }
    /**
     * @inheritDoc
     */
    ValueEventRegistration.prototype.respondsTo = function (eventType) {
        return eventType === 'value';
    };
    /**
     * @inheritDoc
     */
    ValueEventRegistration.prototype.createEvent = function (change, query) {
        var index = query.getQueryParams().getIndex();
        return new Event_1.DataEvent('value', this, new DataSnapshot_1.DataSnapshot(change.snapshotNode, query.getRef(), index));
    };
    /**
     * @inheritDoc
     */
    ValueEventRegistration.prototype.getEventRunner = function (eventData) {
        var ctx = this.context_;
        if (eventData.getEventType() === 'cancel') {
            util_2.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
            var cancelCB_1 = this.cancelCallback_;
            return function () {
                // We know that error exists, we checked above that this is a cancel event
                cancelCB_1.call(ctx, eventData.error);
            };
        }
        else {
            var cb_1 = this.callback_;
            return function () {
                cb_1.call(ctx, eventData.snapshot);
            };
        }
    };
    /**
     * @inheritDoc
     */
    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {
        if (this.cancelCallback_) {
            return new Event_1.CancelEvent(this, error, path);
        }
        else {
            return null;
        }
    };
    /**
     * @inheritDoc
     */
    ValueEventRegistration.prototype.matches = function (other) {
        if (!(other instanceof ValueEventRegistration)) {
            return false;
        }
        else if (!other.callback_ || !this.callback_) {
            // If no callback specified, we consider it to match any callback.
            return true;
        }
        else {
            return (other.callback_ === this.callback_ && other.context_ === this.context_);
        }
    };
    /**
     * @inheritDoc
     */
    ValueEventRegistration.prototype.hasAnyCallback = function () {
        return this.callback_ !== null;
    };
    return ValueEventRegistration;
}());
exports.ValueEventRegistration = ValueEventRegistration;
/**
 * Represents the registration of 1 or more child_xxx events.
 *
 * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you
 * register a group of callbacks together in the future.
 *
 * @constructor
 * @implements {EventRegistration}
 */
var ChildEventRegistration = /** @class */ (function () {
    /**
     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_
     * @param {?function(Error)} cancelCallback_
     * @param {Object=} context_
     */
    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {
        this.callbacks_ = callbacks_;
        this.cancelCallback_ = cancelCallback_;
        this.context_ = context_;
    }
    /**
     * @inheritDoc
     */
    ChildEventRegistration.prototype.respondsTo = function (eventType) {
        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
        eventToCheck =
            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
        return util_1.contains(this.callbacks_, eventToCheck);
    };
    /**
     * @inheritDoc
     */
    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {
        if (this.cancelCallback_) {
            return new Event_1.CancelEvent(this, error, path);
        }
        else {
            return null;
        }
    };
    /**
     * @inheritDoc
     */
    ChildEventRegistration.prototype.createEvent = function (change, query) {
        util_2.assert(change.childName != null, 'Child events should have a childName.');
        var ref = query.getRef().child(/** @type {!string} */ (change.childName));
        var index = query.getQueryParams().getIndex();
        return new Event_1.DataEvent(change.type, this, new DataSnapshot_1.DataSnapshot(change.snapshotNode, ref, index), change.prevName);
    };
    /**
     * @inheritDoc
     */
    ChildEventRegistration.prototype.getEventRunner = function (eventData) {
        var ctx = this.context_;
        if (eventData.getEventType() === 'cancel') {
            util_2.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
            var cancelCB_2 = this.cancelCallback_;
            return function () {
                // We know that error exists, we checked above that this is a cancel event
                cancelCB_2.call(ctx, eventData.error);
            };
        }
        else {
            var cb_2 = this.callbacks_[eventData.eventType];
            return function () {
                cb_2.call(ctx, eventData.snapshot, eventData.prevName);
            };
        }
    };
    /**
     * @inheritDoc
     */
    ChildEventRegistration.prototype.matches = function (other) {
        if (other instanceof ChildEventRegistration) {
            if (!this.callbacks_ || !other.callbacks_) {
                return true;
            }
            else if (this.context_ === other.context_) {
                var otherCount = util_1.getCount(other.callbacks_);
                var thisCount = util_1.getCount(this.callbacks_);
                if (otherCount === thisCount) {
                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.
                    //  If event types don't match, not a match
                    // If count is not 1, exact match across all
                    if (otherCount === 1) {
                        var otherKey /** @type {!string} */ = util_1.getAnyKey(other.callbacks_);
                        var thisKey /** @type {!string} */ = util_1.getAnyKey(this.callbacks_);
                        return (thisKey === otherKey &&
                            (!other.callbacks_[otherKey] ||
                                !this.callbacks_[thisKey] ||
                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));
                    }
                    else {
                        // Exact match on each key.
                        return util_1.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });
                    }
                }
            }
        }
        return false;
    };
    /**
     * @inheritDoc
     */
    ChildEventRegistration.prototype.hasAnyCallback = function () {
        return this.callbacks_ !== null;
    };
    return ChildEventRegistration;
}());
exports.ChildEventRegistration = ChildEventRegistration;

//# sourceMappingURL=EventRegistration.js.map


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
/**
 * Encapsulates the data needed to raise an event
 * @implements {Event}
 */
var DataEvent = /** @class */ (function () {
    /**
     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed
     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided
     * @param {!DataSnapshot} snapshot The data backing the event
     * @param {?string=} prevName Optional, the name of the previous child for child_* events.
     */
    function DataEvent(eventType, eventRegistration, snapshot, prevName) {
        this.eventType = eventType;
        this.eventRegistration = eventRegistration;
        this.snapshot = snapshot;
        this.prevName = prevName;
    }
    /**
     * @inheritDoc
     */
    DataEvent.prototype.getPath = function () {
        var ref = this.snapshot.getRef();
        if (this.eventType === 'value') {
            return ref.path;
        }
        else {
            return ref.getParent().path;
        }
    };
    /**
     * @inheritDoc
     */
    DataEvent.prototype.getEventType = function () {
        return this.eventType;
    };
    /**
     * @inheritDoc
     */
    DataEvent.prototype.getEventRunner = function () {
        return this.eventRegistration.getEventRunner(this);
    };
    /**
     * @inheritDoc
     */
    DataEvent.prototype.toString = function () {
        return (this.getPath().toString() +
            ':' +
            this.eventType +
            ':' +
            util_1.stringify(this.snapshot.exportVal()));
    };
    return DataEvent;
}());
exports.DataEvent = DataEvent;
var CancelEvent = /** @class */ (function () {
    /**
     * @param {EventRegistration} eventRegistration
     * @param {Error} error
     * @param {!Path} path
     */
    function CancelEvent(eventRegistration, error, path) {
        this.eventRegistration = eventRegistration;
        this.error = error;
        this.path = path;
    }
    /**
     * @inheritDoc
     */
    CancelEvent.prototype.getPath = function () {
        return this.path;
    };
    /**
     * @inheritDoc
     */
    CancelEvent.prototype.getEventType = function () {
        return 'cancel';
    };
    /**
     * @inheritDoc
     */
    CancelEvent.prototype.getEventRunner = function () {
        return this.eventRegistration.getEventRunner(this);
    };
    /**
     * @inheritDoc
     */
    CancelEvent.prototype.toString = function () {
        return this.path.toString() + ':cancel';
    };
    return CancelEvent;
}());
exports.CancelEvent = CancelEvent;

//# sourceMappingURL=Event.js.map


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(1);
var AckUserWrite_1 = __webpack_require__(120);
var ChildrenNode_1 = __webpack_require__(4);
var util_3 = __webpack_require__(0);
var ImmutableTree_1 = __webpack_require__(32);
var ListenComplete_1 = __webpack_require__(121);
var Merge_1 = __webpack_require__(122);
var Operation_1 = __webpack_require__(10);
var Overwrite_1 = __webpack_require__(61);
var Path_1 = __webpack_require__(2);
var SyncPoint_1 = __webpack_require__(62);
var WriteTree_1 = __webpack_require__(128);
/**
 * SyncTree is the central class for managing event callback registration, data caching, views
 * (query processing), and event generation.  There are typically two SyncTree instances for
 * each Repo, one for the normal Firebase data, and one for the .info data.
 *
 * It has a number of responsibilities, including:
 *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
 *  - Applying and caching data changes for user set(), transaction(), and update() calls
 *    (applyUserOverwrite(), applyUserMerge()).
 *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
 *    applyServerMerge()).
 *  - Generating user-facing events for server and user changes (all of the apply* methods
 *    return the set of events that need to be raised as a result).
 *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
 *    to the correct set of paths and queries to satisfy the current set of user event
 *    callbacks (listens are started/stopped using the provided listenProvider).
 *
 * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
 * events are returned to the caller rather than raised synchronously.
 *
 * @constructor
 */
var SyncTree = /** @class */ (function () {
    /**
     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening
     *   to server data.
     */
    function SyncTree(listenProvider_) {
        this.listenProvider_ = listenProvider_;
        /**
         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
         * @type {!ImmutableTree.<!SyncPoint>}
         * @private
         */
        this.syncPointTree_ = ImmutableTree_1.ImmutableTree.Empty;
        /**
         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
         * @type {!WriteTree}
         * @private
         */
        this.pendingWriteTree_ = new WriteTree_1.WriteTree();
        this.tagToQueryMap_ = {};
        this.queryToTagMap_ = {};
    }
    /**
     * Apply the data changes for a user-generated set() or transaction() call.
     *
     * @param {!Path} path
     * @param {!Node} newData
     * @param {number} writeId
     * @param {boolean=} visible
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {
        // Record pending write.
        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);
        if (!visible) {
            return [];
        }
        else {
            return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.User, path, newData));
        }
    };
    /**
     * Apply the data from a user-generated update() call
     *
     * @param {!Path} path
     * @param {!Object.<string, !Node>} changedChildren
     * @param {!number} writeId
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {
        // Record pending merge.
        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);
        var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);
        return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.User, path, changeTree));
    };
    /**
     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
     *
     * @param {!number} writeId
     * @param {boolean=} revert True if the given write failed and needs to be reverted
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.ackUserWrite = function (writeId, revert) {
        if (revert === void 0) { revert = false; }
        var write = this.pendingWriteTree_.getWrite(writeId);
        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);
        if (!needToReevaluate) {
            return [];
        }
        else {
            var affectedTree_1 = ImmutableTree_1.ImmutableTree.Empty;
            if (write.snap != null) {
                // overwrite
                affectedTree_1 = affectedTree_1.set(Path_1.Path.Empty, true);
            }
            else {
                util_3.forEach(write.children, function (pathString, node) {
                    affectedTree_1 = affectedTree_1.set(new Path_1.Path(pathString), node);
                });
            }
            return this.applyOperationToSyncPoints_(new AckUserWrite_1.AckUserWrite(write.path, affectedTree_1, revert));
        }
    };
    /**
     * Apply new server data for the specified path..
     *
     * @param {!Path} path
     * @param {!Node} newData
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyServerOverwrite = function (path, newData) {
        return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.Server, path, newData));
    };
    /**
     * Apply new server data to be merged in at the specified path.
     *
     * @param {!Path} path
     * @param {!Object.<string, !Node>} changedChildren
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {
        var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);
        return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.Server, path, changeTree));
    };
    /**
     * Apply a listen complete for a query
     *
     * @param {!Path} path
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyListenComplete = function (path) {
        return this.applyOperationToSyncPoints_(new ListenComplete_1.ListenComplete(Operation_1.OperationSource.Server, path));
    };
    /**
     * Apply new server data for the specified tagged query.
     *
     * @param {!Path} path
     * @param {!Node} snap
     * @param {!number} tag
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {
        var queryKey = this.queryKeyForTag_(tag);
        if (queryKey != null) {
            var r = SyncTree.parseQueryKey_(queryKey);
            var queryPath = r.path, queryId = r.queryId;
            var relativePath = Path_1.Path.relativePath(queryPath, path);
            var op = new Overwrite_1.Overwrite(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, snap);
            return this.applyTaggedOperation_(queryPath, op);
        }
        else {
            // Query must have been removed already
            return [];
        }
    };
    /**
     * Apply server data to be merged in for the specified tagged query.
     *
     * @param {!Path} path
     * @param {!Object.<string, !Node>} changedChildren
     * @param {!number} tag
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {
        var queryKey = this.queryKeyForTag_(tag);
        if (queryKey) {
            var r = SyncTree.parseQueryKey_(queryKey);
            var queryPath = r.path, queryId = r.queryId;
            var relativePath = Path_1.Path.relativePath(queryPath, path);
            var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);
            var op = new Merge_1.Merge(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);
            return this.applyTaggedOperation_(queryPath, op);
        }
        else {
            // We've already removed the query. No big deal, ignore the update
            return [];
        }
    };
    /**
     * Apply a listen complete for a tagged query
     *
     * @param {!Path} path
     * @param {!number} tag
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {
        var queryKey = this.queryKeyForTag_(tag);
        if (queryKey) {
            var r = SyncTree.parseQueryKey_(queryKey);
            var queryPath = r.path, queryId = r.queryId;
            var relativePath = Path_1.Path.relativePath(queryPath, path);
            var op = new ListenComplete_1.ListenComplete(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath);
            return this.applyTaggedOperation_(queryPath, op);
        }
        else {
            // We've already removed the query. No big deal, ignore the update
            return [];
        }
    };
    /**
     * Add an event callback for the specified query.
     *
     * @param {!Query} query
     * @param {!EventRegistration} eventRegistration
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {
        var path = query.path;
        var serverCache = null;
        var foundAncestorDefaultView = false;
        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
        // Consider optimizing this once there's a better understanding of what actual behavior will be.
        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
            var relativePath = Path_1.Path.relativePath(pathToSyncPoint, path);
            serverCache = serverCache || sp.getCompleteServerCache(relativePath);
            foundAncestorDefaultView =
                foundAncestorDefaultView || sp.hasCompleteView();
        });
        var syncPoint = this.syncPointTree_.get(path);
        if (!syncPoint) {
            syncPoint = new SyncPoint_1.SyncPoint();
            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);
        }
        else {
            foundAncestorDefaultView =
                foundAncestorDefaultView || syncPoint.hasCompleteView();
            serverCache = serverCache || syncPoint.getCompleteServerCache(Path_1.Path.Empty);
        }
        var serverCacheComplete;
        if (serverCache != null) {
            serverCacheComplete = true;
        }
        else {
            serverCacheComplete = false;
            serverCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
            var subtree = this.syncPointTree_.subtree(path);
            subtree.foreachChild(function (childName, childSyncPoint) {
                var completeCache = childSyncPoint.getCompleteServerCache(Path_1.Path.Empty);
                if (completeCache) {
                    serverCache = serverCache.updateImmediateChild(childName, completeCache);
                }
            });
        }
        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);
        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {
            // We need to track a tag for this query
            var queryKey = SyncTree.makeQueryKey_(query);
            util_1.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');
            var tag = SyncTree.getNextQueryTag_();
            this.queryToTagMap_[queryKey] = tag;
            // Coerce to string to avoid sparse arrays.
            this.tagToQueryMap_['_' + tag] = queryKey;
        }
        var writesCache = this.pendingWriteTree_.childWrites(path);
        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);
        if (!viewAlreadyExists && !foundAncestorDefaultView) {
            var view /** @type !View */ = syncPoint.viewForQuery(query);
            events = events.concat(this.setupListener_(query, view));
        }
        return events;
    };
    /**
     * Remove event callback(s).
     *
     * If query is the default query, we'll check all queries for the specified eventRegistration.
     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
     *
     * @param {!Query} query
     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.
     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
     */
    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
        var _this = this;
        // Find the syncPoint first. Then deal with whether or not it has matching listeners
        var path = query.path;
        var maybeSyncPoint = this.syncPointTree_.get(path);
        var cancelEvents = [];
        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
        // not loadsAllData().
        if (maybeSyncPoint &&
            (query.queryIdentifier() === 'default' ||
                maybeSyncPoint.viewExistsForQuery(query))) {
            /**
             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}
             */
            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);
            if (maybeSyncPoint.isEmpty()) {
                this.syncPointTree_ = this.syncPointTree_.remove(path);
            }
            var removed = removedAndEvents.removed;
            cancelEvents = removedAndEvents.events;
            // We may have just removed one of many listeners and can short-circuit this whole process
            // We may also not have removed a default listener, in which case all of the descendant listeners should already be
            // properly set up.
            //
            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
            // queryId === 'default'
            var removingDefault = -1 !==
                removed.findIndex(function (query) {
                    return query.getQueryParams().loadsAllData();
                });
            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {
                return parentSyncPoint.hasCompleteView();
            });
            if (removingDefault && !covered) {
                var subtree = this.syncPointTree_.subtree(path);
                // There are potentially child listeners. Determine what if any listens we need to send before executing the
                // removal
                if (!subtree.isEmpty()) {
                    // We need to fold over our subtree and collect the listeners to send
                    var newViews = this.collectDistinctViewsForSubTree_(subtree);
                    // Ok, we've collected all the listens we need. Set them up.
                    for (var i = 0; i < newViews.length; ++i) {
                        var view = newViews[i], newQuery = view.getQuery();
                        var listener = this.createListenerForView_(view);
                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);
                    }
                }
                else {
                    // There's nothing below us, so nothing we need to start listening on
                }
            }
            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
            // Also, note that if we have a cancelError, it's already been removed at the provider level.
            if (!covered && removed.length > 0 && !cancelError) {
                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
                // default. Otherwise, we need to iterate through and cancel each individual query
                if (removingDefault) {
                    // We don't tag default listeners
                    var defaultTag = null;
                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);
                }
                else {
                    removed.forEach(function (queryToRemove) {
                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];
                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);
                    });
                }
            }
            // Now, clear all of the tags we're tracking for the removed listens
            this.removeTags_(removed);
        }
        else {
            // No-op, this listener must've been already removed
        }
        return cancelEvents;
    };
    /**
     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above
     * it, but as this is only used by transaction code, that should always be the case anyways.
     *
     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
     * @param {!Path} path The path to the data we want
     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded
     * @return {?Node}
     */
    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {
        var includeHiddenSets = true;
        var writeTree = this.pendingWriteTree_;
        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {
            var relativePath = Path_1.Path.relativePath(pathSoFar, path);
            var serverCache = syncPoint.getCompleteServerCache(relativePath);
            if (serverCache) {
                return serverCache;
            }
        });
        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);
    };
    /**
     * This collapses multiple unfiltered views into a single view, since we only need a single
     * listener for them.
     *
     * @param {!ImmutableTree.<!SyncPoint>} subtree
     * @return {!Array.<!View>}
     * @private
     */
    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {
        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
                var completeView = maybeChildSyncPoint.getCompleteView();
                return [completeView];
            }
            else {
                // No complete view here, flatten any deeper listens into an array
                var views_1 = [];
                if (maybeChildSyncPoint) {
                    views_1 = maybeChildSyncPoint.getQueryViews();
                }
                util_3.forEach(childMap, function (key, childViews) {
                    views_1 = views_1.concat(childViews);
                });
                return views_1;
            }
        });
    };
    /**
     * @param {!Array.<!Query>} queries
     * @private
     */
    SyncTree.prototype.removeTags_ = function (queries) {
        for (var j = 0; j < queries.length; ++j) {
            var removedQuery = queries[j];
            if (!removedQuery.getQueryParams().loadsAllData()) {
                // We should have a tag for this
                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);
                var removedQueryTag = this.queryToTagMap_[removedQueryKey];
                delete this.queryToTagMap_[removedQueryKey];
                delete this.tagToQueryMap_['_' + removedQueryTag];
            }
        }
    };
    /**
     * Normalizes a query to a query we send the server for listening
     * @param {!Query} query
     * @return {!Query} The normalized query
     * @private
     */
    SyncTree.queryForListening_ = function (query) {
        if (query.getQueryParams().loadsAllData() &&
            !query.getQueryParams().isDefault()) {
            // We treat queries that load all data as default queries
            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
            // from Query
            return /** @type {!Query} */ query.getRef();
        }
        else {
            return query;
        }
    };
    /**
     * For a given new listen, manage the de-duplication of outstanding subscriptions.
     *
     * @param {!Query} query
     * @param {!View} view
     * @return {!Array.<!Event>} This method can return events to support synchronous data sources
     * @private
     */
    SyncTree.prototype.setupListener_ = function (query, view) {
        var path = query.path;
        var tag = this.tagForQuery_(query);
        var listener = this.createListenerForView_(view);
        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);
        var subtree = this.syncPointTree_.subtree(path);
        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
        // may need to shadow other listens as well.
        if (tag) {
            util_1.assert(!subtree.value.hasCompleteView(), "If we're adding a query, it shouldn't be shadowed");
        }
        else {
            // Shadow everything at or below this location, this is a default listener.
            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
                if (!relativePath.isEmpty() &&
                    maybeChildSyncPoint &&
                    maybeChildSyncPoint.hasCompleteView()) {
                    return [maybeChildSyncPoint.getCompleteView().getQuery()];
                }
                else {
                    // No default listener here, flatten any deeper queries into an array
                    var queries_1 = [];
                    if (maybeChildSyncPoint) {
                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));
                    }
                    util_3.forEach(childMap, function (key, childQueries) {
                        queries_1 = queries_1.concat(childQueries);
                    });
                    return queries_1;
                }
            });
            for (var i = 0; i < queriesToStop.length; ++i) {
                var queryToStop = queriesToStop[i];
                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));
            }
        }
        return events;
    };
    /**
     *
     * @param {!View} view
     * @return {{hashFn: function(), onComplete: function(!string, *)}}
     * @private
     */
    SyncTree.prototype.createListenerForView_ = function (view) {
        var _this = this;
        var query = view.getQuery();
        var tag = this.tagForQuery_(query);
        return {
            hashFn: function () {
                var cache = view.getServerCache() || ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                return cache.hash();
            },
            onComplete: function (status) {
                if (status === 'ok') {
                    if (tag) {
                        return _this.applyTaggedListenComplete(query.path, tag);
                    }
                    else {
                        return _this.applyListenComplete(query.path);
                    }
                }
                else {
                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children
                    var error = util_2.errorForServerCode(status, query);
                    return _this.removeEventRegistration(query, 
                    /*eventRegistration*/ null, error);
                }
            }
        };
    };
    /**
     * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
     * @private
     * @param {!Query} query
     * @return {string}
     */
    SyncTree.makeQueryKey_ = function (query) {
        return query.path.toString() + '$' + query.queryIdentifier();
    };
    /**
     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
     * @private
     * @param {!string} queryKey
     * @return {{queryId: !string, path: !Path}}
     */
    SyncTree.parseQueryKey_ = function (queryKey) {
        var splitIndex = queryKey.indexOf('$');
        util_1.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
        return {
            queryId: queryKey.substr(splitIndex + 1),
            path: new Path_1.Path(queryKey.substr(0, splitIndex))
        };
    };
    /**
     * Return the query associated with the given tag, if we have one
     * @param {!number} tag
     * @return {?string}
     * @private
     */
    SyncTree.prototype.queryKeyForTag_ = function (tag) {
        return this.tagToQueryMap_['_' + tag];
    };
    /**
     * Return the tag associated with the given query.
     * @param {!Query} query
     * @return {?number}
     * @private
     */
    SyncTree.prototype.tagForQuery_ = function (query) {
        var queryKey = SyncTree.makeQueryKey_(query);
        return util_3.safeGet(this.queryToTagMap_, queryKey);
    };
    /**
     * Static accessor for query tags.
     * @return {number}
     * @private
     */
    SyncTree.getNextQueryTag_ = function () {
        return SyncTree.nextQueryTag_++;
    };
    /**
     * A helper method to apply tagged operations
     *
     * @param {!Path} queryPath
     * @param {!Operation} operation
     * @return {!Array.<!Event>}
     * @private
     */
    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {
        var syncPoint = this.syncPointTree_.get(queryPath);
        util_1.assert(syncPoint, "Missing sync point for query tag that we're tracking");
        var writesCache = this.pendingWriteTree_.childWrites(queryPath);
        return syncPoint.applyOperation(operation, writesCache, 
        /*serverCache=*/ null);
    };
    /**
     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
     *
     * NOTES:
     * - Descendant SyncPoints will be visited first (since we raise events depth-first).
  
     * - We call applyOperation() on each SyncPoint passing three things:
     *   1. A version of the Operation that has been made relative to the SyncPoint location.
     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
     *   3. A snapshot Node with cached server data, if we have it.
  
     * - We concatenate all of the events returned by each SyncPoint and return the result.
     *
     * @param {!Operation} operation
     * @return {!Array.<!Event>}
     * @private
     */
    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {
        return this.applyOperationHelper_(operation, this.syncPointTree_, 
        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path_1.Path.Empty));
    };
    /**
     * Recursive helper for applyOperationToSyncPoints_
     *
     * @private
     * @param {!Operation} operation
     * @param {ImmutableTree.<!SyncPoint>} syncPointTree
     * @param {?Node} serverCache
     * @param {!WriteTreeRef} writesCache
     * @return {!Array.<!Event>}
     */
    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
        if (operation.path.isEmpty()) {
            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
        }
        else {
            var syncPoint = syncPointTree.get(Path_1.Path.Empty);
            // If we don't have cached server data, see if we can get it from this SyncPoint.
            if (serverCache == null && syncPoint != null) {
                serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);
            }
            var events = [];
            var childName = operation.path.getFront();
            var childOperation = operation.operationForChild(childName);
            var childTree = syncPointTree.children.get(childName);
            if (childTree && childOperation) {
                var childServerCache = serverCache
                    ? serverCache.getImmediateChild(childName)
                    : null;
                var childWritesCache = writesCache.child(childName);
                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
            }
            if (syncPoint) {
                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
            }
            return events;
        }
    };
    /**
     * Recursive helper for applyOperationToSyncPoints_
     *
     * @private
     * @param {!Operation} operation
     * @param {ImmutableTree.<!SyncPoint>} syncPointTree
     * @param {?Node} serverCache
     * @param {!WriteTreeRef} writesCache
     * @return {!Array.<!Event>}
     */
    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
        var _this = this;
        var syncPoint = syncPointTree.get(Path_1.Path.Empty);
        // If we don't have cached server data, see if we can get it from this SyncPoint.
        if (serverCache == null && syncPoint != null) {
            serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);
        }
        var events = [];
        syncPointTree.children.inorderTraversal(function (childName, childTree) {
            var childServerCache = serverCache
                ? serverCache.getImmediateChild(childName)
                : null;
            var childWritesCache = writesCache.child(childName);
            var childOperation = operation.operationForChild(childName);
            if (childOperation) {
                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
            }
        });
        if (syncPoint) {
            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
        }
        return events;
    };
    /**
     * Static tracker for next query tag.
     * @type {number}
     * @private
     */
    SyncTree.nextQueryTag_ = 1;
    return SyncTree;
}());
exports.SyncTree = SyncTree;

//# sourceMappingURL=SyncTree.js.map


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var Path_1 = __webpack_require__(2);
var Operation_1 = __webpack_require__(10);
var AckUserWrite = /** @class */ (function () {
    /**
     *
     * @param {!Path} path
     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.
     * @param {!boolean} revert
     */
    function AckUserWrite(
        /**@inheritDoc */ path, 
        /**@inheritDoc */ affectedTree, 
        /**@inheritDoc */ revert) {
        this.path = path;
        this.affectedTree = affectedTree;
        this.revert = revert;
        /** @inheritDoc */
        this.type = Operation_1.OperationType.ACK_USER_WRITE;
        /** @inheritDoc */
        this.source = Operation_1.OperationSource.User;
    }
    /**
     * @inheritDoc
     */
    AckUserWrite.prototype.operationForChild = function (childName) {
        if (!this.path.isEmpty()) {
            util_1.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');
            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);
        }
        else if (this.affectedTree.value != null) {
            util_1.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
            // All child locations are affected as well; just return same operation.
            return this;
        }
        else {
            var childTree = this.affectedTree.subtree(new Path_1.Path(childName));
            return new AckUserWrite(Path_1.Path.Empty, childTree, this.revert);
        }
    };
    return AckUserWrite;
}());
exports.AckUserWrite = AckUserWrite;

//# sourceMappingURL=AckUserWrite.js.map


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Path_1 = __webpack_require__(2);
var Operation_1 = __webpack_require__(10);
/**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @constructor
 * @implements {Operation}
 */
var ListenComplete = /** @class */ (function () {
    function ListenComplete(source, path) {
        this.source = source;
        this.path = path;
        /** @inheritDoc */
        this.type = Operation_1.OperationType.LISTEN_COMPLETE;
    }
    ListenComplete.prototype.operationForChild = function (childName) {
        if (this.path.isEmpty()) {
            return new ListenComplete(this.source, Path_1.Path.Empty);
        }
        else {
            return new ListenComplete(this.source, this.path.popFront());
        }
    };
    return ListenComplete;
}());
exports.ListenComplete = ListenComplete;

//# sourceMappingURL=ListenComplete.js.map


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Operation_1 = __webpack_require__(10);
var Overwrite_1 = __webpack_require__(61);
var Path_1 = __webpack_require__(2);
var util_1 = __webpack_require__(0);
/**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @param {!ImmutableTree.<!Node>} children
 * @constructor
 * @implements {Operation}
 */
var Merge = /** @class */ (function () {
    function Merge(
        /**@inheritDoc */ source, 
        /**@inheritDoc */ path, 
        /**@inheritDoc */ children) {
        this.source = source;
        this.path = path;
        this.children = children;
        /** @inheritDoc */
        this.type = Operation_1.OperationType.MERGE;
    }
    /**
     * @inheritDoc
     */
    Merge.prototype.operationForChild = function (childName) {
        if (this.path.isEmpty()) {
            var childTree = this.children.subtree(new Path_1.Path(childName));
            if (childTree.isEmpty()) {
                // This child is unaffected
                return null;
            }
            else if (childTree.value) {
                // We have a snapshot for the child in question.  This becomes an overwrite of the child.
                return new Overwrite_1.Overwrite(this.source, Path_1.Path.Empty, childTree.value);
            }
            else {
                // This is a merge at a deeper level
                return new Merge(this.source, Path_1.Path.Empty, childTree);
            }
        }
        else {
            util_1.assert(this.path.getFront() === childName, "Can't get a merge for a child not on the path of the operation");
            return new Merge(this.source, this.path.popFront(), this.children);
        }
    };
    /**
     * @inheritDoc
     */
    Merge.prototype.toString = function () {
        return ('Operation(' +
            this.path +
            ': ' +
            this.source.toString() +
            ' merge: ' +
            this.children.toString() +
            ')');
    };
    return Merge;
}());
exports.Merge = Merge;

//# sourceMappingURL=Merge.js.map


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var IndexedFilter_1 = __webpack_require__(33);
var ViewProcessor_1 = __webpack_require__(124);
var ChildrenNode_1 = __webpack_require__(4);
var CacheNode_1 = __webpack_require__(24);
var ViewCache_1 = __webpack_require__(63);
var EventGenerator_1 = __webpack_require__(127);
var util_1 = __webpack_require__(0);
var Operation_1 = __webpack_require__(10);
var Change_1 = __webpack_require__(12);
var PriorityIndex_1 = __webpack_require__(3);
/**
 * A view represents a specific location and query that has 1 or more event registrations.
 *
 * It does several things:
 *  - Maintains the list of event registrations for this location/query.
 *  - Maintains a cache of the data visible for this location/query.
 *  - Applies new operations (via applyOperation), updates the cache, and based on the event
 *    registrations returns the set of events to be raised.
 * @constructor
 */
var View = /** @class */ (function () {
    /**
     *
     * @param {!Query} query_
     * @param {!ViewCache} initialViewCache
     */
    function View(query_, initialViewCache) {
        this.query_ = query_;
        this.eventRegistrations_ = [];
        var params = this.query_.getQueryParams();
        var indexFilter = new IndexedFilter_1.IndexedFilter(params.getIndex());
        var filter = params.getNodeFilter();
        /**
         * @type {ViewProcessor}
         * @private
         */
        this.processor_ = new ViewProcessor_1.ViewProcessor(filter);
        var initialServerCache = initialViewCache.getServerCache();
        var initialEventCache = initialViewCache.getEventCache();
        // Don't filter server node with other filter than index, wait for tagged listen
        var serverSnap = indexFilter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
        var eventSnap = filter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
        var newServerCache = new CacheNode_1.CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
        var newEventCache = new CacheNode_1.CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
        /**
         * @type {!ViewCache}
         * @private
         */
        this.viewCache_ = new ViewCache_1.ViewCache(newEventCache, newServerCache);
        /**
         * @type {!EventGenerator}
         * @private
         */
        this.eventGenerator_ = new EventGenerator_1.EventGenerator(this.query_);
    }
    /**
     * @return {!Query}
     */
    View.prototype.getQuery = function () {
        return this.query_;
    };
    /**
     * @return {?Node}
     */
    View.prototype.getServerCache = function () {
        return this.viewCache_.getServerCache().getNode();
    };
    /**
     * @param {!Path} path
     * @return {?Node}
     */
    View.prototype.getCompleteServerCache = function (path) {
        var cache = this.viewCache_.getCompleteServerSnap();
        if (cache) {
            // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
            // we need to see if it contains the child we're interested in.
            if (this.query_.getQueryParams().loadsAllData() ||
                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {
                return cache.getChild(path);
            }
        }
        return null;
    };
    /**
     * @return {boolean}
     */
    View.prototype.isEmpty = function () {
        return this.eventRegistrations_.length === 0;
    };
    /**
     * @param {!EventRegistration} eventRegistration
     */
    View.prototype.addEventRegistration = function (eventRegistration) {
        this.eventRegistrations_.push(eventRegistration);
    };
    /**
     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
     */
    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {
        var cancelEvents = [];
        if (cancelError) {
            util_1.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
            var path_1 = this.query_.path;
            this.eventRegistrations_.forEach(function (registration) {
                cancelError /** @type {!Error} */ = cancelError;
                var maybeEvent = registration.createCancelEvent(cancelError, path_1);
                if (maybeEvent) {
                    cancelEvents.push(maybeEvent);
                }
            });
        }
        if (eventRegistration) {
            var remaining = [];
            for (var i = 0; i < this.eventRegistrations_.length; ++i) {
                var existing = this.eventRegistrations_[i];
                if (!existing.matches(eventRegistration)) {
                    remaining.push(existing);
                }
                else if (eventRegistration.hasAnyCallback()) {
                    // We're removing just this one
                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));
                    break;
                }
            }
            this.eventRegistrations_ = remaining;
        }
        else {
            this.eventRegistrations_ = [];
        }
        return cancelEvents;
    };
    /**
     * Applies the given Operation, updates our cache, and returns the appropriate events.
     *
     * @param {!Operation} operation
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeServerCache
     * @return {!Array.<!Event>}
     */
    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {
        if (operation.type === Operation_1.OperationType.MERGE &&
            operation.source.queryId !== null) {
            util_1.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');
            util_1.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');
        }
        var oldViewCache = this.viewCache_;
        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);
        this.processor_.assertIndexed(result.viewCache);
        util_1.assert(result.viewCache.getServerCache().isFullyInitialized() ||
            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');
        this.viewCache_ = result.viewCache;
        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);
    };
    /**
     * @param {!EventRegistration} registration
     * @return {!Array.<!Event>}
     */
    View.prototype.getInitialEvents = function (registration) {
        var eventSnap = this.viewCache_.getEventCache();
        var initialChanges = [];
        if (!eventSnap.getNode().isLeafNode()) {
            var eventNode = eventSnap.getNode();
            eventNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                initialChanges.push(Change_1.Change.childAddedChange(key, childNode));
            });
        }
        if (eventSnap.isFullyInitialized()) {
            initialChanges.push(Change_1.Change.valueChange(eventSnap.getNode()));
        }
        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);
    };
    /**
     * @private
     * @param {!Array.<!Change>} changes
     * @param {!Node} eventCache
     * @param {EventRegistration=} eventRegistration
     * @return {!Array.<!Event>}
     */
    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {
        var registrations = eventRegistration
            ? [eventRegistration]
            : this.eventRegistrations_;
        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);
    };
    return View;
}());
exports.View = View;

//# sourceMappingURL=View.js.map


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Operation_1 = __webpack_require__(10);
var util_1 = __webpack_require__(0);
var ChildChangeAccumulator_1 = __webpack_require__(125);
var Change_1 = __webpack_require__(12);
var ChildrenNode_1 = __webpack_require__(4);
var KeyIndex_1 = __webpack_require__(14);
var ImmutableTree_1 = __webpack_require__(32);
var Path_1 = __webpack_require__(2);
var CompleteChildSource_1 = __webpack_require__(126);
/**
 * @constructor
 * @struct
 */
var ProcessorResult = /** @class */ (function () {
    /**
     * @param {!ViewCache} viewCache
     * @param {!Array.<!Change>} changes
     */
    function ProcessorResult(viewCache, changes) {
        this.viewCache = viewCache;
        this.changes = changes;
    }
    return ProcessorResult;
}());
exports.ProcessorResult = ProcessorResult;
/**
 * @constructor
 */
var ViewProcessor = /** @class */ (function () {
    /**
     * @param {!NodeFilter} filter_
     */
    function ViewProcessor(filter_) {
        this.filter_ = filter_;
    }
    /**
     * @param {!ViewCache} viewCache
     */
    ViewProcessor.prototype.assertIndexed = function (viewCache) {
        util_1.assert(viewCache
            .getEventCache()
            .getNode()
            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');
        util_1.assert(viewCache
            .getServerCache()
            .getNode()
            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');
    };
    /**
     * @param {!ViewCache} oldViewCache
     * @param {!Operation} operation
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @return {!ProcessorResult}
     */
    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {
        var accumulator = new ChildChangeAccumulator_1.ChildChangeAccumulator();
        var newViewCache, filterServerNode;
        if (operation.type === Operation_1.OperationType.OVERWRITE) {
            var overwrite = operation;
            if (overwrite.source.fromUser) {
                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
            }
            else {
                util_1.assert(overwrite.source.fromServer, 'Unknown source.');
                // We filter the node if it's a tagged update or the node has been previously filtered  and the
                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
                // again
                filterServerNode =
                    overwrite.source.tagged ||
                        (oldViewCache.getServerCache().isFiltered() &&
                            !overwrite.path.isEmpty());
                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
            }
        }
        else if (operation.type === Operation_1.OperationType.MERGE) {
            var merge = operation;
            if (merge.source.fromUser) {
                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
            }
            else {
                util_1.assert(merge.source.fromServer, 'Unknown source.');
                // We filter the node if it's a tagged update or the node has been previously filtered
                filterServerNode =
                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();
                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
            }
        }
        else if (operation.type === Operation_1.OperationType.ACK_USER_WRITE) {
            var ackUserWrite = operation;
            if (!ackUserWrite.revert) {
                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
            }
            else {
                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
            }
        }
        else if (operation.type === Operation_1.OperationType.LISTEN_COMPLETE) {
            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);
        }
        else {
            throw util_1.assertionError('Unknown operation type: ' + operation.type);
        }
        var changes = accumulator.getChanges();
        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);
        return new ProcessorResult(newViewCache, changes);
    };
    /**
     * @param {!ViewCache} oldViewCache
     * @param {!ViewCache} newViewCache
     * @param {!Array.<!Change>} accumulator
     * @private
     */
    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {
        var eventSnap = newViewCache.getEventCache();
        if (eventSnap.isFullyInitialized()) {
            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();
            if (accumulator.length > 0 ||
                !oldViewCache.getEventCache().isFullyInitialized() ||
                (isLeafOrEmpty &&
                    !eventSnap
                        .getNode()
                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||
                !eventSnap
                    .getNode()
                    .getPriority()
                    .equals(oldCompleteSnap.getPriority())) {
                accumulator.push(Change_1.Change.valueChange(
                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));
            }
        }
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {!Path} changePath
     * @param {!WriteTreeRef} writesCache
     * @param {!CompleteChildSource} source
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {
        var oldEventSnap = viewCache.getEventCache();
        if (writesCache.shadowingWrite(changePath) != null) {
            // we have a shadowing write, ignore changes
            return viewCache;
        }
        else {
            var newEventCache = void 0, serverNode = void 0;
            if (changePath.isEmpty()) {
                // TODO: figure out how this plays with "sliding ack windows"
                util_1.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');
                if (viewCache.getServerCache().isFiltered()) {
                    // We need to special case this, because we need to only apply writes to complete children, or
                    // we might end up raising events for incomplete children. If the server data is filtered deep
                    // writes cannot be guaranteed to be complete
                    var serverCache = viewCache.getCompleteServerSnap();
                    var completeChildren = serverCache instanceof ChildrenNode_1.ChildrenNode
                        ? serverCache
                        : ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);
                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);
                }
                else {
                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);
                }
            }
            else {
                var childKey = changePath.getFront();
                if (childKey == '.priority') {
                    util_1.assert(changePath.getLength() == 1, "Can't have a priority with additional path components");
                    var oldEventNode = oldEventSnap.getNode();
                    serverNode = viewCache.getServerCache().getNode();
                    // we might have overwrites for this priority
                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);
                    if (updatedPriority != null) {
                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);
                    }
                    else {
                        // priority didn't change, keep old node
                        newEventCache = oldEventSnap.getNode();
                    }
                }
                else {
                    var childChangePath = changePath.popFront();
                    // update child
                    var newEventChild = void 0;
                    if (oldEventSnap.isCompleteForChild(childKey)) {
                        serverNode = viewCache.getServerCache().getNode();
                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);
                        if (eventChildUpdate != null) {
                            newEventChild = oldEventSnap
                                .getNode()
                                .getImmediateChild(childKey)
                                .updateChild(childChangePath, eventChildUpdate);
                        }
                        else {
                            // Nothing changed, just keep the old child
                            newEventChild = oldEventSnap
                                .getNode()
                                .getImmediateChild(childKey);
                        }
                    }
                    else {
                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                    }
                    if (newEventChild != null) {
                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                    }
                    else {
                        // no complete child available or no change
                        newEventCache = oldEventSnap.getNode();
                    }
                }
            }
            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());
        }
    };
    /**
     * @param {!ViewCache} oldViewCache
     * @param {!Path} changePath
     * @param {!Node} changedSnap
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @param {boolean} filterServerNode
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
        var oldServerSnap = oldViewCache.getServerCache();
        var newServerCache;
        var serverFilter = filterServerNode
            ? this.filter_
            : this.filter_.getIndexedFilter();
        if (changePath.isEmpty()) {
            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
        }
        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
            var newServerNode = oldServerSnap
                .getNode()
                .updateChild(changePath, changedSnap);
            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
        }
        else {
            var childKey = changePath.getFront();
            if (!oldServerSnap.isCompleteForPath(changePath) &&
                changePath.getLength() > 1) {
                // We don't update incomplete nodes with updates intended for other listeners
                return oldViewCache;
            }
            var childChangePath = changePath.popFront();
            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
            var newChildNode = childNode.updateChild(childChangePath, changedSnap);
            if (childKey == '.priority') {
                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
            }
            else {
                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, CompleteChildSource_1.NO_COMPLETE_CHILD_SOURCE, null);
            }
        }
        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());
        var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);
    };
    /**
     * @param {!ViewCache} oldViewCache
     * @param {!Path} changePath
     * @param {!Node} changedSnap
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
        var oldEventSnap = oldViewCache.getEventCache();
        var newViewCache, newEventCache;
        var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
        if (changePath.isEmpty()) {
            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);
            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());
        }
        else {
            var childKey = changePath.getFront();
            if (childKey === '.priority') {
                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);
                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
            }
            else {
                var childChangePath = changePath.popFront();
                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
                var newChild = void 0;
                if (childChangePath.isEmpty()) {
                    // Child overwrite, we can replace the child
                    newChild = changedSnap;
                }
                else {
                    var childNode = source.getCompleteChild(childKey);
                    if (childNode != null) {
                        if (childChangePath.getBack() === '.priority' &&
                            childNode.getChild(childChangePath.parent()).isEmpty()) {
                            // This is a priority update on an empty node. If this node exists on the server, the
                            // server will send down the priority in the update, so ignore for now
                            newChild = childNode;
                        }
                        else {
                            newChild = childNode.updateChild(childChangePath, changedSnap);
                        }
                    }
                    else {
                        // There is no complete child node available
                        newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                    }
                }
                if (!oldChild.equals(newChild)) {
                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());
                }
                else {
                    newViewCache = oldViewCache;
                }
            }
        }
        return newViewCache;
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {string} childKey
     * @return {boolean}
     * @private
     */
    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {
        return viewCache.getEventCache().isCompleteForChild(childKey);
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {ImmutableTree.<!Node>} changedChildren
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} serverCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
        var _this = this;
        // HACK: In the case of a limit query, there may be some changes that bump things out of the
        // window leaving room for new items.  It's important we process these changes first, so we
        // iterate the changes twice, first processing any that affect items currently in view.
        // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
        // not the other.
        var curViewCache = viewCache;
        changedChildren.foreach(function (relativePath, childNode) {
            var writePath = path.child(relativePath);
            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
            }
        });
        changedChildren.foreach(function (relativePath, childNode) {
            var writePath = path.child(relativePath);
            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
            }
        });
        return curViewCache;
    };
    /**
     * @param {!Node} node
     * @param {ImmutableTree.<!Node>} merge
     * @return {!Node}
     * @private
     */
    ViewProcessor.prototype.applyMerge_ = function (node, merge) {
        merge.foreach(function (relativePath, childNode) {
            node = node.updateChild(relativePath, childNode);
        });
        return node;
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {!ImmutableTree.<!Node>} changedChildren
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} serverCache
     * @param {boolean} filterServerNode
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
        var _this = this;
        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
        // wait for the complete data update coming soon.
        if (viewCache
            .getServerCache()
            .getNode()
            .isEmpty() &&
            !viewCache.getServerCache().isFullyInitialized()) {
            return viewCache;
        }
        // HACK: In the case of a limit query, there may be some changes that bump things out of the
        // window leaving room for new items.  It's important we process these changes first, so we
        // iterate the changes twice, first processing any that affect items currently in view.
        // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
        // not the other.
        var curViewCache = viewCache;
        var viewMergeTree;
        if (path.isEmpty()) {
            viewMergeTree = changedChildren;
        }
        else {
            viewMergeTree = ImmutableTree_1.ImmutableTree.Empty.setTree(path, changedChildren);
        }
        var serverNode = viewCache.getServerCache().getNode();
        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {
            if (serverNode.hasChild(childKey)) {
                var serverChild = viewCache
                    .getServerCache()
                    .getNode()
                    .getImmediateChild(childKey);
                var newChild = _this.applyMerge_(serverChild, childTree);
                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path_1.Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
            }
        });
        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {
            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&
                childMergeTree.value == null;
            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
                var serverChild = viewCache
                    .getServerCache()
                    .getNode()
                    .getImmediateChild(childKey);
                var newChild = _this.applyMerge_(serverChild, childMergeTree);
                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path_1.Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
            }
        });
        return curViewCache;
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {!Path} ackPath
     * @param {!ImmutableTree<!boolean>} affectedTree
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
        if (writesCache.shadowingWrite(ackPath) != null) {
            return viewCache;
        }
        // Only filter server node if it is currently filtered
        var filterServerNode = viewCache.getServerCache().isFiltered();
        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
        // now that it won't be shadowed.
        var serverCache = viewCache.getServerCache();
        if (affectedTree.value != null) {
            // This is an overwrite.
            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||
                serverCache.isCompleteForPath(ackPath)) {
                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
            }
            else if (ackPath.isEmpty()) {
                // This is a goofy edge case where we are acking data at this location but don't have full data.  We
                // should just re-apply whatever we have in our cache as a merge.
                var changedChildren_1 = ImmutableTree_1.ImmutableTree.Empty;
                serverCache.getNode().forEachChild(KeyIndex_1.KEY_INDEX, function (name, node) {
                    changedChildren_1 = changedChildren_1.set(new Path_1.Path(name), node);
                });
                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
            }
            else {
                return viewCache;
            }
        }
        else {
            // This is a merge.
            var changedChildren_2 = ImmutableTree_1.ImmutableTree.Empty;
            affectedTree.foreach(function (mergePath, value) {
                var serverCachePath = ackPath.child(mergePath);
                if (serverCache.isCompleteForPath(serverCachePath)) {
                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
                }
            });
            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
        }
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {!WriteTreeRef} writesCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {
        var oldServerNode = viewCache.getServerCache();
        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());
        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, CompleteChildSource_1.NO_COMPLETE_CHILD_SOURCE, accumulator);
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeServerCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {
        var complete;
        if (writesCache.shadowingWrite(path) != null) {
            return viewCache;
        }
        else {
            var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
            var oldEventCache = viewCache.getEventCache().getNode();
            var newEventCache = void 0;
            if (path.isEmpty() || path.getFront() === '.priority') {
                var newNode = void 0;
                if (viewCache.getServerCache().isFullyInitialized()) {
                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                }
                else {
                    var serverChildren = viewCache.getServerCache().getNode();
                    util_1.assert(serverChildren instanceof ChildrenNode_1.ChildrenNode, 'serverChildren would be complete if leaf node');
                    newNode = writesCache.calcCompleteEventChildren(serverChildren);
                }
                newNode = newNode;
                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);
            }
            else {
                var childKey = path.getFront();
                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                if (newChild == null &&
                    viewCache.getServerCache().isCompleteForChild(childKey)) {
                    newChild = oldEventCache.getImmediateChild(childKey);
                }
                if (newChild != null) {
                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);
                }
                else if (viewCache
                    .getEventCache()
                    .getNode()
                    .hasChild(childKey)) {
                    // No complete child available, delete the existing one, if any
                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode_1.ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);
                }
                else {
                    newEventCache = oldEventCache;
                }
                if (newEventCache.isEmpty() &&
                    viewCache.getServerCache().isFullyInitialized()) {
                    // We might have reverted all child writes. Maybe the old event was a leaf node
                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                    if (complete.isLeafNode()) {
                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);
                    }
                }
            }
            complete =
                viewCache.getServerCache().isFullyInitialized() ||
                    writesCache.shadowingWrite(Path_1.Path.Empty) != null;
            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());
        }
    };
    return ViewProcessor;
}());
exports.ViewProcessor = ViewProcessor;

//# sourceMappingURL=ViewProcessor.js.map


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var Change_1 = __webpack_require__(12);
var util_2 = __webpack_require__(0);
/**
 * @constructor
 */
var ChildChangeAccumulator = /** @class */ (function () {
    function ChildChangeAccumulator() {
        this.changeMap_ = {};
    }
    /**
     * @param {!Change} change
     */
    ChildChangeAccumulator.prototype.trackChildChange = function (change) {
        var type = change.type;
        var childKey /** @type {!string} */ = change.childName;
        util_2.assert(type == Change_1.Change.CHILD_ADDED ||
            type == Change_1.Change.CHILD_CHANGED ||
            type == Change_1.Change.CHILD_REMOVED, 'Only child changes supported for tracking');
        util_2.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
        var oldChange = util_1.safeGet(this.changeMap_, childKey);
        if (oldChange) {
            var oldType = oldChange.type;
            if (type == Change_1.Change.CHILD_ADDED && oldType == Change_1.Change.CHILD_REMOVED) {
                this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);
            }
            else if (type == Change_1.Change.CHILD_REMOVED &&
                oldType == Change_1.Change.CHILD_ADDED) {
                delete this.changeMap_[childKey];
            }
            else if (type == Change_1.Change.CHILD_REMOVED &&
                oldType == Change_1.Change.CHILD_CHANGED) {
                this.changeMap_[childKey] = Change_1.Change.childRemovedChange(childKey, oldChange.oldSnap);
            }
            else if (type == Change_1.Change.CHILD_CHANGED &&
                oldType == Change_1.Change.CHILD_ADDED) {
                this.changeMap_[childKey] = Change_1.Change.childAddedChange(childKey, change.snapshotNode);
            }
            else if (type == Change_1.Change.CHILD_CHANGED &&
                oldType == Change_1.Change.CHILD_CHANGED) {
                this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);
            }
            else {
                throw util_2.assertionError('Illegal combination of changes: ' +
                    change +
                    ' occurred after ' +
                    oldChange);
            }
        }
        else {
            this.changeMap_[childKey] = change;
        }
    };
    /**
     * @return {!Array.<!Change>}
     */
    ChildChangeAccumulator.prototype.getChanges = function () {
        return util_1.getValues(this.changeMap_);
    };
    return ChildChangeAccumulator;
}());
exports.ChildChangeAccumulator = ChildChangeAccumulator;

//# sourceMappingURL=ChildChangeAccumulator.js.map


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CacheNode_1 = __webpack_require__(24);
/**
 * An implementation of CompleteChildSource that never returns any additional children
 *
 * @private
 * @constructor
 * @implements CompleteChildSource
 */
var NoCompleteChildSource_ = /** @class */ (function () {
    function NoCompleteChildSource_() {
    }
    /**
     * @inheritDoc
     */
    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {
        return null;
    };
    /**
     * @inheritDoc
     */
    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {
        return null;
    };
    return NoCompleteChildSource_;
}());
exports.NoCompleteChildSource_ = NoCompleteChildSource_;
/**
 * Singleton instance.
 * @const
 * @type {!CompleteChildSource}
 */
exports.NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
/**
 * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
 * old event caches available to calculate complete children.
 *
 *
 * @implements CompleteChildSource
 */
var WriteTreeCompleteChildSource = /** @class */ (function () {
    /**
     * @param {!WriteTreeRef} writes_
     * @param {!ViewCache} viewCache_
     * @param {?Node} optCompleteServerCache_
     */
    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {
        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }
        this.writes_ = writes_;
        this.viewCache_ = viewCache_;
        this.optCompleteServerCache_ = optCompleteServerCache_;
    }
    /**
     * @inheritDoc
     */
    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {
        var node = this.viewCache_.getEventCache();
        if (node.isCompleteForChild(childKey)) {
            return node.getNode().getImmediateChild(childKey);
        }
        else {
            var serverNode = this.optCompleteServerCache_ != null
                ? new CacheNode_1.CacheNode(this.optCompleteServerCache_, true, false)
                : this.viewCache_.getServerCache();
            return this.writes_.calcCompleteChild(childKey, serverNode);
        }
    };
    /**
     * @inheritDoc
     */
    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {
        var completeServerData = this.optCompleteServerCache_ != null
            ? this.optCompleteServerCache_
            : this.viewCache_.getCompleteServerSnap();
        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);
        if (nodes.length === 0) {
            return null;
        }
        else {
            return nodes[0];
        }
    };
    return WriteTreeCompleteChildSource;
}());
exports.WriteTreeCompleteChildSource = WriteTreeCompleteChildSource;

//# sourceMappingURL=CompleteChildSource.js.map


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Node_1 = __webpack_require__(5);
var Change_1 = __webpack_require__(12);
var util_1 = __webpack_require__(0);
/**
 * An EventGenerator is used to convert "raw" changes (Change) as computed by the
 * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
 * for details.
 *
 * @constructor
 */
var EventGenerator = /** @class */ (function () {
    /**
     *
     * @param {!Query} query_
     */
    function EventGenerator(query_) {
        this.query_ = query_;
        /**
         * @private
         * @type {!Index}
         */
        this.index_ = this.query_.getQueryParams().getIndex();
    }
    /**
     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
     *
     * Notes:
     *  - child_moved events will be synthesized at this time for any child_changed events that affect
     *    our index.
     *  - prevName will be calculated based on the index ordering.
     *
     * @param {!Array.<!Change>} changes
     * @param {!Node} eventCache
     * @param {!Array.<!EventRegistration>} eventRegistrations
     * @return {!Array.<!Event>}
     */
    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {
        var _this = this;
        var events = [];
        var moves = [];
        changes.forEach(function (change) {
            if (change.type === Change_1.Change.CHILD_CHANGED &&
                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
                moves.push(Change_1.Change.childMovedChange(change.childName, change.snapshotNode));
            }
        });
        this.generateEventsForType_(events, Change_1.Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);
        this.generateEventsForType_(events, Change_1.Change.CHILD_ADDED, changes, eventRegistrations, eventCache);
        this.generateEventsForType_(events, Change_1.Change.CHILD_MOVED, moves, eventRegistrations, eventCache);
        this.generateEventsForType_(events, Change_1.Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);
        this.generateEventsForType_(events, Change_1.Change.VALUE, changes, eventRegistrations, eventCache);
        return events;
    };
    /**
     * Given changes of a single change type, generate the corresponding events.
     *
     * @param {!Array.<!Event>} events
     * @param {!string} eventType
     * @param {!Array.<!Change>} changes
     * @param {!Array.<!EventRegistration>} registrations
     * @param {!Node} eventCache
     * @private
     */
    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {
        var _this = this;
        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });
        filteredChanges.sort(this.compareChanges_.bind(this));
        filteredChanges.forEach(function (change) {
            var materializedChange = _this.materializeSingleChange_(change, eventCache);
            registrations.forEach(function (registration) {
                if (registration.respondsTo(change.type)) {
                    events.push(registration.createEvent(materializedChange, _this.query_));
                }
            });
        });
    };
    /**
     * @param {!Change} change
     * @param {!Node} eventCache
     * @return {!Change}
     * @private
     */
    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {
        if (change.type === 'value' || change.type === 'child_removed') {
            return change;
        }
        else {
            change.prevName = eventCache.getPredecessorChildName(
            /** @type {!string} */
            change.childName, change.snapshotNode, this.index_);
            return change;
        }
    };
    /**
     * @param {!Change} a
     * @param {!Change} b
     * @return {number}
     * @private
     */
    EventGenerator.prototype.compareChanges_ = function (a, b) {
        if (a.childName == null || b.childName == null) {
            throw util_1.assertionError('Should only compare child_ events.');
        }
        var aWrapped = new Node_1.NamedNode(a.childName, a.snapshotNode);
        var bWrapped = new Node_1.NamedNode(b.childName, b.snapshotNode);
        return this.index_.compare(aWrapped, bWrapped);
    };
    return EventGenerator;
}());
exports.EventGenerator = EventGenerator;

//# sourceMappingURL=EventGenerator.js.map


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(0);
var Path_1 = __webpack_require__(2);
var CompoundWrite_1 = __webpack_require__(129);
var PriorityIndex_1 = __webpack_require__(3);
var ChildrenNode_1 = __webpack_require__(4);
/**
 * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them
 * with underlying server data (to create "event cache" data).  Pending writes are added with addOverwrite()
 * and addMerge(), and removed with removeWrite().
 *
 * @constructor
 */
var WriteTree = /** @class */ (function () {
    function WriteTree() {
        /**
         * A tree tracking the result of applying all visible writes.  This does not include transactions with
         * applyLocally=false or writes that are completely shadowed by other writes.
         *
         * @type {!CompoundWrite}
         * @private
         */
        this.visibleWrites_ = CompoundWrite_1.CompoundWrite.Empty;
        /**
         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary
         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also
         * used by transactions).
         *
         * @type {!Array.<!WriteRecord>}
         * @private
         */
        this.allWrites_ = [];
        this.lastWriteId_ = -1;
    }
    /**
     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
     *
     * @param {!Path} path
     * @return {!WriteTreeRef}
     */
    WriteTree.prototype.childWrites = function (path) {
        return new WriteTreeRef(path, this);
    };
    /**
     * Record a new overwrite from user code.
     *
     * @param {!Path} path
     * @param {!Node} snap
     * @param {!number} writeId
     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches
     */
    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {
        util_2.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');
        if (visible === undefined) {
            visible = true;
        }
        this.allWrites_.push({
            path: path,
            snap: snap,
            writeId: writeId,
            visible: visible
        });
        if (visible) {
            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);
        }
        this.lastWriteId_ = writeId;
    };
    /**
     * Record a new merge from user code.
     *
     * @param {!Path} path
     * @param {!Object.<string, !Node>} changedChildren
     * @param {!number} writeId
     */
    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {
        util_2.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');
        this.allWrites_.push({
            path: path,
            children: changedChildren,
            writeId: writeId,
            visible: true
        });
        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);
        this.lastWriteId_ = writeId;
    };
    /**
     * @param {!number} writeId
     * @return {?WriteRecord}
     */
    WriteTree.prototype.getWrite = function (writeId) {
        for (var i = 0; i < this.allWrites_.length; i++) {
            var record = this.allWrites_[i];
            if (record.writeId === writeId) {
                return record;
            }
        }
        return null;
    };
    /**
     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
     *
     * @param {!number} writeId
     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise
     * events as a result).
     */
    WriteTree.prototype.removeWrite = function (writeId) {
        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
        // out of order.
        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
        //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
        var _this = this;
        var idx = this.allWrites_.findIndex(function (s) {
            return s.writeId === writeId;
        });
        util_2.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');
        var writeToRemove = this.allWrites_[idx];
        this.allWrites_.splice(idx, 1);
        var removedWriteWasVisible = writeToRemove.visible;
        var removedWriteOverlapsWithOtherWrites = false;
        var i = this.allWrites_.length - 1;
        while (removedWriteWasVisible && i >= 0) {
            var currentWrite = this.allWrites_[i];
            if (currentWrite.visible) {
                if (i >= idx &&
                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {
                    // The removed write was completely shadowed by a subsequent write.
                    removedWriteWasVisible = false;
                }
                else if (writeToRemove.path.contains(currentWrite.path)) {
                    // Either we're covering some writes or they're covering part of us (depending on which came first).
                    removedWriteOverlapsWithOtherWrites = true;
                }
            }
            i--;
        }
        if (!removedWriteWasVisible) {
            return false;
        }
        else if (removedWriteOverlapsWithOtherWrites) {
            // There's some shadowing going on. Just rebuild the visible writes from scratch.
            this.resetTree_();
            return true;
        }
        else {
            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
            if (writeToRemove.snap) {
                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);
            }
            else {
                var children = writeToRemove.children;
                util_1.forEach(children, function (childName) {
                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));
                });
            }
            return true;
        }
    };
    /**
     * Return a complete snapshot for the given path if there's visible write data at that path, else null.
     * No server data is considered.
     *
     * @param {!Path} path
     * @return {?Node}
     */
    WriteTree.prototype.getCompleteWriteData = function (path) {
        return this.visibleWrites_.getCompleteNode(path);
    };
    /**
     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
     * writes), attempt to calculate a complete snapshot for the given path
     *
     * @param {!Path} treePath
     * @param {?Node} completeServerCache
     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded
     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
     * @return {?Node}
     */
    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
        if (!writeIdsToExclude && !includeHiddenWrites) {
            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);
            if (shadowingNode != null) {
                return shadowingNode;
            }
            else {
                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);
                if (subMerge.isEmpty()) {
                    return completeServerCache;
                }
                else if (completeServerCache == null &&
                    !subMerge.hasCompleteWrite(Path_1.Path.Empty)) {
                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
                    return null;
                }
                else {
                    var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                    return subMerge.apply(layeredCache);
                }
            }
        }
        else {
            var merge = this.visibleWrites_.childCompoundWrite(treePath);
            if (!includeHiddenWrites && merge.isEmpty()) {
                return completeServerCache;
            }
            else {
                // If the server cache is null, and we don't have a complete cache, we need to return null
                if (!includeHiddenWrites &&
                    completeServerCache == null &&
                    !merge.hasCompleteWrite(Path_1.Path.Empty)) {
                    return null;
                }
                else {
                    var filter = function (write) {
                        return ((write.visible || includeHiddenWrites) &&
                            (!writeIdsToExclude ||
                                !~writeIdsToExclude.indexOf(write.writeId)) &&
                            (write.path.contains(treePath) || treePath.contains(write.path)));
                    };
                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);
                    var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                    return mergeAtPath.apply(layeredCache);
                }
            }
        }
    };
    /**
     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
     * Used when creating new views, to pre-fill their complete event children snapshot.
     *
     * @param {!Path} treePath
     * @param {?ChildrenNode} completeServerChildren
     * @return {!ChildrenNode}
     */
    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {
        var completeChildren = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);
        if (topLevelSet) {
            if (!topLevelSet.isLeafNode()) {
                // we're shadowing everything. Return the children.
                topLevelSet.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childSnap) {
                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
                });
            }
            return completeChildren;
        }
        else if (completeServerChildren) {
            // Layer any children we have on top of this
            // We know we don't have a top-level set, so just enumerate existing children
            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);
            completeServerChildren.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {
                var node = merge_1
                    .childCompoundWrite(new Path_1.Path(childName))
                    .apply(childNode);
                completeChildren = completeChildren.updateImmediateChild(childName, node);
            });
            // Add any complete children we have from the set
            merge_1.getCompleteChildren().forEach(function (namedNode) {
                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
            });
            return completeChildren;
        }
        else {
            // We don't have anything to layer on top of. Layer on any children we have
            // Note that we can return an empty snap if we have a defined delete
            var merge = this.visibleWrites_.childCompoundWrite(treePath);
            merge.getCompleteChildren().forEach(function (namedNode) {
                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
            });
            return completeChildren;
        }
    };
    /**
     * Given that the underlying server data has updated, determine what, if anything, needs to be
     * applied to the event cache.
     *
     * Possibilities:
     *
     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
     *
     * 2. Some write is completely shadowing. No events to be raised
     *
     * 3. Is partially shadowed. Events
     *
     * Either existingEventSnap or existingServerSnap must exist
     *
     * @param {!Path} treePath
     * @param {!Path} childPath
     * @param {?Node} existingEventSnap
     * @param {?Node} existingServerSnap
     * @return {?Node}
     */
    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {
        util_2.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
        var path = treePath.child(childPath);
        if (this.visibleWrites_.hasCompleteWrite(path)) {
            // At this point we can probably guarantee that we're in case 2, meaning no events
            // May need to check visibility while doing the findRootMostValueAndPath call
            return null;
        }
        else {
            // No complete shadowing. We're either partially shadowing or not shadowing at all.
            var childMerge = this.visibleWrites_.childCompoundWrite(path);
            if (childMerge.isEmpty()) {
                // We're not shadowing at all. Case 1
                return existingServerSnap.getChild(childPath);
            }
            else {
                // This could be more efficient if the serverNode + updates doesn't change the eventSnap
                // However this is tricky to find out, since user updates don't necessary change the server
                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
                // adds nodes, but doesn't change any existing writes. It is therefore not enough to
                // only check if the updates change the serverNode.
                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
                return childMerge.apply(existingServerSnap.getChild(childPath));
            }
        }
    };
    /**
     * Returns a complete child for a given server snap after applying all user writes or null if there is no
     * complete child for this ChildKey.
     *
     * @param {!Path} treePath
     * @param {!string} childKey
     * @param {!CacheNode} existingServerSnap
     * @return {?Node}
     */
    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {
        var path = treePath.child(childKey);
        var shadowingNode = this.visibleWrites_.getCompleteNode(path);
        if (shadowingNode != null) {
            return shadowingNode;
        }
        else {
            if (existingServerSnap.isCompleteForChild(childKey)) {
                var childMerge = this.visibleWrites_.childCompoundWrite(path);
                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));
            }
            else {
                return null;
            }
        }
    };
    /**
     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
     * a higher path, this will return the child of that write relative to the write and this path.
     * Returns null if there is no write at this path.
     *
     * @param {!Path} path
     * @return {?Node}
     */
    WriteTree.prototype.shadowingWrite = function (path) {
        return this.visibleWrites_.getCompleteNode(path);
    };
    /**
     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
     * the window, but may now be in the window.
     *
     * @param {!Path} treePath
     * @param {?Node} completeServerData
     * @param {!NamedNode} startPost
     * @param {!number} count
     * @param {boolean} reverse
     * @param {!Index} index
     * @return {!Array.<!NamedNode>}
     */
    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {
        var toIterate;
        var merge = this.visibleWrites_.childCompoundWrite(treePath);
        var shadowingNode = merge.getCompleteNode(Path_1.Path.Empty);
        if (shadowingNode != null) {
            toIterate = shadowingNode;
        }
        else if (completeServerData != null) {
            toIterate = merge.apply(completeServerData);
        }
        else {
            // no children to iterate on
            return [];
        }
        toIterate = toIterate.withIndex(index);
        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
            var nodes = [];
            var cmp = index.getCompare();
            var iter = reverse
                ? toIterate.getReverseIteratorFrom(startPost, index)
                : toIterate.getIteratorFrom(startPost, index);
            var next = iter.getNext();
            while (next && nodes.length < count) {
                if (cmp(next, startPost) !== 0) {
                    nodes.push(next);
                }
                next = iter.getNext();
            }
            return nodes;
        }
        else {
            return [];
        }
    };
    /**
     * @param {!WriteRecord} writeRecord
     * @param {!Path} path
     * @return {boolean}
     * @private
     */
    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {
        if (writeRecord.snap) {
            return writeRecord.path.contains(path);
        }
        else {
            // findKey can return undefined, so use !! to coerce to boolean
            return !!util_1.findKey(writeRecord.children, function (childSnap, childName) {
                return writeRecord.path.child(childName).contains(path);
            });
        }
    };
    /**
     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
     * @private
     */
    WriteTree.prototype.resetTree_ = function () {
        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path_1.Path.Empty);
        if (this.allWrites_.length > 0) {
            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;
        }
        else {
            this.lastWriteId_ = -1;
        }
    };
    /**
     * The default filter used when constructing the tree. Keep everything that's visible.
     *
     * @param {!WriteRecord} write
     * @return {boolean}
     * @private
     */
    WriteTree.DefaultFilter_ = function (write) {
        return write.visible;
    };
    /**
     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
     * event data at that path.
     *
     * @param {!Array.<!WriteRecord>} writes
     * @param {!function(!WriteRecord):boolean} filter
     * @param {!Path} treeRoot
     * @return {!CompoundWrite}
     * @private
     */
    WriteTree.layerTree_ = function (writes, filter, treeRoot) {
        var compoundWrite = CompoundWrite_1.CompoundWrite.Empty;
        for (var i = 0; i < writes.length; ++i) {
            var write = writes[i];
            // Theory, a later set will either:
            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
            if (filter(write)) {
                var writePath = write.path;
                var relativePath = void 0;
                if (write.snap) {
                    if (treeRoot.contains(writePath)) {
                        relativePath = Path_1.Path.relativePath(treeRoot, writePath);
                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);
                    }
                    else if (writePath.contains(treeRoot)) {
                        relativePath = Path_1.Path.relativePath(writePath, treeRoot);
                        compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, write.snap.getChild(relativePath));
                    }
                    else {
                        // There is no overlap between root path and write path, ignore write
                    }
                }
                else if (write.children) {
                    if (treeRoot.contains(writePath)) {
                        relativePath = Path_1.Path.relativePath(treeRoot, writePath);
                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);
                    }
                    else if (writePath.contains(treeRoot)) {
                        relativePath = Path_1.Path.relativePath(writePath, treeRoot);
                        if (relativePath.isEmpty()) {
                            compoundWrite = compoundWrite.addWrites(Path_1.Path.Empty, write.children);
                        }
                        else {
                            var child = util_1.safeGet(write.children, relativePath.getFront());
                            if (child) {
                                // There exists a child in this node that matches the root path
                                var deepNode = child.getChild(relativePath.popFront());
                                compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, deepNode);
                            }
                        }
                    }
                    else {
                        // There is no overlap between root path and write path, ignore write
                    }
                }
                else {
                    throw util_2.assertionError('WriteRecord should have .snap or .children');
                }
            }
        }
        return compoundWrite;
    };
    return WriteTree;
}());
exports.WriteTree = WriteTree;
/**
 * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods
 * just proxy to the underlying WriteTree.
 *
 * @constructor
 */
var WriteTreeRef = /** @class */ (function () {
    /**
     * @param {!Path} path
     * @param {!WriteTree} writeTree
     */
    function WriteTreeRef(path, writeTree) {
        this.treePath_ = path;
        this.writeTree_ = writeTree;
    }
    /**
     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
     * can lead to a more expensive calculation.
     *
     * @param {?Node} completeServerCache
     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.
     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
     * @return {?Node}
     */
    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {
        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);
    };
    /**
     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
     * mix of the given server data and write data.
     *
     * @param {?ChildrenNode} completeServerChildren
     * @return {!ChildrenNode}
     */
    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {
        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);
    };
    /**
     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
     * if anything, needs to be applied to the event cache.
     *
     * Possibilities:
     *
     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
     *
     * 2. Some write is completely shadowing. No events to be raised
     *
     * 3. Is partially shadowed. Events should be raised
     *
     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
     *
     * @param {!Path} path
     * @param {?Node} existingEventSnap
     * @param {?Node} existingServerSnap
     * @return {?Node}
     */
    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {
        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);
    };
    /**
     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
     * a higher path, this will return the child of that write relative to the write and this path.
     * Returns null if there is no write at this path.
     *
     * @param {!Path} path
     * @return {?Node}
     */
    WriteTreeRef.prototype.shadowingWrite = function (path) {
        return this.writeTree_.shadowingWrite(this.treePath_.child(path));
    };
    /**
     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
     * the window, but may now be in the window
     *
     * @param {?Node} completeServerData
     * @param {!NamedNode} startPost
     * @param {!number} count
     * @param {boolean} reverse
     * @param {!Index} index
     * @return {!Array.<!NamedNode>}
     */
    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {
        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);
    };
    /**
     * Returns a complete child for a given server snap after applying all user writes or null if there is no
     * complete child for this ChildKey.
     *
     * @param {!string} childKey
     * @param {!CacheNode} existingServerCache
     * @return {?Node}
     */
    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {
        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);
    };
    /**
     * Return a WriteTreeRef for a child.
     *
     * @param {string} childName
     * @return {!WriteTreeRef}
     */
    WriteTreeRef.prototype.child = function (childName) {
        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);
    };
    return WriteTreeRef;
}());
exports.WriteTreeRef = WriteTreeRef;

//# sourceMappingURL=WriteTree.js.map


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ImmutableTree_1 = __webpack_require__(32);
var Path_1 = __webpack_require__(2);
var util_1 = __webpack_require__(0);
var Node_1 = __webpack_require__(5);
var PriorityIndex_1 = __webpack_require__(3);
var util_2 = __webpack_require__(0);
/**
 * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
 * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
 * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
 * to reflect the write added.
 *
 * @constructor
 * @param {!ImmutableTree.<!Node>} writeTree
 */
var CompoundWrite = /** @class */ (function () {
    function CompoundWrite(writeTree_) {
        this.writeTree_ = writeTree_;
    }
    /**
     * @param {!Path} path
     * @param {!Node} node
     * @return {!CompoundWrite}
     */
    CompoundWrite.prototype.addWrite = function (path, node) {
        if (path.isEmpty()) {
            return new CompoundWrite(new ImmutableTree_1.ImmutableTree(node));
        }
        else {
            var rootmost = this.writeTree_.findRootMostValueAndPath(path);
            if (rootmost != null) {
                var rootMostPath = rootmost.path;
                var value = rootmost.value;
                var relativePath = Path_1.Path.relativePath(rootMostPath, path);
                value = value.updateChild(relativePath, node);
                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));
            }
            else {
                var subtree = new ImmutableTree_1.ImmutableTree(node);
                var newWriteTree = this.writeTree_.setTree(path, subtree);
                return new CompoundWrite(newWriteTree);
            }
        }
    };
    /**
     * @param {!Path} path
     * @param {!Object.<string, !Node>} updates
     * @return {!CompoundWrite}
     */
    CompoundWrite.prototype.addWrites = function (path, updates) {
        var newWrite = this;
        util_1.forEach(updates, function (childKey, node) {
            newWrite = newWrite.addWrite(path.child(childKey), node);
        });
        return newWrite;
    };
    /**
     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
     * location, which must be removed by calling this method with that path.
     *
     * @param {!Path} path The path at which a write and all deeper writes should be removed
     * @return {!CompoundWrite} The new CompoundWrite with the removed path
     */
    CompoundWrite.prototype.removeWrite = function (path) {
        if (path.isEmpty()) {
            return CompoundWrite.Empty;
        }
        else {
            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree_1.ImmutableTree.Empty);
            return new CompoundWrite(newWriteTree);
        }
    };
    /**
     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
     * considered "complete".
     *
     * @param {!Path} path The path to check for
     * @return {boolean} Whether there is a complete write at that path
     */
    CompoundWrite.prototype.hasCompleteWrite = function (path) {
        return this.getCompleteNode(path) != null;
    };
    /**
     * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
     * writes from deeper paths, but will return child nodes from a more shallow path.
     *
     * @param {!Path} path The path to get a complete write
     * @return {?Node} The node if complete at that path, or null otherwise.
     */
    CompoundWrite.prototype.getCompleteNode = function (path) {
        var rootmost = this.writeTree_.findRootMostValueAndPath(path);
        if (rootmost != null) {
            return this.writeTree_
                .get(rootmost.path)
                .getChild(Path_1.Path.relativePath(rootmost.path, path));
        }
        else {
            return null;
        }
    };
    /**
     * Returns all children that are guaranteed to be a complete overwrite.
     *
     * @return {!Array.<NamedNode>} A list of all complete children.
     */
    CompoundWrite.prototype.getCompleteChildren = function () {
        var children = [];
        var node = this.writeTree_.value;
        if (node != null) {
            // If it's a leaf node, it has no children; so nothing to do.
            if (!node.isLeafNode()) {
                node.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {
                    children.push(new Node_1.NamedNode(childName, childNode));
                });
            }
        }
        else {
            this.writeTree_.children.inorderTraversal(function (childName, childTree) {
                if (childTree.value != null) {
                    children.push(new Node_1.NamedNode(childName, childTree.value));
                }
            });
        }
        return children;
    };
    /**
     * @param {!Path} path
     * @return {!CompoundWrite}
     */
    CompoundWrite.prototype.childCompoundWrite = function (path) {
        if (path.isEmpty()) {
            return this;
        }
        else {
            var shadowingNode = this.getCompleteNode(path);
            if (shadowingNode != null) {
                return new CompoundWrite(new ImmutableTree_1.ImmutableTree(shadowingNode));
            }
            else {
                return new CompoundWrite(this.writeTree_.subtree(path));
            }
        }
    };
    /**
     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
     * @return {boolean} Whether this CompoundWrite is empty
     */
    CompoundWrite.prototype.isEmpty = function () {
        return this.writeTree_.isEmpty();
    };
    /**
     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
     * node
     * @param {!Node} node The node to apply this CompoundWrite to
     * @return {!Node} The node with all writes applied
     */
    CompoundWrite.prototype.apply = function (node) {
        return CompoundWrite.applySubtreeWrite_(Path_1.Path.Empty, this.writeTree_, node);
    };
    /**
     * @type {!CompoundWrite}
     */
    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree_1.ImmutableTree(null));
    /**
     * @param {!Path} relativePath
     * @param {!ImmutableTree.<!Node>} writeTree
     * @param {!Node} node
     * @return {!Node}
     * @private
     */
    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {
        if (writeTree.value != null) {
            // Since there a write is always a leaf, we're done here
            return node.updateChild(relativePath, writeTree.value);
        }
        else {
            var priorityWrite_1 = null;
            writeTree.children.inorderTraversal(function (childKey, childTree) {
                if (childKey === '.priority') {
                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget
                    // to apply priorities to empty nodes that are later filled
                    util_2.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');
                    priorityWrite_1 = childTree.value;
                }
                else {
                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);
                }
            });
            // If there was a priority write, we only apply it if the node is not empty
            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);
            }
            return node;
        }
    };
    return CompoundWrite;
}());
exports.CompoundWrite = CompoundWrite;

//# sourceMappingURL=CompoundWrite.js.map


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ChildrenNode_1 = __webpack_require__(4);
/**
 * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
 *
 * @constructor
 */
var SnapshotHolder = /** @class */ (function () {
    function SnapshotHolder() {
        this.rootNode_ = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
    }
    SnapshotHolder.prototype.getNode = function (path) {
        return this.rootNode_.getChild(path);
    };
    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {
        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
    };
    return SnapshotHolder;
}());
exports.SnapshotHolder = SnapshotHolder;

//# sourceMappingURL=SnapshotHolder.js.map


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(1);
/**
 * Abstraction around FirebaseApp's token fetching capabilities.
 */
var AuthTokenProvider = /** @class */ (function () {
    /**
     * @param {!FirebaseApp} app_
     */
    function AuthTokenProvider(app_) {
        this.app_ = app_;
    }
    /**
     * @param {boolean} forceRefresh
     * @return {!Promise<FirebaseAuthTokenData>}
     */
    AuthTokenProvider.prototype.getToken = function (forceRefresh) {
        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, 
        // .catch
        function (error) {
            // TODO: Need to figure out all the cases this is raised and whether
            // this makes sense.
            if (error && error.code === 'auth/token-not-initialized') {
                util_1.log('Got auth/token-not-initialized error.  Treating as null token.');
                return null;
            }
            else {
                return Promise.reject(error);
            }
        });
    };
    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {
        // TODO: We might want to wrap the listener and call it with no args to
        // avoid a leaky abstraction, but that makes removing the listener harder.
        this.app_['INTERNAL']['addAuthTokenListener'](listener);
    };
    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {
        this.app_['INTERNAL']['removeAuthTokenListener'](listener);
    };
    AuthTokenProvider.prototype.notifyForInvalidToken = function () {
        var errorMessage = 'Provided authentication credentials for the app named "' +
            this.app_.name +
            '" are invalid. This usually indicates your app was not ' +
            'initialized correctly. ';
        if ('credential' in this.app_.options) {
            errorMessage +=
                'Make sure the "credential" property provided to initializeApp() ' +
                    'is authorized to access the specified "databaseURL" and is from the correct ' +
                    'project.';
        }
        else if ('serviceAccount' in this.app_.options) {
            errorMessage +=
                'Make sure the "serviceAccount" property provided to initializeApp() ' +
                    'is authorized to access the specified "databaseURL" and is from the correct ' +
                    'project.';
        }
        else {
            errorMessage +=
                'Make sure the "apiKey" and "databaseURL" properties provided to ' +
                    'initializeApp() match the values provided for your app at ' +
                    'https://console.firebase.google.com/.';
        }
        util_1.warn(errorMessage);
    };
    return AuthTokenProvider;
}());
exports.AuthTokenProvider = AuthTokenProvider;

//# sourceMappingURL=AuthTokenProvider.js.map


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(0);
/**
 * Tracks a collection of stats.
 *
 * @constructor
 */
var StatsCollection = /** @class */ (function () {
    function StatsCollection() {
        this.counters_ = {};
    }
    StatsCollection.prototype.incrementCounter = function (name, amount) {
        if (amount === void 0) { amount = 1; }
        if (!util_2.contains(this.counters_, name))
            this.counters_[name] = 0;
        this.counters_[name] += amount;
    };
    StatsCollection.prototype.get = function () {
        return util_1.deepCopy(this.counters_);
    };
    return StatsCollection;
}());
exports.StatsCollection = StatsCollection;

//# sourceMappingURL=StatsCollection.js.map


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(1);
var StatsListener_1 = __webpack_require__(64);
// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
// seconds to try to ensure the Firebase connection is established / settled.
var FIRST_STATS_MIN_TIME = 10 * 1000;
var FIRST_STATS_MAX_TIME = 30 * 1000;
// We'll continue to report stats on average every 5 minutes.
var REPORT_STATS_INTERVAL = 5 * 60 * 1000;
/**
 * @constructor
 */
var StatsReporter = /** @class */ (function () {
    /**
     * @param collection
     * @param server_
     */
    function StatsReporter(collection, server_) {
        this.server_ = server_;
        this.statsToReport_ = {};
        this.statsListener_ = new StatsListener_1.StatsListener(collection);
        var timeout = FIRST_STATS_MIN_TIME +
            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
        util_2.setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
    }
    StatsReporter.prototype.includeStat = function (stat) {
        this.statsToReport_[stat] = true;
    };
    StatsReporter.prototype.reportStats_ = function () {
        var _this = this;
        var stats = this.statsListener_.get();
        var reportedStats = {};
        var haveStatsToReport = false;
        util_1.forEach(stats, function (stat, value) {
            if (value > 0 && util_1.contains(_this.statsToReport_, stat)) {
                reportedStats[stat] = value;
                haveStatsToReport = true;
            }
        });
        if (haveStatsToReport) {
            this.server_.reportStats(reportedStats);
        }
        // queue our next run.
        util_2.setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
    };
    return StatsReporter;
}());
exports.StatsReporter = StatsReporter;

//# sourceMappingURL=StatsReporter.js.map


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(1);
/**
 * The event queue serves a few purposes:
 * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
 *    events being queued.
 * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
 *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
 *    left off, ensuring that the events are still raised synchronously and in order.
 * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
 *    events are raised synchronously.
 *
 * NOTE: This can all go away if/when we move to async events.
 *
 * @constructor
 */
var EventQueue = /** @class */ (function () {
    function EventQueue() {
        /**
         * @private
         * @type {!Array.<EventList>}
         */
        this.eventLists_ = [];
        /**
         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
         * @private
         * @type {!number}
         */
        this.recursionDepth_ = 0;
    }
    /**
     * @param {!Array.<Event>} eventDataList The new events to queue.
     */
    EventQueue.prototype.queueEvents = function (eventDataList) {
        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
        var currList = null;
        for (var i = 0; i < eventDataList.length; i++) {
            var eventData = eventDataList[i];
            var eventPath = eventData.getPath();
            if (currList !== null && !eventPath.equals(currList.getPath())) {
                this.eventLists_.push(currList);
                currList = null;
            }
            if (currList === null) {
                currList = new EventList(eventPath);
            }
            currList.add(eventData);
        }
        if (currList) {
            this.eventLists_.push(currList);
        }
    };
    /**
     * Queues the specified events and synchronously raises all events (including previously queued ones)
     * for the specified path.
     *
     * It is assumed that the new events are all for the specified path.
     *
     * @param {!Path} path The path to raise events for.
     * @param {!Array.<Event>} eventDataList The new events to raise.
     */
    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {
        this.queueEvents(eventDataList);
        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
            return eventPath.equals(path);
        });
    };
    /**
     * Queues the specified events and synchronously raises all events (including previously queued ones) for
     * locations related to the specified change path (i.e. all ancestors and descendants).
     *
     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
     *
     * @param {!Path} changedPath The path to raise events for.
     * @param {!Array.<!Event>} eventDataList The events to raise
     */
    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {
        this.queueEvents(eventDataList);
        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
            return eventPath.contains(changedPath) || changedPath.contains(eventPath);
        });
    };
    /**
     * @param {!function(!Path):boolean} predicate
     * @private
     */
    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {
        this.recursionDepth_++;
        var sentAll = true;
        for (var i = 0; i < this.eventLists_.length; i++) {
            var eventList = this.eventLists_[i];
            if (eventList) {
                var eventPath = eventList.getPath();
                if (predicate(eventPath)) {
                    this.eventLists_[i].raise();
                    this.eventLists_[i] = null;
                }
                else {
                    sentAll = false;
                }
            }
        }
        if (sentAll) {
            this.eventLists_ = [];
        }
        this.recursionDepth_--;
    };
    return EventQueue;
}());
exports.EventQueue = EventQueue;
/**
 * @param {!Path} path
 * @constructor
 */
var EventList = /** @class */ (function () {
    function EventList(path_) {
        this.path_ = path_;
        /**
         * @type {!Array.<Event>}
         * @private
         */
        this.events_ = [];
    }
    /**
     * @param {!Event} eventData
     */
    EventList.prototype.add = function (eventData) {
        this.events_.push(eventData);
    };
    /**
     * Iterates through the list and raises each event
     */
    EventList.prototype.raise = function () {
        for (var i = 0; i < this.events_.length; i++) {
            var eventData = this.events_[i];
            if (eventData !== null) {
                this.events_[i] = null;
                var eventFn = eventData.getEventRunner();
                if (util_1.logger) {
                    util_1.log('event: ' + eventData.toString());
                }
                util_1.exceptionGuard(eventFn);
            }
        }
    };
    /**
     * @return {!Path}
     */
    EventList.prototype.getPath = function () {
        return this.path_;
    };
    return EventList;
}());
exports.EventList = EventList;

//# sourceMappingURL=EventQueue.js.map


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var EventEmitter_1 = __webpack_require__(66);
var util_1 = __webpack_require__(0);
/**
 * @extends {EventEmitter}
 */
var VisibilityMonitor = /** @class */ (function (_super) {
    __extends(VisibilityMonitor, _super);
    function VisibilityMonitor() {
        var _this = _super.call(this, ['visible']) || this;
        var hidden;
        var visibilityChange;
        if (typeof document !== 'undefined' &&
            typeof document.addEventListener !== 'undefined') {
            if (typeof document['hidden'] !== 'undefined') {
                // Opera 12.10 and Firefox 18 and later support
                visibilityChange = 'visibilitychange';
                hidden = 'hidden';
            }
            else if (typeof document['mozHidden'] !== 'undefined') {
                visibilityChange = 'mozvisibilitychange';
                hidden = 'mozHidden';
            }
            else if (typeof document['msHidden'] !== 'undefined') {
                visibilityChange = 'msvisibilitychange';
                hidden = 'msHidden';
            }
            else if (typeof document['webkitHidden'] !== 'undefined') {
                visibilityChange = 'webkitvisibilitychange';
                hidden = 'webkitHidden';
            }
        }
        // Initially, we always assume we are visible. This ensures that in browsers
        // without page visibility support or in cases where we are never visible
        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
        // reconnects
        _this.visible_ = true;
        if (visibilityChange) {
            document.addEventListener(visibilityChange, function () {
                var visible = !document[hidden];
                if (visible !== _this.visible_) {
                    _this.visible_ = visible;
                    _this.trigger('visible', visible);
                }
            }, false);
        }
        return _this;
    }
    VisibilityMonitor.getInstance = function () {
        return new VisibilityMonitor();
    };
    /**
     * @param {!string} eventType
     * @return {Array.<boolean>}
     */
    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {
        util_1.assert(eventType === 'visible', 'Unknown event type: ' + eventType);
        return [this.visible_];
    };
    return VisibilityMonitor;
}(EventEmitter_1.EventEmitter));
exports.VisibilityMonitor = VisibilityMonitor;

//# sourceMappingURL=VisibilityMonitor.js.map


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var EventEmitter_1 = __webpack_require__(66);
var util_2 = __webpack_require__(0);
/**
 * Monitors online state (as reported by window.online/offline events).
 *
 * The expectation is that this could have many false positives (thinks we are online
 * when we're not), but no false negatives.  So we can safely use it to determine when
 * we definitely cannot reach the internet.
 *
 * @extends {EventEmitter}
 */
var OnlineMonitor = /** @class */ (function (_super) {
    __extends(OnlineMonitor, _super);
    function OnlineMonitor() {
        var _this = _super.call(this, ['online']) || this;
        _this.online_ = true;
        // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
        // It would seem that the 'online' event does not always fire consistently. So we disable it
        // for Cordova.
        if (typeof window !== 'undefined' &&
            typeof window.addEventListener !== 'undefined' &&
            !util_2.isMobileCordova()) {
            window.addEventListener('online', function () {
                if (!_this.online_) {
                    _this.online_ = true;
                    _this.trigger('online', true);
                }
            }, false);
            window.addEventListener('offline', function () {
                if (_this.online_) {
                    _this.online_ = false;
                    _this.trigger('online', false);
                }
            }, false);
        }
        return _this;
    }
    OnlineMonitor.getInstance = function () {
        return new OnlineMonitor();
    };
    /**
     * @param {!string} eventType
     * @return {Array.<boolean>}
     */
    OnlineMonitor.prototype.getInitialEvent = function (eventType) {
        util_1.assert(eventType === 'online', 'Unknown event type: ' + eventType);
        return [this.online_];
    };
    /**
     * @return {boolean}
     */
    OnlineMonitor.prototype.currentlyOnline = function () {
        return this.online_;
    };
    return OnlineMonitor;
}(EventEmitter_1.EventEmitter));
exports.OnlineMonitor = OnlineMonitor;

//# sourceMappingURL=OnlineMonitor.js.map


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var BrowserPollConnection_1 = __webpack_require__(68);
var WebSocketConnection_1 = __webpack_require__(69);
var util_1 = __webpack_require__(1);
/**
 * Currently simplistic, this class manages what transport a Connection should use at various stages of its
 * lifecycle.
 *
 * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
 * they are available.
 * @constructor
 */
var TransportManager = /** @class */ (function () {
    /**
     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to
     */
    function TransportManager(repoInfo) {
        this.initTransports_(repoInfo);
    }
    Object.defineProperty(TransportManager, "ALL_TRANSPORTS", {
        /**
         * @const
         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}
         */
        get: function () {
            return [BrowserPollConnection_1.BrowserPollConnection, WebSocketConnection_1.WebSocketConnection];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {!RepoInfo} repoInfo
     * @private
     */
    TransportManager.prototype.initTransports_ = function (repoInfo) {
        var isWebSocketsAvailable = WebSocketConnection_1.WebSocketConnection && WebSocketConnection_1.WebSocketConnection['isAvailable']();
        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection_1.WebSocketConnection.previouslyFailed();
        if (repoInfo.webSocketOnly) {
            if (!isWebSocketsAvailable)
                util_1.warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
            isSkipPollConnection = true;
        }
        if (isSkipPollConnection) {
            this.transports_ = [WebSocketConnection_1.WebSocketConnection];
        }
        else {
            var transports_1 = (this.transports_ = []);
            util_1.each(TransportManager.ALL_TRANSPORTS, function (i, transport) {
                if (transport && transport['isAvailable']()) {
                    transports_1.push(transport);
                }
            });
        }
    };
    /**
     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the
     * initial transport to use
     */
    TransportManager.prototype.initialTransport = function () {
        if (this.transports_.length > 0) {
            return this.transports_[0];
        }
        else {
            throw new Error('No transports available');
        }
    };
    /**
     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next
     * transport, or null
     */
    TransportManager.prototype.upgradeTransport = function () {
        if (this.transports_.length > 1) {
            return this.transports_[1];
        }
        else {
            return null;
        }
    };
    return TransportManager;
}());
exports.TransportManager = TransportManager;

//# sourceMappingURL=TransportManager.js.map


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(1);
/**
 * This class ensures the packets from the server arrive in order
 * This class takes data from the server and ensures it gets passed into the callbacks in order.
 * @constructor
 */
var PacketReceiver = /** @class */ (function () {
    /**
     * @param onMessage_
     */
    function PacketReceiver(onMessage_) {
        this.onMessage_ = onMessage_;
        this.pendingResponses = [];
        this.currentResponseNum = 0;
        this.closeAfterResponse = -1;
        this.onClose = null;
    }
    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {
        this.closeAfterResponse = responseNum;
        this.onClose = callback;
        if (this.closeAfterResponse < this.currentResponseNum) {
            this.onClose();
            this.onClose = null;
        }
    };
    /**
     * Each message from the server comes with a response number, and an array of data. The responseNumber
     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
     * browsers will respond in the same order as the requests we sent
     * @param {number} requestNum
     * @param {Array} data
     */
    PacketReceiver.prototype.handleResponse = function (requestNum, data) {
        var _this = this;
        this.pendingResponses[requestNum] = data;
        var _loop_1 = function () {
            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
            delete this_1.pendingResponses[this_1.currentResponseNum];
            var _loop_2 = function (i) {
                if (toProcess[i]) {
                    util_1.exceptionGuard(function () {
                        _this.onMessage_(toProcess[i]);
                    });
                }
            };
            for (var i = 0; i < toProcess.length; ++i) {
                _loop_2(i);
            }
            if (this_1.currentResponseNum === this_1.closeAfterResponse) {
                if (this_1.onClose) {
                    this_1.onClose();
                    this_1.onClose = null;
                }
                return "break";
            }
            this_1.currentResponseNum++;
        };
        var this_1 = this;
        while (this.pendingResponses[this.currentResponseNum]) {
            var state_1 = _loop_1();
            if (state_1 === "break")
                break;
        }
    };
    return PacketReceiver;
}());
exports.PacketReceiver = PacketReceiver;

//# sourceMappingURL=PacketReceiver.js.map


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(1);
var util_3 = __webpack_require__(0);
var util_4 = __webpack_require__(0);
var util_5 = __webpack_require__(0);
var ServerActions_1 = __webpack_require__(70);
/**
 * An implementation of ServerActions that communicates with the server via REST requests.
 * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
 * persistent connection (using WebSockets or long-polling)
 */
var ReadonlyRestClient = /** @class */ (function (_super) {
    __extends(ReadonlyRestClient, _super);
    /**
     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
     * @param {AuthTokenProvider} authTokenProvider_
     * @implements {ServerActions}
     */
    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {
        var _this = _super.call(this) || this;
        _this.repoInfo_ = repoInfo_;
        _this.onDataUpdate_ = onDataUpdate_;
        _this.authTokenProvider_ = authTokenProvider_;
        /** @private {function(...[*])} */
        _this.log_ = util_2.logWrapper('p:rest:');
        /**
         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
         * that's been removed. :-/
         *
         * @private {!Object.<string, !Object>}
         */
        _this.listens_ = {};
        return _this;
    }
    ReadonlyRestClient.prototype.reportStats = function (stats) {
        throw new Error('Method not implemented.');
    };
    /**
     * @param {!Query} query
     * @param {?number=} tag
     * @return {string}
     * @private
     */
    ReadonlyRestClient.getListenId_ = function (query, tag) {
        if (tag !== undefined) {
            return 'tag$' + tag;
        }
        else {
            util_1.assert(query.getQueryParams().isDefault(), "should have a tag if it's not a default query.");
            return query.path.toString();
        }
    };
    /** @inheritDoc */
    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {
        var _this = this;
        var pathString = query.path.toString();
        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());
        // Mark this listener so we can tell if it's removed.
        var listenId = ReadonlyRestClient.getListenId_(query, tag);
        var thisListen = {};
        this.listens_[listenId] = thisListen;
        var queryStringParamaters = query
            .getQueryParams()
            .toRestQueryStringParameters();
        this.restRequest_(pathString + '.json', queryStringParamaters, function (error, result) {
            var data = result;
            if (error === 404) {
                data = null;
                error = null;
            }
            if (error === null) {
                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
            }
            if (util_4.safeGet(_this.listens_, listenId) === thisListen) {
                var status_1;
                if (!error) {
                    status_1 = 'ok';
                }
                else if (error == 401) {
                    status_1 = 'permission_denied';
                }
                else {
                    status_1 = 'rest_error:' + error;
                }
                onComplete(status_1, null);
            }
        });
    };
    /** @inheritDoc */
    ReadonlyRestClient.prototype.unlisten = function (query, tag) {
        var listenId = ReadonlyRestClient.getListenId_(query, tag);
        delete this.listens_[listenId];
    };
    /** @inheritDoc */
    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {
        // no-op since we just always call getToken.
    };
    /**
     * Performs a REST request to the given path, with the provided query string parameters,
     * and any auth credentials we have.
     *
     * @param {!string} pathString
     * @param {!Object.<string, *>} queryStringParameters
     * @param {?function(?number, *=)} callback
     * @private
     */
    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {
        var _this = this;
        if (queryStringParameters === void 0) { queryStringParameters = {}; }
        queryStringParameters['format'] = 'export';
        this.authTokenProvider_
            .getToken(/*forceRefresh=*/ false)
            .then(function (authTokenData) {
            var authToken = authTokenData && authTokenData.accessToken;
            if (authToken) {
                queryStringParameters['auth'] = authToken;
            }
            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +
                _this.repoInfo_.host +
                pathString +
                '?' +
                util_5.querystring(queryStringParameters);
            _this.log_('Sending REST request for ' + url);
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (callback && xhr.readyState === 4) {
                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
                    var res = null;
                    if (xhr.status >= 200 && xhr.status < 300) {
                        try {
                            res = util_3.jsonEval(xhr.responseText);
                        }
                        catch (e) {
                            util_2.warn('Failed to parse JSON response for ' +
                                url +
                                ': ' +
                                xhr.responseText);
                        }
                        callback(null, res);
                    }
                    else {
                        // 401 and 404 are expected.
                        if (xhr.status !== 401 && xhr.status !== 404) {
                            util_2.warn('Got unsuccessful REST response for ' +
                                url +
                                ' Status: ' +
                                xhr.status);
                        }
                        callback(xhr.status);
                    }
                    callback = null;
                }
            };
            xhr.open('GET', url, /*asynchronous=*/ true);
            xhr.send();
        });
    };
    return ReadonlyRestClient;
}(ServerActions_1.ServerActions));
exports.ReadonlyRestClient = ReadonlyRestClient;

//# sourceMappingURL=ReadonlyRestClient.js.map


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var util_2 = __webpack_require__(1);
var KeyIndex_1 = __webpack_require__(14);
var PriorityIndex_1 = __webpack_require__(3);
var ValueIndex_1 = __webpack_require__(53);
var PathIndex_1 = __webpack_require__(57);
var IndexedFilter_1 = __webpack_require__(33);
var LimitedFilter_1 = __webpack_require__(141);
var RangedFilter_1 = __webpack_require__(71);
var util_3 = __webpack_require__(0);
/**
 * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
 * range to be returned for a particular location. It is assumed that validation of parameters is done at the
 * user-facing API level, so it is not done here.
 * @constructor
 */
var QueryParams = /** @class */ (function () {
    function QueryParams() {
        this.limitSet_ = false;
        this.startSet_ = false;
        this.startNameSet_ = false;
        this.endSet_ = false;
        this.endNameSet_ = false;
        this.limit_ = 0;
        this.viewFrom_ = '';
        this.indexStartValue_ = null;
        this.indexStartName_ = '';
        this.indexEndValue_ = null;
        this.indexEndName_ = '';
        this.index_ = PriorityIndex_1.PRIORITY_INDEX;
    }
    /**
     * @return {boolean}
     */
    QueryParams.prototype.hasStart = function () {
        return this.startSet_;
    };
    /**
     * @return {boolean} True if it would return from left.
     */
    QueryParams.prototype.isViewFromLeft = function () {
        if (this.viewFrom_ === '') {
            // limit(), rather than limitToFirst or limitToLast was called.
            // This means that only one of startSet_ and endSet_ is true. Use them
            // to calculate which side of the view to anchor to. If neither is set,
            // anchor to the end.
            return this.startSet_;
        }
        else {
            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);
        }
    };
    /**
     * Only valid to call if hasStart() returns true
     * @return {*}
     */
    QueryParams.prototype.getIndexStartValue = function () {
        util_1.assert(this.startSet_, 'Only valid if start has been set');
        return this.indexStartValue_;
    };
    /**
     * Only valid to call if hasStart() returns true.
     * Returns the starting key name for the range defined by these query parameters
     * @return {!string}
     */
    QueryParams.prototype.getIndexStartName = function () {
        util_1.assert(this.startSet_, 'Only valid if start has been set');
        if (this.startNameSet_) {
            return this.indexStartName_;
        }
        else {
            return util_2.MIN_NAME;
        }
    };
    /**
     * @return {boolean}
     */
    QueryParams.prototype.hasEnd = function () {
        return this.endSet_;
    };
    /**
     * Only valid to call if hasEnd() returns true.
     * @return {*}
     */
    QueryParams.prototype.getIndexEndValue = function () {
        util_1.assert(this.endSet_, 'Only valid if end has been set');
        return this.indexEndValue_;
    };
    /**
     * Only valid to call if hasEnd() returns true.
     * Returns the end key name for the range defined by these query parameters
     * @return {!string}
     */
    QueryParams.prototype.getIndexEndName = function () {
        util_1.assert(this.endSet_, 'Only valid if end has been set');
        if (this.endNameSet_) {
            return this.indexEndName_;
        }
        else {
            return util_2.MAX_NAME;
        }
    };
    /**
     * @return {boolean}
     */
    QueryParams.prototype.hasLimit = function () {
        return this.limitSet_;
    };
    /**
     * @return {boolean} True if a limit has been set and it has been explicitly anchored
     */
    QueryParams.prototype.hasAnchoredLimit = function () {
        return this.limitSet_ && this.viewFrom_ !== '';
    };
    /**
     * Only valid to call if hasLimit() returns true
     * @return {!number}
     */
    QueryParams.prototype.getLimit = function () {
        util_1.assert(this.limitSet_, 'Only valid if limit has been set');
        return this.limit_;
    };
    /**
     * @return {!Index}
     */
    QueryParams.prototype.getIndex = function () {
        return this.index_;
    };
    /**
     * @return {!QueryParams}
     * @private
     */
    QueryParams.prototype.copy_ = function () {
        var copy = new QueryParams();
        copy.limitSet_ = this.limitSet_;
        copy.limit_ = this.limit_;
        copy.startSet_ = this.startSet_;
        copy.indexStartValue_ = this.indexStartValue_;
        copy.startNameSet_ = this.startNameSet_;
        copy.indexStartName_ = this.indexStartName_;
        copy.endSet_ = this.endSet_;
        copy.indexEndValue_ = this.indexEndValue_;
        copy.endNameSet_ = this.endNameSet_;
        copy.indexEndName_ = this.indexEndName_;
        copy.index_ = this.index_;
        copy.viewFrom_ = this.viewFrom_;
        return copy;
    };
    /**
     * @param {!number} newLimit
     * @return {!QueryParams}
     */
    QueryParams.prototype.limit = function (newLimit) {
        var newParams = this.copy_();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = '';
        return newParams;
    };
    /**
     * @param {!number} newLimit
     * @return {!QueryParams}
     */
    QueryParams.prototype.limitToFirst = function (newLimit) {
        var newParams = this.copy_();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
        return newParams;
    };
    /**
     * @param {!number} newLimit
     * @return {!QueryParams}
     */
    QueryParams.prototype.limitToLast = function (newLimit) {
        var newParams = this.copy_();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;
        return newParams;
    };
    /**
     * @param {*} indexValue
     * @param {?string=} key
     * @return {!QueryParams}
     */
    QueryParams.prototype.startAt = function (indexValue, key) {
        var newParams = this.copy_();
        newParams.startSet_ = true;
        if (!(indexValue !== undefined)) {
            indexValue = null;
        }
        newParams.indexStartValue_ = indexValue;
        if (key != null) {
            newParams.startNameSet_ = true;
            newParams.indexStartName_ = key;
        }
        else {
            newParams.startNameSet_ = false;
            newParams.indexStartName_ = '';
        }
        return newParams;
    };
    /**
     * @param {*} indexValue
     * @param {?string=} key
     * @return {!QueryParams}
     */
    QueryParams.prototype.endAt = function (indexValue, key) {
        var newParams = this.copy_();
        newParams.endSet_ = true;
        if (!(indexValue !== undefined)) {
            indexValue = null;
        }
        newParams.indexEndValue_ = indexValue;
        if (key !== undefined) {
            newParams.endNameSet_ = true;
            newParams.indexEndName_ = key;
        }
        else {
            newParams.endNameSet_ = false;
            newParams.indexEndName_ = '';
        }
        return newParams;
    };
    /**
     * @param {!Index} index
     * @return {!QueryParams}
     */
    QueryParams.prototype.orderBy = function (index) {
        var newParams = this.copy_();
        newParams.index_ = index;
        return newParams;
    };
    /**
     * @return {!Object}
     */
    QueryParams.prototype.getQueryObject = function () {
        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;
        var obj = {};
        if (this.startSet_) {
            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;
            if (this.startNameSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;
            }
        }
        if (this.endSet_) {
            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;
            if (this.endNameSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;
            }
        }
        if (this.limitSet_) {
            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;
            var viewFrom = this.viewFrom_;
            if (viewFrom === '') {
                if (this.isViewFromLeft()) {
                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;
                }
                else {
                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;
                }
            }
            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;
        }
        // For now, priority index is the default, so we only specify if it's some other index
        if (this.index_ !== PriorityIndex_1.PRIORITY_INDEX) {
            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();
        }
        return obj;
    };
    /**
     * @return {boolean}
     */
    QueryParams.prototype.loadsAllData = function () {
        return !(this.startSet_ || this.endSet_ || this.limitSet_);
    };
    /**
     * @return {boolean}
     */
    QueryParams.prototype.isDefault = function () {
        return this.loadsAllData() && this.index_ == PriorityIndex_1.PRIORITY_INDEX;
    };
    /**
     * @return {!NodeFilter}
     */
    QueryParams.prototype.getNodeFilter = function () {
        if (this.loadsAllData()) {
            return new IndexedFilter_1.IndexedFilter(this.getIndex());
        }
        else if (this.hasLimit()) {
            return new LimitedFilter_1.LimitedFilter(this);
        }
        else {
            return new RangedFilter_1.RangedFilter(this);
        }
    };
    /**
     * Returns a set of REST query string parameters representing this query.
     *
     * @return {!Object.<string,*>} query string parameters
     */
    QueryParams.prototype.toRestQueryStringParameters = function () {
        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;
        var qs = {};
        if (this.isDefault()) {
            return qs;
        }
        var orderBy;
        if (this.index_ === PriorityIndex_1.PRIORITY_INDEX) {
            orderBy = REST_CONSTANTS.PRIORITY_INDEX;
        }
        else if (this.index_ === ValueIndex_1.VALUE_INDEX) {
            orderBy = REST_CONSTANTS.VALUE_INDEX;
        }
        else if (this.index_ === KeyIndex_1.KEY_INDEX) {
            orderBy = REST_CONSTANTS.KEY_INDEX;
        }
        else {
            util_1.assert(this.index_ instanceof PathIndex_1.PathIndex, 'Unrecognized index type!');
            orderBy = this.index_.toString();
        }
        qs[REST_CONSTANTS.ORDER_BY] = util_3.stringify(orderBy);
        if (this.startSet_) {
            qs[REST_CONSTANTS.START_AT] = util_3.stringify(this.indexStartValue_);
            if (this.startNameSet_) {
                qs[REST_CONSTANTS.START_AT] += ',' + util_3.stringify(this.indexStartName_);
            }
        }
        if (this.endSet_) {
            qs[REST_CONSTANTS.END_AT] = util_3.stringify(this.indexEndValue_);
            if (this.endNameSet_) {
                qs[REST_CONSTANTS.END_AT] += ',' + util_3.stringify(this.indexEndName_);
            }
        }
        if (this.limitSet_) {
            if (this.isViewFromLeft()) {
                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;
            }
            else {
                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;
            }
        }
        return qs;
    };
    /**
     * Wire Protocol Constants
     * @const
     * @enum {string}
     * @private
     */
    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {
        INDEX_START_VALUE: 'sp',
        INDEX_START_NAME: 'sn',
        INDEX_END_VALUE: 'ep',
        INDEX_END_NAME: 'en',
        LIMIT: 'l',
        VIEW_FROM: 'vf',
        VIEW_FROM_LEFT: 'l',
        VIEW_FROM_RIGHT: 'r',
        INDEX: 'i'
    };
    /**
     * REST Query Constants
     * @const
     * @enum {string}
     * @private
     */
    QueryParams.REST_QUERY_CONSTANTS_ = {
        ORDER_BY: 'orderBy',
        PRIORITY_INDEX: '$priority',
        VALUE_INDEX: '$value',
        KEY_INDEX: '$key',
        START_AT: 'startAt',
        END_AT: 'endAt',
        LIMIT_TO_FIRST: 'limitToFirst',
        LIMIT_TO_LAST: 'limitToLast'
    };
    /**
     * Default, empty query parameters
     * @type {!QueryParams}
     * @const
     */
    QueryParams.DEFAULT = new QueryParams();
    return QueryParams;
}());
exports.QueryParams = QueryParams;

//# sourceMappingURL=QueryParams.js.map


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var RangedFilter_1 = __webpack_require__(71);
var ChildrenNode_1 = __webpack_require__(4);
var Node_1 = __webpack_require__(5);
var util_1 = __webpack_require__(0);
var Change_1 = __webpack_require__(12);
/**
 * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
 *
 * @constructor
 * @implements {NodeFilter}
 */
var LimitedFilter = /** @class */ (function () {
    /**
     * @param {!QueryParams} params
     */
    function LimitedFilter(params) {
        this.rangedFilter_ = new RangedFilter_1.RangedFilter(params);
        this.index_ = params.getIndex();
        this.limit_ = params.getLimit();
        this.reverse_ = !params.isViewFromLeft();
    }
    /**
     * @inheritDoc
     */
    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
        if (!this.rangedFilter_.matches(new Node_1.NamedNode(key, newChild))) {
            newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        }
        if (snap.getImmediateChild(key).equals(newChild)) {
            // No change
            return snap;
        }
        else if (snap.numChildren() < this.limit_) {
            return this.rangedFilter_
                .getIndexedFilter()
                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
        }
        else {
            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
        }
    };
    /**
     * @inheritDoc
     */
    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
        var filtered;
        if (newSnap.isLeafNode() || newSnap.isEmpty()) {
            // Make sure we have a children node with the correct index, not a leaf node;
            filtered = ChildrenNode_1.ChildrenNode.EMPTY_NODE.withIndex(this.index_);
        }
        else {
            if (this.limit_ * 2 < newSnap.numChildren() &&
                newSnap.isIndexed(this.index_)) {
                // Easier to build up a snapshot, since what we're given has more than twice the elements we want
                filtered = ChildrenNode_1.ChildrenNode.EMPTY_NODE.withIndex(this.index_);
                // anchor to the startPost, endPost, or last element as appropriate
                var iterator = void 0;
                if (this.reverse_) {
                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
                }
                else {
                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
                }
                var count = 0;
                while (iterator.hasNext() && count < this.limit_) {
                    var next = iterator.getNext();
                    var inRange = void 0;
                    if (this.reverse_) {
                        inRange =
                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
                    }
                    else {
                        inRange =
                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
                    }
                    if (inRange) {
                        filtered = filtered.updateImmediateChild(next.name, next.node);
                        count++;
                    }
                    else {
                        // if we have reached the end post, we cannot keep adding elemments
                        break;
                    }
                }
            }
            else {
                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
                filtered = newSnap.withIndex(this.index_);
                // Don't support priorities on queries
                filtered = filtered.updatePriority(ChildrenNode_1.ChildrenNode.EMPTY_NODE);
                var startPost = void 0;
                var endPost = void 0;
                var cmp = void 0;
                var iterator = void 0;
                if (this.reverse_) {
                    iterator = filtered.getReverseIterator(this.index_);
                    startPost = this.rangedFilter_.getEndPost();
                    endPost = this.rangedFilter_.getStartPost();
                    var indexCompare_1 = this.index_.getCompare();
                    cmp = function (a, b) { return indexCompare_1(b, a); };
                }
                else {
                    iterator = filtered.getIterator(this.index_);
                    startPost = this.rangedFilter_.getStartPost();
                    endPost = this.rangedFilter_.getEndPost();
                    cmp = this.index_.getCompare();
                }
                var count = 0;
                var foundStartPost = false;
                while (iterator.hasNext()) {
                    var next = iterator.getNext();
                    if (!foundStartPost && cmp(startPost, next) <= 0) {
                        // start adding
                        foundStartPost = true;
                    }
                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
                    if (inRange) {
                        count++;
                    }
                    else {
                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode_1.ChildrenNode.EMPTY_NODE);
                    }
                }
            }
        }
        return this.rangedFilter_
            .getIndexedFilter()
            .updateFullNode(oldSnap, filtered, optChangeAccumulator);
    };
    /**
     * @inheritDoc
     */
    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
        // Don't support priorities on queries
        return oldSnap;
    };
    /**
     * @inheritDoc
     */
    LimitedFilter.prototype.filtersNodes = function () {
        return true;
    };
    /**
     * @inheritDoc
     */
    LimitedFilter.prototype.getIndexedFilter = function () {
        return this.rangedFilter_.getIndexedFilter();
    };
    /**
     * @inheritDoc
     */
    LimitedFilter.prototype.getIndex = function () {
        return this.index_;
    };
    /**
     * @param {!Node} snap
     * @param {string} childKey
     * @param {!Node} childSnap
     * @param {!CompleteChildSource} source
     * @param {?ChildChangeAccumulator} changeAccumulator
     * @return {!Node}
     * @private
     */
    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {
        // TODO: rename all cache stuff etc to general snap terminology
        var cmp;
        if (this.reverse_) {
            var indexCmp_1 = this.index_.getCompare();
            cmp = function (a, b) { return indexCmp_1(b, a); };
        }
        else {
            cmp = this.index_.getCompare();
        }
        var oldEventCache = snap;
        util_1.assert(oldEventCache.numChildren() == this.limit_, '');
        var newChildNamedNode = new Node_1.NamedNode(childKey, childSnap);
        var windowBoundary = this.reverse_
            ? oldEventCache.getFirstChild(this.index_)
            : oldEventCache.getLastChild(this.index_);
        var inRange = this.rangedFilter_.matches(newChildNamedNode);
        if (oldEventCache.hasChild(childKey)) {
            var oldChildSnap = oldEventCache.getImmediateChild(childKey);
            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
            while (nextChild != null &&
                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {
                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
                // been applied to the limited filter yet. Ignore this next child which will be updated later in
                // the limited filter...
                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
            }
            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
            if (remainsInWindow) {
                if (changeAccumulator != null) {
                    changeAccumulator.trackChildChange(Change_1.Change.childChangedChange(childKey, childSnap, oldChildSnap));
                }
                return oldEventCache.updateImmediateChild(childKey, childSnap);
            }
            else {
                if (changeAccumulator != null) {
                    changeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(childKey, oldChildSnap));
                }
                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode_1.ChildrenNode.EMPTY_NODE);
                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
                if (nextChildInRange) {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(Change_1.Change.childAddedChange(nextChild.name, nextChild.node));
                    }
                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
                }
                else {
                    return newEventCache;
                }
            }
        }
        else if (childSnap.isEmpty()) {
            // we're deleting a node, but it was not in the window, so ignore it
            return snap;
        }
        else if (inRange) {
            if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                if (changeAccumulator != null) {
                    changeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(windowBoundary.name, windowBoundary.node));
                    changeAccumulator.trackChildChange(Change_1.Change.childAddedChange(childKey, childSnap));
                }
                return oldEventCache
                    .updateImmediateChild(childKey, childSnap)
                    .updateImmediateChild(windowBoundary.name, ChildrenNode_1.ChildrenNode.EMPTY_NODE);
            }
            else {
                return snap;
            }
        }
        else {
            return snap;
        }
    };
    return LimitedFilter;
}());
exports.LimitedFilter = LimitedFilter;

//# sourceMappingURL=LimitedFilter.js.map


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var Reference_1 = __webpack_require__(30);
var DataSnapshot_1 = __webpack_require__(31);
var Path_1 = __webpack_require__(2);
var Tree_1 = __webpack_require__(143);
var PriorityIndex_1 = __webpack_require__(3);
var util_2 = __webpack_require__(1);
var ServerValues_1 = __webpack_require__(58);
var validation_1 = __webpack_require__(9);
var util_3 = __webpack_require__(0);
var nodeFromJSON_1 = __webpack_require__(15);
var ChildrenNode_1 = __webpack_require__(4);
var Repo_1 = __webpack_require__(23);
// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific
// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well
// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.
// For now it's part of Repo, but in its own file.
/**
 * @enum {number}
 */
var TransactionStatus;
(function (TransactionStatus) {
    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the
    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to
    // mismatched hash.
    TransactionStatus[TransactionStatus["RUN"] = 0] = "RUN";
    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted
    // or rejected yet).
    TransactionStatus[TransactionStatus["SENT"] = 1] = "SENT";
    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be
    // removed when we get a chance to prune completed ones.
    TransactionStatus[TransactionStatus["COMPLETED"] = 2] = "COMPLETED";
    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).
    // If it comes back as unsuccessful, we'll abort it.
    TransactionStatus[TransactionStatus["SENT_NEEDS_ABORT"] = 3] = "SENT_NEEDS_ABORT";
    // Temporary state used to mark transactions that need to be aborted.
    TransactionStatus[TransactionStatus["NEEDS_ABORT"] = 4] = "NEEDS_ABORT";
})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));
/**
 * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's
 * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.
 * @type {number}
 * @const
 * @private
 */
Repo_1.Repo.MAX_TRANSACTION_RETRIES_ = 25;
/**
 * Setup the transaction data structures
 * @private
 */
Repo_1.Repo.prototype.transactions_init_ = function () {
    /**
     * Stores queues of outstanding transactions for Firebase locations.
     *
     * @type {!Tree.<Array.<!Transaction>>}
     * @private
     */
    this.transactionQueueTree_ = new Tree_1.Tree();
};
/**
 * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.
 *
 * @param {!Path} path Path at which to do transaction.
 * @param {function(*):*} transactionUpdate Update callback.
 * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.
 * @param {boolean} applyLocally Whether or not to make intermediate results visible
 */
Repo_1.Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {
    this.log_('transaction on ' + path);
    // Add a watch to make sure we get server updates.
    var valueCallback = function () { };
    var watchRef = new Reference_1.Reference(this, path);
    watchRef.on('value', valueCallback);
    var unwatcher = function () {
        watchRef.off('value', valueCallback);
    };
    // Initialize transaction.
    var transaction = {
        path: path,
        update: transactionUpdate,
        onComplete: onComplete,
        // One of TransactionStatus enums.
        status: null,
        // Used when combining transactions at different locations to figure out which one goes first.
        order: util_2.LUIDGenerator(),
        // Whether to raise local events for this transaction.
        applyLocally: applyLocally,
        // Count of how many times we've retried the transaction.
        retryCount: 0,
        // Function to call to clean up our .on() listener.
        unwatcher: unwatcher,
        // Stores why a transaction was aborted.
        abortReason: null,
        currentWriteId: null,
        currentInputSnapshot: null,
        currentOutputSnapshotRaw: null,
        currentOutputSnapshotResolved: null
    };
    // Run transaction initially.
    var currentState = this.getLatestState_(path);
    transaction.currentInputSnapshot = currentState;
    var newVal = transaction.update(currentState.val());
    if (newVal === undefined) {
        // Abort transaction.
        transaction.unwatcher();
        transaction.currentOutputSnapshotRaw = null;
        transaction.currentOutputSnapshotResolved = null;
        if (transaction.onComplete) {
            // We just set the input snapshot, so this cast should be safe
            var snapshot = new DataSnapshot_1.DataSnapshot(transaction.currentInputSnapshot, new Reference_1.Reference(this, transaction.path), PriorityIndex_1.PRIORITY_INDEX);
            transaction.onComplete(null, false, snapshot);
        }
    }
    else {
        validation_1.validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);
        // Mark as run and add to our queue.
        transaction.status = TransactionStatus.RUN;
        var queueNode = this.transactionQueueTree_.subTree(path);
        var nodeQueue = queueNode.getValue() || [];
        nodeQueue.push(transaction);
        queueNode.setValue(nodeQueue);
        // Update visibleData and raise events
        // Note: We intentionally raise events after updating all of our transaction state, since the user could
        // start new transactions from the event callbacks.
        var priorityForNode = void 0;
        if (typeof newVal === 'object' &&
            newVal !== null &&
            util_3.contains(newVal, '.priority')) {
            priorityForNode = util_3.safeGet(newVal, '.priority');
            util_1.assert(validation_1.isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +
                'Priority must be a valid string, finite number, server value, or null.');
        }
        else {
            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||
                ChildrenNode_1.ChildrenNode.EMPTY_NODE;
            priorityForNode = currentNode.getPriority().val();
        }
        priorityForNode /** @type {null|number|string} */ = priorityForNode;
        var serverValues = this.generateServerValues();
        var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(newVal, priorityForNode);
        var newNode = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);
        transaction.currentOutputSnapshotRaw = newNodeUnresolved;
        transaction.currentOutputSnapshotResolved = newNode;
        transaction.currentWriteId = this.getNextWriteId_();
        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);
        this.eventQueue_.raiseEventsForChangedPath(path, events);
        this.sendReadyTransactions_();
    }
};
/**
 * @param {!Path} path
 * @param {Array.<number>=} excludeSets A specific set to exclude
 * @return {Node}
 * @private
 */
Repo_1.Repo.prototype.getLatestState_ = function (path, excludeSets) {
    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||
        ChildrenNode_1.ChildrenNode.EMPTY_NODE);
};
/**
 * Sends any already-run transactions that aren't waiting for outstanding transactions to
 * complete.
 *
 * Externally it's called with no arguments, but it calls itself recursively with a particular
 * transactionQueueTree node to recurse through the tree.
 *
 * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.
 * @private
 */
Repo_1.Repo.prototype.sendReadyTransactions_ = function (node) {
    var _this = this;
    if (node === void 0) { node = this.transactionQueueTree_; }
    // Before recursing, make sure any completed transactions are removed.
    if (!node) {
        this.pruneCompletedTransactionsBelowNode_(node);
    }
    if (node.getValue() !== null) {
        var queue = this.buildTransactionQueue_(node);
        util_1.assert(queue.length > 0, 'Sending zero length transaction queue');
        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });
        // If they're all run (and not sent), we can send them.  Else, we must wait.
        if (allRun) {
            this.sendTransactionQueue_(node.path(), queue);
        }
    }
    else if (node.hasChildren()) {
        node.forEachChild(function (childNode) {
            _this.sendReadyTransactions_(childNode);
        });
    }
};
/**
 * Given a list of run transactions, send them to the server and then handle the result (success or failure).
 *
 * @param {!Path} path The location of the queue.
 * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.
 * @private
 */
Repo_1.Repo.prototype.sendTransactionQueue_ = function (path, queue) {
    var _this = this;
    // Mark transactions as sent and increment retry count!
    var setsToIgnore = queue.map(function (txn) {
        return txn.currentWriteId;
    });
    var latestState = this.getLatestState_(path, setsToIgnore);
    var snapToSend = latestState;
    var latestHash = latestState.hash();
    for (var i = 0; i < queue.length; i++) {
        var txn = queue[i];
        util_1.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');
        txn.status = TransactionStatus.SENT;
        txn.retryCount++;
        var relativePath = Path_1.Path.relativePath(path, txn.path);
        // If we've gotten to this point, the output snapshot must be defined.
        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);
    }
    var dataToSend = snapToSend.val(true);
    var pathToSend = path;
    // Send the put.
    this.server_.put(pathToSend.toString(), dataToSend, function (status) {
        _this.log_('transaction put response', {
            path: pathToSend.toString(),
            status: status
        });
        var events = [];
        if (status === 'ok') {
            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
            // the callback could trigger more transactions or sets.
            var callbacks = [];
            for (var i = 0; i < queue.length; i++) {
                queue[i].status = TransactionStatus.COMPLETED;
                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));
                if (queue[i].onComplete) {
                    // We never unset the output snapshot, and given that this transaction is complete, it should be set
                    var node = queue[i].currentOutputSnapshotResolved;
                    var ref = new Reference_1.Reference(_this, queue[i].path);
                    var snapshot = new DataSnapshot_1.DataSnapshot(node, ref, PriorityIndex_1.PRIORITY_INDEX);
                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));
                }
                queue[i].unwatcher();
            }
            // Now remove the completed transactions.
            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));
            // There may be pending transactions that we can now send.
            _this.sendReadyTransactions_();
            _this.eventQueue_.raiseEventsForChangedPath(path, events);
            // Finally, trigger onComplete callbacks.
            for (var i = 0; i < callbacks.length; i++) {
                util_2.exceptionGuard(callbacks[i]);
            }
        }
        else {
            // transactions are no longer sent.  Update their status appropriately.
            if (status === 'datastale') {
                for (var i = 0; i < queue.length; i++) {
                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)
                        queue[i].status = TransactionStatus.NEEDS_ABORT;
                    else
                        queue[i].status = TransactionStatus.RUN;
                }
            }
            else {
                util_2.warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
                for (var i = 0; i < queue.length; i++) {
                    queue[i].status = TransactionStatus.NEEDS_ABORT;
                    queue[i].abortReason = status;
                }
            }
            _this.rerunTransactions_(path);
        }
    }, latestHash);
};
/**
 * Finds all transactions dependent on the data at changedPath and reruns them.
 *
 * Should be called any time cached data changes.
 *
 * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to
 * be raised for.
 *
 * @param {!Path} changedPath The path in mergedData that changed.
 * @return {!Path} The rootmost path that was affected by rerunning transactions.
 * @private
 */
Repo_1.Repo.prototype.rerunTransactions_ = function (changedPath) {
    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);
    var path = rootMostTransactionNode.path();
    var queue = this.buildTransactionQueue_(rootMostTransactionNode);
    this.rerunTransactionQueue_(queue, path);
    return path;
};
/**
 * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).
 *
 * @param {Array.<Transaction>} queue The queue of transactions to run.
 * @param {!Path} path The path the queue is for.
 * @private
 */
Repo_1.Repo.prototype.rerunTransactionQueue_ = function (queue, path) {
    if (queue.length === 0) {
        return; // Nothing to do!
    }
    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
    // the callback could trigger more transactions or sets.
    var callbacks = [];
    var events = [];
    // Ignore all of the sets we're going to re-run.
    var txnsToRerun = queue.filter(function (q) {
        return q.status === TransactionStatus.RUN;
    });
    var setsToIgnore = txnsToRerun.map(function (q) {
        return q.currentWriteId;
    });
    for (var i = 0; i < queue.length; i++) {
        var transaction = queue[i];
        var relativePath = Path_1.Path.relativePath(path, transaction.path);
        var abortTransaction = false, abortReason = void 0;
        util_1.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
        if (transaction.status === TransactionStatus.NEEDS_ABORT) {
            abortTransaction = true;
            abortReason = transaction.abortReason;
            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
        }
        else if (transaction.status === TransactionStatus.RUN) {
            if (transaction.retryCount >= Repo_1.Repo.MAX_TRANSACTION_RETRIES_) {
                abortTransaction = true;
                abortReason = 'maxretry';
                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
            }
            else {
                // This code reruns a transaction
                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);
                transaction.currentInputSnapshot = currentNode;
                var newData = queue[i].update(currentNode.val());
                if (newData !== undefined) {
                    validation_1.validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
                    var newDataNode = nodeFromJSON_1.nodeFromJSON(newData);
                    var hasExplicitPriority = typeof newData === 'object' &&
                        newData != null &&
                        util_3.contains(newData, '.priority');
                    if (!hasExplicitPriority) {
                        // Keep the old priority if there wasn't a priority explicitly specified.
                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());
                    }
                    var oldWriteId = transaction.currentWriteId;
                    var serverValues = this.generateServerValues();
                    var newNodeResolved = ServerValues_1.resolveDeferredValueSnapshot(newDataNode, serverValues);
                    transaction.currentOutputSnapshotRaw = newDataNode;
                    transaction.currentOutputSnapshotResolved = newNodeResolved;
                    transaction.currentWriteId = this.getNextWriteId_();
                    // Mutates setsToIgnore in place
                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));
                }
                else {
                    abortTransaction = true;
                    abortReason = 'nodata';
                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
                }
            }
        }
        this.eventQueue_.raiseEventsForChangedPath(path, events);
        events = [];
        if (abortTransaction) {
            // Abort.
            queue[i].status = TransactionStatus.COMPLETED;
            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).
            // So defer the unwatcher until we're done.
            (function (unwatcher) {
                setTimeout(unwatcher, Math.floor(0));
            })(queue[i].unwatcher);
            if (queue[i].onComplete) {
                if (abortReason === 'nodata') {
                    var ref = new Reference_1.Reference(this, queue[i].path);
                    // We set this field immediately, so it's safe to cast to an actual snapshot
                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;
                    var snapshot = new DataSnapshot_1.DataSnapshot(lastInput, ref, PriorityIndex_1.PRIORITY_INDEX);
                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));
                }
                else {
                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));
                }
            }
        }
    }
    // Clean up completed transactions.
    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);
    // Now fire callbacks, now that we're in a good, known state.
    for (var i = 0; i < callbacks.length; i++) {
        util_2.exceptionGuard(callbacks[i]);
    }
    // Try to send the transaction result to the server.
    this.sendReadyTransactions_();
};
/**
 * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns
 * the node for the given path if there are no pending transactions on any ancestor.
 *
 * @param {!Path} path The location to start at.
 * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.
 * @private
 */
Repo_1.Repo.prototype.getAncestorTransactionNode_ = function (path) {
    var front;
    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.
    var transactionNode = this.transactionQueueTree_;
    while ((front = path.getFront()) !== null &&
        transactionNode.getValue() === null) {
        transactionNode = transactionNode.subTree(front);
        path = path.popFront();
    }
    return transactionNode;
};
/**
 * Builds the queue of all transactions at or below the specified transactionNode.
 *
 * @param {!Tree.<Array.<Transaction>>} transactionNode
 * @return {Array.<Transaction>} The generated queue.
 * @private
 */
Repo_1.Repo.prototype.buildTransactionQueue_ = function (transactionNode) {
    // Walk any child transaction queues and aggregate them into a single queue.
    var transactionQueue = [];
    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);
    // Sort them by the order the transactions were created.
    transactionQueue.sort(function (a, b) {
        return a.order - b.order;
    });
    return transactionQueue;
};
/**
 * @param {!Tree.<Array.<Transaction>>} node
 * @param {Array.<Transaction>} queue
 * @private
 */
Repo_1.Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {
    var _this = this;
    var nodeQueue = node.getValue();
    if (nodeQueue !== null) {
        for (var i = 0; i < nodeQueue.length; i++) {
            queue.push(nodeQueue[i]);
        }
    }
    node.forEachChild(function (child) {
        _this.aggregateTransactionQueuesForNode_(child, queue);
    });
};
/**
 * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
 *
 * @param {!Tree.<Array.<!Transaction>>} node
 * @private
 */
Repo_1.Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {
    var _this = this;
    var queue = node.getValue();
    if (queue) {
        var to = 0;
        for (var from = 0; from < queue.length; from++) {
            if (queue[from].status !== TransactionStatus.COMPLETED) {
                queue[to] = queue[from];
                to++;
            }
        }
        queue.length = to;
        node.setValue(queue.length > 0 ? queue : null);
    }
    node.forEachChild(function (childNode) {
        _this.pruneCompletedTransactionsBelowNode_(childNode);
    });
};
/**
 * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()
 * since we consider them incompatible with transactions.
 *
 * @param {!Path} path Path for which we want to abort related transactions.
 * @return {!Path}
 * @private
 */
Repo_1.Repo.prototype.abortTransactions_ = function (path) {
    var _this = this;
    var affectedPath = this.getAncestorTransactionNode_(path).path();
    var transactionNode = this.transactionQueueTree_.subTree(path);
    transactionNode.forEachAncestor(function (node) {
        _this.abortTransactionsOnNode_(node);
    });
    this.abortTransactionsOnNode_(transactionNode);
    transactionNode.forEachDescendant(function (node) {
        _this.abortTransactionsOnNode_(node);
    });
    return affectedPath;
};
/**
 * Abort transactions stored in this transaction queue node.
 *
 * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.
 * @private
 */
Repo_1.Repo.prototype.abortTransactionsOnNode_ = function (node) {
    var queue = node.getValue();
    if (queue !== null) {
        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
        // the callback could trigger more transactions or sets.
        var callbacks = [];
        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones
        // can be immediately aborted and removed.
        var events = [];
        var lastSent = -1;
        for (var i = 0; i < queue.length; i++) {
            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {
                // Already marked.  No action needed.
            }
            else if (queue[i].status === TransactionStatus.SENT) {
                util_1.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
                lastSent = i;
                // Mark transaction for abort when it comes back.
                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;
                queue[i].abortReason = 'set';
            }
            else {
                util_1.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');
                // We can abort it immediately.
                queue[i].unwatcher();
                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));
                if (queue[i].onComplete) {
                    var snapshot = null;
                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));
                }
            }
        }
        if (lastSent === -1) {
            // We're not waiting for any sent transactions.  We can clear the queue.
            node.setValue(null);
        }
        else {
            // Remove the transactions we aborted.
            queue.length = lastSent + 1;
        }
        // Now fire the callbacks.
        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);
        for (var i = 0; i < callbacks.length; i++) {
            util_2.exceptionGuard(callbacks[i]);
        }
    }
};

//# sourceMappingURL=Repo_transaction.js.map


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(0);
var Path_1 = __webpack_require__(2);
var util_2 = __webpack_require__(0);
/**
 * Node in a Tree.
 */
var TreeNode = /** @class */ (function () {
    function TreeNode() {
        // TODO: Consider making accessors that create children and value lazily or
        // separate Internal / Leaf 'types'.
        this.children = {};
        this.childCount = 0;
        this.value = null;
    }
    return TreeNode;
}());
exports.TreeNode = TreeNode;
/**
 * A light-weight tree, traversable by path.  Nodes can have both values and children.
 * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
 * children.
 */
var Tree = /** @class */ (function () {
    /**
     * @template T
     * @param {string=} name_ Optional name of the node.
     * @param {Tree=} parent_ Optional parent node.
     * @param {TreeNode=} node_ Optional node to wrap.
     */
    function Tree(name_, parent_, node_) {
        if (name_ === void 0) { name_ = ''; }
        if (parent_ === void 0) { parent_ = null; }
        if (node_ === void 0) { node_ = new TreeNode(); }
        this.name_ = name_;
        this.parent_ = parent_;
        this.node_ = node_;
    }
    /**
     * Returns a sub-Tree for the given path.
     *
     * @param {!(string|Path)} pathObj Path to look up.
     * @return {!Tree.<T>} Tree for path.
     */
    Tree.prototype.subTree = function (pathObj) {
        // TODO: Require pathObj to be Path?
        var path = pathObj instanceof Path_1.Path ? pathObj : new Path_1.Path(pathObj);
        var child = this, next;
        while ((next = path.getFront()) !== null) {
            var childNode = util_2.safeGet(child.node_.children, next) || new TreeNode();
            child = new Tree(next, child, childNode);
            path = path.popFront();
        }
        return child;
    };
    /**
     * Returns the data associated with this tree node.
     *
     * @return {?T} The data or null if no data exists.
     */
    Tree.prototype.getValue = function () {
        return this.node_.value;
    };
    /**
     * Sets data to this tree node.
     *
     * @param {!T} value Value to set.
     */
    Tree.prototype.setValue = function (value) {
        util_1.assert(typeof value !== 'undefined', 'Cannot set value to undefined');
        this.node_.value = value;
        this.updateParents_();
    };
    /**
     * Clears the contents of the tree node (its value and all children).
     */
    Tree.prototype.clear = function () {
        this.node_.value = null;
        this.node_.children = {};
        this.node_.childCount = 0;
        this.updateParents_();
    };
    /**
     * @return {boolean} Whether the tree has any children.
     */
    Tree.prototype.hasChildren = function () {
        return this.node_.childCount > 0;
    };
    /**
     * @return {boolean} Whether the tree is empty (no value or children).
     */
    Tree.prototype.isEmpty = function () {
        return this.getValue() === null && !this.hasChildren();
    };
    /**
     * Calls action for each child of this tree node.
     *
     * @param {function(!Tree.<T>)} action Action to be called for each child.
     */
    Tree.prototype.forEachChild = function (action) {
        var _this = this;
        util_2.forEach(this.node_.children, function (child, childTree) {
            action(new Tree(child, _this, childTree));
        });
    };
    /**
     * Does a depth-first traversal of this node's descendants, calling action for each one.
     *
     * @param {function(!Tree.<T>)} action Action to be called for each child.
     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to
     *   false.
     * @param {boolean=} childrenFirst Whether to call action on children before calling it on
     *   parent.
     */
    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {
        if (includeSelf && !childrenFirst)
            action(this);
        this.forEachChild(function (child) {
            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);
        });
        if (includeSelf && childrenFirst)
            action(this);
    };
    /**
     * Calls action on each ancestor node.
     *
     * @param {function(!Tree.<T>)} action Action to be called on each parent; return
     *   true to abort.
     * @param {boolean=} includeSelf Whether to call action on this node as well.
     * @return {boolean} true if the action callback returned true.
     */
    Tree.prototype.forEachAncestor = function (action, includeSelf) {
        var node = includeSelf ? this : this.parent();
        while (node !== null) {
            if (action(node)) {
                return true;
            }
            node = node.parent();
        }
        return false;
    };
    /**
     * Does a depth-first traversal of this node's descendants.  When a descendant with a value
     * is found, action is called on it and traversal does not continue inside the node.
     * Action is *not* called on this node.
     *
     * @param {function(!Tree.<T>)} action Action to be called for each child.
     */
    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {
        this.forEachChild(function (child) {
            if (child.getValue() !== null)
                action(child);
            else
                child.forEachImmediateDescendantWithValue(action);
        });
    };
    /**
     * @return {!Path} The path of this tree node, as a Path.
     */
    Tree.prototype.path = function () {
        return new Path_1.Path(this.parent_ === null
            ? this.name_
            : this.parent_.path() + '/' + this.name_);
    };
    /**
     * @return {string} The name of the tree node.
     */
    Tree.prototype.name = function () {
        return this.name_;
    };
    /**
     * @return {?Tree} The parent tree node, or null if this is the root of the tree.
     */
    Tree.prototype.parent = function () {
        return this.parent_;
    };
    /**
     * Adds or removes this child from its parent based on whether it's empty or not.
     *
     * @private
     */
    Tree.prototype.updateParents_ = function () {
        if (this.parent_ !== null)
            this.parent_.updateChild_(this.name_, this);
    };
    /**
     * Adds or removes the passed child to this tree node, depending on whether it's empty.
     *
     * @param {string} childName The name of the child to update.
     * @param {!Tree.<T>} child The child to update.
     * @private
     */
    Tree.prototype.updateChild_ = function (childName, child) {
        var childEmpty = child.isEmpty();
        var childExists = util_2.contains(this.node_.children, childName);
        if (childEmpty && childExists) {
            delete this.node_.children[childName];
            this.node_.childCount--;
            this.updateParents_();
        }
        else if (!childEmpty && !childExists) {
            this.node_.children[childName] = child.node_;
            this.node_.childCount++;
            this.updateParents_();
        }
    };
    return Tree;
}());
exports.Tree = Tree;

//# sourceMappingURL=Tree.js.map


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var WebSocketConnection_1 = __webpack_require__(69);
var BrowserPollConnection_1 = __webpack_require__(68);
/**
 * INTERNAL methods for internal-use only (tests, etc.).
 *
 * Customers shouldn't use these or else should be aware that they could break at any time.
 *
 * @const
 */
exports.forceLongPolling = function () {
    WebSocketConnection_1.WebSocketConnection.forceDisallow();
    BrowserPollConnection_1.BrowserPollConnection.forceAllow();
};
exports.forceWebSockets = function () {
    BrowserPollConnection_1.BrowserPollConnection.forceDisallow();
};
/* Used by App Manager */
exports.isWebSocketsAvailable = function () {
    return WebSocketConnection_1.WebSocketConnection['isAvailable']();
};
exports.setSecurityDebugCallback = function (ref, callback) {
    ref.repo.persistentConnection_.securityDebugCallback_ = callback;
};
exports.stats = function (ref, showDelta) {
    ref.repo.stats(showDelta);
};
exports.statsIncrementCounter = function (ref, metric) {
    ref.repo.statsIncrementCounter(metric);
};
exports.dataUpdateCount = function (ref) {
    return ref.repo.dataUpdateCount;
};
exports.interceptServerData = function (ref, callback) {
    return ref.repo.interceptServerData_(callback);
};

//# sourceMappingURL=internal.js.map


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var RepoInfo_1 = __webpack_require__(49);
var PersistentConnection_1 = __webpack_require__(65);
var RepoManager_1 = __webpack_require__(35);
var Connection_1 = __webpack_require__(67);
exports.DataConnection = PersistentConnection_1.PersistentConnection;
/**
 * @param {!string} pathString
 * @param {function(*)} onComplete
 */
PersistentConnection_1.PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
    this.sendRequest('q', { p: pathString }, onComplete);
};
/**
 * @param {*} data
 * @param {function(*)} onEcho
 */
PersistentConnection_1.PersistentConnection.prototype.echo = function (data, onEcho) {
    this.sendRequest('echo', { d: data }, onEcho);
};
// RealTimeConnection properties that we use in tests.
exports.RealTimeConnection = Connection_1.Connection;
/**
 * @param {function(): string} newHash
 * @return {function()}
 */
exports.hijackHash = function (newHash) {
    var oldPut = PersistentConnection_1.PersistentConnection.prototype.put;
    PersistentConnection_1.PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {
        if (opt_hash !== undefined) {
            opt_hash = newHash();
        }
        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);
    };
    return function () {
        PersistentConnection_1.PersistentConnection.prototype.put = oldPut;
    };
};
/**
 * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}
 */
exports.ConnectionTarget = RepoInfo_1.RepoInfo;
/**
 * @param {!Query} query
 * @return {!string}
 */
exports.queryIdentifier = function (query) {
    return query.queryIdentifier();
};
/**
 * @param {!Query} firebaseRef
 * @return {!Object}
 */
exports.listens = function (firebaseRef) {
    return firebaseRef.repo.persistentConnection_.listens_;
};
/**
 * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
 *
 * @param {boolean} forceRestClient
 */
exports.forceRestClient = function (forceRestClient) {
    RepoManager_1.RepoManager.getInstance().forceRestClient(forceRestClient);
};

//# sourceMappingURL=test_access.js.map


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

__webpack_require__(147);


/***/ }),
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["registerMessaging"] = registerMessaging;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_controllers_window_controller__ = __webpack_require__(148);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_controllers_sw_controller__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__firebase_app__ = __webpack_require__(8);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




function registerMessaging(instance) {
    var messagingName = 'messaging';
    var factoryMethod = function (app) {
        if (self && 'ServiceWorkerGlobalScope' in self) {
            return new __WEBPACK_IMPORTED_MODULE_1__src_controllers_sw_controller__["a" /* default */](app);
        }
        // Assume we are in the window context.
        return new __WEBPACK_IMPORTED_MODULE_0__src_controllers_window_controller__["a" /* default */](app);
    };
    var namespaceExports = {
        // no-inline
        Messaging: __WEBPACK_IMPORTED_MODULE_0__src_controllers_window_controller__["a" /* default */]
    };
    instance.INTERNAL.registerService(messagingName, factoryMethod, namespaceExports);
}
registerMessaging(__WEBPACK_IMPORTED_MODULE_2__firebase_app__["firebase"]);

//# sourceMappingURL=index.js.map


/***/ }),
/* 148 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__controller_interface__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_errors__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__models_worker_page_message__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__models_default_sw__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__models_notification_permission__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__firebase_util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__firebase_util___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__firebase_util__);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var WindowController = /** @class */ (function (_super) {
    __extends(WindowController, _super);
    /**
     * A service that provides a MessagingService instance.
     * @param {!firebase.app.App} app
     */
    function WindowController(app) {
        var _this = _super.call(this, app) || this;
        _this.messageObserver_ = null;
        _this.onMessage_ = Object(__WEBPACK_IMPORTED_MODULE_5__firebase_util__["createSubscribe"])(function (observer) {
            _this.messageObserver_ = observer;
        });
        _this.tokenRefreshObserver_ = null;
        _this.onTokenRefresh_ = Object(__WEBPACK_IMPORTED_MODULE_5__firebase_util__["createSubscribe"])(function (observer) {
            _this.tokenRefreshObserver_ = observer;
        });
        _this.setupSWMessageListener_();
        return _this;
    }
    /**
     * This method returns an FCM token if it can be generated.
     * The return promise will reject if the browser doesn't support
     * FCM, if permission is denied for notifications or it's not
     * possible to generate a token.
     * @export
     * @return {Promise<string> | Promise<null>} Returns a promise the
     * resolves to an FCM token or null if permission isn't granted.
     */
    WindowController.prototype.getToken = function () {
        var _this = this;
        // Check that the required API's are available
        if (!this.isSupported_()) {
            return Promise.reject(this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.UNSUPPORTED_BROWSER));
        }
        return this.manifestCheck_().then(function () {
            return _super.prototype.getToken.call(_this);
        });
    };
    /**
     * The method checks that a manifest is defined and has the correct GCM
     * sender ID.
     * @private
     * @return {Promise} Returns a promise that resolves if the manifest matches
     * our required sender ID
     */
    WindowController.prototype.manifestCheck_ = function () {
        var _this = this;
        if (this.manifestCheckPromise_) {
            return this.manifestCheckPromise_;
        }
        var manifestTag = document.querySelector('link[rel="manifest"]');
        if (!manifestTag) {
            this.manifestCheckPromise_ = Promise.resolve();
        }
        else {
            this.manifestCheckPromise_ = fetch(manifestTag.href)
                .then(function (response) {
                return response.json();
            })
                .catch(function () {
                // If the download or parsing fails allow check.
                // We only want to error if we KNOW that the gcm_sender_id is incorrect.
                return Promise.resolve();
            })
                .then(function (manifestContent) {
                if (!manifestContent) {
                    return;
                }
                if (!manifestContent['gcm_sender_id']) {
                    return;
                }
                if (manifestContent['gcm_sender_id'] !== '103953800507') {
                    throw _this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.INCORRECT_GCM_SENDER_ID);
                }
            });
        }
        return this.manifestCheckPromise_;
    };
    /**
     * Request permission if it is not currently granted
     * @export
     * @returns {Promise} Resolves if the permission was granted, otherwise
     * rejects
     */
    WindowController.prototype.requestPermission = function () {
        var _this = this;
        if (Notification.permission === __WEBPACK_IMPORTED_MODULE_4__models_notification_permission__["a" /* default */].granted) {
            return Promise.resolve();
        }
        return new Promise(function (resolve, reject) {
            var managePermissionResult = function (result) {
                if (result === __WEBPACK_IMPORTED_MODULE_4__models_notification_permission__["a" /* default */].granted) {
                    return resolve();
                }
                else if (result === __WEBPACK_IMPORTED_MODULE_4__models_notification_permission__["a" /* default */].denied) {
                    return reject(_this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.PERMISSION_BLOCKED));
                }
                else {
                    return reject(_this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.PERMISSION_DEFAULT));
                }
            };
            // The Notification.requestPermission API was changed to
            // return a promise so now have to handle both in case
            // browsers stop support callbacks for promised version
            var permissionPromise = Notification.requestPermission(function (result) {
                if (permissionPromise) {
                    // Let the promise manage this
                    return;
                }
                managePermissionResult(result);
            });
            if (permissionPromise) {
                // Prefer the promise version as it's the future API.
                permissionPromise.then(managePermissionResult);
            }
        });
    };
    /**
     * This method allows a developer to override the default service worker and
     * instead use a custom service worker.
     * @export
     * @param {!ServiceWorkerRegistration} registration The service worker
     * registration that should be used to receive the push messages.
     */
    WindowController.prototype.useServiceWorker = function (registration) {
        if (!(registration instanceof ServiceWorkerRegistration)) {
            throw this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.SW_REGISTRATION_EXPECTED);
        }
        if (typeof this.registrationToUse_ !== 'undefined') {
            throw this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.USE_SW_BEFORE_GET_TOKEN);
        }
        this.registrationToUse_ = registration;
    };
    /**
     * @export
     * @param {!firebase.Observer|function(*)} nextOrObserver An observer object
     * or a function triggered on message.
     * @param {function(!Error)=} optError Optional A function triggered on
     * message error.
     * @param {function()=} optCompleted Optional function triggered when the
     * observer is removed.
     * @return {!function()} The unsubscribe function for the observer.
     */
    WindowController.prototype.onMessage = function (nextOrObserver, optError, optCompleted) {
        return this.onMessage_(nextOrObserver, optError, optCompleted);
    };
    /**
     * @export
     * @param {!firebase.Observer|function()} nextOrObserver An observer object
     * or a function triggered on token refresh.
     * @param {function(!Error)=} optError Optional A function
     * triggered on token refresh error.
     * @param {function()=} optCompleted Optional function triggered when the
     * observer is removed.
     * @return {!function()} The unsubscribe function for the observer.
     */
    WindowController.prototype.onTokenRefresh = function (nextOrObserver, optError, optCompleted) {
        return this.onTokenRefresh_(nextOrObserver, optError, optCompleted);
    };
    /**
     * Given a registration, wait for the service worker it relates to
     * become activer
     * @private
     * @param  {ServiceWorkerRegistration} registration Registration to wait
     * for service worker to become active
     * @return {Promise<!ServiceWorkerRegistration>} Wait for service worker
     * registration to become active
     */
    WindowController.prototype.waitForRegistrationToActivate_ = function (registration) {
        var _this = this;
        var serviceWorker = registration.installing || registration.waiting || registration.active;
        return new Promise(function (resolve, reject) {
            if (!serviceWorker) {
                // This is a rare scenario but has occured in firefox
                reject(_this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.NO_SW_IN_REG));
                return;
            }
            // Because the Promise function is called on next tick there is a
            // small chance that the worker became active or redundant already.
            if (serviceWorker.state === 'activated') {
                resolve(registration);
                return;
            }
            if (serviceWorker.state === 'redundant') {
                reject(_this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.SW_REG_REDUNDANT));
                return;
            }
            var stateChangeListener = function () {
                if (serviceWorker.state === 'activated') {
                    resolve(registration);
                }
                else if (serviceWorker.state === 'redundant') {
                    reject(_this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.SW_REG_REDUNDANT));
                }
                else {
                    // Return early and wait to next state change
                    return;
                }
                serviceWorker.removeEventListener('statechange', stateChangeListener);
            };
            serviceWorker.addEventListener('statechange', stateChangeListener);
        });
    };
    /**
     * This will regiater the default service worker and return the registration
     * @private
     * @return {Promise<!ServiceWorkerRegistration>} The service worker
     * registration to be used for the push service.
     */
    WindowController.prototype.getSWRegistration_ = function () {
        var _this = this;
        if (this.registrationToUse_) {
            return this.waitForRegistrationToActivate_(this.registrationToUse_);
        }
        // Make the registration null so we know useServiceWorker will not
        // use a new service worker as registrationToUse_ is no longer undefined
        this.registrationToUse_ = null;
        return navigator.serviceWorker
            .register(__WEBPACK_IMPORTED_MODULE_3__models_default_sw__["a" /* default */].path, {
            scope: __WEBPACK_IMPORTED_MODULE_3__models_default_sw__["a" /* default */].scope
        })
            .catch(function (err) {
            throw _this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.FAILED_DEFAULT_REGISTRATION, {
                browserErrorMessage: err.message
            });
        })
            .then(function (registration) {
            return _this.waitForRegistrationToActivate_(registration).then(function () {
                _this.registrationToUse_ = registration;
                // We update after activation due to an issue with Firefox v49 where
                // a race condition occassionally causes the service work to not
                // install
                registration.update();
                return registration;
            });
        });
    };
    /**
     * This method will set up a message listener to handle
     * events from the service worker that should trigger
     * events in the page.
     *
     * @private
     */
    WindowController.prototype.setupSWMessageListener_ = function () {
        var _this = this;
        if (!('serviceWorker' in navigator)) {
            return;
        }
        navigator.serviceWorker.addEventListener('message', function (event) {
            if (!event.data || !event.data[__WEBPACK_IMPORTED_MODULE_2__models_worker_page_message__["a" /* default */].PARAMS.TYPE_OF_MSG]) {
                // Not a message from FCM
                return;
            }
            var workerPageMessage = event.data;
            switch (workerPageMessage[__WEBPACK_IMPORTED_MODULE_2__models_worker_page_message__["a" /* default */].PARAMS.TYPE_OF_MSG]) {
                case __WEBPACK_IMPORTED_MODULE_2__models_worker_page_message__["a" /* default */].TYPES_OF_MSG.PUSH_MSG_RECEIVED:
                case __WEBPACK_IMPORTED_MODULE_2__models_worker_page_message__["a" /* default */].TYPES_OF_MSG.NOTIFICATION_CLICKED:
                    var pushMessage = workerPageMessage[__WEBPACK_IMPORTED_MODULE_2__models_worker_page_message__["a" /* default */].PARAMS.DATA];
                    _this.messageObserver_.next(pushMessage);
                    break;
                default:
                    // Noop.
                    break;
            }
        }, false);
    };
    /**
     * Checks to see if the required API's are valid or not.
     * @private
     * @return {boolean} Returns true if the desired APIs are available.
     */
    WindowController.prototype.isSupported_ = function () {
        return ('serviceWorker' in navigator &&
            'PushManager' in window &&
            'Notification' in window &&
            'fetch' in window &&
            ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&
            PushSubscription.prototype.hasOwnProperty('getKey'));
    };
    return WindowController;
}(__WEBPACK_IMPORTED_MODULE_0__controller_interface__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (WindowController);

//# sourceMappingURL=window-controller.js.map


/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__firebase_util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__firebase_util___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__firebase_util__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__errors__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_array_buffer_to_base64__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fcm_details__ = __webpack_require__(73);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var FCM_TOKEN_OBJ_STORE = 'fcm_token_object_Store';
var FCM_TOKEN_DETAILS_DB_VERSION = 1;
var TokenManager = /** @class */ (function () {
    function TokenManager() {
        this.errorFactory_ = new __WEBPACK_IMPORTED_MODULE_0__firebase_util__["ErrorFactory"]('messaging', 'Messaging', __WEBPACK_IMPORTED_MODULE_1__errors__["a" /* default */].map);
        this.openDbPromise_ = null;
    }
    /**
     * Get the indexedDB as a promsie.
     * @private
     * @return {Promise<IDBDatabase>} The IndexedDB database
     */
    TokenManager.prototype.openDatabase_ = function () {
        if (this.openDbPromise_) {
            return this.openDbPromise_;
        }
        this.openDbPromise_ = new Promise(function (resolve, reject) {
            var request = indexedDB.open(TokenManager.DB_NAME, FCM_TOKEN_DETAILS_DB_VERSION);
            request.onerror = function (event) {
                reject(event.target.error);
            };
            request.onsuccess = function (event) {
                resolve(event.target.result);
            };
            request.onupgradeneeded = function (event) {
                var db = event.target.result;
                var objectStore = db.createObjectStore(FCM_TOKEN_OBJ_STORE, {
                    keyPath: 'swScope'
                });
                // Make sure the sender ID can be searched
                objectStore.createIndex('fcmSenderId', 'fcmSenderId', {
                    unique: false
                });
                objectStore.createIndex('fcmToken', 'fcmToken', {
                    unique: true
                });
            };
        });
        return this.openDbPromise_;
    };
    /**
     * Close the currently open database.
     * @return {Promise<?>} Returns the result of the promise chain.
     */
    TokenManager.prototype.closeDatabase = function () {
        var _this = this;
        if (this.openDbPromise_) {
            return this.openDbPromise_.then(function (db) {
                db.close();
                _this.openDbPromise_ = null;
            });
        }
        return Promise.resolve();
    };
    /**
     * Given a token, this method will look up the details in indexedDB.
     * @public
     * @param {string} fcmToken
     * @return {Promise<Object>} The details associated with that token.
     */
    TokenManager.prototype.getTokenDetailsFromToken = function (fcmToken) {
        return this.openDatabase_().then(function (db) {
            return new Promise(function (resolve, reject) {
                var transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);
                var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);
                var index = objectStore.index('fcmToken');
                var request = index.get(fcmToken);
                request.onerror = function (event) {
                    reject(event.target.error);
                };
                request.onsuccess = function (event) {
                    resolve(event.target.result);
                };
            });
        });
    };
    TokenManager.prototype.getTokenDetailsFromSWScope_ = function (swScope) {
        return this.openDatabase_().then(function (db) {
            return new Promise(function (resolve, reject) {
                var transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);
                var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);
                var scopeRequest = objectStore.get(swScope);
                scopeRequest.onerror = function (event) {
                    reject(event.target.error);
                };
                scopeRequest.onsuccess = function (event) {
                    resolve(event.target.result);
                };
            });
        });
    };
    TokenManager.prototype.getAllTokenDetailsForSenderId_ = function (senderId) {
        return this.openDatabase_().then(function (db) {
            return new Promise(function (resolve, reject) {
                var transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);
                var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);
                var senderIdTokens = [];
                var cursorRequest = objectStore.openCursor();
                cursorRequest.onerror = function (event) {
                    reject(event.target.error);
                };
                cursorRequest.onsuccess = function (event) {
                    var cursor = event.target.result;
                    if (cursor) {
                        if (cursor.value['fcmSenderId'] === senderId) {
                            senderIdTokens.push(cursor.value);
                        }
                        cursor.continue();
                    }
                    else {
                        resolve(senderIdTokens);
                    }
                };
            });
        });
    };
    /**
     * Given a PushSubscription and messagingSenderId, get an FCM token.
     * @public
     * @param  {string} senderId The 'messagingSenderId' to tie the token to.
     * @param  {PushSubscription} subscription The PushSusbcription to "federate".
     * @param  {string=} pushSet If defined this will swap the subscription for
     * matching FCM token.
     * @return {Promise<!Object>} Returns the FCM token to be used in place
     * of the PushSubscription.
     */
    TokenManager.prototype.subscribeToFCM = function (senderId, subscription, pushSet) {
        var _this = this;
        var p256dh = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_array_buffer_to_base64__["a" /* default */])(subscription['getKey']('p256dh'));
        var auth = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_array_buffer_to_base64__["a" /* default */])(subscription['getKey']('auth'));
        var fcmSubscribeBody = "authorized_entity=" + senderId + "&" +
            ("endpoint=" + subscription.endpoint + "&") +
            ("encryption_key=" + p256dh + "&") +
            ("encryption_auth=" + auth);
        if (pushSet) {
            fcmSubscribeBody += "&pushSet=" + pushSet;
        }
        var headers = new Headers();
        headers.append('Content-Type', 'application/x-www-form-urlencoded');
        var subscribeOptions = {
            method: 'POST',
            headers: headers,
            body: fcmSubscribeBody
        };
        return fetch(__WEBPACK_IMPORTED_MODULE_3__fcm_details__["a" /* default */].ENDPOINT + '/fcm/connect/subscribe', subscribeOptions)
            .then(function (response) { return response.json(); })
            .then(function (response) {
            var fcmTokenResponse = response;
            if (fcmTokenResponse['error']) {
                var message = fcmTokenResponse['error']['message'];
                throw _this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__errors__["a" /* default */].codes.TOKEN_SUBSCRIBE_FAILED, {
                    message: message
                });
            }
            if (!fcmTokenResponse['token']) {
                throw _this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__errors__["a" /* default */].codes.TOKEN_SUBSCRIBE_NO_TOKEN);
            }
            if (!fcmTokenResponse['pushSet']) {
                throw _this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__errors__["a" /* default */].codes.TOKEN_SUBSCRIBE_NO_PUSH_SET);
            }
            return {
                token: fcmTokenResponse['token'],
                pushSet: fcmTokenResponse['pushSet']
            };
        });
    };
    /**
     * Checks the that fields in the PushSubscription are equivalent to the
     * details stores in the masterTokenDetails.
     * @private
     * @param  {PushSubscription} subscription The push subscription we expect
     * the master token to match.
     * @param  {Object}  masterTokenDetails The saved details we wish to compare
     * with the PushSubscription
     * @return {boolean} true if the subscription and token details are
     * equivalent.
     */
    TokenManager.prototype.isSameSubscription_ = function (subscription, masterTokenDetails) {
        // getKey() isn't defined in the PushSubscription externs file, hence
        // subscription['getKey']('<key name>').
        return (subscription.endpoint === masterTokenDetails['endpoint'] &&
            Object(__WEBPACK_IMPORTED_MODULE_2__helpers_array_buffer_to_base64__["a" /* default */])(subscription['getKey']('auth')) ===
                masterTokenDetails['auth'] &&
            Object(__WEBPACK_IMPORTED_MODULE_2__helpers_array_buffer_to_base64__["a" /* default */])(subscription['getKey']('p256dh')) ===
                masterTokenDetails['p256dh']);
    };
    /**
     * Save the details for the fcm token for re-use at a later date.
     * @private
     * @param  {string} senderId The 'messagingSenderId' used for this project
     * @param  {ServiceWorkerRegistration} swRegistration The service worker
     * used to subscribe the user for web push
     * @param  {PushSubscription} subscription The push subscription passed to
     * FCM for the current token.
     * @param  {string} fcmToken The FCM token currently used on this
     * device.
     * @param  {string} fcmPushSet The FCM push tied to the fcm token.
     * @return {Promise<void>}
     */
    TokenManager.prototype.saveTokenDetails_ = function (senderId, swRegistration, subscription, fcmToken, fcmPushSet) {
        var details = {
            swScope: swRegistration.scope,
            endpoint: subscription.endpoint,
            auth: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_array_buffer_to_base64__["a" /* default */])(subscription['getKey']('auth')),
            p256dh: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_array_buffer_to_base64__["a" /* default */])(subscription['getKey']('p256dh')),
            fcmToken: fcmToken,
            fcmPushSet: fcmPushSet,
            fcmSenderId: senderId
        };
        return this.openDatabase_().then(function (db) {
            return new Promise(function (resolve, reject) {
                var transaction = db.transaction([FCM_TOKEN_OBJ_STORE], 'readwrite');
                var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);
                var request = objectStore.put(details);
                request.onerror = function (event) {
                    reject(event.target.error);
                };
                request.onsuccess = function (event) {
                    resolve();
                };
            });
        });
    };
    /**
     * Returns the saved FCM Token if one is available and still valid,
     * otherwise `null` is returned.
     * @param {string} senderId This should be the sender ID associated with the
     * FCM Token being retrieved.
     * @param {ServiceWorkerRegistration} swRegistration Registration to be used
     * to subscribe the user to push.
     * @return {Promise<string> | Promise} Returns the saved FCM Token if
     * avilable and valid.
     * @export
     */
    TokenManager.prototype.getSavedToken = function (senderId, swRegistration) {
        var _this = this;
        if (!(swRegistration instanceof ServiceWorkerRegistration)) {
            return Promise.reject(this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__errors__["a" /* default */].codes.SW_REGISTRATION_EXPECTED));
        }
        if (typeof senderId !== 'string' || senderId.length === 0) {
            return Promise.reject(this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__errors__["a" /* default */].codes.BAD_SENDER_ID));
        }
        return this.getAllTokenDetailsForSenderId_(senderId)
            .then(function (allTokenDetails) {
            if (allTokenDetails.length === 0) {
                return;
            }
            var index = allTokenDetails.findIndex(function (tokenDetails) {
                return (swRegistration.scope === tokenDetails['swScope'] &&
                    senderId === tokenDetails['fcmSenderId']);
            });
            if (index === -1) {
                return;
            }
            return allTokenDetails[index];
        })
            .then(function (tokenDetails) {
            if (!tokenDetails) {
                return;
            }
            return swRegistration.pushManager
                .getSubscription()
                .catch(function (err) {
                throw _this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__errors__["a" /* default */].codes.GET_SUBSCRIPTION_FAILED);
            })
                .then(function (subscription) {
                if (subscription &&
                    _this.isSameSubscription_(subscription, tokenDetails)) {
                    return tokenDetails['fcmToken'];
                }
            });
        });
    };
    /**
     * Creates a new FCM token.
     */
    TokenManager.prototype.createToken = function (senderId, swRegistration) {
        var _this = this;
        if (typeof senderId !== 'string' || senderId.length === 0) {
            return Promise.reject(this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__errors__["a" /* default */].codes.BAD_SENDER_ID));
        }
        if (!(swRegistration instanceof ServiceWorkerRegistration)) {
            return Promise.reject(this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__errors__["a" /* default */].codes.SW_REGISTRATION_EXPECTED));
        }
        // Check for existing subscription first
        var subscription;
        var fcmTokenDetails;
        return swRegistration.pushManager
            .getSubscription()
            .then(function (subscription) {
            if (subscription) {
                return subscription;
            }
            return swRegistration.pushManager.subscribe(__WEBPACK_IMPORTED_MODULE_3__fcm_details__["a" /* default */].SUBSCRIPTION_OPTIONS);
        })
            .then(function (sub) {
            subscription = sub;
            return _this.subscribeToFCM(senderId, subscription);
        })
            .then(function (tokenDetails) {
            fcmTokenDetails = tokenDetails;
            return _this.saveTokenDetails_(senderId, swRegistration, subscription, fcmTokenDetails['token'], fcmTokenDetails['pushSet']);
        })
            .then(function () { return fcmTokenDetails['token']; });
    };
    /**
     * This method deletes details of the current FCM token.
     * It's returning a promise in case we need to move to an async
     * method for deleting at a later date.
     * @param {string} token Token to be deleted
     * @return {Promise<Object>} Resolves once the FCM token details have been
     * deleted and returns the deleted details.
     */
    TokenManager.prototype.deleteToken = function (token) {
        var _this = this;
        if (typeof token !== 'string' || token.length === 0) {
            return Promise.reject(this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__errors__["a" /* default */].codes.INVALID_DELETE_TOKEN));
        }
        return this.getTokenDetailsFromToken(token).then(function (details) {
            if (!details) {
                throw _this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__errors__["a" /* default */].codes.DELETE_TOKEN_NOT_FOUND);
            }
            return _this.openDatabase_().then(function (db) {
                return new Promise(function (resolve, reject) {
                    var transaction = db.transaction([FCM_TOKEN_OBJ_STORE], 'readwrite');
                    var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);
                    var request = objectStore.delete(details['swScope']);
                    request.onerror = function (event) {
                        reject(event.target.error);
                    };
                    request.onsuccess = function (event) {
                        if (event.target.result === 0) {
                            reject(_this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__errors__["a" /* default */].codes.FAILED_TO_DELETE_TOKEN));
                            return;
                        }
                        resolve(details);
                    };
                });
            });
        });
    };
    return TokenManager;
}());
/* harmony default export */ __webpack_exports__["a"] = (TokenManager);

//# sourceMappingURL=token-manager.js.map


/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function toBase64(arrayBuffer) {
    var uint8Version = new Uint8Array(arrayBuffer);
    return window.btoa(String.fromCharCode.apply(null, uint8Version));
}
/* harmony default export */ __webpack_exports__["a"] = (function (arrayBuffer) {
    var base64String = toBase64(arrayBuffer);
    return base64String
        .replace(/=/g, '')
        .replace(/\+/g, '-')
        .replace(/\//g, '_');
});;

//# sourceMappingURL=array-buffer-to-base64.js.map


/***/ }),
/* 151 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ __webpack_exports__["a"] = ({
    path: '/firebase-messaging-sw.js',
    scope: '/firebase-cloud-messaging-push-scope'
});

//# sourceMappingURL=default-sw.js.map


/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__controller_interface__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_errors__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__models_worker_page_message__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__models_fcm_details__ = __webpack_require__(73);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var FCM_MSG = 'FCM_MSG';
var SWController = /** @class */ (function (_super) {
    __extends(SWController, _super);
    function SWController(app) {
        var _this = _super.call(this, app) || this;
        self.addEventListener('push', function (e) { return _this.onPush_(e); }, false);
        self.addEventListener('pushsubscriptionchange', function (e) { return _this.onSubChange_(e); }, false);
        self.addEventListener('notificationclick', function (e) { return _this.onNotificationClick_(e); }, false);
        /**
         * @private
         * @type {function(Object)|null}
         */
        _this.bgMessageHandler_ = null;
        return _this;
    }
    /**
     * A handler for push events that shows notifications based on the content of
     * the payload.
     *
     * The payload must be a JSON-encoded Object with a `notification` key. The
     * value of the `notification` property will be used as the NotificationOptions
     * object passed to showNotification. Additionally, the `title` property of the
     * notification object will be used as the title.
     *
     * If there is no notification data in the payload then no notification will be
     * shown.
     * @private
     */
    SWController.prototype.onPush_ = function (event) {
        var _this = this;
        var msgPayload;
        try {
            msgPayload = event.data.json();
        }
        catch (err) {
            // Not JSON so not an FCM message
            return;
        }
        var handleMsgPromise = this.hasVisibleClients_().then(function (hasVisibleClients) {
            if (hasVisibleClients) {
                // Do not need to show a notification.
                if (msgPayload.notification || _this.bgMessageHandler_) {
                    // Send to page
                    return _this.sendMessageToWindowClients_(msgPayload);
                }
                return;
            }
            var notificationDetails = _this.getNotificationData_(msgPayload);
            if (notificationDetails) {
                var notificationTitle = notificationDetails.title || '';
                return self.registration.showNotification(notificationTitle, notificationDetails);
            }
            else if (_this.bgMessageHandler_) {
                return _this.bgMessageHandler_(msgPayload);
            }
        });
        event.waitUntil(handleMsgPromise);
    };
    /**
     * @private
     */
    SWController.prototype.onSubChange_ = function (event) {
        var _this = this;
        var promiseChain = this.getToken().then(function (token) {
            if (!token) {
                // We can't resubscribe if we don't have an FCM token for this scope.
                throw _this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.NO_FCM_TOKEN_FOR_RESUBSCRIBE);
            }
            var tokenDetails = null;
            var tokenManager = _this.getTokenManager();
            return tokenManager
                .getTokenDetailsFromToken(token)
                .then(function (details) {
                tokenDetails = details;
                if (!tokenDetails) {
                    throw _this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.INVALID_SAVED_TOKEN);
                }
                // Attempt to get a new subscription
                return self.registration.pushManager.subscribe(__WEBPACK_IMPORTED_MODULE_3__models_fcm_details__["a" /* default */].SUBSCRIPTION_OPTIONS);
            })
                .then(function (newSubscription) {
                // Send new subscription to FCM.
                return tokenManager.subscribeToFCM(tokenDetails.fcmSenderId, newSubscription, tokenDetails.fcmPushSet);
            })
                .catch(function (err) {
                // The best thing we can do is log this to the terminal so
                // developers might notice the error.
                return tokenManager.deleteToken(tokenDetails.fcmToken).then(function () {
                    throw _this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.UNABLE_TO_RESUBSCRIBE, {
                        message: err
                    });
                });
            });
        });
        event.waitUntil(promiseChain);
    };
    /**
     * @private
     */
    SWController.prototype.onNotificationClick_ = function (event) {
        var _this = this;
        if (!(event.notification &&
            event.notification.data &&
            event.notification.data[FCM_MSG])) {
            // Not an FCM notification, do nothing.
            return;
        }
        // Prevent other listeners from receiving the event
        event.stopImmediatePropagation();
        event.notification.close();
        var msgPayload = event.notification.data[FCM_MSG];
        var clickAction = msgPayload['notification']['click_action'];
        if (!clickAction) {
            // Nothing to do.
            return;
        }
        var promiseChain = this.getWindowClient_(clickAction)
            .then(function (windowClient) {
            if (!windowClient) {
                // Unable to find window client so need to open one.
                return self.clients.openWindow(clickAction);
            }
            return windowClient;
        })
            .then(function (windowClient) {
            if (!windowClient) {
                // Window Client will not be returned if it's for a third party origin.
                return;
            }
            // Delete notification data from payload before sending to the page.
            var notificationData = msgPayload['notification'];
            delete msgPayload['notification'];
            var internalMsg = __WEBPACK_IMPORTED_MODULE_2__models_worker_page_message__["a" /* default */].createNewMsg(__WEBPACK_IMPORTED_MODULE_2__models_worker_page_message__["a" /* default */].TYPES_OF_MSG.NOTIFICATION_CLICKED, msgPayload);
            // Attempt to send a message to the client to handle the data
            // Is affected by: https://github.com/slightlyoff/ServiceWorker/issues/728
            return _this.attemptToMessageClient_(windowClient, internalMsg);
        });
        event.waitUntil(promiseChain);
    };
    /**
     * @private
     * @param {Object} msgPayload
     * @return {NotificationOptions|undefined}
     */
    SWController.prototype.getNotificationData_ = function (msgPayload) {
        if (!msgPayload) {
            return;
        }
        if (typeof msgPayload.notification !== 'object') {
            return;
        }
        var notificationInformation = Object.assign({}, msgPayload.notification);
        // Put the message payload under FCM_MSG name so we can identify the
        // notification as being an FCM notification vs a notification from
        // somewhere else (i.e. normal web push or developer generated
        // notification).
        notificationInformation['data'] = (_a = {},
            _a[FCM_MSG] = msgPayload,
            _a);
        return notificationInformation;
        var _a;
    };
    /**
     * Calling setBackgroundMessageHandler will opt in to some specific
     * behaviours.
     * 1.) If a notification doesn't need to be shown due to a window already
     * being visible, then push messages will be sent to the page.
     * 2.) If a notification needs to be shown, and the message contains no
     * notification data this method will be called
     * and the promise it returns will be passed to event.waitUntil.
     * If you do not set this callback then all push messages will let and the
     * developer can handle them in a their own 'push' event callback
     * @export
     * @param {function(Object)} callback The callback to be called when a push
     * message is received and a notification must be shown. The callback will
     * be given the data from the push message.
     */
    SWController.prototype.setBackgroundMessageHandler = function (callback) {
        if (callback && typeof callback !== 'function') {
            throw this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.BG_HANDLER_FUNCTION_EXPECTED);
        }
        this.bgMessageHandler_ = callback;
    };
    /**
     * @private
     * @param {string} url The URL to look for when focusing a client.
     * @return {Object} Returns an existing window client or a newly opened
     * WindowClient.
     */
    SWController.prototype.getWindowClient_ = function (url) {
        // Use URL to normalize the URL when comparing to windowClients.
        // This at least handles whether to include trailing slashes or not
        var parsedURL = new URL(url).href;
        return self.clients
            .matchAll({
            type: 'window',
            includeUncontrolled: true
        })
            .then(function (clientList) {
            var suitableClient = null;
            for (var i = 0; i < clientList.length; i++) {
                var parsedClientUrl = new URL(clientList[i].url).href;
                if (parsedClientUrl === parsedURL) {
                    suitableClient = clientList[i];
                    break;
                }
            }
            if (suitableClient) {
                suitableClient.focus();
                return suitableClient;
            }
        });
    };
    /**
     * This message will attempt to send the message to a window client.
     * @private
     * @param {Object} client The WindowClient to send the message to.
     * @param {Object} message The message to send to the client.
     * @returns {Promise} Returns a promise that resolves after sending the
     * message. This does not guarantee that the message was successfully
     * received.
     */
    SWController.prototype.attemptToMessageClient_ = function (client, message) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!client) {
                return reject(_this.errorFactory_.create(__WEBPACK_IMPORTED_MODULE_1__models_errors__["a" /* default */].codes.NO_WINDOW_CLIENT_TO_MSG));
            }
            client.postMessage(message);
            resolve();
        });
    };
    /**
     * @private
     * @returns {Promise<boolean>} If there is currently a visible WindowClient,
     * this method will resolve to true, otherwise false.
     */
    SWController.prototype.hasVisibleClients_ = function () {
        return self.clients
            .matchAll({
            type: 'window',
            includeUncontrolled: true
        })
            .then(function (clientList) {
            return clientList.some(function (client) { return client.visibilityState === 'visible'; });
        });
    };
    /**
     * @private
     * @param {Object} msgPayload The data from the push event that should be sent
     * to all available pages.
     * @returns {Promise} Returns a promise that resolves once the message
     * has been sent to all WindowClients.
     */
    SWController.prototype.sendMessageToWindowClients_ = function (msgPayload) {
        var _this = this;
        return self.clients
            .matchAll({
            type: 'window',
            includeUncontrolled: true
        })
            .then(function (clientList) {
            var internalMsg = __WEBPACK_IMPORTED_MODULE_2__models_worker_page_message__["a" /* default */].createNewMsg(__WEBPACK_IMPORTED_MODULE_2__models_worker_page_message__["a" /* default */].TYPES_OF_MSG.PUSH_MSG_RECEIVED, msgPayload);
            return Promise.all(clientList.map(function (client) {
                return _this.attemptToMessageClient_(client, internalMsg);
            }));
        });
    };
    /**
     * This will register the default service worker and return the registration.
     * @private
     * @return {Promise<!ServiceWorkerRegistration>} The service worker
     * registration to be used for the push service.
     */
    SWController.prototype.getSWRegistration_ = function () {
        return Promise.resolve(self.registration);
    };
    return SWController;
}(__WEBPACK_IMPORTED_MODULE_0__controller_interface__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (SWController);

//# sourceMappingURL=sw-controller.js.map


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

__webpack_require__(154);


/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["registerStorage"] = registerStorage;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__firebase_app__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_implementation_string__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_implementation_taskenums__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_implementation_xhriopool__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_reference__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_service__ = __webpack_require__(164);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Type constant for Firebase Storage.
 */
var STORAGE_TYPE = 'storage';
function factory(app, unused, opt_url) {
    return new __WEBPACK_IMPORTED_MODULE_5__src_service__["a" /* Service */](app, new __WEBPACK_IMPORTED_MODULE_3__src_implementation_xhriopool__["a" /* XhrIoPool */](), opt_url);
}
function registerStorage(instance) {
    var namespaceExports = {
        // no-inline
        TaskState: __WEBPACK_IMPORTED_MODULE_2__src_implementation_taskenums__["c" /* TaskState */],
        TaskEvent: __WEBPACK_IMPORTED_MODULE_2__src_implementation_taskenums__["b" /* TaskEvent */],
        StringFormat: __WEBPACK_IMPORTED_MODULE_1__src_implementation_string__["a" /* StringFormat */],
        Storage: __WEBPACK_IMPORTED_MODULE_5__src_service__["a" /* Service */],
        Reference: __WEBPACK_IMPORTED_MODULE_4__src_reference__["a" /* Reference */]
    };
    instance.INTERNAL.registerService(STORAGE_TYPE, factory, namespaceExports, undefined, 
    // Allow multiple storage instances per app.
    true);
}
registerStorage(__WEBPACK_IMPORTED_MODULE_0__firebase_app__["default"]);

//# sourceMappingURL=index.js.map


/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return XhrIoPool; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__xhrio_network__ = __webpack_require__(156);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Factory-like class for creating XhrIo instances.
 */
var XhrIoPool = /** @class */ (function () {
    function XhrIoPool() {
    }
    XhrIoPool.prototype.createXhrIo = function () {
        return new __WEBPACK_IMPORTED_MODULE_0__xhrio_network__["a" /* NetworkXhrIo */]();
    };
    return XhrIoPool;
}());


//# sourceMappingURL=xhriopool.js.map


/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NetworkXhrIo; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__error__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__promise_external__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__type__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__xhrio__ = __webpack_require__(76);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and
 * doesn't work in React Native on Android.
 */
var NetworkXhrIo = /** @class */ (function () {
    function NetworkXhrIo() {
        var _this = this;
        this.sent_ = false;
        this.xhr_ = new XMLHttpRequest();
        this.errorCode_ = __WEBPACK_IMPORTED_MODULE_4__xhrio__["a" /* ErrorCode */].NO_ERROR;
        this.sendPromise_ = __WEBPACK_IMPORTED_MODULE_2__promise_external__["a" /* make */](function (resolve, reject) {
            _this.xhr_.addEventListener('abort', function (event) {
                _this.errorCode_ = __WEBPACK_IMPORTED_MODULE_4__xhrio__["a" /* ErrorCode */].ABORT;
                resolve(_this);
            });
            _this.xhr_.addEventListener('error', function (event) {
                _this.errorCode_ = __WEBPACK_IMPORTED_MODULE_4__xhrio__["a" /* ErrorCode */].NETWORK_ERROR;
                resolve(_this);
            });
            _this.xhr_.addEventListener('load', function (event) {
                resolve(_this);
            });
        });
    }
    /**
     * @override
     */
    NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) {
        var _this = this;
        if (this.sent_) {
            throw __WEBPACK_IMPORTED_MODULE_0__error__["e" /* internalError */]('cannot .send() more than once');
        }
        this.sent_ = true;
        this.xhr_.open(method, url, true);
        if (__WEBPACK_IMPORTED_MODULE_3__type__["a" /* isDef */](opt_headers)) {
            var headers = opt_headers;
            __WEBPACK_IMPORTED_MODULE_1__object__["b" /* forEach */](headers, function (key, val) {
                _this.xhr_.setRequestHeader(key, val.toString());
            });
        }
        if (__WEBPACK_IMPORTED_MODULE_3__type__["a" /* isDef */](opt_body)) {
            this.xhr_.send(opt_body);
        }
        else {
            this.xhr_.send();
        }
        return this.sendPromise_;
    };
    /**
     * @override
     */
    NetworkXhrIo.prototype.getErrorCode = function () {
        if (!this.sent_) {
            throw __WEBPACK_IMPORTED_MODULE_0__error__["e" /* internalError */]('cannot .getErrorCode() before sending');
        }
        return this.errorCode_;
    };
    /**
     * @override
     */
    NetworkXhrIo.prototype.getStatus = function () {
        if (!this.sent_) {
            throw __WEBPACK_IMPORTED_MODULE_0__error__["e" /* internalError */]('cannot .getStatus() before sending');
        }
        try {
            return this.xhr_.status;
        }
        catch (e) {
            return -1;
        }
    };
    /**
     * @override
     */
    NetworkXhrIo.prototype.getResponseText = function () {
        if (!this.sent_) {
            throw __WEBPACK_IMPORTED_MODULE_0__error__["e" /* internalError */]('cannot .getResponseText() before sending');
        }
        return this.xhr_.responseText;
    };
    /**
     * Aborts the request.
     * @override
     */
    NetworkXhrIo.prototype.abort = function () {
        this.xhr_.abort();
    };
    /**
     * @override
     */
    NetworkXhrIo.prototype.getResponseHeader = function (header) {
        return this.xhr_.getResponseHeader(header);
    };
    /**
     * @override
     */
    NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {
        if (__WEBPACK_IMPORTED_MODULE_3__type__["a" /* isDef */](this.xhr_.upload)) {
            this.xhr_.upload.addEventListener('progress', listener);
        }
    };
    /**
     * @override
     */
    NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {
        if (__WEBPACK_IMPORTED_MODULE_3__type__["a" /* isDef */](this.xhr_.upload)) {
            this.xhr_.upload.removeEventListener('progress', listener);
        }
    };
    return NetworkXhrIo;
}());


//# sourceMappingURL=xhrio_network.js.map


/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = jsonObjectOrNull;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__type__ = __webpack_require__(6);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the Object resulting from parsing the given JSON, or null if the
 * given string does not represent a JSON object.
 */
function jsonObjectOrNull(s) {
    var obj;
    try {
        obj = JSON.parse(s);
    }
    catch (e) {
        return null;
    }
    if (__WEBPACK_IMPORTED_MODULE_0__type__["f" /* isNonArrayObject */](obj)) {
        return obj;
    }
    else {
        return null;
    }
}

//# sourceMappingURL=json.js.map


/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getBlob;
/* harmony export (immutable) */ __webpack_exports__["b"] = sliceBlob;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__type__ = __webpack_require__(6);

function getBlobBuilder() {
    if (typeof BlobBuilder !== 'undefined') {
        return BlobBuilder;
    }
    else if (typeof WebKitBlobBuilder !== 'undefined') {
        return WebKitBlobBuilder;
    }
    else {
        return undefined;
    }
}
/**
 * Concatenates one or more values together and converts them to a Blob.
 *
 * @param var_args The values that will make up the resulting blob.
 * @return The blob.
 */
function getBlob() {
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        var_args[_i] = arguments[_i];
    }
    var BlobBuilder = getBlobBuilder();
    if (BlobBuilder !== undefined) {
        var bb = new BlobBuilder();
        for (var i = 0; i < var_args.length; i++) {
            bb.append(var_args[i]);
        }
        return bb.getBlob();
    }
    else {
        if (__WEBPACK_IMPORTED_MODULE_0__type__["e" /* isNativeBlobDefined */]()) {
            return new Blob(var_args);
        }
        else {
            throw Error("This browser doesn't seem to support creating Blobs");
        }
    }
}
/**
 * Slices the blob. The returned blob contains data from the start byte
 * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
 *
 * @param blob The blob to be sliced.
 * @param start Index of the starting byte.
 * @param end Index of the ending byte.
 * @return The blob slice or null if not supported.
 */
function sliceBlob(blob, start, end) {
    if (blob.webkitSlice) {
        return blob.webkitSlice(start, end);
    }
    else if (blob.mozSlice) {
        return blob.mozSlice(start, end);
    }
    else if (blob.slice) {
        return blob.slice(start, end);
    }
    return null;
}

//# sourceMappingURL=fs.js.map


/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RequestInfo; });
var RequestInfo = /** @class */ (function () {
    function RequestInfo(url, method, 
        /**
         * Returns the value with which to resolve the request's promise. Only called
         * if the request is successful. Throw from this function to reject the
         * returned Request's promise with the thrown error.
         * Note: The XhrIo passed to this function may be reused after this callback
         * returns. Do not keep a reference to it in any way.
         */
        handler, timeout) {
        this.url = url;
        this.method = method;
        this.handler = handler;
        this.timeout = timeout;
        this.urlParams = {};
        this.headers = {};
        this.body = null;
        this.errorHandler = null;
        /**
         * Called with the current number of bytes uploaded and total size (-1 if not
         * computable) of the request body (i.e. used to report upload progress).
         */
        this.progressCallback = null;
        this.successCodes = [200];
        this.additionalRetryCodes = [];
    }
    return RequestInfo;
}());


//# sourceMappingURL=requestinfo.js.map


/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UploadTask; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__implementation_observer__ = __webpack_require__(161);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tasksnapshot__ = __webpack_require__(162);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__implementation_args__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__implementation_array__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__implementation_async__ = __webpack_require__(163);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__implementation_error__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__implementation_promise_external__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__implementation_requests__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__implementation_type__ = __webpack_require__(6);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Defines types for interacting with blob transfer tasks.
 */












/**
 * Represents a blob being uploaded. Can be used to pause/resume/cancel the
 * upload and manage callbacks for various events.
 */
var UploadTask = /** @class */ (function () {
    /**
     * @param ref The firebaseStorage.Reference object this task came
     *     from, untyped to avoid cyclic dependencies.
     * @param blob The blob to upload.
     */
    function UploadTask(ref, authWrapper, location, mappings, blob, metadata) {
        if (metadata === void 0) { metadata = null; }
        var _this = this;
        this.transferred_ = 0;
        this.needToFetchStatus_ = false;
        this.needToFetchMetadata_ = false;
        this.observers_ = [];
        this.error_ = null;
        this.uploadUrl_ = null;
        this.request_ = null;
        this.chunkMultiplier_ = 1;
        this.resolve_ = null;
        this.reject_ = null;
        this.ref_ = ref;
        this.authWrapper_ = authWrapper;
        this.location_ = location;
        this.blob_ = blob;
        this.metadata_ = metadata;
        this.mappings_ = mappings;
        this.resumable_ = this.shouldDoResumable_(this.blob_);
        this.state_ = __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].RUNNING;
        this.errorHandler_ = function (error) {
            _this.request_ = null;
            _this.chunkMultiplier_ = 1;
            if (error.codeEquals(__WEBPACK_IMPORTED_MODULE_6__implementation_error__["a" /* Code */].CANCELED)) {
                _this.needToFetchStatus_ = true;
                _this.completeTransitions_();
            }
            else {
                _this.error_ = error;
                _this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].ERROR);
            }
        };
        this.metadataErrorHandler_ = function (error) {
            _this.request_ = null;
            if (error.codeEquals(__WEBPACK_IMPORTED_MODULE_6__implementation_error__["a" /* Code */].CANCELED)) {
                _this.completeTransitions_();
            }
            else {
                _this.error_ = error;
                _this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].ERROR);
            }
        };
        this.promise_ = __WEBPACK_IMPORTED_MODULE_7__implementation_promise_external__["a" /* make */](function (resolve, reject) {
            _this.resolve_ = resolve;
            _this.reject_ = reject;
            _this.start_();
        });
        // Prevent uncaught rejections on the internal promise from bubbling out
        // to the top level with a dummy handler.
        this.promise_.then(null, function () { });
    }
    UploadTask.prototype.makeProgressCallback_ = function () {
        var _this = this;
        var sizeBefore = this.transferred_;
        return function (loaded, total) {
            _this.updateProgress_(sizeBefore + loaded);
        };
    };
    UploadTask.prototype.shouldDoResumable_ = function (blob) {
        return blob.size() > 256 * 1024;
    };
    UploadTask.prototype.start_ = function () {
        if (this.state_ !== __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].RUNNING) {
            // This can happen if someone pauses us in a resume callback, for example.
            return;
        }
        if (this.request_ !== null) {
            return;
        }
        if (this.resumable_) {
            if (this.uploadUrl_ === null) {
                this.createResumable_();
            }
            else {
                if (this.needToFetchStatus_) {
                    this.fetchStatus_();
                }
                else {
                    if (this.needToFetchMetadata_) {
                        // Happens if we miss the metadata on upload completion.
                        this.fetchMetadata_();
                    }
                    else {
                        this.continueUpload_();
                    }
                }
            }
        }
        else {
            this.oneShotUpload_();
        }
    };
    UploadTask.prototype.resolveToken_ = function (callback) {
        var _this = this;
        this.authWrapper_.getAuthToken().then(function (authToken) {
            switch (_this.state_) {
                case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].RUNNING:
                    callback(authToken);
                    break;
                case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].CANCELING:
                    _this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].CANCELED);
                    break;
                case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].PAUSING:
                    _this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].PAUSED);
                    break;
                default:
            }
        });
    };
    // TODO(andysoto): assert false
    UploadTask.prototype.createResumable_ = function () {
        var _this = this;
        this.resolveToken_(function (authToken) {
            var requestInfo = __WEBPACK_IMPORTED_MODULE_8__implementation_requests__["c" /* createResumableUpload */](_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);
            var createRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
            _this.request_ = createRequest;
            createRequest.getPromise().then(function (url) {
                _this.request_ = null;
                _this.uploadUrl_ = url;
                _this.needToFetchStatus_ = false;
                _this.completeTransitions_();
            }, _this.errorHandler_);
        });
    };
    UploadTask.prototype.fetchStatus_ = function () {
        var _this = this;
        // TODO(andysoto): assert(this.uploadUrl_ !== null);
        var url = this.uploadUrl_;
        this.resolveToken_(function (authToken) {
            var requestInfo = __WEBPACK_IMPORTED_MODULE_8__implementation_requests__["f" /* getResumableUploadStatus */](_this.authWrapper_, _this.location_, url, _this.blob_);
            var statusRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
            _this.request_ = statusRequest;
            statusRequest.getPromise().then(function (status) {
                status = status;
                _this.request_ = null;
                _this.updateProgress_(status.current);
                _this.needToFetchStatus_ = false;
                if (status.finalized) {
                    _this.needToFetchMetadata_ = true;
                }
                _this.completeTransitions_();
            }, _this.errorHandler_);
        });
    };
    UploadTask.prototype.continueUpload_ = function () {
        var _this = this;
        var chunkSize = __WEBPACK_IMPORTED_MODULE_8__implementation_requests__["h" /* resumableUploadChunkSize */] * this.chunkMultiplier_;
        var status = new __WEBPACK_IMPORTED_MODULE_8__implementation_requests__["a" /* ResumableUploadStatus */](this.transferred_, this.blob_.size());
        // TODO(andysoto): assert(this.uploadUrl_ !== null);
        var url = this.uploadUrl_;
        this.resolveToken_(function (authToken) {
            var requestInfo;
            try {
                requestInfo = __WEBPACK_IMPORTED_MODULE_8__implementation_requests__["b" /* continueResumableUpload */](_this.location_, _this.authWrapper_, url, _this.blob_, chunkSize, _this.mappings_, status, _this.makeProgressCallback_());
            }
            catch (e) {
                _this.error_ = e;
                _this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].ERROR);
                return;
            }
            var uploadRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
            _this.request_ = uploadRequest;
            uploadRequest
                .getPromise()
                .then(function (newStatus) {
                _this.increaseMultiplier_();
                _this.request_ = null;
                _this.updateProgress_(newStatus.current);
                if (newStatus.finalized) {
                    _this.metadata_ = newStatus.metadata;
                    _this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].SUCCESS);
                }
                else {
                    _this.completeTransitions_();
                }
            }, _this.errorHandler_);
        });
    };
    UploadTask.prototype.increaseMultiplier_ = function () {
        var currentSize = __WEBPACK_IMPORTED_MODULE_8__implementation_requests__["h" /* resumableUploadChunkSize */] * this.chunkMultiplier_;
        // Max chunk size is 32M.
        if (currentSize < 32 * 1024 * 1024) {
            this.chunkMultiplier_ *= 2;
        }
    };
    UploadTask.prototype.fetchMetadata_ = function () {
        var _this = this;
        this.resolveToken_(function (authToken) {
            var requestInfo = __WEBPACK_IMPORTED_MODULE_8__implementation_requests__["e" /* getMetadata */](_this.authWrapper_, _this.location_, _this.mappings_);
            var metadataRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
            _this.request_ = metadataRequest;
            metadataRequest.getPromise().then(function (metadata) {
                _this.request_ = null;
                _this.metadata_ = metadata;
                _this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].SUCCESS);
            }, _this.metadataErrorHandler_);
        });
    };
    UploadTask.prototype.oneShotUpload_ = function () {
        var _this = this;
        this.resolveToken_(function (authToken) {
            var requestInfo = __WEBPACK_IMPORTED_MODULE_8__implementation_requests__["g" /* multipartUpload */](_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);
            var multipartRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
            _this.request_ = multipartRequest;
            multipartRequest.getPromise().then(function (metadata) {
                _this.request_ = null;
                _this.metadata_ = metadata;
                _this.updateProgress_(_this.blob_.size());
                _this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].SUCCESS);
            }, _this.errorHandler_);
        });
    };
    UploadTask.prototype.updateProgress_ = function (transferred) {
        var old = this.transferred_;
        this.transferred_ = transferred;
        // A progress update can make the "transferred" value smaller (e.g. a
        // partial upload not completed by server, after which the "transferred"
        // value may reset to the value at the beginning of the request).
        if (this.transferred_ !== old) {
            this.notifyObservers_();
        }
    };
    UploadTask.prototype.transition_ = function (state) {
        if (this.state_ === state) {
            return;
        }
        switch (state) {
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].CANCELING:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING);
                this.state_ = state;
                if (this.request_ !== null) {
                    this.request_.cancel();
                }
                break;
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].PAUSING:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING);
                this.state_ = state;
                if (this.request_ !== null) {
                    this.request_.cancel();
                }
                break;
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].RUNNING:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSED ||
                //        this.state_ === InternalTaskState.PAUSING);
                var wasPaused = this.state_ === __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].PAUSED;
                this.state_ = state;
                if (wasPaused) {
                    this.notifyObservers_();
                    this.start_();
                }
                break;
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].PAUSED:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSING);
                this.state_ = state;
                this.notifyObservers_();
                break;
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].CANCELED:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSED ||
                //        this.state_ === InternalTaskState.CANCELING);
                this.error_ = __WEBPACK_IMPORTED_MODULE_6__implementation_error__["c" /* canceled */]();
                this.state_ = state;
                this.notifyObservers_();
                break;
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].ERROR:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING ||
                //        this.state_ === InternalTaskState.CANCELING);
                this.state_ = state;
                this.notifyObservers_();
                break;
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].SUCCESS:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING ||
                //        this.state_ === InternalTaskState.CANCELING);
                this.state_ = state;
                this.notifyObservers_();
                break;
        }
    };
    UploadTask.prototype.completeTransitions_ = function () {
        switch (this.state_) {
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].PAUSING:
                this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].PAUSED);
                break;
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].CANCELING:
                this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].CANCELED);
                break;
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].RUNNING:
                this.start_();
                break;
            default:
                // TODO(andysoto): assert(false);
                break;
        }
    };
    Object.defineProperty(UploadTask.prototype, "snapshot", {
        get: function () {
            var externalState = __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["d" /* taskStateFromInternalTaskState */](this.state_);
            return new __WEBPACK_IMPORTED_MODULE_2__tasksnapshot__["a" /* UploadTaskSnapshot */](this.transferred_, this.blob_.size(), externalState, this.metadata_, this, this.ref_);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a callback for an event.
     * @param type The type of event to listen for.
     */
    UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {
        if (nextOrObserver === void 0) { nextOrObserver = undefined; }
        if (error === void 0) { error = undefined; }
        if (completed === void 0) { completed = undefined; }
        function typeValidator(_p) {
            if (type !== __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["b" /* TaskEvent */].STATE_CHANGED) {
                throw "Expected one of the event types: [" + __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["b" /* TaskEvent */].STATE_CHANGED + "].";
            }
        }
        var nextOrObserverMessage = 'Expected a function or an Object with one of ' +
            '`next`, `error`, `complete` properties.';
        var nextValidator = __WEBPACK_IMPORTED_MODULE_3__implementation_args__["d" /* nullFunctionSpec */](true).validator;
        var observerValidator = __WEBPACK_IMPORTED_MODULE_3__implementation_args__["a" /* looseObjectSpec */](null, true).validator;
        function nextOrObserverValidator(p) {
            try {
                nextValidator(p);
                return;
            }
            catch (e) { }
            try {
                observerValidator(p);
                var anyDefined = __WEBPACK_IMPORTED_MODULE_9__implementation_type__["c" /* isJustDef */](p['next']) ||
                    __WEBPACK_IMPORTED_MODULE_9__implementation_type__["c" /* isJustDef */](p['error']) ||
                    __WEBPACK_IMPORTED_MODULE_9__implementation_type__["c" /* isJustDef */](p['complete']);
                if (!anyDefined) {
                    throw '';
                }
                return;
            }
            catch (e) {
                throw nextOrObserverMessage;
            }
        }
        var specs = [
            __WEBPACK_IMPORTED_MODULE_3__implementation_args__["e" /* stringSpec */](typeValidator),
            __WEBPACK_IMPORTED_MODULE_3__implementation_args__["a" /* looseObjectSpec */](nextOrObserverValidator, true),
            __WEBPACK_IMPORTED_MODULE_3__implementation_args__["d" /* nullFunctionSpec */](true),
            __WEBPACK_IMPORTED_MODULE_3__implementation_args__["d" /* nullFunctionSpec */](true)
        ];
        __WEBPACK_IMPORTED_MODULE_3__implementation_args__["g" /* validate */]('on', specs, arguments);
        var self = this;
        function makeBinder(specs) {
            function binder(nextOrObserver, error, opt_complete) {
                if (specs !== null) {
                    __WEBPACK_IMPORTED_MODULE_3__implementation_args__["g" /* validate */]('on', specs, arguments);
                }
                var observer = new __WEBPACK_IMPORTED_MODULE_1__implementation_observer__["a" /* Observer */](nextOrObserver, error, completed);
                self.addObserver_(observer);
                return function () {
                    self.removeObserver_(observer);
                };
            }
            return binder;
        }
        function binderNextOrObserverValidator(p) {
            if (p === null) {
                throw nextOrObserverMessage;
            }
            nextOrObserverValidator(p);
        }
        var binderSpecs = [
            __WEBPACK_IMPORTED_MODULE_3__implementation_args__["a" /* looseObjectSpec */](binderNextOrObserverValidator),
            __WEBPACK_IMPORTED_MODULE_3__implementation_args__["d" /* nullFunctionSpec */](true),
            __WEBPACK_IMPORTED_MODULE_3__implementation_args__["d" /* nullFunctionSpec */](true)
        ];
        var typeOnly = !(__WEBPACK_IMPORTED_MODULE_9__implementation_type__["c" /* isJustDef */](nextOrObserver) ||
            __WEBPACK_IMPORTED_MODULE_9__implementation_type__["c" /* isJustDef */](error) ||
            __WEBPACK_IMPORTED_MODULE_9__implementation_type__["c" /* isJustDef */](completed));
        if (typeOnly) {
            return makeBinder(binderSpecs);
        }
        else {
            return makeBinder(null)(nextOrObserver, error, completed);
        }
    };
    /**
     * This object behaves like a Promise, and resolves with its snapshot data
     * when the upload completes.
     * @param onFulfilled The fulfillment callback. Promise chaining works as normal.
     * @param onRejected The rejection callback.
     */
    UploadTask.prototype.then = function (onFulfilled, onRejected) {
        // These casts are needed so that TypeScript can infer the types of the
        // resulting Promise.
        return this.promise_.then(onFulfilled, onRejected);
    };
    /**
     * Equivalent to calling `then(null, onRejected)`.
     */
    UploadTask.prototype.catch = function (onRejected) {
        return this.then(null, onRejected);
    };
    /**
     * Adds the given observer.
     */
    UploadTask.prototype.addObserver_ = function (observer) {
        this.observers_.push(observer);
        this.notifyObserver_(observer);
    };
    /**
     * Removes the given observer.
     */
    UploadTask.prototype.removeObserver_ = function (observer) {
        __WEBPACK_IMPORTED_MODULE_4__implementation_array__["c" /* remove */](this.observers_, observer);
    };
    UploadTask.prototype.notifyObservers_ = function () {
        var _this = this;
        this.finishPromise_();
        var observers = __WEBPACK_IMPORTED_MODULE_4__implementation_array__["a" /* clone */](this.observers_);
        observers.forEach(function (observer) {
            _this.notifyObserver_(observer);
        });
    };
    UploadTask.prototype.finishPromise_ = function () {
        if (this.resolve_ !== null) {
            var triggered = true;
            switch (__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["d" /* taskStateFromInternalTaskState */](this.state_)) {
                case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["c" /* TaskState */].SUCCESS:
                    Object(__WEBPACK_IMPORTED_MODULE_5__implementation_async__["a" /* async */])(this.resolve_.bind(null, this.snapshot))();
                    break;
                case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["c" /* TaskState */].CANCELED:
                case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["c" /* TaskState */].ERROR:
                    var toCall = this.reject_;
                    Object(__WEBPACK_IMPORTED_MODULE_5__implementation_async__["a" /* async */])(toCall.bind(null, this.error_))();
                    break;
                default:
                    triggered = false;
                    break;
            }
            if (triggered) {
                this.resolve_ = null;
                this.reject_ = null;
            }
        }
    };
    UploadTask.prototype.notifyObserver_ = function (observer) {
        var externalState = __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["d" /* taskStateFromInternalTaskState */](this.state_);
        switch (externalState) {
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["c" /* TaskState */].RUNNING:
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["c" /* TaskState */].PAUSED:
                if (observer.next !== null) {
                    Object(__WEBPACK_IMPORTED_MODULE_5__implementation_async__["a" /* async */])(observer.next.bind(observer, this.snapshot))();
                }
                break;
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["c" /* TaskState */].SUCCESS:
                if (observer.complete !== null) {
                    Object(__WEBPACK_IMPORTED_MODULE_5__implementation_async__["a" /* async */])(observer.complete.bind(observer))();
                }
                break;
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["c" /* TaskState */].CANCELED:
            case __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["c" /* TaskState */].ERROR:
                if (observer.error !== null) {
                    Object(__WEBPACK_IMPORTED_MODULE_5__implementation_async__["a" /* async */])(observer.error.bind(observer, this.error_))();
                }
                break;
            default:
                // TODO(andysoto): assert(false);
                if (observer.error !== null) {
                    Object(__WEBPACK_IMPORTED_MODULE_5__implementation_async__["a" /* async */])(observer.error.bind(observer, this.error_))();
                }
        }
    };
    /**
     * Resumes a paused task. Has no effect on a currently running or failed task.
     * @return True if the operation took effect, false if ignored.
     */
    UploadTask.prototype.resume = function () {
        __WEBPACK_IMPORTED_MODULE_3__implementation_args__["g" /* validate */]('resume', [], arguments);
        var valid = this.state_ === __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].PAUSED ||
            this.state_ === __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].PAUSING;
        if (valid) {
            this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].RUNNING);
        }
        return valid;
    };
    /**
     * Pauses a currently running task. Has no effect on a paused or failed task.
     * @return True if the operation took effect, false if ignored.
     */
    UploadTask.prototype.pause = function () {
        __WEBPACK_IMPORTED_MODULE_3__implementation_args__["g" /* validate */]('pause', [], arguments);
        var valid = this.state_ === __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].RUNNING;
        if (valid) {
            this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].PAUSING);
        }
        return valid;
    };
    /**
     * Cancels a currently running or paused task. Has no effect on a complete or
     * failed task.
     * @return True if the operation took effect, false if ignored.
     */
    UploadTask.prototype.cancel = function () {
        __WEBPACK_IMPORTED_MODULE_3__implementation_args__["g" /* validate */]('cancel', [], arguments);
        var valid = this.state_ === __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].RUNNING ||
            this.state_ === __WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].PAUSING;
        if (valid) {
            this.transition_(__WEBPACK_IMPORTED_MODULE_0__implementation_taskenums__["a" /* InternalTaskState */].CANCELING);
        }
        return valid;
    };
    return UploadTask;
}());


//# sourceMappingURL=task.js.map


/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Observer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__type__ = __webpack_require__(6);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @struct
 */
var Observer = /** @class */ (function () {
    function Observer(nextOrObserver, opt_error, opt_complete) {
        var asFunctions = __WEBPACK_IMPORTED_MODULE_0__type__["b" /* isFunction */](nextOrObserver) ||
            __WEBPACK_IMPORTED_MODULE_0__type__["a" /* isDef */](opt_error) ||
            __WEBPACK_IMPORTED_MODULE_0__type__["a" /* isDef */](opt_complete);
        if (asFunctions) {
            this.next = nextOrObserver;
            this.error = opt_error || null;
            this.complete = opt_complete || null;
        }
        else {
            var observer = nextOrObserver;
            this.next = observer.next || null;
            this.error = observer.error || null;
            this.complete = observer.complete || null;
        }
    }
    return Observer;
}());


//# sourceMappingURL=observer.js.map


/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UploadTaskSnapshot; });
var UploadTaskSnapshot = /** @class */ (function () {
    function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {
        this.bytesTransferred = bytesTransferred;
        this.totalBytes = totalBytes;
        this.state = state;
        this.metadata = metadata;
        this.task = task;
        this.ref = ref;
    }
    Object.defineProperty(UploadTaskSnapshot.prototype, "downloadURL", {
        get: function () {
            if (this.metadata !== null) {
                var urls = this.metadata['downloadURLs'];
                if (urls != null && urls[0] != null) {
                    return urls[0];
                }
                else {
                    return null;
                }
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    return UploadTaskSnapshot;
}());


//# sourceMappingURL=tasksnapshot.js.map


/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = async;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__promise_external__ = __webpack_require__(11);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Method for invoking a callback asynchronously.
 */

/**
 * Returns a function that invokes f with its arguments asynchronously as a
 * microtask, i.e. as soon as possible after the current script returns back
 * into browser code.
 */
function async(f) {
    return function () {
        var argsToForward = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argsToForward[_i] = arguments[_i];
        }
        __WEBPACK_IMPORTED_MODULE_0__promise_external__["c" /* resolve */](true).then(function () {
            f.apply(null, argsToForward);
        });
    };
}

//# sourceMappingURL=async.js.map


/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Service; });
/* unused harmony export ServiceInternals */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__implementation_args__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__implementation_authwrapper__ = __webpack_require__(165);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__implementation_location__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__implementation_promise_external__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__implementation_request__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__reference__ = __webpack_require__(77);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * A service that provides firebaseStorage.Reference instances.
 * @param opt_url gs:// url to a custom Storage Bucket
 *
 * @struct
 */
var Service = /** @class */ (function () {
    function Service(app, pool, url) {
        this.bucket_ = null;
        function maker(authWrapper, loc) {
            return new __WEBPACK_IMPORTED_MODULE_5__reference__["a" /* Reference */](authWrapper, loc);
        }
        this.authWrapper_ = new __WEBPACK_IMPORTED_MODULE_1__implementation_authwrapper__["a" /* AuthWrapper */](app, maker, __WEBPACK_IMPORTED_MODULE_4__implementation_request__["a" /* makeRequest */], this, pool);
        this.app_ = app;
        if (url != null) {
            this.bucket_ = __WEBPACK_IMPORTED_MODULE_2__implementation_location__["a" /* Location */].makeFromBucketSpec(url);
        }
        else {
            var authWrapperBucket = this.authWrapper_.bucket();
            if (authWrapperBucket != null) {
                this.bucket_ = new __WEBPACK_IMPORTED_MODULE_2__implementation_location__["a" /* Location */](authWrapperBucket, '');
            }
        }
        this.internals_ = new ServiceInternals(this);
    }
    /**
     * Returns a firebaseStorage.Reference for the given path in the default
     * bucket.
     */
    Service.prototype.ref = function (path) {
        function validator(path) {
            if (/^[A-Za-z]+:\/\//.test(path)) {
                throw 'Expected child path but got a URL, use refFromURL instead.';
            }
        }
        __WEBPACK_IMPORTED_MODULE_0__implementation_args__["g" /* validate */]('ref', [__WEBPACK_IMPORTED_MODULE_0__implementation_args__["e" /* stringSpec */](validator, true)], arguments);
        if (this.bucket_ == null) {
            throw new Error('No Storage Bucket defined in Firebase Options.');
        }
        var ref = new __WEBPACK_IMPORTED_MODULE_5__reference__["a" /* Reference */](this.authWrapper_, this.bucket_);
        if (path != null) {
            return ref.child(path);
        }
        else {
            return ref;
        }
    };
    /**
     * Returns a firebaseStorage.Reference object for the given absolute URL,
     * which must be a gs:// or http[s]:// URL.
     */
    Service.prototype.refFromURL = function (url) {
        function validator(p) {
            if (!/^[A-Za-z]+:\/\//.test(p)) {
                throw 'Expected full URL but got a child path, use ref instead.';
            }
            try {
                __WEBPACK_IMPORTED_MODULE_2__implementation_location__["a" /* Location */].makeFromUrl(p);
            }
            catch (e) {
                throw 'Expected valid full URL but got an invalid one.';
            }
        }
        __WEBPACK_IMPORTED_MODULE_0__implementation_args__["g" /* validate */]('refFromURL', [__WEBPACK_IMPORTED_MODULE_0__implementation_args__["e" /* stringSpec */](validator, false)], arguments);
        return new __WEBPACK_IMPORTED_MODULE_5__reference__["a" /* Reference */](this.authWrapper_, url);
    };
    Object.defineProperty(Service.prototype, "maxUploadRetryTime", {
        get: function () {
            return this.authWrapper_.maxUploadRetryTime();
        },
        enumerable: true,
        configurable: true
    });
    Service.prototype.setMaxUploadRetryTime = function (time) {
        __WEBPACK_IMPORTED_MODULE_0__implementation_args__["g" /* validate */]('setMaxUploadRetryTime', [__WEBPACK_IMPORTED_MODULE_0__implementation_args__["c" /* nonNegativeNumberSpec */]()], arguments);
        this.authWrapper_.setMaxUploadRetryTime(time);
    };
    Object.defineProperty(Service.prototype, "maxOperationRetryTime", {
        get: function () {
            return this.authWrapper_.maxOperationRetryTime();
        },
        enumerable: true,
        configurable: true
    });
    Service.prototype.setMaxOperationRetryTime = function (time) {
        __WEBPACK_IMPORTED_MODULE_0__implementation_args__["g" /* validate */]('setMaxOperationRetryTime', [__WEBPACK_IMPORTED_MODULE_0__implementation_args__["c" /* nonNegativeNumberSpec */]()], arguments);
        this.authWrapper_.setMaxOperationRetryTime(time);
    };
    Object.defineProperty(Service.prototype, "app", {
        get: function () {
            return this.app_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Service.prototype, "INTERNAL", {
        get: function () {
            return this.internals_;
        },
        enumerable: true,
        configurable: true
    });
    return Service;
}());

/**
 * @struct
 */
var ServiceInternals = /** @class */ (function () {
    function ServiceInternals(service) {
        this.service_ = service;
    }
    /**
     * Called when the associated app is deleted.
     * @see {!fbs.AuthWrapper.prototype.deleteApp}
     */
    ServiceInternals.prototype.delete = function () {
        this.service_.authWrapper_.deleteApp();
        return __WEBPACK_IMPORTED_MODULE_3__implementation_promise_external__["c" /* resolve */](undefined);
    };
    return ServiceInternals;
}());


//# sourceMappingURL=service.js.map


/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AuthWrapper; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__error__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__failrequest__ = __webpack_require__(166);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__location__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__promise_external__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__requestmap__ = __webpack_require__(167);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__type__ = __webpack_require__(6);







/**
 * @param app If null, getAuthToken always resolves with null.
 * @param service The storage service associated with this auth wrapper.
 *     Untyped to avoid circular type dependencies.
 * @struct
 */
var AuthWrapper = /** @class */ (function () {
    function AuthWrapper(app, maker, requestMaker, service, pool) {
        this.bucket_ = null;
        this.deleted_ = false;
        this.app_ = app;
        if (this.app_ !== null) {
            var options = this.app_.options;
            if (__WEBPACK_IMPORTED_MODULE_6__type__["a" /* isDef */](options)) {
                this.bucket_ = AuthWrapper.extractBucket_(options);
            }
        }
        this.storageRefMaker_ = maker;
        this.requestMaker_ = requestMaker;
        this.pool_ = pool;
        this.service_ = service;
        this.maxOperationRetryTime_ = __WEBPACK_IMPORTED_MODULE_0__constants__["d" /* defaultMaxOperationRetryTime */];
        this.maxUploadRetryTime_ = __WEBPACK_IMPORTED_MODULE_0__constants__["e" /* defaultMaxUploadRetryTime */];
        this.requestMap_ = new __WEBPACK_IMPORTED_MODULE_5__requestmap__["a" /* RequestMap */]();
    }
    AuthWrapper.extractBucket_ = function (config) {
        var bucketString = config[__WEBPACK_IMPORTED_MODULE_0__constants__["c" /* configOption */]] || null;
        if (bucketString == null) {
            return null;
        }
        var loc = __WEBPACK_IMPORTED_MODULE_3__location__["a" /* Location */].makeFromBucketSpec(bucketString);
        return loc.bucket;
    };
    AuthWrapper.prototype.getAuthToken = function () {
        // TODO(andysoto): remove ifDef checks after firebase-app implements stubs
        // (b/28673818).
        if (this.app_ !== null &&
            __WEBPACK_IMPORTED_MODULE_6__type__["a" /* isDef */](this.app_.INTERNAL) &&
            __WEBPACK_IMPORTED_MODULE_6__type__["a" /* isDef */](this.app_.INTERNAL.getToken)) {
            return this.app_.INTERNAL.getToken().then(function (response) {
                if (response !== null) {
                    return response.accessToken;
                }
                else {
                    return null;
                }
            }, function (_error) {
                return null;
            });
        }
        else {
            return __WEBPACK_IMPORTED_MODULE_4__promise_external__["c" /* resolve */](null);
        }
    };
    AuthWrapper.prototype.bucket = function () {
        if (this.deleted_) {
            throw __WEBPACK_IMPORTED_MODULE_1__error__["b" /* appDeleted */]();
        }
        else {
            return this.bucket_;
        }
    };
    /**
     * The service associated with this auth wrapper. Untyped to avoid circular
     * type dependencies.
     */
    AuthWrapper.prototype.service = function () {
        return this.service_;
    };
    /**
     * Returns a new firebaseStorage.Reference object referencing this AuthWrapper
     * at the given Location.
     * @param loc The Location.
     * @return Actually a firebaseStorage.Reference, typing not allowed
     *     because of circular dependency problems.
     */
    AuthWrapper.prototype.makeStorageReference = function (loc) {
        return this.storageRefMaker_(this, loc);
    };
    AuthWrapper.prototype.makeRequest = function (requestInfo, authToken) {
        if (!this.deleted_) {
            var request = this.requestMaker_(requestInfo, authToken, this.pool_);
            this.requestMap_.addRequest(request);
            return request;
        }
        else {
            return new __WEBPACK_IMPORTED_MODULE_2__failrequest__["a" /* FailRequest */](__WEBPACK_IMPORTED_MODULE_1__error__["b" /* appDeleted */]());
        }
    };
    /**
     * Stop running requests and prevent more from being created.
     */
    AuthWrapper.prototype.deleteApp = function () {
        this.deleted_ = true;
        this.app_ = null;
        this.requestMap_.clear();
    };
    AuthWrapper.prototype.maxUploadRetryTime = function () {
        return this.maxUploadRetryTime_;
    };
    AuthWrapper.prototype.setMaxUploadRetryTime = function (time) {
        this.maxUploadRetryTime_ = time;
    };
    AuthWrapper.prototype.maxOperationRetryTime = function () {
        return this.maxOperationRetryTime_;
    };
    AuthWrapper.prototype.setMaxOperationRetryTime = function (time) {
        this.maxOperationRetryTime_ = time;
    };
    return AuthWrapper;
}());


//# sourceMappingURL=authwrapper.js.map


/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FailRequest; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__promise_external__ = __webpack_require__(11);

/**
 * A request whose promise always fails.
 * @struct
 * @template T
 */
var FailRequest = /** @class */ (function () {
    function FailRequest(error) {
        this.promise_ = __WEBPACK_IMPORTED_MODULE_0__promise_external__["b" /* reject */](error);
    }
    /** @inheritDoc */
    FailRequest.prototype.getPromise = function () {
        return this.promise_;
    };
    /** @inheritDoc */
    FailRequest.prototype.cancel = function (appDelete) {
        if (appDelete === void 0) { appDelete = false; }
    };
    return FailRequest;
}());


//# sourceMappingURL=failrequest.js.map


/***/ }),
/* 167 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RequestMap; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(26);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @struct
 */
var RequestMap = /** @class */ (function () {
    function RequestMap() {
        this.map_ = {};
        this.id_ = __WEBPACK_IMPORTED_MODULE_1__constants__["h" /* minSafeInteger */];
    }
    /**
     * Registers the given request with this map.
     * The request is unregistered when it completes.
     * @param r The request to register.
     */
    RequestMap.prototype.addRequest = function (r) {
        var id = this.id_;
        this.id_++;
        this.map_[id] = r;
        var self = this;
        function unmap() {
            delete self.map_[id];
        }
        r.getPromise().then(unmap, unmap);
    };
    /**
     * Cancels all registered requests.
     */
    RequestMap.prototype.clear = function () {
        __WEBPACK_IMPORTED_MODULE_0__object__["b" /* forEach */](this.map_, function (key, val) {
            if (val) {
                val.cancel(true);
            }
        });
        this.map_ = {};
    };
    return RequestMap;
}());


//# sourceMappingURL=requestmap.js.map


/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export RequestEndStatus */
/* unused harmony export addAuthHeader_ */
/* unused harmony export addVersionHeader_ */
/* harmony export (immutable) */ __webpack_exports__["a"] = makeRequest;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__firebase_app__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__array__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__backoff__ = __webpack_require__(169);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__error__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__promise_external__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__type__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__url__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__xhrio__ = __webpack_require__(76);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Defines methods used to actually send HTTP requests from
 * abstract representations.
 */









/**
 * @struct
 * @template T
 */
var NetworkRequest = /** @class */ (function () {
    function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
        this.pendingXhr_ = null;
        this.backoffId_ = null;
        this.resolve_ = null;
        this.reject_ = null;
        this.canceled_ = false;
        this.appDelete_ = false;
        this.url_ = url;
        this.method_ = method;
        this.headers_ = headers;
        this.body_ = body;
        this.successCodes_ = successCodes.slice();
        this.additionalRetryCodes_ = additionalRetryCodes.slice();
        this.callback_ = callback;
        this.errorCallback_ = errorCallback;
        this.progressCallback_ = progressCallback;
        this.timeout_ = timeout;
        this.pool_ = pool;
        var self = this;
        this.promise_ = __WEBPACK_IMPORTED_MODULE_5__promise_external__["a" /* make */](function (resolve, reject) {
            self.resolve_ = resolve;
            self.reject_ = reject;
            self.start_();
        });
    }
    /**
     * Actually starts the retry loop.
     */
    NetworkRequest.prototype.start_ = function () {
        var self = this;
        function doTheRequest(backoffCallback, canceled) {
            if (canceled) {
                backoffCallback(false, new RequestEndStatus(false, null, true));
                return;
            }
            var xhr = self.pool_.createXhrIo();
            self.pendingXhr_ = xhr;
            function progressListener(progressEvent) {
                var loaded = progressEvent.loaded;
                var total = progressEvent.lengthComputable ? progressEvent.total : -1;
                if (self.progressCallback_ !== null) {
                    self.progressCallback_(loaded, total);
                }
            }
            if (self.progressCallback_ !== null) {
                xhr.addUploadProgressListener(progressListener);
            }
            xhr
                .send(self.url_, self.method_, self.body_, self.headers_)
                .then(function (xhr) {
                if (self.progressCallback_ !== null) {
                    xhr.removeUploadProgressListener(progressListener);
                }
                self.pendingXhr_ = null;
                xhr = xhr;
                var hitServer = xhr.getErrorCode() === __WEBPACK_IMPORTED_MODULE_8__xhrio__["a" /* ErrorCode */].NO_ERROR;
                var status = xhr.getStatus();
                if (!hitServer || self.isRetryStatusCode_(status)) {
                    var wasCanceled = xhr.getErrorCode() === __WEBPACK_IMPORTED_MODULE_8__xhrio__["a" /* ErrorCode */].ABORT;
                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
                    return;
                }
                var successCode = __WEBPACK_IMPORTED_MODULE_1__array__["b" /* contains */](self.successCodes_, status);
                backoffCallback(true, new RequestEndStatus(successCode, xhr));
            });
        }
        /**
         * @param requestWentThrough True if the request eventually went
         *     through, false if it hit the retry limit or was canceled.
         */
        function backoffDone(requestWentThrough, status) {
            var resolve = self.resolve_;
            var reject = self.reject_;
            var xhr = status.xhr;
            if (status.wasSuccessCode) {
                try {
                    var result = self.callback_(xhr, xhr.getResponseText());
                    if (__WEBPACK_IMPORTED_MODULE_6__type__["c" /* isJustDef */](result)) {
                        resolve(result);
                    }
                    else {
                        resolve();
                    }
                }
                catch (e) {
                    reject(e);
                }
            }
            else {
                if (xhr !== null) {
                    var err = __WEBPACK_IMPORTED_MODULE_3__error__["s" /* unknown */]();
                    err.setServerResponseProp(xhr.getResponseText());
                    if (self.errorCallback_) {
                        reject(self.errorCallback_(xhr, err));
                    }
                    else {
                        reject(err);
                    }
                }
                else {
                    if (status.canceled) {
                        var err = self.appDelete_
                            ? __WEBPACK_IMPORTED_MODULE_3__error__["b" /* appDeleted */]()
                            : __WEBPACK_IMPORTED_MODULE_3__error__["c" /* canceled */]();
                        reject(err);
                    }
                    else {
                        var err = __WEBPACK_IMPORTED_MODULE_3__error__["o" /* retryLimitExceeded */]();
                        reject(err);
                    }
                }
            }
        }
        if (this.canceled_) {
            backoffDone(false, new RequestEndStatus(false, null, true));
        }
        else {
            this.backoffId_ = __WEBPACK_IMPORTED_MODULE_2__backoff__["a" /* start */](doTheRequest, backoffDone, this.timeout_);
        }
    };
    /** @inheritDoc */
    NetworkRequest.prototype.getPromise = function () {
        return this.promise_;
    };
    /** @inheritDoc */
    NetworkRequest.prototype.cancel = function (appDelete) {
        this.canceled_ = true;
        this.appDelete_ = appDelete || false;
        if (this.backoffId_ !== null) {
            __WEBPACK_IMPORTED_MODULE_2__backoff__["b" /* stop */](this.backoffId_);
        }
        if (this.pendingXhr_ !== null) {
            this.pendingXhr_.abort();
        }
    };
    NetworkRequest.prototype.isRetryStatusCode_ = function (status) {
        // The codes for which to retry came from this page:
        // https://cloud.google.com/storage/docs/exponential-backoff
        var isFiveHundredCode = status >= 500 && status < 600;
        var extraRetryCodes = [
            // Request Timeout: web server didn't receive full request in time.
            408,
            // Too Many Requests: you're getting rate-limited, basically.
            429
        ];
        var isExtraRetryCode = __WEBPACK_IMPORTED_MODULE_1__array__["b" /* contains */](extraRetryCodes, status);
        var isRequestSpecificRetryCode = __WEBPACK_IMPORTED_MODULE_1__array__["b" /* contains */](this.additionalRetryCodes_, status);
        return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
    };
    return NetworkRequest;
}());
/**
 * A collection of information about the result of a network request.
 * @param opt_canceled Defaults to false.
 * @struct
 */
var RequestEndStatus = /** @class */ (function () {
    function RequestEndStatus(wasSuccessCode, xhr, opt_canceled) {
        this.wasSuccessCode = wasSuccessCode;
        this.xhr = xhr;
        this.canceled = !!opt_canceled;
    }
    return RequestEndStatus;
}());

function addAuthHeader_(headers, authToken) {
    if (authToken !== null && authToken.length > 0) {
        headers['Authorization'] = 'Firebase ' + authToken;
    }
}
function addVersionHeader_(headers) {
    var number = typeof __WEBPACK_IMPORTED_MODULE_0__firebase_app__["default"] !== 'undefined' ? __WEBPACK_IMPORTED_MODULE_0__firebase_app__["default"].SDK_VERSION : 'AppManager';
    headers['X-Firebase-Storage-Version'] = 'webjs/' + number;
}
/**
 * @template T
 */
function makeRequest(requestInfo, authToken, pool) {
    var queryPart = __WEBPACK_IMPORTED_MODULE_7__url__["c" /* makeQueryString */](requestInfo.urlParams);
    var url = requestInfo.url + queryPart;
    var headers = __WEBPACK_IMPORTED_MODULE_4__object__["a" /* clone */](requestInfo.headers);
    addAuthHeader_(headers, authToken);
    addVersionHeader_(headers);
    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
}

//# sourceMappingURL=request.js.map


/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = start;
/* harmony export (immutable) */ __webpack_exports__["b"] = stop;
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @param f May be invoked
 *     before the function returns.
 * @param callback Get all the arguments passed to the function
 *     passed to f, including the initial boolean.
 */
function start(f, callback, timeout) {
    // TODO(andysoto): make this code cleaner (probably refactor into an actual
    // type instead of a bunch of functions with state shared in the closure)
    var waitSeconds = 1;
    // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
    var timeoutId = null;
    var hitTimeout = false;
    var cancelState = 0;
    function canceled() {
        return cancelState === 2;
    }
    var triggeredCallback = false;
    function triggerCallback() {
        if (!triggeredCallback) {
            triggeredCallback = true;
            callback.apply(null, arguments);
        }
    }
    function callWithDelay(millis) {
        timeoutId = setTimeout(function () {
            timeoutId = null;
            f(handler, canceled());
        }, millis);
    }
    function handler(success) {
        var var_args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            var_args[_i - 1] = arguments[_i];
        }
        if (triggeredCallback) {
            return;
        }
        if (success) {
            triggerCallback.apply(null, arguments);
            return;
        }
        var mustStop = canceled() || hitTimeout;
        if (mustStop) {
            triggerCallback.apply(null, arguments);
            return;
        }
        if (waitSeconds < 64) {
            /* TODO(andysoto): don't back off so quickly if we know we're offline. */
            waitSeconds *= 2;
        }
        var waitMillis;
        if (cancelState === 1) {
            cancelState = 2;
            waitMillis = 0;
        }
        else {
            waitMillis = (waitSeconds + Math.random()) * 1000;
        }
        callWithDelay(waitMillis);
    }
    var stopped = false;
    function stop(wasTimeout) {
        if (stopped) {
            return;
        }
        stopped = true;
        if (triggeredCallback) {
            return;
        }
        if (timeoutId !== null) {
            if (!wasTimeout) {
                cancelState = 2;
            }
            clearTimeout(timeoutId);
            callWithDelay(0);
        }
        else {
            if (!wasTimeout) {
                cancelState = 1;
            }
        }
    }
    callWithDelay(0);
    setTimeout(function () {
        hitTimeout = true;
        stop(true);
    }, timeout);
    return stop;
}
/**
 * Stops the retry loop from repeating.
 * If the function is currently "in between" retries, it is invoked immediately
 * with the second parameter as "true". Otherwise, it will be invoked once more
 * after the current invocation finishes iff the current invocation would have
 * triggered another retry.
 */
function stop(id) {
    id(false);
}

//# sourceMappingURL=backoff.js.map


/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class CurrentSelection {
  constructor($el) {
    this.$el = $el;
    this.currentWord = [];
    this.clear = this.clear.bind(this);
    this.text = this.text.bind(this);
  }

  clear() {
    this.currentWord = [];
    this.setText("");
  }

  receiveCurrentTile(tileObj) {
    if (this.isNotAlreadyChosen(tileObj)) {
      this.currentWord.push(tileObj);
      this.setText(tileObj.letter);
    }
  }

  isNotAlreadyChosen(tileObj) {
    if (this.currentWord.includes(tileObj)) {
      return false;
    }
    return true;
  }

  setText(text) {

    if (text === "") {
      this.$el.children().html("");
    }
    else if (this.text() === "") {
      this.$el.children().html(text);
    } else {
      this.$el.children().append(text);
    }
  }

  text() {
    return this.$el.children().html();
  }
}

/* harmony default export */ __webpack_exports__["a"] = (CurrentSelection);


/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sound__ = __webpack_require__(175);


class Timer {
  constructor($el, callback) {
    this.$el = $el;
    this.setTime(60);
    this.gameOverCallback = callback;
    this.start.bind(this);
    this.timeWindingSound = new __WEBPACK_IMPORTED_MODULE_0__sound__["a" /* default */]('assets/sounds/countdown.flac');
  }

  reset() {
    clearInterval(this.interval);
    this.setTime(60);
    this.$el.removeClass("red");
  }

  start() {
    this.reset();

    this.interval = setInterval(this.countDown.bind(this), 1000);
  }

  countDown() {
    this.setTime(this.seconds - 1);
    if (this.seconds === 0) {
      clearInterval(this.interval);
      this.gameOverCallback();
      this.$el.parent().parent().removeClass("red");
    } else if (this.seconds <= 10){
      this.timeWindingSound.play();
      this.$el.parent().parent().addClass("red");
    }
  }

  setTime(seconds) {
    this.seconds = seconds;
    this.$el.html(this.seconds);
  }
}

/* harmony default export */ __webpack_exports__["a"] = (Timer);


/***/ }),
/* 172 */
/***/ (function(module, exports) {

class PlayButton {
  constructor($el) {
    this.$el = $el;
    this.label = "START";
  }

  handlePlayButtonClick(e, cb) {
    // e.preventDefault();
    if (this.label === "START") {
      this.label = "RESET";
      this.$el.children().html(this.label);
    } else {
      this.label = "START";
      this.$el.children().html(this.label);
    }
    cb();

  }

}


module.exports = PlayButton;


/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__dictionary1_js__ = __webpack_require__(174);



class DictionaryFile {
  constructor(){
    this.createDictionary(__WEBPACK_IMPORTED_MODULE_0__dictionary1_js__["a" /* DictFile */]);
  }

  createDictionary(dict) {
    this.dictObj = {};
    dict.data.forEach( entry => {
      this.dictObj[entry] = true;
    });
  }

}

/* harmony default export */ __webpack_exports__["a"] = (DictionaryFile);


/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const DictFile = {"data":[["aa"],["aah"],["aahed"],["aahing"],["aahs"],["aal"],["aalii"],["aaliis"],["aals"],["aardvark"],["aardwolf"],["aargh"],["aarrgh"],["aarrghh"],["aas"],["aasvogel"],["aba"],["abaca"],["abacas"],["abaci"],["aback"],["abacus"],["abacuses"],["abaft"],["abaka"],["abakas"],["abalone"],["abalones"],["abamp"],["abampere"],["abamps"],["abandon"],["abandons"],["abapical"],["abas"],["abase"],["abased"],["abasedly"],["abaser"],["abasers"],["abases"],["abash"],["abashed"],["abashes"],["abashing"],["abasia"],["abasias"],["abasing"],["abatable"],["abate"],["abated"],["abater"],["abaters"],["abates"],["abating"],["abatis"],["abatises"],["abator"],["abators"],["abattis"],["abattoir"],["abaxial"],["abaxile"],["abba"],["abbacies"],["abbacy"],["abbas"],["abbatial"],["abbe"],["abbes"],["abbess"],["abbesses"],["abbey"],["abbeys"],["abbot"],["abbotcy"],["abbots"],["abdicate"],["abdomen"],["abdomens"],["abdomina"],["abduce"],["abduced"],["abducens"],["abducent"],["abduces"],["abducing"],["abduct"],["abducted"],["abductor"],["abducts"],["abeam"],["abed"],["abele"],["abeles"],["abelian"],["abelmosk"],["aberrant"],["abet"],["abetment"],["abets"],["abettal"],["abettals"],["abetted"],["abetter"],["abetters"],["abetting"],["abettor"],["abettors"],["abeyance"],["abeyancy"],["abeyant"],["abfarad"],["abfarads"],["abhenry"],["abhenrys"],["abhor"],["abhorred"],["abhorrer"],["abhors"],["abidance"],["abide"],["abided"],["abider"],["abiders"],["abides"],["abiding"],["abigail"],["abigails"],["ability"],["abioses"],["abiosis"],["abiotic"],["abject"],["abjectly"],["abjure"],["abjured"],["abjurer"],["abjurers"],["abjures"],["abjuring"],["ablate"],["ablated"],["ablates"],["ablating"],["ablation"],["ablative"],["ablaut"],["ablauts"],["ablaze"],["able"],["ablegate"],["abler"],["ables"],["ablest"],["ablings"],["ablins"],["abloom"],["abluent"],["abluents"],["ablush"],["abluted"],["ablution"],["ably"],["abmho"],["abmhos"],["abnegate"],["abnormal"],["abo"],["aboard"],["abode"],["aboded"],["abodes"],["aboding"],["abohm"],["abohms"],["aboideau"],["aboil"],["aboiteau"],["abolish"],["abolla"],["abollae"],["aboma"],["abomas"],["abomasa"],["abomasal"],["abomasi"],["abomasum"],["abomasus"],["aboon"],["aboral"],["aborally"],["aborning"],["abort"],["aborted"],["aborter"],["aborters"],["aborting"],["abortion"],["abortive"],["aborts"],["abos"],["abought"],["aboulia"],["aboulias"],["aboulic"],["abound"],["abounded"],["abounds"],["about"],["above"],["aboves"],["abrachia"],["abradant"],["abrade"],["abraded"],["abrader"],["abraders"],["abrades"],["abrading"],["abrasion"],["abrasive"],["abreact"],["abreacts"],["abreast"],["abri"],["abridge"],["abridged"],["abridger"],["abridges"],["abris"],["abroach"],["abroad"],["abrogate"],["abrosia"],["abrosias"],["abrupt"],["abrupter"],["abruptly"],["abscess"],["abscise"],["abscised"],["abscises"],["abscisin"],["abscissa"],["abscond"],["absconds"],["abseil"],["abseiled"],["abseils"],["absence"],["absences"],["absent"],["absented"],["absentee"],["absenter"],["absently"],["absents"],["absinth"],["absinthe"],["absinths"],["absolute"],["absolve"],["absolved"],["absolver"],["absolves"],["absonant"],["absorb"],["absorbed"],["absorber"],["absorbs"],["abstain"],["abstains"],["absterge"],["abstract"],["abstrict"],["abstruse"],["absurd"],["absurder"],["absurdly"],["absurds"],["abubble"],["abulia"],["abulias"],["abulic"],["abundant"],["abusable"],["abuse"],["abused"],["abuser"],["abusers"],["abuses"],["abusing"],["abusive"],["abut"],["abutilon"],["abutment"],["abuts"],["abuttal"],["abuttals"],["abutted"],["abutter"],["abutters"],["abutting"],["abuzz"],["abvolt"],["abvolts"],["abwatt"],["abwatts"],["aby"],["abye"],["abyes"],["abying"],["abys"],["abysm"],["abysmal"],["abysms"],["abyss"],["abyssal"],["abysses"],["acacia"],["acacias"],["academe"],["academes"],["academia"],["academic"],["academy"],["acajou"],["acajous"],["acaleph"],["acalephe"],["acalephs"],["acanthi"],["acanthus"],["acapnia"],["acapnias"],["acari"],["acarid"],["acaridan"],["acarids"],["acarine"],["acarines"],["acaroid"],["acarpous"],["acarus"],["acaudal"],["acaudate"],["acauline"],["acaulose"],["acaulous"],["accede"],["acceded"],["acceder"],["acceders"],["accedes"],["acceding"],["accent"],["accented"],["accentor"],["accents"],["accept"],["accepted"],["acceptee"],["accepter"],["acceptor"],["accepts"],["access"],["accessed"],["accesses"],["accident"],["accidia"],["accidias"],["accidie"],["accidies"],["acclaim"],["acclaims"],["accolade"],["accord"],["accorded"],["accorder"],["accords"],["accost"],["accosted"],["accosts"],["account"],["accounts"],["accouter"],["accoutre"],["accredit"],["accrete"],["accreted"],["accretes"],["accrual"],["accruals"],["accrue"],["accrued"],["accrues"],["accruing"],["accuracy"],["accurate"],["accursed"],["accurst"],["accusal"],["accusals"],["accusant"],["accuse"],["accused"],["accuser"],["accusers"],["accuses"],["accusing"],["accustom"],["ace"],["aced"],["acedia"],["acedias"],["aceldama"],["acentric"],["acequia"],["acequias"],["acerate"],["acerated"],["acerb"],["acerbate"],["acerber"],["acerbest"],["acerbic"],["acerbity"],["acerola"],["acerolas"],["acerose"],["acerous"],["acervate"],["acervuli"],["aces"],["acescent"],["aceta"],["acetal"],["acetals"],["acetamid"],["acetate"],["acetated"],["acetates"],["acetic"],["acetify"],["acetin"],["acetins"],["acetone"],["acetones"],["acetonic"],["acetose"],["acetous"],["acetoxyl"],["acetum"],["acetyl"],["acetylic"],["acetyls"],["ache"],["ached"],["achene"],["achenes"],["achenial"],["aches"],["achier"],["achiest"],["achieve"],["achieved"],["achiever"],["achieves"],["achillea"],["achiness"],["aching"],["achingly"],["achiote"],["achiotes"],["acholia"],["acholias"],["achoo"],["achromat"],["achromic"],["achy"],["acicula"],["aciculae"],["acicular"],["aciculas"],["aciculum"],["acid"],["acidemia"],["acidhead"],["acidic"],["acidify"],["acidity"],["acidly"],["acidness"],["acidoses"],["acidosis"],["acidotic"],["acids"],["aciduria"],["acidy"],["acierate"],["aciform"],["acinar"],["acing"],["acini"],["acinic"],["acinose"],["acinous"],["acinus"],["ackee"],["ackees"],["aclinic"],["acmatic"],["acme"],["acmes"],["acmic"],["acne"],["acned"],["acnes"],["acnode"],["acnodes"],["acock"],["acold"],["acolyte"],["acolytes"],["aconite"],["aconites"],["aconitic"],["aconitum"],["acorn"],["acorns"],["acoustic"],["acquaint"],["acquest"],["acquests"],["acquire"],["acquired"],["acquirer"],["acquires"],["acquit"],["acquits"],["acrasia"],["acrasias"],["acrasin"],["acrasins"],["acre"],["acreage"],["acreages"],["acred"],["acres"],["acrid"],["acrider"],["acridest"],["acridine"],["acridity"],["acridly"],["acrimony"],["acrobat"],["acrobats"],["acrodont"],["acrogen"],["acrogens"],["acrolein"],["acrolith"],["acromia"],["acromial"],["acromion"],["acronic"],["acronym"],["acronyms"],["acrosome"],["across"],["acrostic"],["acrotic"],["acrotism"],["acrylate"],["acrylic"],["acrylics"],["act"],["acta"],["actable"],["acted"],["actin"],["actinal"],["acting"],["actings"],["actinia"],["actiniae"],["actinian"],["actinias"],["actinic"],["actinide"],["actinism"],["actinium"],["actinoid"],["actinon"],["actinons"],["actins"],["action"],["actions"],["activate"],["active"],["actively"],["actives"],["activism"],["activist"],["activity"],["activize"],["actor"],["actorish"],["actors"],["actress"],["acts"],["actual"],["actually"],["actuary"],["actuate"],["actuated"],["actuates"],["actuator"],["acuate"],["acuities"],["acuity"],["aculeate"],["aculei"],["aculeus"],["acumen"],["acumens"],["acutance"],["acute"],["acutely"],["acuter"],["acutes"],["acutest"],["acyclic"],["acyl"],["acylate"],["acylated"],["acylates"],["acyloin"],["acyloins"],["acyls"],["ad"],["adage"],["adages"],["adagial"],["adagio"],["adagios"],["adamance"],["adamancy"],["adamant"],["adamants"],["adamsite"],["adapt"],["adapted"],["adapter"],["adapters"],["adapting"],["adaption"],["adaptive"],["adaptor"],["adaptors"],["adapts"],["adaxial"],["add"],["addable"],["addax"],["addaxes"],["added"],["addedly"],["addend"],["addenda"],["addends"],["addendum"],["adder"],["adders"],["addible"],["addict"],["addicted"],["addicts"],["adding"],["addition"],["additive"],["additory"],["addle"],["addled"],["addles"],["addling"],["address"],["addrest"],["adds"],["adduce"],["adduced"],["adducent"],["adducer"],["adducers"],["adduces"],["adducing"],["adduct"],["adducted"],["adductor"],["adducts"],["adeem"],["adeemed"],["adeeming"],["adeems"],["adenine"],["adenines"],["adenitis"],["adenoid"],["adenoids"],["adenoma"],["adenomas"],["adenoses"],["adenosis"],["adenyl"],["adenyls"],["adept"],["adepter"],["adeptest"],["adeptly"],["adepts"],["adequacy"],["adequate"],["adhere"],["adhered"],["adherend"],["adherent"],["adherer"],["adherers"],["adheres"],["adhering"],["adhesion"],["adhesive"],["adhibit"],["adhibits"],["adieu"],["adieus"],["adieux"],["adios"],["adipic"],["adipose"],["adiposes"],["adiposis"],["adipous"],["adit"],["adits"],["adjacent"],["adjoin"],["adjoined"],["adjoins"],["adjoint"],["adjoints"],["adjourn"],["adjourns"],["adjudge"],["adjudged"],["adjudges"],["adjunct"],["adjuncts"],["adjure"],["adjured"],["adjurer"],["adjurers"],["adjures"],["adjuring"],["adjuror"],["adjurors"],["adjust"],["adjusted"],["adjuster"],["adjustor"],["adjusts"],["adjutant"],["adjuvant"],["adman"],["admass"],["admen"],["admiral"],["admirals"],["admire"],["admired"],["admirer"],["admirers"],["admires"],["admiring"],["admit"],["admits"],["admitted"],["admitter"],["admix"],["admixed"],["admixes"],["admixing"],["admixt"],["admonish"],["adnate"],["adnation"],["adnexa"],["adnexal"],["adnoun"],["adnouns"],["ado"],["adobe"],["adobes"],["adobo"],["adobos"],["adonis"],["adonises"],["adopt"],["adopted"],["adoptee"],["adoptees"],["adopter"],["adopters"],["adopting"],["adoption"],["adoptive"],["adopts"],["adorable"],["adorably"],["adore"],["adored"],["adorer"],["adorers"],["adores"],["adoring"],["adorn"],["adorned"],["adorner"],["adorners"],["adorning"],["adorns"],["ados"],["adown"],["adoze"],["adrenal"],["adrenals"],["adrift"],["adroit"],["adroiter"],["adroitly"],["ads"],["adscript"],["adsorb"],["adsorbed"],["adsorbs"],["adularia"],["adulate"],["adulated"],["adulates"],["adulator"],["adult"],["adultery"],["adultly"],["adults"],["adumbral"],["adunc"],["aduncate"],["aduncous"],["adust"],["advance"],["advanced"],["advancer"],["advances"],["advect"],["advected"],["advects"],["advent"],["advents"],["adverb"],["adverbs"],["adverse"],["advert"],["adverted"],["adverts"],["advice"],["advices"],["advise"],["advised"],["advisee"],["advisees"],["adviser"],["advisers"],["advises"],["advising"],["advisor"],["advisors"],["advisory"],["advocacy"],["advocate"],["advowson"],["adynamia"],["adynamic"],["adyta"],["adytum"],["adz"],["adze"],["adzes"],["ae"],["aecia"],["aecial"],["aecidia"],["aecidial"],["aecidium"],["aecium"],["aedes"],["aedile"],["aediles"],["aedine"],["aegis"],["aegises"],["aeneous"],["aeneus"],["aeolian"],["aeon"],["aeonian"],["aeonic"],["aeons"],["aequorin"],["aerate"],["aerated"],["aerates"],["aerating"],["aeration"],["aerator"],["aerators"],["aerial"],["aerially"],["aerials"],["aerie"],["aeried"],["aerier"],["aeries"],["aeriest"],["aerified"],["aerifies"],["aeriform"],["aerify"],["aerily"],["aero"],["aerobe"],["aerobes"],["aerobia"],["aerobic"],["aerobics"],["aerobium"],["aeroduct"],["aerodyne"],["aerofoil"],["aerogel"],["aerogels"],["aerogram"],["aerolite"],["aerolith"],["aerology"],["aeronaut"],["aeronomy"],["aerosat"],["aerosats"],["aerosol"],["aerosols"],["aerostat"],["aerugo"],["aerugos"],["aery"],["aesthete"],["aestival"],["aether"],["aetheric"],["aethers"],["afar"],["afars"],["afeard"],["afeared"],["afebrile"],["aff"],["affable"],["affably"],["affair"],["affaire"],["affaires"],["affairs"],["affect"],["affected"],["affecter"],["affects"],["afferent"],["affiance"],["affiant"],["affiants"],["affiche"],["affiches"],["affinal"],["affine"],["affined"],["affinely"],["affines"],["affinity"],["affirm"],["affirmed"],["affirmer"],["affirms"],["affix"],["affixal"],["affixed"],["affixer"],["affixers"],["affixes"],["affixial"],["affixing"],["afflatus"],["afflict"],["afflicts"],["affluent"],["afflux"],["affluxes"],["afford"],["afforded"],["affords"],["afforest"],["affray"],["affrayed"],["affrayer"],["affrays"],["affright"],["affront"],["affronts"],["affusion"],["afghan"],["afghani"],["afghanis"],["afghans"],["afield"],["afire"],["aflame"],["afloat"],["aflutter"],["afoot"],["afore"],["afoul"],["afraid"],["afreet"],["afreets"],["afresh"],["afrit"],["afrits"],["aft"],["after"],["afters"],["aftertax"],["aftmost"],["aftosa"],["aftosas"],["ag"],["aga"],["again"],["against"],["agalloch"],["agalwood"],["agama"],["agamas"],["agamete"],["agametes"],["agamic"],["agamous"],["agapae"],["agapai"],["agape"],["agapeic"],["agar"],["agaric"],["agarics"],["agarose"],["agaroses"],["agars"],["agas"],["agate"],["agates"],["agatize"],["agatized"],["agatizes"],["agatoid"],["agave"],["agaves"],["agaze"],["age"],["aged"],["agedly"],["agedness"],["agee"],["ageing"],["ageings"],["ageism"],["ageisms"],["ageist"],["ageists"],["ageless"],["agelong"],["agencies"],["agency"],["agenda"],["agendas"],["agendum"],["agendums"],["agene"],["agenes"],["ageneses"],["agenesia"],["agenesis"],["agenetic"],["agenize"],["agenized"],["agenizes"],["agent"],["agential"],["agentive"],["agentry"],["agents"],["ager"],["ageratum"],["agers"],["ages"],["aggadic"],["agger"],["aggers"],["aggie"],["aggies"],["aggrade"],["aggraded"],["aggrades"],["aggress"],["aggrieve"],["aggro"],["aggros"],["agha"],["aghas"],["aghast"],["agile"],["agilely"],["agility"],["agin"],["aging"],["agings"],["aginner"],["aginners"],["agio"],["agios"],["agiotage"],["agism"],["agisms"],["agist"],["agisted"],["agisting"],["agists"],["agitable"],["agitate"],["agitated"],["agitates"],["agitato"],["agitator"],["agitprop"],["aglare"],["agleam"],["aglee"],["aglet"],["aglets"],["agley"],["aglimmer"],["aglitter"],["aglow"],["agly"],["aglycon"],["aglycone"],["aglycons"],["agma"],["agmas"],["agminate"],["agnail"],["agnails"],["agnate"],["agnates"],["agnatic"],["agnation"],["agnize"],["agnized"],["agnizes"],["agnizing"],["agnomen"],["agnomens"],["agnomina"],["agnosia"],["agnosias"],["agnostic"],["ago"],["agog"],["agon"],["agonal"],["agone"],["agones"],["agonic"],["agonies"],["agonise"],["agonised"],["agonises"],["agonist"],["agonists"],["agonize"],["agonized"],["agonizes"],["agons"],["agony"],["agora"],["agorae"],["agoras"],["agorot"],["agoroth"],["agouti"],["agouties"],["agoutis"],["agouty"],["agrafe"],["agrafes"],["agraffe"],["agraffes"],["agrapha"],["agraphia"],["agraphic"],["agrarian"],["agravic"],["agree"],["agreed"],["agreeing"],["agrees"],["agrestal"],["agrestic"],["agria"],["agrias"],["agrimony"],["agrology"],["agronomy"],["aground"],["agrypnia"],["ague"],["aguelike"],["agues"],["agueweed"],["aguish"],["aguishly"],["ah"],["aha"],["ahchoo"],["ahead"],["ahem"],["ahimsa"],["ahimsas"],["ahold"],["aholds"],["ahorse"],["ahoy"],["ahull"],["ai"],["aiblins"],["aid"],["aide"],["aided"],["aider"],["aiders"],["aides"],["aidful"],["aiding"],["aidless"],["aidman"],["aidmen"],["aids"],["aiglet"],["aiglets"],["aigret"],["aigrets"],["aigrette"],["aiguille"],["aikido"],["aikidos"],["ail"],["ailed"],["aileron"],["ailerons"],["ailing"],["ailment"],["ailments"],["ails"],["aim"],["aimed"],["aimer"],["aimers"],["aimful"],["aimfully"],["aiming"],["aimless"],["aims"],["ain"],["ains"],["ainsell"],["ainsells"],["aioli"],["aiolis"],["air"],["airboat"],["airboats"],["airborne"],["airbound"],["airbrush"],["airburst"],["airbus"],["airbuses"],["aircheck"],["aircoach"],["aircraft"],["aircrew"],["aircrews"],["airdate"],["airdates"],["airdrome"],["airdrop"],["airdrops"],["aired"],["airer"],["airers"],["airest"],["airfare"],["airfares"],["airfield"],["airflow"],["airflows"],["airfoil"],["airfoils"],["airframe"],["airglow"],["airglows"],["airhead"],["airheads"],["airier"],["airiest"],["airily"],["airiness"],["airing"],["airings"],["airless"],["airlift"],["airlifts"],["airlike"],["airline"],["airliner"],["airlines"],["airmail"],["airmails"],["airman"],["airmen"],["airn"],["airns"],["airpark"],["airparks"],["airplane"],["airplay"],["airplays"],["airport"],["airports"],["airpost"],["airposts"],["airproof"],["airs"],["airscape"],["airscrew"],["airshed"],["airsheds"],["airship"],["airships"],["airsick"],["airspace"],["airspeed"],["airstrip"],["airt"],["airted"],["airth"],["airthed"],["airthing"],["airths"],["airtight"],["airtime"],["airtimes"],["airting"],["airts"],["airward"],["airwave"],["airwaves"],["airway"],["airways"],["airwise"],["airwoman"],["airwomen"],["airy"],["ais"],["aisle"],["aisled"],["aisles"],["ait"],["aitch"],["aitches"],["aits"],["aiver"],["aivers"],["ajar"],["ajee"],["ajiva"],["ajivas"],["ajowan"],["ajowans"],["ajuga"],["ajugas"],["akee"],["akees"],["akela"],["akelas"],["akene"],["akenes"],["akimbo"],["akin"],["akvavit"],["akvavits"],["al"],["ala"],["alack"],["alacrity"],["alae"],["alameda"],["alamedas"],["alamo"],["alamode"],["alamodes"],["alamos"],["alan"],["aland"],["alands"],["alane"],["alang"],["alanin"],["alanine"],["alanines"],["alanins"],["alans"],["alant"],["alants"],["alanyl"],["alanyls"],["alar"],["alarm"],["alarmed"],["alarming"],["alarmism"],["alarmist"],["alarms"],["alarum"],["alarumed"],["alarums"],["alary"],["alas"],["alaska"],["alaskas"],["alastor"],["alastors"],["alate"],["alated"],["alates"],["alation"],["alations"],["alb"],["alba"],["albacore"],["albas"],["albata"],["albatas"],["albedo"],["albedoes"],["albedos"],["albeit"],["albicore"],["albinal"],["albinic"],["albinism"],["albino"],["albinos"],["albite"],["albites"],["albitic"],["albizia"],["albizias"],["albizzia"],["albs"],["album"],["albumen"],["albumens"],["albumin"],["albumins"],["albumose"],["albums"],["alburnum"],["alcade"],["alcades"],["alcahest"],["alcaic"],["alcaics"],["alcaide"],["alcaides"],["alcalde"],["alcaldes"],["alcayde"],["alcaydes"],["alcazar"],["alcazars"],["alchemic"],["alchemy"],["alchymy"],["alcid"],["alcidine"],["alcids"],["alcohol"],["alcohols"],["alcove"],["alcoved"],["alcoves"],["aldehyde"],["alder"],["alderfly"],["alderman"],["aldermen"],["alders"],["aldol"],["aldolase"],["aldols"],["aldose"],["aldoses"],["aldrin"],["aldrins"],["ale"],["aleatory"],["alec"],["alecs"],["alee"],["alef"],["alefs"],["alegar"],["alegars"],["alehouse"],["alembic"],["alembics"],["alencon"],["alencons"],["aleph"],["alephs"],["alert"],["alerted"],["alerter"],["alertest"],["alerting"],["alertly"],["alerts"],["ales"],["aleuron"],["aleurone"],["aleurons"],["alevin"],["alevins"],["alewife"],["alewives"],["alexia"],["alexias"],["alexin"],["alexine"],["alexines"],["alexins"],["alfa"],["alfaki"],["alfakis"],["alfalfa"],["alfalfas"],["alfaqui"],["alfaquin"],["alfaquis"],["alfas"],["alforja"],["alforjas"],["alfresco"],["alga"],["algae"],["algal"],["algaroba"],["algas"],["algebra"],["algebras"],["algerine"],["algicide"],["algid"],["algidity"],["algin"],["alginate"],["algins"],["algoid"],["algology"],["algor"],["algorism"],["algors"],["algum"],["algums"],["alias"],["aliases"],["alibi"],["alibied"],["alibies"],["alibiing"],["alibis"],["alible"],["alidad"],["alidade"],["alidades"],["alidads"],["alien"],["alienage"],["alienate"],["aliened"],["alienee"],["alienees"],["aliener"],["alieners"],["aliening"],["alienism"],["alienist"],["alienly"],["alienor"],["alienors"],["aliens"],["alif"],["aliform"],["alifs"],["alight"],["alighted"],["alights"],["align"],["aligned"],["aligner"],["aligners"],["aligning"],["aligns"],["alike"],["aliment"],["aliments"],["alimony"],["aline"],["alined"],["aliner"],["aliners"],["alines"],["alining"],["aliped"],["alipeds"],["aliquant"],["aliquot"],["aliquots"],["alist"],["alit"],["aliunde"],["alive"],["aliya"],["aliyah"],["aliyahs"],["aliyas"],["aliyos"],["aliyot"],["alizarin"],["alkahest"],["alkali"],["alkalic"],["alkalies"],["alkalify"],["alkalin"],["alkaline"],["alkalis"],["alkalise"],["alkalize"],["alkaloid"],["alkane"],["alkanes"],["alkanet"],["alkanets"],["alkene"],["alkenes"],["alkies"],["alkine"],["alkines"],["alkoxy"],["alky"],["alkyd"],["alkyds"],["alkyl"],["alkylate"],["alkylic"],["alkyls"],["alkyne"],["alkynes"],["all"],["allanite"],["allay"],["allayed"],["allayer"],["allayers"],["allaying"],["allays"],["allege"],["alleged"],["alleger"],["allegers"],["alleges"],["alleging"],["allegory"],["allegro"],["allegros"],["allele"],["alleles"],["allelic"],["allelism"],["alleluia"],["allergen"],["allergic"],["allergin"],["allergy"],["alley"],["alleys"],["alleyway"],["allheal"],["allheals"],["alliable"],["alliance"],["allicin"],["allicins"],["allied"],["allies"],["allium"],["alliums"],["allobar"],["allobars"],["allocate"],["allod"],["allodia"],["allodial"],["allodium"],["allods"],["allogamy"],["allonge"],["allonges"],["allonym"],["allonyms"],["allopath"],["allot"],["allots"],["allotted"],["allottee"],["allotter"],["allotype"],["allotypy"],["allover"],["allovers"],["allow"],["allowed"],["allowing"],["allows"],["alloxan"],["alloxans"],["alloy"],["alloyed"],["alloying"],["alloys"],["alls"],["allseed"],["allseeds"],["allspice"],["allude"],["alluded"],["alludes"],["alluding"],["allure"],["allured"],["allurer"],["allurers"],["allures"],["alluring"],["allusion"],["allusive"],["alluvia"],["alluvial"],["alluvion"],["alluvium"],["ally"],["allying"],["allyl"],["allylic"],["allyls"],["alma"],["almagest"],["almah"],["almahs"],["almanac"],["almanacs"],["almas"],["alme"],["almeh"],["almehs"],["almemar"],["almemars"],["almes"],["almighty"],["almner"],["almners"],["almond"],["almonds"],["almoner"],["almoners"],["almonry"],["almost"],["alms"],["almsman"],["almsmen"],["almuce"],["almuces"],["almud"],["almude"],["almudes"],["almuds"],["almug"],["almugs"],["alnico"],["alnicoes"],["alodia"],["alodial"],["alodium"],["aloe"],["aloes"],["aloetic"],["aloft"],["alogical"],["aloha"],["alohas"],["aloin"],["aloins"],["alone"],["along"],["aloof"],["aloofly"],["alopecia"],["alopecic"],["aloud"],["alow"],["alp"],["alpaca"],["alpacas"],["alpha"],["alphabet"],["alphas"],["alphorn"],["alphorns"],["alphosis"],["alphyl"],["alphyls"],["alpine"],["alpinely"],["alpines"],["alpinism"],["alpinist"],["alps"],["already"],["alright"],["als"],["alsike"],["alsikes"],["also"],["alt"],["altar"],["altars"],["alter"],["alterant"],["altered"],["alterer"],["alterers"],["altering"],["alters"],["althaea"],["althaeas"],["althea"],["altheas"],["altho"],["althorn"],["althorns"],["although"],["altitude"],["alto"],["altoist"],["altoists"],["altos"],["altruism"],["altruist"],["alts"],["aludel"],["aludels"],["alula"],["alulae"],["alular"],["alum"],["alumin"],["alumina"],["aluminas"],["alumine"],["alumines"],["aluminic"],["alumins"],["aluminum"],["alumna"],["alumnae"],["alumni"],["alumnus"],["alumroot"],["alums"],["alunite"],["alunites"],["alveolar"],["alveoli"],["alveolus"],["alvine"],["alway"],["always"],["alyssum"],["alyssums"],["am"],["ama"],["amadavat"],["amadou"],["amadous"],["amah"],["amahs"],["amain"],["amalgam"],["amalgams"],["amandine"],["amanita"],["amanitas"],["amanitin"],["amaranth"],["amarelle"],["amaretto"],["amarna"],["amas"],["amass"],["amassed"],["amasser"],["amassers"],["amasses"],["amassing"],["amateur"],["amateurs"],["amative"],["amatol"],["amatols"],["amatory"],["amaze"],["amazed"],["amazedly"],["amazes"],["amazing"],["amazon"],["amazons"],["ambage"],["ambages"],["ambari"],["ambaries"],["ambaris"],["ambary"],["ambeer"],["ambeers"],["amber"],["amberies"],["amberoid"],["ambers"],["ambery"],["ambiance"],["ambience"],["ambient"],["ambients"],["ambit"],["ambition"],["ambits"],["ambivert"],["amble"],["ambled"],["ambler"],["amblers"],["ambles"],["ambling"],["ambo"],["amboina"],["amboinas"],["ambones"],["ambos"],["amboyna"],["amboynas"],["ambries"],["ambroid"],["ambroids"],["ambrosia"],["ambry"],["ambsace"],["ambsaces"],["ambulant"],["ambulate"],["ambush"],["ambushed"],["ambusher"],["ambushes"],["ameba"],["amebae"],["ameban"],["amebas"],["amebean"],["amebic"],["ameboid"],["ameer"],["ameerate"],["ameers"],["amelcorn"],["amen"],["amenable"],["amenably"],["amend"],["amended"],["amender"],["amenders"],["amending"],["amends"],["amenity"],["amens"],["ament"],["amentia"],["amentias"],["aments"],["amerce"],["amerced"],["amercer"],["amercers"],["amerces"],["amercing"],["amesace"],["amesaces"],["amethyst"],["ami"],["amia"],["amiable"],["amiably"],["amiantus"],["amias"],["amicable"],["amicably"],["amice"],["amices"],["amid"],["amidase"],["amidases"],["amide"],["amides"],["amidic"],["amidin"],["amidine"],["amidines"],["amidins"],["amido"],["amidogen"],["amidol"],["amidols"],["amidone"],["amidones"],["amids"],["amidship"],["amidst"],["amie"],["amies"],["amiga"],["amigas"],["amigo"],["amigos"],["amin"],["amine"],["amines"],["aminic"],["aminity"],["amino"],["amins"],["amir"],["amirate"],["amirates"],["amirs"],["amis"],["amiss"],["amities"],["amitoses"],["amitosis"],["amitotic"],["amitrole"],["amity"],["ammeter"],["ammeters"],["ammine"],["ammines"],["ammino"],["ammo"],["ammocete"],["ammonal"],["ammonals"],["ammonia"],["ammoniac"],["ammonias"],["ammonic"],["ammonify"],["ammonite"],["ammonium"],["ammono"],["ammonoid"],["ammos"],["amnesia"],["amnesiac"],["amnesias"],["amnesic"],["amnesics"],["amnestic"],["amnesty"],["amnia"],["amnic"],["amnion"],["amnionic"],["amnions"],["amniote"],["amniotes"],["amniotic"],["amoeba"],["amoebae"],["amoeban"],["amoebas"],["amoebean"],["amoebic"],["amoeboid"],["amok"],["amoks"],["amole"],["amoles"],["among"],["amongst"],["amoral"],["amorally"],["amoretti"],["amoretto"],["amorini"],["amorino"],["amorist"],["amorists"],["amoroso"],["amorous"],["amort"],["amortise"],["amortize"],["amotion"],["amotions"],["amount"],["amounted"],["amounts"],["amour"],["amours"],["amp"],["amperage"],["ampere"],["amperes"],["amphibia"],["amphioxi"],["amphipod"],["amphora"],["amphorae"],["amphoral"],["amphoras"],["ample"],["ampler"],["amplest"],["amplexus"],["amplify"],["amply"],["ampoule"],["ampoules"],["amps"],["ampul"],["ampule"],["ampules"],["ampulla"],["ampullae"],["ampullar"],["ampuls"],["amputate"],["amputee"],["amputees"],["amreeta"],["amreetas"],["amrita"],["amritas"],["amtrac"],["amtrack"],["amtracks"],["amtracs"],["amu"],["amuck"],["amucks"],["amulet"],["amulets"],["amus"],["amusable"],["amuse"],["amused"],["amusedly"],["amuser"],["amusers"],["amuses"],["amusia"],["amusias"],["amusing"],["amusive"],["amygdala"],["amygdale"],["amygdule"],["amyl"],["amylase"],["amylases"],["amylene"],["amylenes"],["amylic"],["amylogen"],["amyloid"],["amyloids"],["amylose"],["amyloses"],["amyls"],["amylum"],["amylums"],["an"],["ana"],["anabaena"],["anabas"],["anabases"],["anabasis"],["anabatic"],["anableps"],["anabolic"],["anaconda"],["anadem"],["anadems"],["anaemia"],["anaemias"],["anaemic"],["anaerobe"],["anaglyph"],["anagoge"],["anagoges"],["anagogic"],["anagogy"],["anagram"],["anagrams"],["anal"],["analcime"],["analcite"],["analecta"],["analects"],["analemma"],["analgia"],["analgias"],["anality"],["anally"],["analog"],["analogic"],["analogs"],["analogue"],["analogy"],["analyse"],["analysed"],["analyser"],["analyses"],["analysis"],["analyst"],["analysts"],["analytic"],["analyze"],["analyzed"],["analyzer"],["analyzes"],["ananke"],["anankes"],["anapaest"],["anapest"],["anapests"],["anaphase"],["anaphora"],["anarch"],["anarchic"],["anarchs"],["anarchy"],["anas"],["anasarca"],["anatase"],["anatases"],["anathema"],["anatomic"],["anatomy"],["anatoxin"],["anatto"],["anattos"],["ancestor"],["ancestry"],["anchor"],["anchored"],["anchoret"],["anchors"],["anchovy"],["anchusa"],["anchusas"],["anchusin"],["ancient"],["ancients"],["ancilla"],["ancillae"],["ancillas"],["ancon"],["anconal"],["ancone"],["anconeal"],["ancones"],["anconoid"],["ancress"],["and"],["andante"],["andantes"],["andesite"],["andesyte"],["andiron"],["andirons"],["androgen"],["android"],["androids"],["ands"],["ane"],["anear"],["aneared"],["anearing"],["anears"],["anecdota"],["anecdote"],["anechoic"],["anele"],["aneled"],["aneles"],["aneling"],["anemia"],["anemias"],["anemic"],["anemone"],["anemones"],["anemoses"],["anemosis"],["anenst"],["anent"],["anergia"],["anergias"],["anergic"],["anergies"],["anergy"],["aneroid"],["aneroids"],["anes"],["anestri"],["anestrus"],["anethol"],["anethole"],["anethols"],["aneurin"],["aneurins"],["aneurism"],["aneurysm"],["anew"],["anga"],["angakok"],["angakoks"],["angaria"],["angarias"],["angaries"],["angary"],["angas"],["angel"],["angeled"],["angelic"],["angelica"],["angeling"],["angels"],["angelus"],["anger"],["angered"],["angering"],["angerly"],["angers"],["angina"],["anginal"],["anginas"],["anginose"],["anginous"],["angioma"],["angiomas"],["angle"],["angled"],["anglepod"],["angler"],["anglers"],["angles"],["anglice"],["angling"],["anglings"],["angora"],["angoras"],["angrier"],["angriest"],["angrily"],["angry"],["angst"],["angstrom"],["angsts"],["anguine"],["anguish"],["angular"],["angulate"],["angulose"],["angulous"],["anhinga"],["anhingas"],["ani"],["anil"],["anile"],["anilin"],["aniline"],["anilines"],["anilins"],["anility"],["anils"],["anima"],["animal"],["animalic"],["animally"],["animals"],["animas"],["animate"],["animated"],["animater"],["animates"],["animato"],["animator"],["anime"],["animes"],["animi"],["animis"],["animism"],["animisms"],["animist"],["animists"],["animus"],["animuses"],["anion"],["anionic"],["anions"],["anis"],["anise"],["aniseed"],["aniseeds"],["anises"],["anisette"],["anisic"],["anisole"],["anisoles"],["ankerite"],["ankh"],["ankhs"],["ankle"],["ankled"],["ankles"],["anklet"],["anklets"],["ankling"],["ankus"],["ankuses"],["ankush"],["ankushes"],["ankylose"],["anlace"],["anlaces"],["anlage"],["anlagen"],["anlages"],["anlas"],["anlases"],["anna"],["annal"],["annalist"],["annals"],["annas"],["annates"],["annatto"],["annattos"],["anneal"],["annealed"],["annealer"],["anneals"],["annelid"],["annelids"],["annex"],["annexe"],["annexed"],["annexes"],["annexing"],["annotate"],["announce"],["annoy"],["annoyed"],["annoyer"],["annoyers"],["annoying"],["annoys"],["annual"],["annually"],["annuals"],["annuity"],["annul"],["annular"],["annulate"],["annulet"],["annulets"],["annuli"],["annulled"],["annulose"],["annuls"],["annulus"],["anoa"],["anoas"],["anodal"],["anodally"],["anode"],["anodes"],["anodic"],["anodize"],["anodized"],["anodizes"],["anodyne"],["anodynes"],["anodynic"],["anoint"],["anointed"],["anointer"],["anoints"],["anole"],["anoles"],["anolyte"],["anolytes"],["anomaly"],["anomic"],["anomie"],["anomies"],["anomy"],["anon"],["anonym"],["anonyms"],["anoopsia"],["anopia"],["anopias"],["anopsia"],["anopsias"],["anorak"],["anoraks"],["anoretic"],["anorexia"],["anorexic"],["anorexy"],["anorthic"],["anosmia"],["anosmias"],["anosmic"],["another"],["anovular"],["anoxemia"],["anoxemic"],["anoxia"],["anoxias"],["anoxic"],["ansa"],["ansae"],["ansate"],["ansated"],["anserine"],["anserous"],["answer"],["answered"],["answerer"],["answers"],["ant"],["anta"],["antacid"],["antacids"],["antae"],["antalgic"],["antas"],["ante"],["anteater"],["antecede"],["anted"],["antedate"],["anteed"],["antefix"],["antefixa"],["anteing"],["antelope"],["antenna"],["antennae"],["antennal"],["antennas"],["antepast"],["anterior"],["anteroom"],["antes"],["antetype"],["antevert"],["anthelia"],["anthelix"],["anthem"],["anthemed"],["anthemia"],["anthems"],["anther"],["antheral"],["antherid"],["anthers"],["antheses"],["anthesis"],["anthill"],["anthills"],["anthodia"],["anthoid"],["anthrax"],["anti"],["antiar"],["antiarin"],["antiars"],["antiatom"],["antibias"],["antibody"],["antiboss"],["antibug"],["antic"],["anticar"],["anticity"],["antick"],["anticked"],["anticks"],["anticly"],["anticold"],["antics"],["anticult"],["antidora"],["antidote"],["antifat"],["antifoam"],["antigay"],["antigen"],["antigene"],["antigens"],["antigun"],["antihero"],["antijam"],["antiking"],["antileak"],["antileft"],["antilife"],["antilog"],["antilogs"],["antilogy"],["antimale"],["antiman"],["antimask"],["antimere"],["antimony"],["anting"],["antings"],["antinode"],["antinomy"],["antinuke"],["antiphon"],["antipill"],["antipode"],["antipole"],["antipope"],["antipot"],["antipyic"],["antique"],["antiqued"],["antiquer"],["antiques"],["antirape"],["antired"],["antiriot"],["antiroll"],["antirust"],["antis"],["antisag"],["antisera"],["antisex"],["antiship"],["antiskid"],["antislip"],["antismog"],["antismut"],["antisnob"],["antistat"],["antitank"],["antitax"],["antitype"],["antiwar"],["antiwear"],["antiweed"],["antler"],["antlered"],["antlers"],["antlike"],["antlion"],["antlions"],["antonym"],["antonyms"],["antonymy"],["antra"],["antral"],["antre"],["antres"],["antrorse"],["antrum"],["antrums"],["ants"],["antsier"],["antsiest"],["antsy"],["anural"],["anuran"],["anurans"],["anureses"],["anuresis"],["anuretic"],["anuria"],["anurias"],["anuric"],["anurous"],["anus"],["anuses"],["anvil"],["anviled"],["anviling"],["anvilled"],["anvils"],["anviltop"],["anxiety"],["anxious"],["any"],["anybody"],["anyhow"],["anymore"],["anyone"],["anyplace"],["anything"],["anytime"],["anyway"],["anyways"],["anywhere"],["anywise"],["aorist"],["aoristic"],["aorists"],["aorta"],["aortae"],["aortal"],["aortas"],["aortic"],["aoudad"],["aoudads"],["apace"],["apache"],["apaches"],["apagoge"],["apagoges"],["apagogic"],["apanage"],["apanages"],["aparejo"],["aparejos"],["apart"],["apatetic"],["apathies"],["apathy"],["apatite"],["apatites"],["ape"],["apeak"],["aped"],["apeek"],["apelike"],["aper"],["apercu"],["apercus"],["aperient"],["aperies"],["aperitif"],["apers"],["aperture"],["apery"],["apes"],["apetaly"],["apex"],["apexes"],["aphagia"],["aphagias"],["aphanite"],["aphasia"],["aphasiac"],["aphasias"],["aphasic"],["aphasics"],["aphelia"],["aphelian"],["aphelion"],["apheses"],["aphesis"],["aphetic"],["aphid"],["aphides"],["aphidian"],["aphids"],["aphis"],["apholate"],["aphonia"],["aphonias"],["aphonic"],["aphonics"],["aphorise"],["aphorism"],["aphorist"],["aphorize"],["aphotic"],["aphtha"],["aphthae"],["aphthous"],["aphylly"],["apian"],["apiarian"],["apiaries"],["apiarist"],["apiary"],["apical"],["apically"],["apicals"],["apices"],["apiculi"],["apiculus"],["apiece"],["apimania"],["aping"],["apiology"],["apish"],["apishly"],["aplasia"],["aplasias"],["aplastic"],["aplenty"],["aplite"],["aplites"],["aplitic"],["aplomb"],["aplombs"],["apnea"],["apneal"],["apneas"],["apneic"],["apnoea"],["apnoeal"],["apnoeas"],["apnoeic"],["apoapsis"],["apocarp"],["apocarps"],["apocarpy"],["apocope"],["apocopes"],["apocopic"],["apocrine"],["apod"],["apodal"],["apodoses"],["apodosis"],["apodous"],["apods"],["apogamic"],["apogamy"],["apogeal"],["apogean"],["apogee"],["apogees"],["apogeic"],["apollo"],["apollos"],["apolog"],["apologal"],["apologia"],["apologs"],["apologue"],["apology"],["apolune"],["apolunes"],["apomict"],["apomicts"],["apomixes"],["apomixis"],["apophony"],["apophyge"],["apoplexy"],["aport"],["apospory"],["apostacy"],["apostasy"],["apostate"],["apostil"],["apostils"],["apostle"],["apostles"],["apothece"],["apothegm"],["apothem"],["apothems"],["appal"],["appall"],["appalled"],["appalls"],["appals"],["appanage"],["apparat"],["apparats"],["apparel"],["apparels"],["apparent"],["appeal"],["appealed"],["appealer"],["appeals"],["appear"],["appeared"],["appears"],["appease"],["appeased"],["appeaser"],["appeases"],["appel"],["appellee"],["appellor"],["appels"],["append"],["appended"],["appendix"],["appends"],["appestat"],["appetent"],["appetite"],["applaud"],["applauds"],["applause"],["apple"],["apples"],["applied"],["applier"],["appliers"],["applies"],["applique"],["apply"],["applying"],["appoint"],["appoints"],["appose"],["apposed"],["apposer"],["apposers"],["apposes"],["apposing"],["apposite"],["appraise"],["apprise"],["apprised"],["appriser"],["apprises"],["apprize"],["apprized"],["apprizer"],["apprizes"],["approach"],["approval"],["approve"],["approved"],["approver"],["approves"],["appulse"],["appulses"],["apractic"],["apraxia"],["apraxias"],["apraxic"],["apres"],["apricot"],["apricots"],["apron"],["aproned"],["aproning"],["aprons"],["apropos"],["apse"],["apses"],["apsidal"],["apsides"],["apsis"],["apt"],["apter"],["apteral"],["apteria"],["apterium"],["apterous"],["apteryx"],["aptest"],["aptitude"],["aptly"],["aptness"],["apyrase"],["apyrases"],["apyretic"],["aqua"],["aquacade"],["aquae"],["aquanaut"],["aquaria"],["aquarial"],["aquarian"],["aquarist"],["aquarium"],["aquas"],["aquatic"],["aquatics"],["aquatint"],["aquatone"],["aquavit"],["aquavits"],["aqueduct"],["aqueous"],["aquifer"],["aquifers"],["aquiline"],["aquiver"],["ar"],["arabesk"],["arabesks"],["arabic"],["arabize"],["arabized"],["arabizes"],["arable"],["arables"],["araceous"],["arachnid"],["arak"],["araks"],["aramid"],["aramids"],["araneid"],["araneids"],["arapaima"],["araroba"],["ararobas"],["arb"],["arbalest"],["arbalist"],["arbelest"],["arbiter"],["arbiters"],["arbitral"],["arbor"],["arboreal"],["arbored"],["arbores"],["arboreta"],["arborist"],["arborize"],["arborous"],["arbors"],["arbour"],["arboured"],["arbours"],["arbs"],["arbuscle"],["arbute"],["arbutean"],["arbutes"],["arbutus"],["arc"],["arcade"],["arcaded"],["arcades"],["arcadia"],["arcadian"],["arcadias"],["arcading"],["arcana"],["arcane"],["arcanum"],["arcanums"],["arcature"],["arced"],["arch"],["archaic"],["archaise"],["archaism"],["archaist"],["archaize"],["archduke"],["arched"],["archer"],["archers"],["archery"],["arches"],["archil"],["archils"],["archine"],["archines"],["arching"],["archings"],["archival"],["archive"],["archived"],["archives"],["archly"],["archness"],["archon"],["archons"],["archway"],["archways"],["arciform"],["arcing"],["arcked"],["arcking"],["arco"],["arcs"],["arcsine"],["arcsines"],["arctic"],["arctics"],["arcuate"],["arcuated"],["arcus"],["arcuses"],["ardeb"],["ardebs"],["ardency"],["ardent"],["ardently"],["ardor"],["ardors"],["ardour"],["ardours"],["arduous"],["are"],["area"],["areae"],["areal"],["areally"],["areas"],["areaway"],["areaways"],["areca"],["arecas"],["areic"],["arena"],["arenas"],["arenite"],["arenites"],["arenose"],["arenous"],["areola"],["areolae"],["areolar"],["areolas"],["areolate"],["areole"],["areoles"],["areology"],["ares"],["arete"],["aretes"],["arethusa"],["arf"],["arfs"],["argal"],["argala"],["argalas"],["argali"],["argalis"],["argals"],["argent"],["argental"],["argentic"],["argents"],["argentum"],["argil"],["argils"],["arginase"],["arginine"],["argle"],["argled"],["argles"],["argling"],["argol"],["argols"],["argon"],["argonaut"],["argons"],["argosies"],["argosy"],["argot"],["argotic"],["argots"],["arguable"],["arguably"],["argue"],["argued"],["arguer"],["arguers"],["argues"],["argufied"],["argufier"],["argufies"],["argufy"],["arguing"],["argument"],["argus"],["arguses"],["argyle"],["argyles"],["argyll"],["argylls"],["arhat"],["arhats"],["aria"],["arias"],["arid"],["arider"],["aridest"],["aridity"],["aridly"],["aridness"],["ariel"],["ariels"],["arietta"],["ariettas"],["ariette"],["ariettes"],["aright"],["aril"],["ariled"],["arillate"],["arillode"],["arilloid"],["arils"],["ariose"],["ariosi"],["arioso"],["ariosos"],["arise"],["arisen"],["arises"],["arising"],["arista"],["aristae"],["aristas"],["aristate"],["aristo"],["aristos"],["ark"],["arkose"],["arkoses"],["arks"],["arles"],["arm"],["armada"],["armadas"],["armagnac"],["armament"],["armature"],["armband"],["armbands"],["armchair"],["armed"],["armer"],["armers"],["armet"],["armets"],["armful"],["armfuls"],["armhole"],["armholes"],["armies"],["armiger"],["armigero"],["armigers"],["armilla"],["armillae"],["armillas"],["arming"],["armings"],["armless"],["armlet"],["armlets"],["armlike"],["armload"],["armloads"],["armlock"],["armlocks"],["armoire"],["armoires"],["armonica"],["armor"],["armored"],["armorer"],["armorers"],["armorial"],["armories"],["armoring"],["armors"],["armory"],["armour"],["armoured"],["armourer"],["armours"],["armoury"],["armpit"],["armpits"],["armrest"],["armrests"],["arms"],["armsful"],["armure"],["armures"],["army"],["armyworm"],["arnatto"],["arnattos"],["arnica"],["arnicas"],["arnotto"],["arnottos"],["aroid"],["aroids"],["aroint"],["arointed"],["aroints"],["aroma"],["aromas"],["aromatic"],["arose"],["around"],["arousal"],["arousals"],["arouse"],["aroused"],["arouser"],["arousers"],["arouses"],["arousing"],["aroynt"],["aroynted"],["aroynts"],["arpeggio"],["arpen"],["arpens"],["arpent"],["arpents"],["arquebus"],["arrack"],["arracks"],["arraign"],["arraigns"],["arrange"],["arranged"],["arranger"],["arranges"],["arrant"],["arrantly"],["arras"],["arrased"],["array"],["arrayal"],["arrayals"],["arrayed"],["arrayer"],["arrayers"],["arraying"],["arrays"],["arrear"],["arrears"],["arrest"],["arrested"],["arrestee"],["arrester"],["arrestor"],["arrests"],["arrhizal"],["arris"],["arrises"],["arrival"],["arrivals"],["arrive"],["arrived"],["arriver"],["arrivers"],["arrives"],["arriving"],["arroba"],["arrobas"],["arrogant"],["arrogate"],["arrow"],["arrowed"],["arrowing"],["arrows"],["arrowy"],["arroyo"],["arroyos"],["ars"],["arse"],["arsenal"],["arsenals"],["arsenate"],["arsenic"],["arsenics"],["arsenide"],["arsenite"],["arseno"],["arsenous"],["arses"],["arshin"],["arshins"],["arsine"],["arsines"],["arsino"],["arsis"],["arson"],["arsonist"],["arsonous"],["arsons"],["art"],["artal"],["artefact"],["artel"],["artels"],["arterial"],["arteries"],["artery"],["artful"],["artfully"],["article"],["articled"],["articles"],["artier"],["artiest"],["artifact"],["artifice"],["artily"],["artiness"],["artisan"],["artisans"],["artist"],["artiste"],["artistes"],["artistic"],["artistry"],["artists"],["artless"],["arts"],["artsier"],["artsiest"],["artsy"],["artwork"],["artworks"],["arty"],["arugola"],["arugolas"],["arugula"],["arugulas"],["arum"],["arums"],["aruspex"],["arval"],["arvo"],["arvos"],["aryl"],["aryls"],["arythmia"],["arythmic"],["as"],["asarum"],["asarums"],["asbestic"],["asbestos"],["asbestus"],["ascarid"],["ascarids"],["ascaris"],["ascend"],["ascended"],["ascender"],["ascends"],["ascent"],["ascents"],["asceses"],["ascesis"],["ascetic"],["ascetics"],["asci"],["ascidia"],["ascidian"],["ascidium"],["ascites"],["ascitic"],["ascocarp"],["ascorbic"],["ascot"],["ascots"],["ascribe"],["ascribed"],["ascribes"],["ascus"],["asdic"],["asdics"],["asea"],["asepses"],["asepsis"],["aseptic"],["asexual"],["ash"],["ashamed"],["ashcan"],["ashcans"],["ashed"],["ashen"],["ashes"],["ashier"],["ashiest"],["ashiness"],["ashing"],["ashlar"],["ashlared"],["ashlars"],["ashler"],["ashlered"],["ashlers"],["ashless"],["ashman"],["ashmen"],["ashore"],["ashplant"],["ashram"],["ashrams"],["ashtray"],["ashtrays"],["ashy"],["aside"],["asides"],["asinine"],["ask"],["askance"],["askant"],["asked"],["asker"],["askers"],["askeses"],["askesis"],["askew"],["asking"],["askings"],["askoi"],["askos"],["asks"],["aslant"],["asleep"],["aslope"],["asocial"],["asp"],["asparkle"],["aspect"],["aspects"],["aspen"],["aspens"],["asper"],["asperate"],["asperges"],["asperity"],["aspers"],["asperse"],["aspersed"],["asperser"],["asperses"],["aspersor"],["asphalt"],["asphalts"],["aspheric"],["asphodel"],["asphyxia"],["asphyxy"],["aspic"],["aspics"],["aspirant"],["aspirata"],["aspirate"],["aspire"],["aspired"],["aspirer"],["aspirers"],["aspires"],["aspirin"],["aspiring"],["aspirins"],["aspis"],["aspises"],["aspish"],["asps"],["asquint"],["asrama"],["asramas"],["ass"],["assagai"],["assagais"],["assai"],["assail"],["assailed"],["assailer"],["assails"],["assais"],["assassin"],["assault"],["assaults"],["assay"],["assayed"],["assayer"],["assayers"],["assaying"],["assays"],["assegai"],["assegais"],["assemble"],["assembly"],["assent"],["assented"],["assenter"],["assentor"],["assents"],["assert"],["asserted"],["asserter"],["assertor"],["asserts"],["asses"],["assess"],["assessed"],["assesses"],["assessor"],["asset"],["assets"],["asshole"],["assholes"],["assign"],["assignat"],["assigned"],["assignee"],["assigner"],["assignor"],["assigns"],["assist"],["assisted"],["assister"],["assistor"],["assists"],["assize"],["assizes"],["asslike"],["assoil"],["assoiled"],["assoils"],["assonant"],["assort"],["assorted"],["assorter"],["assorts"],["assuage"],["assuaged"],["assuages"],["assume"],["assumed"],["assumer"],["assumers"],["assumes"],["assuming"],["assure"],["assured"],["assureds"],["assurer"],["assurers"],["assures"],["assuring"],["assuror"],["assurors"],["asswage"],["asswaged"],["asswages"],["astasia"],["astasias"],["astatic"],["astatine"],["aster"],["asteria"],["asterias"],["asterisk"],["asterism"],["astern"],["asternal"],["asteroid"],["asters"],["asthenia"],["asthenic"],["astheny"],["asthma"],["asthmas"],["astigmia"],["astir"],["astomous"],["astonied"],["astonies"],["astonish"],["astony"],["astound"],["astounds"],["astragal"],["astral"],["astrally"],["astrals"],["astray"],["astrict"],["astricts"],["astride"],["astringe"],["astute"],["astutely"],["astylar"],["asunder"],["aswarm"],["aswirl"],["aswoon"],["asyla"],["asylum"],["asylums"],["asyndeta"],["at"],["atabal"],["atabals"],["ataghan"],["ataghans"],["atalaya"],["atalayas"],["ataman"],["atamans"],["atamasco"],["atap"],["ataps"],["ataraxia"],["ataraxic"],["ataraxy"],["atavic"],["atavism"],["atavisms"],["atavist"],["atavists"],["ataxia"],["ataxias"],["ataxic"],["ataxics"],["ataxies"],["ataxy"],["ate"],["atechnic"],["atelic"],["atelier"],["ateliers"],["ates"],["athanasy"],["atheism"],["atheisms"],["atheist"],["atheists"],["atheling"],["atheneum"],["atheroma"],["athetoid"],["athirst"],["athlete"],["athletes"],["athletic"],["athodyd"],["athodyds"],["athwart"],["atilt"],["atingle"],["atlantes"],["atlas"],["atlases"],["atlatl"],["atlatls"],["atma"],["atman"],["atmans"],["atmas"],["atoll"],["atolls"],["atom"],["atomic"],["atomical"],["atomics"],["atomies"],["atomise"],["atomised"],["atomises"],["atomism"],["atomisms"],["atomist"],["atomists"],["atomize"],["atomized"],["atomizer"],["atomizes"],["atoms"],["atomy"],["atonable"],["atonal"],["atonally"],["atone"],["atoned"],["atoner"],["atoners"],["atones"],["atonic"],["atonics"],["atonies"],["atoning"],["atony"],["atop"],["atopic"],["atopies"],["atopy"],["atrazine"],["atremble"],["atresia"],["atresias"],["atria"],["atrial"],["atrip"],["atrium"],["atriums"],["atrocity"],["atrophia"],["atrophic"],["atrophy"],["atropin"],["atropine"],["atropins"],["atropism"],["attach"],["attache"],["attached"],["attacher"],["attaches"],["attack"],["attacked"],["attacker"],["attacks"],["attain"],["attained"],["attainer"],["attains"],["attaint"],["attaints"],["attar"],["attars"],["attemper"],["attempt"],["attempts"],["attend"],["attended"],["attendee"],["attender"],["attends"],["attent"],["attest"],["attested"],["attester"],["attestor"],["attests"],["attic"],["atticism"],["atticist"],["attics"],["attire"],["attired"],["attires"],["attiring"],["attitude"],["attorn"],["attorned"],["attorney"],["attorns"],["attract"],["attracts"],["attrite"],["attrited"],["attune"],["attuned"],["attunes"],["attuning"],["atwain"],["atween"],["atwitter"],["atypic"],["atypical"],["aubade"],["aubades"],["auberge"],["auberges"],["aubretia"],["aubrieta"],["auburn"],["auburns"],["auction"],["auctions"],["aucuba"],["aucubas"],["audacity"],["audad"],["audads"],["audible"],["audibles"],["audibly"],["audience"],["audient"],["audients"],["audile"],["audiles"],["auding"],["audings"],["audio"],["audios"],["audit"],["audited"],["auditing"],["audition"],["auditive"],["auditor"],["auditors"],["auditory"],["audits"],["augend"],["augends"],["auger"],["augers"],["aught"],["aughts"],["augite"],["augites"],["augitic"],["augment"],["augments"],["augur"],["augural"],["augured"],["augurer"],["augurers"],["auguries"],["auguring"],["augurs"],["augury"],["august"],["auguster"],["augustly"],["auk"],["auklet"],["auklets"],["auks"],["auld"],["aulder"],["auldest"],["aulic"],["aunt"],["aunthood"],["auntie"],["aunties"],["auntlier"],["auntlike"],["auntly"],["aunts"],["aunty"],["aura"],["aurae"],["aural"],["aurally"],["aurar"],["auras"],["aurate"],["aurated"],["aureate"],["aurei"],["aureola"],["aureolae"],["aureolas"],["aureole"],["aureoled"],["aureoles"],["aures"],["aureus"],["auric"],["auricle"],["auricled"],["auricles"],["auricula"],["auriform"],["auris"],["aurist"],["aurists"],["aurochs"],["aurora"],["aurorae"],["auroral"],["auroras"],["aurorean"],["aurous"],["aurum"],["aurums"],["ausform"],["ausforms"],["auspex"],["auspice"],["auspices"],["austere"],["austerer"],["austral"],["australs"],["ausubo"],["ausubos"],["autacoid"],["autarchy"],["autarkic"],["autarky"],["autecism"],["auteur"],["auteurs"],["author"],["authored"],["authors"],["autism"],["autisms"],["autistic"],["auto"],["autobahn"],["autobus"],["autocade"],["autocoid"],["autocrat"],["autodyne"],["autoed"],["autogamy"],["autogeny"],["autogiro"],["autogyro"],["autoing"],["autolyze"],["automan"],["automata"],["automate"],["automen"],["autonomy"],["autopsic"],["autopsy"],["autos"],["autosome"],["autotomy"],["autotype"],["autotypy"],["autumn"],["autumnal"],["autumns"],["autunite"],["auxeses"],["auxesis"],["auxetic"],["auxetics"],["auxin"],["auxinic"],["auxins"],["ava"],["avadavat"],["avail"],["availed"],["availing"],["avails"],["avarice"],["avarices"],["avast"],["avatar"],["avatars"],["avaunt"],["ave"],["avellan"],["avellane"],["avenge"],["avenged"],["avenger"],["avengers"],["avenges"],["avenging"],["avens"],["avenses"],["aventail"],["avenue"],["avenues"],["aver"],["average"],["averaged"],["averages"],["averment"],["averred"],["averring"],["avers"],["averse"],["aversely"],["aversion"],["aversive"],["avert"],["averted"],["averting"],["averts"],["aves"],["avgas"],["avgases"],["avgasses"],["avian"],["avianize"],["avians"],["aviaries"],["aviarist"],["aviary"],["aviate"],["aviated"],["aviates"],["aviating"],["aviation"],["aviator"],["aviators"],["aviatrix"],["avicular"],["avid"],["avidin"],["avidins"],["avidity"],["avidly"],["avidness"],["avifauna"],["avigator"],["avion"],["avionic"],["avionics"],["avions"],["aviso"],["avisos"],["avo"],["avocado"],["avocados"],["avocet"],["avocets"],["avodire"],["avodires"],["avoid"],["avoided"],["avoider"],["avoiders"],["avoiding"],["avoids"],["avos"],["avoset"],["avosets"],["avouch"],["avouched"],["avoucher"],["avouches"],["avow"],["avowable"],["avowably"],["avowal"],["avowals"],["avowed"],["avowedly"],["avower"],["avowers"],["avowing"],["avows"],["avulse"],["avulsed"],["avulses"],["avulsing"],["avulsion"],["aw"],["awa"],["await"],["awaited"],["awaiter"],["awaiters"],["awaiting"],["awaits"],["awake"],["awaked"],["awaken"],["awakened"],["awakener"],["awakens"],["awakes"],["awaking"],["award"],["awarded"],["awardee"],["awardees"],["awarder"],["awarders"],["awarding"],["awards"],["aware"],["awash"],["away"],["awayness"],["awe"],["aweary"],["aweather"],["awed"],["awee"],["aweigh"],["aweing"],["aweless"],["awes"],["awesome"],["awful"],["awfuller"],["awfully"],["awhile"],["awhirl"],["awing"],["awkward"],["awl"],["awless"],["awls"],["awlwort"],["awlworts"],["awmous"],["awn"],["awned"],["awning"],["awninged"],["awnings"],["awnless"],["awns"],["awny"],["awoke"],["awoken"],["awol"],["awols"],["awry"],["ax"],["axal"],["axe"],["axed"],["axel"],["axels"],["axeman"],["axemen"],["axenic"],["axes"],["axial"],["axiality"],["axially"],["axil"],["axile"],["axilla"],["axillae"],["axillar"],["axillars"],["axillary"],["axillas"],["axils"],["axing"],["axiology"],["axiom"],["axioms"],["axis"],["axised"],["axises"],["axite"],["axites"],["axle"],["axled"],["axles"],["axletree"],["axlike"],["axman"],["axmen"],["axolotl"],["axolotls"],["axon"],["axonal"],["axone"],["axonemal"],["axoneme"],["axonemes"],["axones"],["axonic"],["axons"],["axoplasm"],["axseed"],["axseeds"],["ay"],["ayah"],["ayahs"],["aye"],["ayes"],["ayin"],["ayins"],["ays"],["ayurveda"],["azalea"],["azaleas"],["azan"],["azans"],["azide"],["azides"],["azido"],["azimuth"],["azimuths"],["azine"],["azines"],["azlon"],["azlons"],["azo"],["azoic"],["azole"],["azoles"],["azon"],["azonal"],["azonic"],["azons"],["azote"],["azoted"],["azotemia"],["azotemic"],["azotes"],["azoth"],["azoths"],["azotic"],["azotise"],["azotised"],["azotises"],["azotize"],["azotized"],["azotizes"],["azoturia"],["azure"],["azures"],["azurite"],["azurites"],["azygos"],["azygoses"],["azygous"],["ba"],["baa"],["baaed"],["baaing"],["baal"],["baalim"],["baalism"],["baalisms"],["baals"],["baas"],["baases"],["baaskaap"],["baba"],["babas"],["babassu"],["babassus"],["babbitt"],["babbitts"],["babble"],["babbled"],["babbler"],["babblers"],["babbles"],["babbling"],["babe"],["babel"],["babels"],["babes"],["babesia"],["babesias"],["babiche"],["babiches"],["babied"],["babies"],["babirusa"],["babka"],["babkas"],["baboo"],["babool"],["babools"],["baboon"],["baboons"],["baboos"],["babu"],["babul"],["babuls"],["babus"],["babushka"],["baby"],["babyhood"],["babying"],["babyish"],["bacalao"],["bacalaos"],["bacca"],["baccae"],["baccara"],["baccaras"],["baccarat"],["baccate"],["baccated"],["bacchant"],["bacchic"],["bacchii"],["bacchius"],["bach"],["bached"],["bachelor"],["baches"],["baching"],["bacillar"],["bacilli"],["bacillus"],["back"],["backache"],["backbeat"],["backbend"],["backbit"],["backbite"],["backbone"],["backcast"],["backchat"],["backdate"],["backdoor"],["backdrop"],["backed"],["backer"],["backers"],["backfill"],["backfire"],["backhand"],["backhaul"],["backhoe"],["backhoes"],["backing"],["backings"],["backlash"],["backless"],["backlist"],["backlit"],["backlog"],["backlogs"],["backmost"],["backout"],["backouts"],["backpack"],["backrest"],["backrush"],["backs"],["backsaw"],["backsaws"],["backseat"],["backset"],["backsets"],["backside"],["backslap"],["backslid"],["backspin"],["backstay"],["backstop"],["backup"],["backups"],["backward"],["backwash"],["backwood"],["backwrap"],["backyard"],["bacon"],["bacons"],["bacteria"],["bacterin"],["bacula"],["baculine"],["baculum"],["baculums"],["bad"],["badass"],["badassed"],["badasses"],["badder"],["baddest"],["baddie"],["baddies"],["baddy"],["bade"],["badge"],["badged"],["badger"],["badgered"],["badgerly"],["badgers"],["badges"],["badging"],["badinage"],["badland"],["badlands"],["badly"],["badman"],["badmen"],["badmouth"],["badness"],["bads"],["baff"],["baffed"],["baffies"],["baffing"],["baffle"],["baffled"],["baffler"],["bafflers"],["baffles"],["baffling"],["baffs"],["baffy"],["bag"],["bagass"],["bagasse"],["bagasses"],["bagel"],["bagels"],["bagful"],["bagfuls"],["baggage"],["baggages"],["bagged"],["bagger"],["baggers"],["baggie"],["baggier"],["baggies"],["baggiest"],["baggily"],["bagging"],["baggings"],["baggy"],["bagman"],["bagmen"],["bagnio"],["bagnios"],["bagpipe"],["bagpiper"],["bagpipes"],["bags"],["bagsful"],["baguet"],["baguets"],["baguette"],["bagwig"],["bagwigs"],["bagworm"],["bagworms"],["bah"],["bahadur"],["bahadurs"],["baht"],["bahts"],["baidarka"],["bail"],["bailable"],["bailed"],["bailee"],["bailees"],["bailer"],["bailers"],["bailey"],["baileys"],["bailie"],["bailies"],["bailiff"],["bailiffs"],["bailing"],["bailment"],["bailor"],["bailors"],["bailout"],["bailouts"],["bails"],["bailsman"],["bailsmen"],["bairn"],["bairnish"],["bairnly"],["bairns"],["bait"],["baited"],["baiter"],["baiters"],["baith"],["baiting"],["baits"],["baiza"],["baizas"],["baize"],["baizes"],["bake"],["baked"],["bakemeat"],["baker"],["bakeries"],["bakers"],["bakery"],["bakes"],["bakeshop"],["baking"],["bakings"],["baklava"],["baklavas"],["baklawa"],["baklawas"],["bakshish"],["bal"],["balance"],["balanced"],["balancer"],["balances"],["balas"],["balases"],["balata"],["balatas"],["balboa"],["balboas"],["balcony"],["bald"],["balded"],["balder"],["baldest"],["baldhead"],["baldies"],["balding"],["baldish"],["baldly"],["baldness"],["baldpate"],["baldric"],["baldrick"],["baldrics"],["balds"],["baldy"],["bale"],["baled"],["baleen"],["baleens"],["balefire"],["baleful"],["baler"],["balers"],["bales"],["baling"],["balisaur"],["balk"],["balked"],["balker"],["balkers"],["balkier"],["balkiest"],["balkily"],["balking"],["balkline"],["balks"],["balky"],["ball"],["ballad"],["ballade"],["ballades"],["balladic"],["balladry"],["ballads"],["ballast"],["ballasts"],["balled"],["baller"],["ballers"],["ballet"],["balletic"],["ballets"],["ballgame"],["ballhawk"],["ballies"],["balling"],["ballista"],["ballon"],["ballonet"],["ballonne"],["ballons"],["balloon"],["balloons"],["ballot"],["balloted"],["balloter"],["ballots"],["ballpark"],["ballroom"],["balls"],["ballsier"],["ballsy"],["ballute"],["ballutes"],["bally"],["ballyhoo"],["ballyrag"],["balm"],["balmier"],["balmiest"],["balmily"],["balmlike"],["balmoral"],["balms"],["balmy"],["balneal"],["baloney"],["baloneys"],["bals"],["balsa"],["balsam"],["balsamed"],["balsamic"],["balsams"],["balsas"],["baluster"],["bam"],["bambini"],["bambino"],["bambinos"],["bamboo"],["bamboos"],["bammed"],["bamming"],["bams"],["ban"],["banal"],["banality"],["banalize"],["banally"],["banana"],["bananas"],["banausic"],["banco"],["bancos"],["band"],["bandage"],["bandaged"],["bandager"],["bandages"],["bandana"],["bandanas"],["bandanna"],["bandbox"],["bandeau"],["bandeaus"],["bandeaux"],["banded"],["bander"],["banderol"],["banders"],["bandied"],["bandies"],["banding"],["bandit"],["banditry"],["bandits"],["banditti"],["bandog"],["bandogs"],["bandora"],["bandoras"],["bandore"],["bandores"],["bands"],["bandsman"],["bandsmen"],["bandy"],["bandying"],["bane"],["baned"],["baneful"],["banes"],["bang"],["banged"],["banger"],["bangers"],["banging"],["bangkok"],["bangkoks"],["bangle"],["bangles"],["bangs"],["bangtail"],["bani"],["banian"],["banians"],["baning"],["banish"],["banished"],["banisher"],["banishes"],["banister"],["banjo"],["banjoes"],["banjoist"],["banjos"],["bank"],["bankable"],["bankbook"],["bankcard"],["banked"],["banker"],["bankers"],["banking"],["bankings"],["banknote"],["bankroll"],["bankrupt"],["banks"],["banksia"],["banksias"],["bankside"],["banned"],["banner"],["banneret"],["bannerol"],["banners"],["bannet"],["bannets"],["banning"],["bannock"],["bannocks"],["banns"],["banquet"],["banquets"],["bans"],["banshee"],["banshees"],["banshie"],["banshies"],["bantam"],["bantams"],["banter"],["bantered"],["banterer"],["banters"],["banties"],["bantling"],["banty"],["banyan"],["banyans"],["banzai"],["banzais"],["baobab"],["baobabs"],["baptise"],["baptised"],["baptises"],["baptisia"],["baptism"],["baptisms"],["baptist"],["baptists"],["baptize"],["baptized"],["baptizer"],["baptizes"],["bar"],["barathea"],["barb"],["barbal"],["barbaric"],["barbasco"],["barbate"],["barbe"],["barbecue"],["barbed"],["barbel"],["barbell"],["barbells"],["barbels"],["barbeque"],["barber"],["barbered"],["barberry"],["barbers"],["barbes"],["barbet"],["barbets"],["barbette"],["barbican"],["barbicel"],["barbing"],["barbital"],["barbless"],["barbs"],["barbule"],["barbules"],["barbut"],["barbuts"],["barbwire"],["barchan"],["barchans"],["bard"],["barde"],["barded"],["bardes"],["bardic"],["barding"],["bards"],["bare"],["bareback"],["bareboat"],["bared"],["barefit"],["barefoot"],["barege"],["bareges"],["barehead"],["barely"],["bareness"],["barer"],["bares"],["baresark"],["barest"],["barf"],["barfed"],["barfing"],["barflies"],["barfly"],["barfs"],["bargain"],["bargains"],["barge"],["barged"],["bargee"],["bargees"],["bargello"],["bargeman"],["bargemen"],["barges"],["barghest"],["barging"],["barguest"],["barhop"],["barhops"],["baric"],["barilla"],["barillas"],["baring"],["barite"],["barites"],["baritone"],["barium"],["bariums"],["bark"],["barked"],["barkeep"],["barkeeps"],["barker"],["barkers"],["barkier"],["barkiest"],["barking"],["barkless"],["barks"],["barky"],["barleduc"],["barless"],["barley"],["barleys"],["barlow"],["barlows"],["barm"],["barmaid"],["barmaids"],["barman"],["barmen"],["barmie"],["barmier"],["barmiest"],["barms"],["barmy"],["barn"],["barnacle"],["barnier"],["barniest"],["barnlike"],["barns"],["barny"],["barnyard"],["barogram"],["baron"],["baronage"],["baroness"],["baronet"],["baronets"],["barong"],["barongs"],["baronial"],["baronies"],["baronne"],["baronnes"],["barons"],["barony"],["baroque"],["baroques"],["barouche"],["barque"],["barques"],["barrable"],["barrack"],["barracks"],["barrage"],["barraged"],["barrages"],["barranca"],["barranco"],["barrater"],["barrator"],["barratry"],["barre"],["barred"],["barrel"],["barreled"],["barrels"],["barren"],["barrener"],["barrenly"],["barrens"],["barres"],["barret"],["barretor"],["barretry"],["barrets"],["barrette"],["barrier"],["barriers"],["barring"],["barrio"],["barrios"],["barroom"],["barrooms"],["barrow"],["barrows"],["bars"],["barstool"],["bartend"],["bartends"],["barter"],["bartered"],["barterer"],["barters"],["bartisan"],["bartizan"],["barware"],["barwares"],["barye"],["baryes"],["baryon"],["baryonic"],["baryons"],["baryta"],["barytas"],["baryte"],["barytes"],["barytic"],["barytone"],["bas"],["basal"],["basally"],["basalt"],["basaltes"],["basaltic"],["basalts"],["bascule"],["bascules"],["base"],["baseball"],["baseborn"],["based"],["baseless"],["baseline"],["basely"],["baseman"],["basemen"],["basement"],["baseness"],["basenji"],["basenjis"],["baser"],["bases"],["basest"],["bash"],["bashaw"],["bashaws"],["bashed"],["basher"],["bashers"],["bashes"],["bashful"],["bashing"],["bashlyk"],["bashlyks"],["basic"],["basicity"],["basics"],["basidia"],["basidial"],["basidium"],["basified"],["basifier"],["basifies"],["basify"],["basil"],["basilar"],["basilary"],["basilic"],["basilica"],["basilisk"],["basils"],["basin"],["basinal"],["basined"],["basinet"],["basinets"],["basing"],["basins"],["basion"],["basions"],["basis"],["bask"],["basked"],["basket"],["basketry"],["baskets"],["basking"],["basks"],["basophil"],["basque"],["basques"],["bass"],["basses"],["basset"],["basseted"],["bassets"],["bassi"],["bassinet"],["bassist"],["bassists"],["bassly"],["bassness"],["basso"],["bassoon"],["bassoons"],["bassos"],["basswood"],["bassy"],["bast"],["bastard"],["bastards"],["bastardy"],["baste"],["basted"],["baster"],["basters"],["bastes"],["bastile"],["bastiles"],["bastille"],["basting"],["bastings"],["bastion"],["bastions"],["basts"],["bat"],["batboy"],["batboys"],["batch"],["batched"],["batcher"],["batchers"],["batches"],["batching"],["bate"],["bateau"],["bateaux"],["bated"],["bates"],["batfish"],["batfowl"],["batfowls"],["bath"],["bathe"],["bathed"],["bather"],["bathers"],["bathes"],["bathetic"],["bathing"],["bathless"],["bathmat"],["bathmats"],["bathos"],["bathoses"],["bathrobe"],["bathroom"],["baths"],["bathtub"],["bathtubs"],["bathyal"],["batik"],["batiks"],["bating"],["batiste"],["batistes"],["batlike"],["batman"],["batmen"],["baton"],["batons"],["bats"],["batsman"],["batsmen"],["batt"],["battalia"],["batteau"],["batteaux"],["batted"],["batten"],["battened"],["battener"],["battens"],["batter"],["battered"],["batterie"],["batters"],["battery"],["battier"],["battiest"],["battik"],["battiks"],["batting"],["battings"],["battle"],["battled"],["battler"],["battlers"],["battles"],["battling"],["batts"],["battu"],["battue"],["battues"],["batty"],["batwing"],["baubee"],["baubees"],["bauble"],["baubles"],["baud"],["baudekin"],["baudrons"],["bauds"],["bauhinia"],["baulk"],["baulked"],["baulkier"],["baulking"],["baulks"],["baulky"],["bausond"],["bauxite"],["bauxites"],["bauxitic"],["bawbee"],["bawbees"],["bawcock"],["bawcocks"],["bawd"],["bawdier"],["bawdies"],["bawdiest"],["bawdily"],["bawdric"],["bawdrics"],["bawdries"],["bawdry"],["bawds"],["bawdy"],["bawl"],["bawled"],["bawler"],["bawlers"],["bawling"],["bawls"],["bawsunt"],["bawtie"],["bawties"],["bawty"],["bay"],["bayadeer"],["bayadere"],["bayamo"],["bayamos"],["bayard"],["bayards"],["bayberry"],["bayed"],["baying"],["bayonet"],["bayonets"],["bayou"],["bayous"],["bays"],["baywood"],["baywoods"],["bazaar"],["bazaars"],["bazar"],["bazars"],["bazoo"],["bazooka"],["bazookas"],["bazooms"],["bazoos"],["bdellium"],["be"],["beach"],["beachboy"],["beached"],["beaches"],["beachier"],["beaching"],["beachy"],["beacon"],["beaconed"],["beacons"],["bead"],["beaded"],["beadier"],["beadiest"],["beadily"],["beading"],["beadings"],["beadle"],["beadles"],["beadlike"],["beadman"],["beadmen"],["beadroll"],["beads"],["beadsman"],["beadsmen"],["beadwork"],["beady"],["beagle"],["beagles"],["beak"],["beaked"],["beaker"],["beakers"],["beakier"],["beakiest"],["beakless"],["beaklike"],["beaks"],["beaky"],["beam"],["beamed"],["beamier"],["beamiest"],["beamily"],["beaming"],["beamish"],["beamless"],["beamlike"],["beams"],["beamy"],["bean"],["beanbag"],["beanbags"],["beanball"],["beaned"],["beanery"],["beanie"],["beanies"],["beaning"],["beanlike"],["beano"],["beanos"],["beanpole"],["beans"],["bear"],["bearable"],["bearably"],["bearcat"],["bearcats"],["beard"],["bearded"],["bearding"],["beards"],["bearer"],["bearers"],["bearhug"],["bearhugs"],["bearing"],["bearings"],["bearish"],["bearlike"],["bears"],["bearskin"],["bearwood"],["beast"],["beastie"],["beasties"],["beastly"],["beasts"],["beat"],["beatable"],["beaten"],["beater"],["beaters"],["beatific"],["beatify"],["beating"],["beatings"],["beatless"],["beatnik"],["beatniks"],["beats"],["beau"],["beauish"],["beaus"],["beaut"],["beauties"],["beautify"],["beauts"],["beauty"],["beaux"],["beaver"],["beavered"],["beavers"],["bebeeru"],["bebeerus"],["beblood"],["bebloods"],["bebop"],["bebopper"],["bebops"],["becalm"],["becalmed"],["becalms"],["became"],["becap"],["becapped"],["becaps"],["becarpet"],["because"],["bechalk"],["bechalks"],["bechamel"],["bechance"],["becharm"],["becharms"],["beck"],["becked"],["becket"],["beckets"],["becking"],["beckon"],["beckoned"],["beckoner"],["beckons"],["becks"],["beclamor"],["beclasp"],["beclasps"],["becloak"],["becloaks"],["beclog"],["beclogs"],["beclothe"],["becloud"],["beclouds"],["beclown"],["beclowns"],["become"],["becomes"],["becoming"],["becoward"],["becrawl"],["becrawls"],["becrime"],["becrimed"],["becrimes"],["becrowd"],["becrowds"],["becrust"],["becrusts"],["becudgel"],["becurse"],["becursed"],["becurses"],["becurst"],["bed"],["bedabble"],["bedamn"],["bedamned"],["bedamns"],["bedarken"],["bedaub"],["bedaubed"],["bedaubs"],["bedazzle"],["bedbug"],["bedbugs"],["bedchair"],["bedcover"],["beddable"],["bedded"],["bedder"],["bedders"],["bedding"],["beddings"],["bedeafen"],["bedeck"],["bedecked"],["bedecks"],["bedel"],["bedell"],["bedells"],["bedels"],["bedeman"],["bedemen"],["bedesman"],["bedesmen"],["bedevil"],["bedevils"],["bedew"],["bedewed"],["bedewing"],["bedews"],["bedfast"],["bedframe"],["bedgown"],["bedgowns"],["bediaper"],["bedight"],["bedights"],["bedim"],["bedimmed"],["bedimple"],["bedims"],["bedirty"],["bedizen"],["bedizens"],["bedlam"],["bedlamp"],["bedlamps"],["bedlams"],["bedless"],["bedlike"],["bedmaker"],["bedmate"],["bedmates"],["bedotted"],["bedouin"],["bedouins"],["bedpan"],["bedpans"],["bedplate"],["bedpost"],["bedposts"],["bedquilt"],["bedrail"],["bedrails"],["bedrape"],["bedraped"],["bedrapes"],["bedrench"],["bedrid"],["bedrivel"],["bedrock"],["bedrocks"],["bedroll"],["bedrolls"],["bedroom"],["bedrooms"],["bedrug"],["bedrugs"],["beds"],["bedsheet"],["bedside"],["bedsides"],["bedsonia"],["bedsore"],["bedsores"],["bedstand"],["bedstead"],["bedstraw"],["bedtick"],["bedticks"],["bedtime"],["bedtimes"],["beduin"],["beduins"],["bedumb"],["bedumbed"],["bedumbs"],["bedunce"],["bedunced"],["bedunces"],["bedward"],["bedwards"],["bedwarf"],["bedwarfs"],["bee"],["beebee"],["beebees"],["beebread"],["beech"],["beechen"],["beeches"],["beechier"],["beechnut"],["beechy"],["beef"],["beefalo"],["beefalos"],["beefcake"],["beefed"],["beefier"],["beefiest"],["beefily"],["beefing"],["beefless"],["beefs"],["beefwood"],["beefy"],["beehive"],["beehives"],["beelike"],["beeline"],["beelines"],["been"],["beep"],["beeped"],["beeper"],["beepers"],["beeping"],["beeps"],["beer"],["beerier"],["beeriest"],["beers"],["beery"],["bees"],["beeswax"],["beeswing"],["beet"],["beetle"],["beetled"],["beetler"],["beetlers"],["beetles"],["beetling"],["beetroot"],["beets"],["beeves"],["beezer"],["beezers"],["befall"],["befallen"],["befalls"],["befell"],["befinger"],["befit"],["befits"],["befitted"],["beflag"],["beflags"],["beflea"],["befleaed"],["befleas"],["befleck"],["beflecks"],["beflower"],["befog"],["befogged"],["befogs"],["befool"],["befooled"],["befools"],["before"],["befoul"],["befouled"],["befouler"],["befouls"],["befret"],["befrets"],["befriend"],["befringe"],["befuddle"],["beg"],["begall"],["begalled"],["begalls"],["began"],["begat"],["begaze"],["begazed"],["begazes"],["begazing"],["beget"],["begets"],["begetter"],["beggar"],["beggared"],["beggarly"],["beggars"],["beggary"],["begged"],["begging"],["begin"],["beginner"],["begins"],["begird"],["begirded"],["begirdle"],["begirds"],["begirt"],["beglad"],["beglads"],["begloom"],["beglooms"],["begone"],["begonia"],["begonias"],["begorah"],["begorra"],["begorrah"],["begot"],["begotten"],["begrim"],["begrime"],["begrimed"],["begrimes"],["begrims"],["begroan"],["begroans"],["begrudge"],["begs"],["beguile"],["beguiled"],["beguiler"],["beguiles"],["beguine"],["beguines"],["begulf"],["begulfed"],["begulfs"],["begum"],["begums"],["begun"],["behalf"],["behalves"],["behave"],["behaved"],["behaver"],["behavers"],["behaves"],["behaving"],["behavior"],["behead"],["beheaded"],["beheads"],["beheld"],["behemoth"],["behest"],["behests"],["behind"],["behinds"],["behold"],["beholden"],["beholder"],["beholds"],["behoof"],["behoove"],["behooved"],["behooves"],["behove"],["behoved"],["behoves"],["behoving"],["behowl"],["behowled"],["behowls"],["beige"],["beiges"],["beignet"],["beignets"],["beigy"],["being"],["beings"],["bejabers"],["bejesus"],["bejewel"],["bejewels"],["bejumble"],["bekiss"],["bekissed"],["bekisses"],["beknight"],["beknot"],["beknots"],["bel"],["belabor"],["belabors"],["belabour"],["belaced"],["beladied"],["beladies"],["belady"],["belated"],["belaud"],["belauded"],["belauds"],["belay"],["belayed"],["belaying"],["belays"],["belch"],["belched"],["belcher"],["belchers"],["belches"],["belching"],["beldam"],["beldame"],["beldames"],["beldams"],["beleap"],["beleaped"],["beleaps"],["beleapt"],["belfried"],["belfries"],["belfry"],["belga"],["belgas"],["belie"],["belied"],["belief"],["beliefs"],["belier"],["beliers"],["belies"],["believe"],["believed"],["believer"],["believes"],["belike"],["beliquor"],["belittle"],["belive"],["bell"],["bellbird"],["bellboy"],["bellboys"],["belle"],["belled"],["belleek"],["belleeks"],["belles"],["bellhop"],["bellhops"],["bellied"],["bellies"],["belling"],["bellman"],["bellmen"],["bellow"],["bellowed"],["bellower"],["bellows"],["bellpull"],["bells"],["bellwort"],["belly"],["bellyful"],["bellying"],["belong"],["belonged"],["belongs"],["beloved"],["beloveds"],["below"],["belows"],["bels"],["belt"],["belted"],["belting"],["beltings"],["beltless"],["beltline"],["belts"],["beltway"],["beltways"],["beluga"],["belugas"],["belying"],["bema"],["bemadam"],["bemadams"],["bemadden"],["bemas"],["bemata"],["bemean"],["bemeaned"],["bemeans"],["bemingle"],["bemire"],["bemired"],["bemires"],["bemiring"],["bemist"],["bemisted"],["bemists"],["bemix"],["bemixed"],["bemixes"],["bemixing"],["bemixt"],["bemoan"],["bemoaned"],["bemoans"],["bemock"],["bemocked"],["bemocks"],["bemuddle"],["bemurmur"],["bemuse"],["bemused"],["bemuses"],["bemusing"],["bemuzzle"],["ben"],["bename"],["benamed"],["benames"],["benaming"],["bench"],["benched"],["bencher"],["benchers"],["benches"],["benching"],["bend"],["bendable"],["benday"],["bendayed"],["bendays"],["bended"],["bendee"],["bendees"],["bender"],["benders"],["bending"],["bends"],["bendways"],["bendwise"],["bendy"],["bendys"],["bene"],["beneath"],["benedick"],["benedict"],["benefic"],["benefice"],["benefit"],["benefits"],["benempt"],["benes"],["benign"],["benignly"],["benison"],["benisons"],["benjamin"],["benne"],["bennes"],["bennet"],["bennets"],["benni"],["bennies"],["bennis"],["benny"],["benomyl"],["benomyls"],["bens"],["bent"],["benthal"],["benthic"],["benthos"],["bents"],["bentwood"],["benumb"],["benumbed"],["benumbs"],["benzal"],["benzene"],["benzenes"],["benzidin"],["benzin"],["benzine"],["benzines"],["benzins"],["benzoate"],["benzoic"],["benzoin"],["benzoins"],["benzol"],["benzole"],["benzoles"],["benzols"],["benzoyl"],["benzoyls"],["benzyl"],["benzylic"],["benzyls"],["bepaint"],["bepaints"],["bepimple"],["bequeath"],["bequest"],["bequests"],["berake"],["beraked"],["berakes"],["beraking"],["berascal"],["berate"],["berated"],["berates"],["berating"],["berberin"],["berceuse"],["berdache"],["bereave"],["bereaved"],["bereaver"],["bereaves"],["bereft"],["beret"],["berets"],["beretta"],["berettas"],["berg"],["bergamot"],["bergere"],["bergeres"],["bergs"],["berhyme"],["berhymed"],["berhymes"],["beriberi"],["berime"],["berimed"],["berimes"],["beriming"],["beringed"],["berlin"],["berline"],["berlines"],["berlins"],["berm"],["berme"],["bermes"],["berms"],["bermudas"],["bernicle"],["berobed"],["berouged"],["berretta"],["berried"],["berries"],["berry"],["berrying"],["berseem"],["berseems"],["berserk"],["berserks"],["berth"],["bertha"],["berthas"],["berthed"],["berthing"],["berths"],["beryl"],["beryline"],["beryls"],["bescorch"],["bescour"],["bescours"],["bescreen"],["beseech"],["beseem"],["beseemed"],["beseems"],["beset"],["besets"],["besetter"],["beshadow"],["beshame"],["beshamed"],["beshames"],["beshiver"],["beshout"],["beshouts"],["beshrew"],["beshrews"],["beshroud"],["beside"],["besides"],["besiege"],["besieged"],["besieger"],["besieges"],["beslaved"],["beslime"],["beslimed"],["beslimes"],["besmear"],["besmears"],["besmile"],["besmiled"],["besmiles"],["besmirch"],["besmoke"],["besmoked"],["besmokes"],["besmooth"],["besmudge"],["besmut"],["besmuts"],["besnow"],["besnowed"],["besnows"],["besom"],["besoms"],["besoothe"],["besot"],["besots"],["besotted"],["besought"],["bespake"],["bespeak"],["bespeaks"],["bespoke"],["bespoken"],["bespouse"],["bespread"],["besprent"],["best"],["bestead"],["besteads"],["bested"],["bestial"],["bestiary"],["besting"],["bestir"],["bestirs"],["bestow"],["bestowal"],["bestowed"],["bestows"],["bestrew"],["bestrewn"],["bestrews"],["bestrid"],["bestride"],["bestrode"],["bestrow"],["bestrown"],["bestrows"],["bests"],["bestud"],["bestuds"],["beswarm"],["beswarms"],["bet"],["beta"],["betaine"],["betaines"],["betake"],["betaken"],["betakes"],["betaking"],["betas"],["betatron"],["betatter"],["betaxed"],["betel"],["betelnut"],["betels"],["beth"],["bethank"],["bethanks"],["bethel"],["bethels"],["bethesda"],["bethink"],["bethinks"],["bethorn"],["bethorns"],["beths"],["bethump"],["bethumps"],["betide"],["betided"],["betides"],["betiding"],["betime"],["betimes"],["betise"],["betises"],["betoken"],["betokens"],["beton"],["betonies"],["betons"],["betony"],["betook"],["betray"],["betrayal"],["betrayed"],["betrayer"],["betrays"],["betroth"],["betroths"],["bets"],["betta"],["bettas"],["betted"],["better"],["bettered"],["betters"],["betting"],["bettor"],["bettors"],["between"],["betwixt"],["beuncled"],["bevatron"],["bevel"],["beveled"],["beveler"],["bevelers"],["beveling"],["bevelled"],["beveller"],["bevels"],["beverage"],["bevies"],["bevomit"],["bevomits"],["bevor"],["bevors"],["bevy"],["bewail"],["bewailed"],["bewailer"],["bewails"],["beware"],["bewared"],["bewares"],["bewaring"],["beweary"],["beweep"],["beweeps"],["bewept"],["bewig"],["bewigged"],["bewigs"],["bewilder"],["bewinged"],["bewitch"],["beworm"],["bewormed"],["beworms"],["beworry"],["bewrap"],["bewraps"],["bewrapt"],["bewray"],["bewrayed"],["bewrayer"],["bewrays"],["bey"],["beylic"],["beylics"],["beylik"],["beyliks"],["beyond"],["beyonds"],["beys"],["bezant"],["bezants"],["bezazz"],["bezazzes"],["bezel"],["bezels"],["bezil"],["bezils"],["bezique"],["beziques"],["bezoar"],["bezoars"],["bezzant"],["bezzants"],["bhakta"],["bhaktas"],["bhakti"],["bhaktis"],["bhang"],["bhangs"],["bheestie"],["bheesty"],["bhistie"],["bhisties"],["bhoot"],["bhoots"],["bhut"],["bhuts"],["bi"],["biacetyl"],["biali"],["bialis"],["bialy"],["bialys"],["biannual"],["bias"],["biased"],["biasedly"],["biases"],["biasing"],["biasness"],["biassed"],["biasses"],["biassing"],["biathlon"],["biaxal"],["biaxial"],["bib"],["bibasic"],["bibb"],["bibbed"],["bibber"],["bibbers"],["bibbery"],["bibbing"],["bibbs"],["bibcock"],["bibcocks"],["bibelot"],["bibelots"],["bible"],["bibles"],["bibless"],["biblical"],["biblike"],["biblist"],["biblists"],["bibs"],["bibulous"],["bicarb"],["bicarbs"],["bicaudal"],["bice"],["biceps"],["bicepses"],["bices"],["bichrome"],["bicker"],["bickered"],["bickerer"],["bickers"],["bicolor"],["bicolors"],["bicolour"],["biconvex"],["bicorn"],["bicorne"],["bicornes"],["bicron"],["bicrons"],["bicuspid"],["bicycle"],["bicycled"],["bicycler"],["bicycles"],["bicyclic"],["bid"],["bidarka"],["bidarkas"],["bidarkee"],["biddable"],["biddably"],["bidden"],["bidder"],["bidders"],["biddies"],["bidding"],["biddings"],["biddy"],["bide"],["bided"],["bidental"],["bider"],["biders"],["bides"],["bidet"],["bidets"],["biding"],["bids"],["bield"],["bielded"],["bielding"],["bields"],["biennale"],["biennia"],["biennial"],["biennium"],["bier"],["biers"],["biface"],["bifaces"],["bifacial"],["biff"],["biffed"],["biffies"],["biffin"],["biffing"],["biffins"],["biffs"],["biffy"],["bifid"],["bifidity"],["bifidly"],["bifilar"],["biflex"],["bifocal"],["bifocals"],["bifold"],["biforate"],["biforked"],["biform"],["biformed"],["big"],["bigamies"],["bigamist"],["bigamous"],["bigamy"],["bigarade"],["bigaroon"],["bigeminy"],["bigeye"],["bigeyes"],["bigfeet"],["bigfoot"],["bigfoots"],["bigger"],["biggest"],["biggety"],["biggie"],["biggies"],["biggin"],["bigging"],["biggings"],["biggins"],["biggish"],["biggity"],["bighead"],["bigheads"],["bighorn"],["bighorns"],["bight"],["bighted"],["bighting"],["bights"],["bigly"],["bigmouth"],["bigness"],["bignonia"],["bigot"],["bigoted"],["bigotry"],["bigots"],["bigwig"],["bigwigs"],["bihourly"],["bijou"],["bijous"],["bijoux"],["bijugate"],["bijugous"],["bike"],["biked"],["biker"],["bikers"],["bikes"],["bikeway"],["bikeways"],["bikie"],["bikies"],["biking"],["bikini"],["bikinied"],["bikinis"],["bilabial"],["bilander"],["bilayer"],["bilayers"],["bilberry"],["bilbo"],["bilboa"],["bilboas"],["bilboes"],["bilbos"],["bile"],["biles"],["bilge"],["bilged"],["bilges"],["bilgier"],["bilgiest"],["bilging"],["bilgy"],["biliary"],["bilinear"],["bilious"],["bilk"],["bilked"],["bilker"],["bilkers"],["bilking"],["bilks"],["bill"],["billable"],["billbug"],["billbugs"],["billed"],["biller"],["billers"],["billet"],["billeted"],["billeter"],["billets"],["billfish"],["billfold"],["billhead"],["billhook"],["billiard"],["billie"],["billies"],["billing"],["billings"],["billion"],["billions"],["billon"],["billons"],["billow"],["billowed"],["billows"],["billowy"],["bills"],["billy"],["billycan"],["bilobate"],["bilobed"],["bilsted"],["bilsteds"],["biltong"],["biltongs"],["bima"],["bimah"],["bimahs"],["bimanous"],["bimanual"],["bimas"],["bimbo"],["bimboes"],["bimbos"],["bimensal"],["bimester"],["bimetal"],["bimetals"],["bimethyl"],["bimodal"],["bimorph"],["bimorphs"],["bin"],["binal"],["binaries"],["binary"],["binate"],["binately"],["binaural"],["bind"],["bindable"],["binder"],["binders"],["bindery"],["bindi"],["binding"],["bindings"],["bindis"],["bindle"],["bindles"],["binds"],["bindweed"],["bine"],["bines"],["binge"],["binged"],["bingeing"],["binges"],["binging"],["bingo"],["bingos"],["binit"],["binits"],["binnacle"],["binned"],["binning"],["binocle"],["binocles"],["binocs"],["binomial"],["bins"],["bint"],["bints"],["bio"],["bioassay"],["biocidal"],["biocide"],["biocides"],["bioclean"],["biocycle"],["bioethic"],["biogas"],["biogases"],["biogen"],["biogenic"],["biogens"],["biogeny"],["bioherm"],["bioherms"],["biologic"],["biology"],["biolyses"],["biolysis"],["biolytic"],["biomass"],["biome"],["biomes"],["biometry"],["bionic"],["bionics"],["bionomic"],["bionomy"],["biont"],["biontic"],["bionts"],["bioplasm"],["biopsic"],["biopsies"],["biopsy"],["bioptic"],["bios"],["bioscope"],["bioscopy"],["biota"],["biotas"],["biotech"],["biotechs"],["biotic"],["biotical"],["biotics"],["biotin"],["biotins"],["biotite"],["biotites"],["biotitic"],["biotope"],["biotopes"],["biotoxin"],["biotron"],["biotrons"],["biotype"],["biotypes"],["biotypic"],["biovular"],["bipack"],["bipacks"],["biparous"],["biparted"],["biparty"],["biped"],["bipedal"],["bipeds"],["biphenyl"],["biplane"],["biplanes"],["bipod"],["bipods"],["bipolar"],["biracial"],["biradial"],["biramose"],["biramous"],["birch"],["birched"],["birchen"],["birches"],["birching"],["bird"],["birdbath"],["birdcage"],["birdcall"],["birded"],["birder"],["birders"],["birdfarm"],["birdie"],["birdied"],["birdies"],["birding"],["birdings"],["birdlike"],["birdlime"],["birdman"],["birdmen"],["birds"],["birdseed"],["birdseye"],["birdshot"],["bireme"],["biremes"],["biretta"],["birettas"],["birk"],["birkie"],["birkies"],["birks"],["birl"],["birle"],["birled"],["birler"],["birlers"],["birles"],["birling"],["birlings"],["birls"],["birr"],["birred"],["birretta"],["birring"],["birrotch"],["birrs"],["birse"],["birses"],["birth"],["birthday"],["birthed"],["birthing"],["births"],["bis"],["biscuit"],["biscuits"],["bise"],["bisect"],["bisected"],["bisector"],["bisects"],["bises"],["bisexual"],["bishop"],["bishoped"],["bishops"],["bisk"],["bisks"],["bismuth"],["bismuths"],["bisnaga"],["bisnagas"],["bison"],["bisons"],["bisque"],["bisques"],["bistate"],["bister"],["bistered"],["bisters"],["bistort"],["bistorts"],["bistoury"],["bistre"],["bistred"],["bistres"],["bistro"],["bistroic"],["bistros"],["bit"],["bitable"],["bitch"],["bitched"],["bitchery"],["bitches"],["bitchier"],["bitchily"],["bitching"],["bitchy"],["bite"],["biteable"],["biter"],["biters"],["bites"],["bitewing"],["biting"],["bitingly"],["bits"],["bitstock"],["bitsy"],["bitt"],["bitted"],["bitten"],["bitter"],["bittered"],["bitterer"],["bitterly"],["bittern"],["bitterns"],["bitters"],["bittier"],["bittiest"],["bitting"],["bittings"],["bittock"],["bittocks"],["bitts"],["bitty"],["bitumen"],["bitumens"],["biunique"],["bivalent"],["bivalve"],["bivalved"],["bivalves"],["bivinyl"],["bivinyls"],["bivouac"],["bivouacs"],["biweekly"],["biyearly"],["biz"],["bizarre"],["bizarres"],["bize"],["bizes"],["biznaga"],["biznagas"],["bizonal"],["bizone"],["bizones"],["blab"],["blabbed"],["blabber"],["blabbers"],["blabbing"],["blabby"],["blabs"],["black"],["blackboy"],["blackcap"],["blacked"],["blacken"],["blackens"],["blacker"],["blackest"],["blackfin"],["blackfly"],["blackgum"],["blacking"],["blackish"],["blackleg"],["blackly"],["blackout"],["blacks"],["blacktop"],["bladder"],["bladders"],["bladdery"],["blade"],["bladed"],["blades"],["blae"],["blah"],["blahs"],["blain"],["blains"],["blam"],["blamable"],["blamably"],["blame"],["blamed"],["blameful"],["blamer"],["blamers"],["blames"],["blaming"],["blams"],["blanch"],["blanched"],["blancher"],["blanches"],["bland"],["blander"],["blandest"],["blandish"],["blandly"],["blank"],["blanked"],["blanker"],["blankest"],["blanket"],["blankets"],["blanking"],["blankly"],["blanks"],["blare"],["blared"],["blares"],["blaring"],["blarney"],["blarneys"],["blase"],["blast"],["blasted"],["blastema"],["blaster"],["blasters"],["blastie"],["blastier"],["blasties"],["blasting"],["blastoff"],["blastoma"],["blasts"],["blastula"],["blasty"],["blat"],["blatancy"],["blatant"],["blate"],["blather"],["blathers"],["blats"],["blatted"],["blatter"],["blatters"],["blatting"],["blaubok"],["blauboks"],["blaw"],["blawed"],["blawing"],["blawn"],["blaws"],["blaze"],["blazed"],["blazer"],["blazers"],["blazes"],["blazing"],["blazon"],["blazoned"],["blazoner"],["blazonry"],["blazons"],["bleach"],["bleached"],["bleacher"],["bleaches"],["bleak"],["bleaker"],["bleakest"],["bleakish"],["bleakly"],["bleaks"],["blear"],["bleared"],["blearier"],["blearily"],["blearing"],["blears"],["bleary"],["bleat"],["bleated"],["bleater"],["bleaters"],["bleating"],["bleats"],["bleb"],["blebby"],["blebs"],["bled"],["bleed"],["bleeder"],["bleeders"],["bleeding"],["bleeds"],["bleep"],["bleeped"],["bleeping"],["bleeps"],["blellum"],["blellums"],["blemish"],["blench"],["blenched"],["blencher"],["blenches"],["blend"],["blende"],["blended"],["blender"],["blenders"],["blendes"],["blending"],["blends"],["blennies"],["blenny"],["blent"],["blesbok"],["blesboks"],["blesbuck"],["bless"],["blessed"],["blesser"],["blessers"],["blesses"],["blessing"],["blest"],["blet"],["blether"],["blethers"],["blets"],["blew"],["blight"],["blighted"],["blighter"],["blights"],["blighty"],["blimey"],["blimp"],["blimpish"],["blimps"],["blimy"],["blin"],["blind"],["blindage"],["blinded"],["blinder"],["blinders"],["blindest"],["blinding"],["blindly"],["blinds"],["blini"],["blinis"],["blink"],["blinkard"],["blinked"],["blinker"],["blinkers"],["blinking"],["blinks"],["blintz"],["blintze"],["blintzes"],["blip"],["blipped"],["blipping"],["blips"],["bliss"],["blissed"],["blisses"],["blissful"],["blissing"],["blister"],["blisters"],["blistery"],["blite"],["blites"],["blithe"],["blithely"],["blither"],["blithers"],["blithest"],["blitz"],["blitzed"],["blitzes"],["blitzing"],["blizzard"],["bloat"],["bloated"],["bloater"],["bloaters"],["bloating"],["bloats"],["blob"],["blobbed"],["blobbing"],["blobs"],["bloc"],["block"],["blockade"],["blockage"],["blocked"],["blocker"],["blockers"],["blockier"],["blocking"],["blockish"],["blocks"],["blocky"],["blocs"],["bloke"],["blokes"],["blond"],["blonde"],["blonder"],["blondes"],["blondest"],["blondish"],["blonds"],["blood"],["blooded"],["bloodfin"],["bloodied"],["bloodier"],["bloodies"],["bloodily"],["blooding"],["bloodred"],["bloods"],["bloody"],["blooey"],["blooie"],["bloom"],["bloomed"],["bloomer"],["bloomers"],["bloomery"],["bloomier"],["blooming"],["blooms"],["bloomy"],["bloop"],["blooped"],["blooper"],["bloopers"],["blooping"],["bloops"],["blossom"],["blossoms"],["blossomy"],["blot"],["blotch"],["blotched"],["blotches"],["blotchy"],["blotless"],["blots"],["blotted"],["blotter"],["blotters"],["blottier"],["blotting"],["blotto"],["blotty"],["blouse"],["bloused"],["blouses"],["blousier"],["blousily"],["blousing"],["blouson"],["blousons"],["blousy"],["bloviate"],["blow"],["blowback"],["blowball"],["blowby"],["blowbys"],["blowed"],["blower"],["blowers"],["blowfish"],["blowfly"],["blowgun"],["blowguns"],["blowhard"],["blowhole"],["blowier"],["blowiest"],["blowing"],["blowjob"],["blowjobs"],["blown"],["blowoff"],["blowoffs"],["blowout"],["blowouts"],["blowpipe"],["blows"],["blowsed"],["blowsier"],["blowsily"],["blowsy"],["blowtube"],["blowup"],["blowups"],["blowy"],["blowzed"],["blowzier"],["blowzily"],["blowzy"],["blubber"],["blubbers"],["blubbery"],["blucher"],["bluchers"],["bludgeon"],["blue"],["blueball"],["bluebell"],["bluebill"],["bluebird"],["bluebook"],["bluecap"],["bluecaps"],["bluecoat"],["blued"],["bluefin"],["bluefins"],["bluefish"],["bluegill"],["bluegum"],["bluegums"],["bluehead"],["blueing"],["blueings"],["blueish"],["bluejack"],["bluejay"],["bluejays"],["blueline"],["bluely"],["blueness"],["bluenose"],["bluer"],["blues"],["bluesier"],["bluesman"],["bluesmen"],["bluest"],["bluestem"],["bluesy"],["bluet"],["bluets"],["blueweed"],["bluewood"],["bluey"],["blueys"],["bluff"],["bluffed"],["bluffer"],["bluffers"],["bluffest"],["bluffing"],["bluffly"],["bluffs"],["bluing"],["bluings"],["bluish"],["blume"],["blumed"],["blumes"],["bluming"],["blunder"],["blunders"],["blunge"],["blunged"],["blunger"],["blungers"],["blunges"],["blunging"],["blunt"],["blunted"],["blunter"],["bluntest"],["blunting"],["bluntly"],["blunts"],["blur"],["blurb"],["blurbed"],["blurbing"],["blurbs"],["blurred"],["blurrier"],["blurrily"],["blurring"],["blurry"],["blurs"],["blurt"],["blurted"],["blurter"],["blurters"],["blurting"],["blurts"],["blush"],["blushed"],["blusher"],["blushers"],["blushes"],["blushful"],["blushing"],["bluster"],["blusters"],["blustery"],["blype"],["blypes"],["bo"],["boa"],["boar"],["board"],["boarded"],["boarder"],["boarders"],["boarding"],["boardman"],["boardmen"],["boards"],["boarfish"],["boarish"],["boars"],["boart"],["boarts"],["boas"],["boast"],["boasted"],["boaster"],["boasters"],["boastful"],["boasting"],["boasts"],["boat"],["boatable"],["boatbill"],["boated"],["boatel"],["boatels"],["boater"],["boaters"],["boathook"],["boating"],["boatings"],["boatload"],["boatman"],["boatmen"],["boats"],["boatsman"],["boatsmen"],["boatyard"],["bob"],["bobbed"],["bobber"],["bobbers"],["bobbery"],["bobbies"],["bobbin"],["bobbinet"],["bobbing"],["bobbins"],["bobble"],["bobbled"],["bobbles"],["bobbling"],["bobby"],["bobcat"],["bobcats"],["bobeche"],["bobeches"],["bobolink"],["bobs"],["bobsled"],["bobsleds"],["bobstay"],["bobstays"],["bobtail"],["bobtails"],["bobwhite"],["bocaccio"],["bocce"],["bocces"],["bocci"],["boccia"],["boccias"],["boccie"],["boccies"],["boccis"],["boche"],["boches"],["bock"],["bocks"],["bod"],["bode"],["boded"],["bodega"],["bodegas"],["bodement"],["bodes"],["bodice"],["bodices"],["bodied"],["bodies"],["bodiless"],["bodily"],["boding"],["bodingly"],["bodings"],["bodkin"],["bodkins"],["bods"],["body"],["bodying"],["bodysuit"],["bodysurf"],["bodywork"],["boehmite"],["boff"],["boffin"],["boffins"],["boffo"],["boffola"],["boffolas"],["boffos"],["boffs"],["bog"],["bogan"],["bogans"],["bogbean"],["bogbeans"],["bogey"],["bogeyed"],["bogeying"],["bogeyman"],["bogeymen"],["bogeys"],["bogged"],["boggier"],["boggiest"],["bogging"],["boggish"],["boggle"],["boggled"],["boggler"],["bogglers"],["boggles"],["boggling"],["boggy"],["bogie"],["bogies"],["bogle"],["bogles"],["bogs"],["bogus"],["bogwood"],["bogwoods"],["bogy"],["bogyism"],["bogyisms"],["bogyman"],["bogymen"],["bohea"],["boheas"],["bohemia"],["bohemian"],["bohemias"],["bohunk"],["bohunks"],["boil"],["boilable"],["boiled"],["boiler"],["boilers"],["boiling"],["boiloff"],["boiloffs"],["boils"],["boing"],["boiserie"],["boite"],["boites"],["bola"],["bolar"],["bolas"],["bolases"],["bold"],["bolder"],["boldest"],["boldface"],["boldly"],["boldness"],["bole"],["bolero"],["boleros"],["boles"],["bolete"],["boletes"],["boleti"],["boletus"],["bolide"],["bolides"],["bolivar"],["bolivars"],["bolivia"],["bolivias"],["boll"],["bollard"],["bollards"],["bolled"],["bolling"],["bollix"],["bollixed"],["bollixes"],["bollocks"],["bollox"],["bolloxed"],["bolloxes"],["bolls"],["bollworm"],["bolo"],["bologna"],["bolognas"],["boloney"],["boloneys"],["bolos"],["bolshie"],["bolshies"],["bolshy"],["bolson"],["bolsons"],["bolster"],["bolsters"],["bolt"],["bolted"],["bolter"],["bolters"],["bolthead"],["bolthole"],["bolting"],["boltonia"],["boltrope"],["bolts"],["bolus"],["boluses"],["bomb"],["bombard"],["bombards"],["bombast"],["bombasts"],["bombax"],["bombe"],["bombed"],["bomber"],["bombers"],["bombes"],["bombesin"],["bombing"],["bombings"],["bombload"],["bombs"],["bombycid"],["bombyx"],["bombyxes"],["bonaci"],["bonacis"],["bonanza"],["bonanzas"],["bonbon"],["bonbons"],["bond"],["bondable"],["bondage"],["bondages"],["bonded"],["bonder"],["bonders"],["bonding"],["bondings"],["bondmaid"],["bondman"],["bondmen"],["bonds"],["bondsman"],["bondsmen"],["bonduc"],["bonducs"],["bone"],["boned"],["bonefish"],["bonehead"],["boneless"],["bonemeal"],["boner"],["boners"],["bones"],["boneset"],["bonesets"],["boney"],["boneyard"],["bonfire"],["bonfires"],["bong"],["bonged"],["bonging"],["bongo"],["bongoes"],["bongoist"],["bongos"],["bongs"],["bonhomie"],["bonier"],["boniest"],["boniface"],["boniness"],["boning"],["bonita"],["bonitas"],["bonito"],["bonitoes"],["bonitos"],["bonk"],["bonked"],["bonkers"],["bonking"],["bonks"],["bonne"],["bonnes"],["bonnet"],["bonneted"],["bonnets"],["bonnie"],["bonnier"],["bonniest"],["bonnily"],["bonnock"],["bonnocks"],["bonny"],["bonsai"],["bonspell"],["bonspiel"],["bontebok"],["bonus"],["bonuses"],["bony"],["bonze"],["bonzer"],["bonzes"],["boo"],["boob"],["boobed"],["boobie"],["boobies"],["boobing"],["boobish"],["booboo"],["booboos"],["boobs"],["booby"],["boodle"],["boodled"],["boodler"],["boodlers"],["boodles"],["boodling"],["booed"],["booger"],["boogers"],["boogie"],["boogied"],["boogies"],["boogy"],["boogying"],["boogyman"],["boogymen"],["boohoo"],["boohooed"],["boohoos"],["booing"],["book"],["bookcase"],["booked"],["bookend"],["bookends"],["booker"],["bookers"],["bookful"],["bookfuls"],["bookie"],["bookies"],["booking"],["bookings"],["bookish"],["booklet"],["booklets"],["booklice"],["booklore"],["bookman"],["bookmark"],["bookmen"],["bookrack"],["bookrest"],["books"],["bookshop"],["bookworm"],["boom"],["boombox"],["boomed"],["boomer"],["boomers"],["boomier"],["boomiest"],["booming"],["boomkin"],["boomkins"],["boomlet"],["boomlets"],["booms"],["boomtown"],["boomy"],["boon"],["boondock"],["boonies"],["boons"],["boor"],["boorish"],["boors"],["boos"],["boost"],["boosted"],["booster"],["boosters"],["boosting"],["boosts"],["boot"],["booted"],["bootee"],["bootees"],["bootery"],["booth"],["booths"],["bootie"],["booties"],["booting"],["bootjack"],["bootlace"],["bootleg"],["bootlegs"],["bootless"],["bootlick"],["boots"],["booty"],["booze"],["boozed"],["boozer"],["boozers"],["boozes"],["boozier"],["booziest"],["boozily"],["boozing"],["boozy"],["bop"],["bopped"],["bopper"],["boppers"],["bopping"],["bops"],["bora"],["boraces"],["boracic"],["boracite"],["borage"],["borages"],["boral"],["borals"],["borane"],["boranes"],["boras"],["borate"],["borated"],["borates"],["borating"],["borax"],["boraxes"],["bordeaux"],["bordel"],["bordello"],["bordels"],["border"],["bordered"],["borderer"],["borders"],["bordure"],["bordures"],["bore"],["boreal"],["borecole"],["bored"],["boredom"],["boredoms"],["boreen"],["boreens"],["borehole"],["borer"],["borers"],["bores"],["boresome"],["boric"],["boride"],["borides"],["boring"],["boringly"],["borings"],["born"],["borne"],["borneol"],["borneols"],["bornite"],["bornites"],["boron"],["boronic"],["borons"],["borough"],["boroughs"],["borrow"],["borrowed"],["borrower"],["borrows"],["borsch"],["borsches"],["borscht"],["borschts"],["borsht"],["borshts"],["borstal"],["borstals"],["bort"],["borts"],["borty"],["bortz"],["bortzes"],["borzoi"],["borzois"],["bos"],["boscage"],["boscages"],["boschbok"],["bosh"],["boshbok"],["boshboks"],["boshes"],["boshvark"],["bosk"],["boskage"],["boskages"],["bosker"],["bosket"],["boskets"],["boskier"],["boskiest"],["bosks"],["bosky"],["bosom"],["bosomed"],["bosoming"],["bosoms"],["bosomy"],["boson"],["bosons"],["bosque"],["bosques"],["bosquet"],["bosquets"],["boss"],["bossdom"],["bossdoms"],["bossed"],["bosses"],["bossier"],["bossies"],["bossiest"],["bossily"],["bossing"],["bossism"],["bossisms"],["bossy"],["boston"],["bostons"],["bosun"],["bosuns"],["bot"],["bota"],["botanic"],["botanica"],["botanies"],["botanise"],["botanist"],["botanize"],["botany"],["botas"],["botch"],["botched"],["botcher"],["botchers"],["botchery"],["botches"],["botchier"],["botchily"],["botching"],["botchy"],["botel"],["botels"],["botflies"],["botfly"],["both"],["bother"],["bothered"],["bothers"],["bothies"],["bothria"],["bothrium"],["bothy"],["botonee"],["botonnee"],["botryoid"],["botryose"],["botrytis"],["bots"],["bott"],["bottle"],["bottled"],["bottler"],["bottlers"],["bottles"],["bottling"],["bottom"],["bottomed"],["bottomer"],["bottomry"],["bottoms"],["botts"],["botulin"],["botulins"],["botulism"],["boubou"],["boubous"],["bouchee"],["bouchees"],["boucle"],["boucles"],["boudoir"],["boudoirs"],["bouffant"],["bouffe"],["bouffes"],["bough"],["boughed"],["boughpot"],["boughs"],["bought"],["boughten"],["bougie"],["bougies"],["bouillon"],["boulder"],["boulders"],["bouldery"],["boule"],["boules"],["boulle"],["boulles"],["bounce"],["bounced"],["bouncer"],["bouncers"],["bounces"],["bouncier"],["bouncily"],["bouncing"],["bouncy"],["bound"],["boundary"],["bounded"],["bounden"],["bounder"],["bounders"],["bounding"],["bounds"],["bountied"],["bounties"],["bounty"],["bouquet"],["bouquets"],["bourbon"],["bourbons"],["bourdon"],["bourdons"],["bourg"],["bourgeon"],["bourgs"],["bourn"],["bourne"],["bournes"],["bourns"],["bourree"],["bourrees"],["bourride"],["bourse"],["bourses"],["bourtree"],["bouse"],["boused"],["bouses"],["bousing"],["bousouki"],["bousy"],["bout"],["boutique"],["bouton"],["boutons"],["bouts"],["bouvier"],["bouviers"],["bouzouki"],["bovid"],["bovids"],["bovine"],["bovinely"],["bovines"],["bovinity"],["bow"],["bowed"],["bowel"],["boweled"],["boweling"],["bowelled"],["bowels"],["bower"],["bowered"],["boweries"],["bowering"],["bowers"],["bowery"],["bowfin"],["bowfins"],["bowfront"],["bowhead"],["bowheads"],["bowing"],["bowingly"],["bowings"],["bowknot"],["bowknots"],["bowl"],["bowlder"],["bowlders"],["bowled"],["bowleg"],["bowlegs"],["bowler"],["bowlers"],["bowless"],["bowlful"],["bowlfuls"],["bowlike"],["bowline"],["bowlines"],["bowling"],["bowlings"],["bowllike"],["bowls"],["bowman"],["bowmen"],["bowpot"],["bowpots"],["bows"],["bowse"],["bowsed"],["bowses"],["bowshot"],["bowshots"],["bowsing"],["bowsprit"],["bowwow"],["bowwowed"],["bowwows"],["bowyer"],["bowyers"],["box"],["boxberry"],["boxboard"],["boxcar"],["boxcars"],["boxed"],["boxer"],["boxers"],["boxes"],["boxfish"],["boxful"],["boxfuls"],["boxhaul"],["boxhauls"],["boxier"],["boxiest"],["boxiness"],["boxing"],["boxings"],["boxlike"],["boxthorn"],["boxwood"],["boxwoods"],["boxy"],["boy"],["boyar"],["boyard"],["boyards"],["boyarism"],["boyars"],["boychick"],["boychik"],["boychiks"],["boycott"],["boycotts"],["boyhood"],["boyhoods"],["boyish"],["boyishly"],["boyla"],["boylas"],["boyo"],["boyos"],["boys"],["bozo"],["bozos"],["bra"],["brabble"],["brabbled"],["brabbler"],["brabbles"],["brace"],["braced"],["bracelet"],["bracer"],["bracero"],["braceros"],["bracers"],["braces"],["brach"],["braches"],["brachet"],["brachets"],["brachia"],["brachial"],["brachium"],["brachs"],["bracing"],["bracings"],["braciola"],["braciole"],["bracken"],["brackens"],["bracket"],["brackets"],["brackish"],["braconid"],["bract"],["bracteal"],["bracted"],["bractlet"],["bracts"],["brad"],["bradawl"],["bradawls"],["bradded"],["bradding"],["bradoon"],["bradoons"],["brads"],["brae"],["braes"],["brag"],["braggart"],["bragged"],["bragger"],["braggers"],["braggest"],["braggier"],["bragging"],["braggy"],["brags"],["brahma"],["brahmas"],["braid"],["braided"],["braider"],["braiders"],["braiding"],["braids"],["brail"],["brailed"],["brailing"],["braille"],["brailled"],["brailles"],["brails"],["brain"],["brained"],["brainier"],["brainily"],["braining"],["brainish"],["brainpan"],["brains"],["brainy"],["braise"],["braised"],["braises"],["braising"],["braize"],["braizes"],["brake"],["brakeage"],["braked"],["brakeman"],["brakemen"],["brakes"],["brakier"],["brakiest"],["braking"],["braky"],["braless"],["bramble"],["brambled"],["brambles"],["brambly"],["bran"],["branch"],["branched"],["branches"],["branchia"],["branchy"],["brand"],["branded"],["brander"],["branders"],["brandied"],["brandies"],["branding"],["brandish"],["brands"],["brandy"],["brank"],["branks"],["branned"],["branner"],["branners"],["brannier"],["branning"],["branny"],["brans"],["brant"],["brantail"],["brants"],["bras"],["brash"],["brasher"],["brashes"],["brashest"],["brashier"],["brashly"],["brashy"],["brasier"],["brasiers"],["brasil"],["brasilin"],["brasils"],["brass"],["brassage"],["brassard"],["brassart"],["brassed"],["brasses"],["brassica"],["brassie"],["brassier"],["brassies"],["brassily"],["brassing"],["brassish"],["brassy"],["brat"],["brats"],["brattice"],["brattier"],["brattish"],["brattle"],["brattled"],["brattles"],["bratty"],["braunite"],["brava"],["bravado"],["bravados"],["bravas"],["brave"],["braved"],["bravely"],["braver"],["bravers"],["bravery"],["braves"],["bravest"],["bravi"],["braving"],["bravo"],["bravoed"],["bravoes"],["bravoing"],["bravos"],["bravura"],["bravuras"],["bravure"],["braw"],["brawer"],["brawest"],["brawl"],["brawled"],["brawler"],["brawlers"],["brawlie"],["brawlier"],["brawling"],["brawls"],["brawly"],["brawn"],["brawnier"],["brawnily"],["brawns"],["brawny"],["braws"],["braxies"],["braxy"],["bray"],["brayed"],["brayer"],["brayers"],["braying"],["brays"],["braza"],["brazas"],["braze"],["brazed"],["brazen"],["brazened"],["brazenly"],["brazens"],["brazer"],["brazers"],["brazes"],["brazier"],["braziers"],["brazil"],["brazilin"],["brazils"],["brazing"],["breach"],["breached"],["breacher"],["breaches"],["bread"],["breadbox"],["breaded"],["breading"],["breadnut"],["breads"],["breadth"],["breadths"],["break"],["breakage"],["breaker"],["breakers"],["breaking"],["breakout"],["breaks"],["breakup"],["breakups"],["bream"],["breamed"],["breaming"],["breams"],["breast"],["breasted"],["breasts"],["breath"],["breathe"],["breathed"],["breather"],["breathes"],["breaths"],["breathy"],["breccia"],["breccial"],["breccias"],["brecham"],["brechams"],["brechan"],["brechans"],["bred"],["brede"],["bredes"],["bree"],["breech"],["breeched"],["breeches"],["breed"],["breeder"],["breeders"],["breeding"],["breeds"],["breeks"],["brees"],["breeze"],["breezed"],["breezes"],["breezier"],["breezily"],["breezing"],["breezy"],["bregma"],["bregmata"],["bregmate"],["bren"],["brens"],["brent"],["brents"],["brethren"],["breve"],["breves"],["brevet"],["brevetcy"],["breveted"],["brevets"],["breviary"],["brevier"],["breviers"],["brevity"],["brew"],["brewage"],["brewages"],["brewed"],["brewer"],["brewers"],["brewery"],["brewing"],["brewings"],["brewis"],["brewises"],["brews"],["briar"],["briard"],["briards"],["briars"],["briary"],["bribable"],["bribe"],["bribed"],["bribee"],["bribees"],["briber"],["bribers"],["bribery"],["bribes"],["bribing"],["brick"],["brickbat"],["bricked"],["brickier"],["bricking"],["brickle"],["brickles"],["bricks"],["bricky"],["bricole"],["bricoles"],["bridal"],["bridally"],["bridals"],["bride"],["brides"],["bridge"],["bridged"],["bridges"],["bridging"],["bridle"],["bridled"],["bridler"],["bridlers"],["bridles"],["bridling"],["bridoon"],["bridoons"],["brie"],["brief"],["briefed"],["briefer"],["briefers"],["briefest"],["briefing"],["briefly"],["briefs"],["brier"],["briers"],["briery"],["bries"],["brig"],["brigade"],["brigaded"],["brigades"],["brigand"],["brigands"],["bright"],["brighten"],["brighter"],["brightly"],["brights"],["brigs"],["brill"],["brills"],["brim"],["brimful"],["brimfull"],["brimless"],["brimmed"],["brimmer"],["brimmers"],["brimming"],["brims"],["brin"],["brinded"],["brindle"],["brindled"],["brindles"],["brine"],["brined"],["briner"],["briners"],["brines"],["bring"],["bringer"],["bringers"],["bringing"],["brings"],["brinier"],["brinies"],["briniest"],["brining"],["brinish"],["brink"],["brinks"],["brins"],["briny"],["brio"],["brioche"],["brioches"],["brionies"],["briony"],["brios"],["briquet"],["briquets"],["bris"],["brisance"],["brisant"],["brisk"],["brisked"],["brisker"],["briskest"],["brisket"],["briskets"],["brisking"],["briskly"],["brisks"],["brisling"],["brisses"],["bristle"],["bristled"],["bristles"],["bristly"],["bristol"],["bristols"],["brit"],["britches"],["brits"],["britska"],["britskas"],["britt"],["brittle"],["brittled"],["brittler"],["brittles"],["brittly"],["britts"],["britzka"],["britzkas"],["britzska"],["broach"],["broached"],["broacher"],["broaches"],["broad"],["broadax"],["broadaxe"],["broaden"],["broadens"],["broader"],["broadest"],["broadish"],["broadly"],["broads"],["brocade"],["brocaded"],["brocades"],["brocatel"],["broccoli"],["broche"],["brochure"],["brock"],["brockage"],["brocket"],["brockets"],["brocks"],["brocoli"],["brocolis"],["brogan"],["brogans"],["brogue"],["broguery"],["brogues"],["broguish"],["broider"],["broiders"],["broidery"],["broil"],["broiled"],["broiler"],["broilers"],["broiling"],["broils"],["brokage"],["brokages"],["broke"],["broken"],["brokenly"],["broker"],["brokered"],["brokers"],["brollies"],["brolly"],["bromal"],["bromals"],["bromate"],["bromated"],["bromates"],["brome"],["bromelin"],["bromes"],["bromic"],["bromid"],["bromide"],["bromides"],["bromidic"],["bromids"],["bromin"],["bromine"],["bromines"],["bromins"],["bromism"],["bromisms"],["bromize"],["bromized"],["bromizes"],["bromo"],["bromos"],["bronc"],["bronchi"],["bronchia"],["broncho"],["bronchos"],["bronchus"],["bronco"],["broncos"],["broncs"],["bronze"],["bronzed"],["bronzer"],["bronzers"],["bronzes"],["bronzier"],["bronzing"],["bronzy"],["broo"],["brooch"],["brooches"],["brood"],["brooded"],["brooder"],["brooders"],["broodier"],["broodily"],["brooding"],["broods"],["broody"],["brook"],["brooked"],["brooking"],["brookite"],["brooklet"],["brooks"],["broom"],["broomed"],["broomier"],["brooming"],["brooms"],["broomy"],["broos"],["brose"],["broses"],["brosy"],["broth"],["brothel"],["brothels"],["brother"],["brothers"],["broths"],["brothy"],["brougham"],["brought"],["brouhaha"],["brow"],["browband"],["browbeat"],["browless"],["brown"],["browned"],["browner"],["brownest"],["brownie"],["brownier"],["brownies"],["browning"],["brownish"],["brownout"],["browns"],["browny"],["brows"],["browse"],["browsed"],["browser"],["browsers"],["browses"],["browsing"],["brr"],["brrr"],["brucella"],["brucin"],["brucine"],["brucines"],["brucins"],["brugh"],["brughs"],["bruin"],["bruins"],["bruise"],["bruised"],["bruiser"],["bruisers"],["bruises"],["bruising"],["bruit"],["bruited"],["bruiter"],["bruiters"],["bruiting"],["bruits"],["brulot"],["brulots"],["brulyie"],["brulyies"],["brulzie"],["brulzies"],["brumal"],["brumbies"],["brumby"],["brume"],["brumes"],["brumous"],["brunch"],["brunched"],["brunches"],["brunet"],["brunets"],["brunette"],["brunizem"],["brunt"],["brunts"],["brush"],["brushed"],["brusher"],["brushers"],["brushes"],["brushier"],["brushing"],["brushoff"],["brushup"],["brushups"],["brushy"],["brusk"],["brusker"],["bruskest"],["brusque"],["brusquer"],["brut"],["brutal"],["brutally"],["brute"],["bruted"],["brutely"],["brutes"],["brutify"],["bruting"],["brutish"],["brutism"],["brutisms"],["bruxism"],["bruxisms"],["bryology"],["bryonies"],["bryony"],["bryozoan"],["bub"],["bubal"],["bubale"],["bubales"],["bubaline"],["bubalis"],["bubals"],["bubbies"],["bubble"],["bubbled"],["bubbler"],["bubblers"],["bubbles"],["bubblier"],["bubblies"],["bubbling"],["bubbly"],["bubby"],["bubinga"],["bubingas"],["bubo"],["buboed"],["buboes"],["bubonic"],["bubs"],["buccal"],["buccally"],["buck"],["buckaroo"],["buckayro"],["buckbean"],["bucked"],["buckeen"],["buckeens"],["bucker"],["buckeroo"],["buckers"],["bucket"],["bucketed"],["buckets"],["buckeye"],["buckeyes"],["bucking"],["buckish"],["buckle"],["buckled"],["buckler"],["bucklers"],["buckles"],["buckling"],["bucko"],["buckoes"],["buckra"],["buckram"],["buckrams"],["buckras"],["bucks"],["bucksaw"],["bucksaws"],["buckshee"],["buckshot"],["buckskin"],["bucktail"],["bucolic"],["bucolics"],["bud"],["budded"],["budder"],["budders"],["buddied"],["buddies"],["budding"],["buddings"],["buddle"],["buddleia"],["buddles"],["buddy"],["buddying"],["budge"],["budged"],["budger"],["budgers"],["budges"],["budget"],["budgeted"],["budgeter"],["budgets"],["budgie"],["budgies"],["budging"],["budless"],["budlike"],["buds"],["budworm"],["budworms"],["buff"],["buffable"],["buffalo"],["buffalos"],["buffed"],["buffer"],["buffered"],["buffers"],["buffet"],["buffeted"],["buffeter"],["buffets"],["buffi"],["buffier"],["buffiest"],["buffing"],["buffo"],["buffoon"],["buffoons"],["buffos"],["buffs"],["buffy"],["bug"],["bugaboo"],["bugaboos"],["bugbane"],["bugbanes"],["bugbear"],["bugbears"],["bugeye"],["bugeyes"],["bugged"],["bugger"],["buggered"],["buggers"],["buggery"],["buggier"],["buggies"],["buggiest"],["bugging"],["buggy"],["bughouse"],["bugle"],["bugled"],["bugler"],["buglers"],["bugles"],["bugling"],["bugloss"],["bugs"],["bugseed"],["bugseeds"],["bugsha"],["bugshas"],["buhl"],["buhls"],["buhlwork"],["buhr"],["buhrs"],["build"],["builded"],["builder"],["builders"],["building"],["builds"],["buildup"],["buildups"],["built"],["buirdly"],["bulb"],["bulbar"],["bulbed"],["bulbel"],["bulbels"],["bulbil"],["bulbils"],["bulblet"],["bulblets"],["bulbous"],["bulbs"],["bulbul"],["bulbuls"],["bulge"],["bulged"],["bulger"],["bulgers"],["bulges"],["bulgier"],["bulgiest"],["bulging"],["bulgur"],["bulgurs"],["bulgy"],["bulimia"],["bulimiac"],["bulimias"],["bulimic"],["bulk"],["bulkage"],["bulkages"],["bulked"],["bulkhead"],["bulkier"],["bulkiest"],["bulkily"],["bulking"],["bulks"],["bulky"],["bull"],["bulla"],["bullace"],["bullaces"],["bullae"],["bullate"],["bullbat"],["bullbats"],["bulldog"],["bulldogs"],["bulldoze"],["bulled"],["bullet"],["bulleted"],["bulletin"],["bullets"],["bullfrog"],["bullhead"],["bullhorn"],["bullied"],["bullier"],["bullies"],["bulliest"],["bulling"],["bullion"],["bullions"],["bullish"],["bullneck"],["bullnose"],["bullock"],["bullocks"],["bullocky"],["bullous"],["bullpen"],["bullpens"],["bullpout"],["bullring"],["bullrush"],["bulls"],["bullshit"],["bullshot"],["bullweed"],["bullwhip"],["bully"],["bullyboy"],["bullying"],["bullyrag"],["bulrush"],["bulwark"],["bulwarks"],["bum"],["bumble"],["bumbled"],["bumbler"],["bumblers"],["bumbles"],["bumbling"],["bumboat"],["bumboats"],["bumf"],["bumfs"],["bumkin"],["bumkins"],["bummed"],["bummer"],["bummers"],["bummest"],["bumming"],["bump"],["bumped"],["bumper"],["bumpered"],["bumpers"],["bumph"],["bumphs"],["bumpier"],["bumpiest"],["bumpily"],["bumping"],["bumpkin"],["bumpkins"],["bumps"],["bumpy"],["bums"],["bun"],["bunch"],["bunched"],["bunches"],["bunchier"],["bunchily"],["bunching"],["bunchy"],["bunco"],["buncoed"],["buncoing"],["buncombe"],["buncos"],["bund"],["bundist"],["bundists"],["bundle"],["bundled"],["bundler"],["bundlers"],["bundles"],["bundling"],["bunds"],["bundt"],["bundts"],["bung"],["bungalow"],["bunged"],["bunghole"],["bunging"],["bungle"],["bungled"],["bungler"],["bunglers"],["bungles"],["bungling"],["bungs"],["bunion"],["bunions"],["bunk"],["bunked"],["bunker"],["bunkered"],["bunkers"],["bunking"],["bunkmate"],["bunko"],["bunkoed"],["bunkoing"],["bunkos"],["bunks"],["bunkum"],["bunkums"],["bunn"],["bunnies"],["bunns"],["bunny"],["bunraku"],["bunrakus"],["buns"],["bunt"],["bunted"],["bunter"],["bunters"],["bunting"],["buntings"],["buntline"],["bunts"],["bunya"],["bunyas"],["buoy"],["buoyage"],["buoyages"],["buoyance"],["buoyancy"],["buoyant"],["buoyed"],["buoying"],["buoys"],["buqsha"],["buqshas"],["bur"],["bura"],["buran"],["burans"],["buras"],["burble"],["burbled"],["burbler"],["burblers"],["burbles"],["burblier"],["burbling"],["burbly"],["burbot"],["burbots"],["burbs"],["burd"],["burden"],["burdened"],["burdener"],["burdens"],["burdie"],["burdies"],["burdock"],["burdocks"],["burds"],["bureau"],["bureaus"],["bureaux"],["buret"],["burets"],["burette"],["burettes"],["burg"],["burgage"],["burgages"],["burgee"],["burgees"],["burgeon"],["burgeons"],["burger"],["burgers"],["burgess"],["burgh"],["burghal"],["burgher"],["burghers"],["burghs"],["burglar"],["burglars"],["burglary"],["burgle"],["burgled"],["burgles"],["burgling"],["burgonet"],["burgoo"],["burgoos"],["burgout"],["burgouts"],["burgrave"],["burgs"],["burgundy"],["burial"],["burials"],["buried"],["burier"],["buriers"],["buries"],["burin"],["burins"],["burke"],["burked"],["burker"],["burkers"],["burkes"],["burking"],["burkite"],["burkites"],["burl"],["burlap"],["burlaps"],["burled"],["burler"],["burlers"],["burlesk"],["burlesks"],["burley"],["burleys"],["burlier"],["burliest"],["burlily"],["burling"],["burls"],["burly"],["burn"],["burnable"],["burned"],["burner"],["burners"],["burnet"],["burnets"],["burnie"],["burnies"],["burning"],["burnings"],["burnish"],["burnoose"],["burnous"],["burnout"],["burnouts"],["burns"],["burnt"],["burp"],["burped"],["burping"],["burps"],["burr"],["burred"],["burrer"],["burrers"],["burrier"],["burriest"],["burring"],["burrito"],["burritos"],["burro"],["burros"],["burrow"],["burrowed"],["burrower"],["burrows"],["burrs"],["burry"],["burs"],["bursa"],["bursae"],["bursal"],["bursar"],["bursars"],["bursary"],["bursas"],["bursate"],["burse"],["burseed"],["burseeds"],["bursera"],["burses"],["bursitis"],["burst"],["bursted"],["burster"],["bursters"],["bursting"],["burstone"],["bursts"],["burthen"],["burthens"],["burton"],["burtons"],["burweed"],["burweeds"],["bury"],["burying"],["bus"],["busbar"],["busbars"],["busbies"],["busboy"],["busboys"],["busby"],["bused"],["buses"],["bush"],["bushbuck"],["bushed"],["bushel"],["busheled"],["busheler"],["bushels"],["busher"],["bushers"],["bushes"],["bushfire"],["bushgoat"],["bushido"],["bushidos"],["bushier"],["bushiest"],["bushily"],["bushing"],["bushings"],["bushland"],["bushless"],["bushlike"],["bushman"],["bushmen"],["bushtit"],["bushtits"],["bushwa"],["bushwah"],["bushwahs"],["bushwas"],["bushy"],["busied"],["busier"],["busies"],["busiest"],["busily"],["business"],["busing"],["busings"],["busk"],["busked"],["busker"],["buskers"],["buskin"],["buskined"],["busking"],["buskins"],["busks"],["busman"],["busmen"],["buss"],["bussed"],["busses"],["bussing"],["bussings"],["bust"],["bustard"],["bustards"],["busted"],["buster"],["busters"],["bustic"],["bustics"],["bustier"],["bustiers"],["bustiest"],["busting"],["bustle"],["bustled"],["bustles"],["bustling"],["busts"],["busty"],["busulfan"],["busy"],["busybody"],["busying"],["busyness"],["busywork"],["but"],["butane"],["butanes"],["butanol"],["butanols"],["butanone"],["butch"],["butcher"],["butchers"],["butchery"],["butches"],["butene"],["butenes"],["buteo"],["buteos"],["butle"],["butled"],["butler"],["butlers"],["butlery"],["butles"],["butling"],["buts"],["butt"],["buttals"],["butte"],["butted"],["butter"],["buttered"],["butters"],["buttery"],["buttes"],["butties"],["butting"],["buttock"],["buttocks"],["button"],["buttoned"],["buttoner"],["buttons"],["buttony"],["buttress"],["butts"],["butty"],["butut"],["bututs"],["butyl"],["butylate"],["butylene"],["butyls"],["butyral"],["butyrals"],["butyrate"],["butyric"],["butyrin"],["butyrins"],["butyrous"],["butyryl"],["butyryls"],["buxom"],["buxomer"],["buxomest"],["buxomly"],["buy"],["buyable"],["buyback"],["buybacks"],["buyer"],["buyers"],["buying"],["buyout"],["buyouts"],["buys"],["buzuki"],["buzukia"],["buzukis"],["buzz"],["buzzard"],["buzzards"],["buzzed"],["buzzer"],["buzzers"],["buzzes"],["buzzing"],["buzzwig"],["buzzwigs"],["buzzword"],["bwana"],["bwanas"],["by"],["bye"],["byelaw"],["byelaws"],["byes"],["bygone"],["bygones"],["bylaw"],["bylaws"],["byline"],["bylined"],["byliner"],["byliners"],["bylines"],["bylining"],["byname"],["bynames"],["bypass"],["bypassed"],["bypasses"],["bypast"],["bypath"],["bypaths"],["byplay"],["byplays"],["byre"],["byres"],["byrl"],["byrled"],["byrling"],["byrls"],["byrnie"],["byrnies"],["byroad"],["byroads"],["bys"],["byssi"],["byssus"],["byssuses"],["bystreet"],["bytalk"],["bytalks"],["byte"],["bytes"],["byway"],["byways"],["byword"],["bywords"],["bywork"],["byworks"],["byzant"],["byzants"],["cab"],["cabal"],["cabala"],["cabalas"],["cabalism"],["cabalist"],["caballed"],["cabals"],["cabana"],["cabanas"],["cabaret"],["cabarets"],["cabbage"],["cabbaged"],["cabbages"],["cabbala"],["cabbalah"],["cabbalas"],["cabbed"],["cabbie"],["cabbies"],["cabbing"],["cabby"],["caber"],["cabernet"],["cabers"],["cabestro"],["cabezon"],["cabezone"],["cabezons"],["cabildo"],["cabildos"],["cabin"],["cabined"],["cabinet"],["cabinets"],["cabining"],["cabins"],["cable"],["cabled"],["cables"],["cablet"],["cablets"],["cableway"],["cabling"],["cabman"],["cabmen"],["cabob"],["cabobs"],["caboched"],["cabochon"],["cabomba"],["cabombas"],["caboodle"],["caboose"],["cabooses"],["caboshed"],["cabotage"],["cabresta"],["cabresto"],["cabretta"],["cabrilla"],["cabriole"],["cabs"],["cabstand"],["caca"],["cacao"],["cacaos"],["cacas"],["cachalot"],["cache"],["cached"],["cachepot"],["caches"],["cachet"],["cacheted"],["cachets"],["cachexia"],["cachexic"],["cachexy"],["caching"],["cachou"],["cachous"],["cachucha"],["cacique"],["caciques"],["cackle"],["cackled"],["cackler"],["cacklers"],["cackles"],["cackling"],["cacodyl"],["cacodyls"],["cacomixl"],["cacti"],["cactoid"],["cactus"],["cactuses"],["cad"],["cadaster"],["cadastre"],["cadaver"],["cadavers"],["caddice"],["caddices"],["caddie"],["caddied"],["caddies"],["caddis"],["caddises"],["caddish"],["caddy"],["caddying"],["cade"],["cadelle"],["cadelles"],["cadence"],["cadenced"],["cadences"],["cadency"],["cadent"],["cadenza"],["cadenzas"],["cades"],["cadet"],["cadets"],["cadge"],["cadged"],["cadger"],["cadgers"],["cadges"],["cadging"],["cadgy"],["cadi"],["cadis"],["cadmic"],["cadmium"],["cadmiums"],["cadre"],["cadres"],["cads"],["caducean"],["caducei"],["caduceus"],["caducity"],["caducous"],["caeca"],["caecal"],["caecally"],["caecum"],["caeoma"],["caeomas"],["caesar"],["caesars"],["caesium"],["caesiums"],["caestus"],["caesura"],["caesurae"],["caesural"],["caesuras"],["caesuric"],["cafe"],["cafes"],["caffein"],["caffeine"],["caffeins"],["caftan"],["caftans"],["cage"],["caged"],["cageful"],["cagefuls"],["cageling"],["cager"],["cagers"],["cages"],["cagey"],["cagier"],["cagiest"],["cagily"],["caginess"],["caging"],["cagy"],["cahier"],["cahiers"],["cahoot"],["cahoots"],["cahow"],["cahows"],["caid"],["caids"],["caiman"],["caimans"],["cain"],["cains"],["caique"],["caiques"],["caird"],["cairds"],["cairn"],["cairned"],["cairns"],["cairny"],["caisson"],["caissons"],["caitiff"],["caitiffs"],["cajaput"],["cajaputs"],["cajeput"],["cajeputs"],["cajole"],["cajoled"],["cajoler"],["cajolers"],["cajolery"],["cajoles"],["cajoling"],["cajon"],["cajones"],["cajuput"],["cajuputs"],["cake"],["caked"],["cakes"],["cakewalk"],["cakey"],["cakier"],["cakiest"],["caking"],["caky"],["calabash"],["caladium"],["calamar"],["calamari"],["calamars"],["calamary"],["calami"],["calamine"],["calamint"],["calamite"],["calamity"],["calamus"],["calando"],["calash"],["calashes"],["calathi"],["calathos"],["calathus"],["calcanea"],["calcanei"],["calcar"],["calcaria"],["calcars"],["calceate"],["calces"],["calcic"],["calcific"],["calcify"],["calcine"],["calcined"],["calcines"],["calcite"],["calcites"],["calcitic"],["calcium"],["calciums"],["calcspar"],["calctufa"],["calctuff"],["calculi"],["calculus"],["caldaria"],["caldera"],["calderas"],["caldron"],["caldrons"],["caleche"],["caleches"],["calendal"],["calendar"],["calender"],["calends"],["calesa"],["calesas"],["calf"],["calflike"],["calfs"],["calfskin"],["caliber"],["calibers"],["calibre"],["calibred"],["calibres"],["calices"],["caliche"],["caliches"],["calicle"],["calicles"],["calico"],["calicoes"],["calicos"],["calif"],["califate"],["califs"],["calipash"],["calipee"],["calipees"],["caliper"],["calipers"],["caliph"],["caliphal"],["caliphs"],["calisaya"],["calix"],["calk"],["calked"],["calker"],["calkers"],["calkin"],["calking"],["calkins"],["calks"],["call"],["calla"],["callable"],["callaloo"],["callan"],["callans"],["callant"],["callants"],["callas"],["callback"],["callboy"],["callboys"],["called"],["caller"],["callers"],["callet"],["callets"],["calling"],["callings"],["calliope"],["callipee"],["calliper"],["callose"],["calloses"],["callous"],["callow"],["callower"],["calls"],["callus"],["callused"],["calluses"],["calm"],["calmed"],["calmer"],["calmest"],["calming"],["calmly"],["calmness"],["calms"],["calomel"],["calomels"],["caloric"],["calorics"],["calorie"],["calories"],["calorize"],["calory"],["calotte"],["calottes"],["caloyer"],["caloyers"],["calpac"],["calpack"],["calpacks"],["calpacs"],["calque"],["calqued"],["calques"],["calquing"],["calthrop"],["caltrap"],["caltraps"],["caltrop"],["caltrops"],["calumet"],["calumets"],["calumny"],["calutron"],["calvados"],["calvaria"],["calvary"],["calve"],["calved"],["calves"],["calving"],["calx"],["calxes"],["calycate"],["calyceal"],["calyces"],["calycine"],["calycle"],["calycles"],["calyculi"],["calypso"],["calypsos"],["calypter"],["calyptra"],["calyx"],["calyxes"],["calzone"],["calzones"],["cam"],["camail"],["camailed"],["camails"],["camas"],["camases"],["camass"],["camasses"],["camber"],["cambered"],["cambers"],["cambia"],["cambial"],["cambism"],["cambisms"],["cambist"],["cambists"],["cambium"],["cambiums"],["cambogia"],["cambric"],["cambrics"],["came"],["camel"],["cameleer"],["camelia"],["camelias"],["camellia"],["camels"],["cameo"],["cameoed"],["cameoing"],["cameos"],["camera"],["camerae"],["cameral"],["cameras"],["cames"],["camion"],["camions"],["camisa"],["camisade"],["camisado"],["camisas"],["camise"],["camises"],["camisia"],["camisias"],["camisole"],["camlet"],["camlets"],["camomile"],["camorra"],["camorras"],["camp"],["campagna"],["campagne"],["campaign"],["camped"],["camper"],["campers"],["campfire"],["camphene"],["camphine"],["camphire"],["camphol"],["camphols"],["camphor"],["camphors"],["campi"],["campier"],["campiest"],["campily"],["camping"],["campings"],["campion"],["campions"],["campo"],["campong"],["campongs"],["camporee"],["campos"],["camps"],["campsite"],["campus"],["campused"],["campuses"],["campy"],["cams"],["camshaft"],["can"],["canaille"],["canakin"],["canakins"],["canal"],["canaled"],["canaling"],["canalise"],["canalize"],["canalled"],["canaller"],["canals"],["canape"],["canapes"],["canard"],["canards"],["canaries"],["canary"],["canasta"],["canastas"],["cancan"],["cancans"],["cancel"],["canceled"],["canceler"],["cancels"],["cancer"],["cancers"],["cancha"],["canchas"],["cancroid"],["candela"],["candelas"],["candent"],["candid"],["candida"],["candidas"],["candider"],["candidly"],["candids"],["candied"],["candies"],["candle"],["candled"],["candler"],["candlers"],["candles"],["candling"],["candor"],["candors"],["candour"],["candours"],["candy"],["candying"],["cane"],["caned"],["canella"],["canellas"],["canephor"],["caner"],["caners"],["canes"],["caneware"],["canfield"],["canful"],["canfuls"],["cangue"],["cangues"],["canid"],["canids"],["canikin"],["canikins"],["canine"],["canines"],["caning"],["caninity"],["canister"],["canities"],["canker"],["cankered"],["cankers"],["canna"],["cannabic"],["cannabin"],["cannabis"],["cannas"],["canned"],["cannel"],["cannelon"],["cannels"],["canner"],["canners"],["cannery"],["cannibal"],["cannie"],["cannier"],["canniest"],["cannikin"],["cannily"],["canning"],["cannings"],["cannoli"],["cannon"],["cannoned"],["cannonry"],["cannons"],["cannot"],["cannula"],["cannulae"],["cannular"],["cannulas"],["canny"],["canoe"],["canoed"],["canoeing"],["canoeist"],["canoes"],["canon"],["canoness"],["canonic"],["canonise"],["canonist"],["canonize"],["canonry"],["canons"],["canoodle"],["canopied"],["canopies"],["canopy"],["canorous"],["cans"],["cansful"],["canso"],["cansos"],["canst"],["cant"],["cantala"],["cantalas"],["cantata"],["cantatas"],["cantdog"],["cantdogs"],["canted"],["canteen"],["canteens"],["canter"],["cantered"],["canters"],["canthal"],["canthi"],["canthus"],["cantic"],["canticle"],["cantina"],["cantinas"],["canting"],["cantle"],["cantles"],["canto"],["canton"],["cantonal"],["cantoned"],["cantons"],["cantor"],["cantors"],["cantos"],["cantraip"],["cantrap"],["cantraps"],["cantrip"],["cantrips"],["cants"],["cantus"],["canty"],["canula"],["canulae"],["canulas"],["canulate"],["canvas"],["canvased"],["canvaser"],["canvases"],["canvass"],["canyon"],["canyons"],["canzona"],["canzonas"],["canzone"],["canzones"],["canzonet"],["canzoni"],["cap"],["capable"],["capabler"],["capably"],["capacity"],["cape"],["caped"],["capelan"],["capelans"],["capelet"],["capelets"],["capelin"],["capelins"],["caper"],["capered"],["caperer"],["caperers"],["capering"],["capers"],["capes"],["capeskin"],["capework"],["capful"],["capfuls"],["caph"],["caphs"],["capias"],["capiases"],["capita"],["capital"],["capitals"],["capitate"],["capitol"],["capitols"],["capitula"],["capless"],["caplet"],["caplets"],["caplin"],["caplins"],["capmaker"],["capo"],["capon"],["caponata"],["caponier"],["caponize"],["capons"],["caporal"],["caporals"],["capos"],["capote"],["capotes"],["capouch"],["capped"],["capper"],["cappers"],["capping"],["cappings"],["capric"],["capricci"],["caprice"],["caprices"],["caprifig"],["caprine"],["capriole"],["capris"],["caprock"],["caprocks"],["caps"],["capsicin"],["capsicum"],["capsid"],["capsidal"],["capsids"],["capsize"],["capsized"],["capsizes"],["capsomer"],["capstan"],["capstans"],["capstone"],["capsular"],["capsule"],["capsuled"],["capsules"],["captain"],["captains"],["captan"],["captans"],["caption"],["captions"],["captious"],["captive"],["captives"],["captor"],["captors"],["capture"],["captured"],["capturer"],["captures"],["capuche"],["capuched"],["capuches"],["capuchin"],["caput"],["capybara"],["car"],["carabao"],["carabaos"],["carabid"],["carabids"],["carabin"],["carabine"],["carabins"],["caracal"],["caracals"],["caracara"],["carack"],["caracks"],["caracol"],["caracole"],["caracols"],["caracul"],["caraculs"],["carafe"],["carafes"],["caragana"],["carageen"],["caramba"],["caramel"],["caramels"],["carangid"],["carapace"],["carapax"],["carassow"],["carat"],["carate"],["carates"],["carats"],["caravan"],["caravans"],["caravel"],["caravels"],["caraway"],["caraways"],["carb"],["carbamic"],["carbamyl"],["carbarn"],["carbarns"],["carbaryl"],["carbide"],["carbides"],["carbine"],["carbines"],["carbinol"],["carbolic"],["carbon"],["carbonic"],["carbons"],["carbonyl"],["carbora"],["carboras"],["carboxyl"],["carboy"],["carboyed"],["carboys"],["carbs"],["carburet"],["carcajou"],["carcanet"],["carcase"],["carcases"],["carcass"],["carcel"],["carcels"],["card"],["cardamom"],["cardamon"],["cardamum"],["cardcase"],["carded"],["carder"],["carders"],["cardia"],["cardiac"],["cardiacs"],["cardiae"],["cardias"],["cardigan"],["cardinal"],["carding"],["cardings"],["cardioid"],["carditic"],["carditis"],["cardoon"],["cardoons"],["cards"],["care"],["cared"],["careen"],["careened"],["careener"],["careens"],["career"],["careered"],["careerer"],["careers"],["carefree"],["careful"],["careless"],["carer"],["carers"],["cares"],["caress"],["caressed"],["caresser"],["caresses"],["caret"],["caretake"],["caretook"],["carets"],["careworn"],["carex"],["carfare"],["carfares"],["carful"],["carfuls"],["cargo"],["cargoes"],["cargos"],["carhop"],["carhops"],["caribe"],["caribes"],["caribou"],["caribous"],["carices"],["caried"],["caries"],["carillon"],["carina"],["carinae"],["carinal"],["carinas"],["carinate"],["caring"],["carioca"],["cariocas"],["cariole"],["carioles"],["carious"],["caritas"],["cark"],["carked"],["carking"],["carks"],["carl"],["carle"],["carles"],["carless"],["carlin"],["carline"],["carlines"],["carling"],["carlings"],["carlins"],["carlish"],["carload"],["carloads"],["carls"],["carmaker"],["carman"],["carmen"],["carmine"],["carmines"],["carn"],["carnage"],["carnages"],["carnal"],["carnally"],["carnauba"],["carnet"],["carnets"],["carney"],["carneys"],["carnie"],["carnies"],["carnify"],["carnival"],["carns"],["carny"],["caroach"],["carob"],["carobs"],["caroch"],["caroche"],["caroches"],["carol"],["caroled"],["caroler"],["carolers"],["caroli"],["caroling"],["carolled"],["caroller"],["carols"],["carolus"],["carom"],["caromed"],["caroming"],["caroms"],["carotene"],["carotid"],["carotids"],["carotin"],["carotins"],["carousal"],["carouse"],["caroused"],["carousel"],["carouser"],["carouses"],["carp"],["carpal"],["carpale"],["carpalia"],["carpals"],["carped"],["carpel"],["carpels"],["carper"],["carpers"],["carpet"],["carpeted"],["carpets"],["carpi"],["carping"],["carpings"],["carpool"],["carpools"],["carport"],["carports"],["carps"],["carpus"],["carrack"],["carracks"],["carrel"],["carrell"],["carrells"],["carrels"],["carriage"],["carried"],["carrier"],["carriers"],["carries"],["carriole"],["carrion"],["carrions"],["carritch"],["carroch"],["carrom"],["carromed"],["carroms"],["carrot"],["carrotin"],["carrots"],["carroty"],["carry"],["carryall"],["carrying"],["carryon"],["carryons"],["carryout"],["cars"],["carse"],["carses"],["carsick"],["cart"],["cartable"],["cartage"],["cartages"],["carte"],["carted"],["cartel"],["cartels"],["carter"],["carters"],["cartes"],["carting"],["cartload"],["carton"],["cartoned"],["cartons"],["cartoon"],["cartoons"],["cartop"],["cartouch"],["carts"],["caruncle"],["carve"],["carved"],["carvel"],["carvels"],["carven"],["carver"],["carvers"],["carves"],["carving"],["carvings"],["carwash"],["caryatic"],["caryatid"],["caryotin"],["casa"],["casaba"],["casabas"],["casas"],["casava"],["casavas"],["casbah"],["casbahs"],["cascabel"],["cascable"],["cascade"],["cascaded"],["cascades"],["cascara"],["cascaras"],["case"],["casease"],["caseases"],["caseate"],["caseated"],["caseates"],["casebook"],["cased"],["casefied"],["casefies"],["casefy"],["caseic"],["casein"],["caseins"],["caseload"],["casemate"],["casement"],["caseose"],["caseoses"],["caseous"],["casern"],["caserne"],["casernes"],["caserns"],["cases"],["casette"],["casettes"],["casework"],["caseworm"],["cash"],["cashable"],["cashaw"],["cashaws"],["cashbook"],["cashbox"],["cashed"],["cashes"],["cashew"],["cashews"],["cashier"],["cashiers"],["cashing"],["cashless"],["cashmere"],["cashoo"],["cashoos"],["casimere"],["casimire"],["casing"],["casings"],["casini"],["casino"],["casinos"],["casita"],["casitas"],["cask"],["casked"],["casket"],["casketed"],["caskets"],["casking"],["casks"],["casky"],["casque"],["casqued"],["casques"],["cassaba"],["cassabas"],["cassata"],["cassatas"],["cassava"],["cassavas"],["cassette"],["cassia"],["cassias"],["cassino"],["cassinos"],["cassis"],["cassises"],["cassock"],["cassocks"],["cast"],["castanet"],["castaway"],["caste"],["casteism"],["caster"],["casters"],["castes"],["casting"],["castings"],["castle"],["castled"],["castles"],["castling"],["castoff"],["castoffs"],["castor"],["castors"],["castrate"],["castrati"],["castrato"],["casts"],["casual"],["casually"],["casuals"],["casualty"],["casuist"],["casuists"],["casus"],["cat"],["catacomb"],["catalase"],["catalo"],["cataloes"],["catalog"],["catalogs"],["catalos"],["catalpa"],["catalpas"],["catalyst"],["catalyze"],["catamite"],["catapult"],["cataract"],["catarrh"],["catarrhs"],["catawba"],["catawbas"],["catbird"],["catbirds"],["catboat"],["catboats"],["catbrier"],["catcall"],["catcalls"],["catch"],["catchall"],["catcher"],["catchers"],["catches"],["catchfly"],["catchier"],["catching"],["catchup"],["catchups"],["catchy"],["cate"],["catechin"],["catechol"],["catechu"],["catechus"],["category"],["catena"],["catenae"],["catenary"],["catenas"],["catenate"],["catenoid"],["cater"],["cateran"],["caterans"],["catered"],["caterer"],["caterers"],["cateress"],["catering"],["caters"],["cates"],["catface"],["catfaces"],["catfall"],["catfalls"],["catfish"],["catgut"],["catguts"],["cathead"],["catheads"],["cathect"],["cathects"],["cathedra"],["catheter"],["cathexes"],["cathexis"],["cathodal"],["cathode"],["cathodes"],["cathodic"],["catholic"],["cathouse"],["cation"],["cationic"],["cations"],["catkin"],["catkins"],["catlike"],["catlin"],["catling"],["catlings"],["catlins"],["catmint"],["catmints"],["catnap"],["catnaper"],["catnaps"],["catnip"],["catnips"],["cats"],["catspaw"],["catspaws"],["catsup"],["catsups"],["cattail"],["cattails"],["cattalo"],["cattalos"],["catted"],["cattery"],["cattie"],["cattier"],["catties"],["cattiest"],["cattily"],["catting"],["cattish"],["cattle"],["cattleya"],["catty"],["catwalk"],["catwalks"],["caucus"],["caucused"],["caucuses"],["caudad"],["caudal"],["caudally"],["caudate"],["caudated"],["caudates"],["caudex"],["caudexes"],["caudices"],["caudillo"],["caudle"],["caudles"],["caught"],["caul"],["cauld"],["cauldron"],["caulds"],["caules"],["caulicle"],["cauline"],["caulis"],["caulk"],["caulked"],["caulker"],["caulkers"],["caulking"],["caulks"],["cauls"],["causable"],["causal"],["causally"],["causals"],["cause"],["caused"],["causer"],["causerie"],["causers"],["causes"],["causeway"],["causey"],["causeys"],["causing"],["caustic"],["caustics"],["cautery"],["caution"],["cautions"],["cautious"],["cavalero"],["cavalier"],["cavalla"],["cavallas"],["cavally"],["cavalry"],["cavatina"],["cavatine"],["cave"],["caveat"],["caveated"],["caveator"],["caveats"],["caved"],["cavefish"],["cavelike"],["caveman"],["cavemen"],["caver"],["cavern"],["caverned"],["caverns"],["cavers"],["caves"],["cavetti"],["cavetto"],["cavettos"],["caviar"],["caviare"],["caviares"],["caviars"],["cavicorn"],["cavie"],["cavies"],["cavil"],["caviled"],["caviler"],["cavilers"],["caviling"],["cavilled"],["caviller"],["cavils"],["caving"],["cavings"],["cavitary"],["cavitate"],["cavitied"],["cavities"],["cavity"],["cavort"],["cavorted"],["cavorter"],["cavorts"],["cavy"],["caw"],["cawed"],["cawing"],["caws"],["cay"],["cayenne"],["cayenned"],["cayennes"],["cayman"],["caymans"],["cays"],["cayuse"],["cayuses"],["cazique"],["caziques"],["cease"],["ceased"],["ceases"],["ceasing"],["cebid"],["cebids"],["ceboid"],["ceboids"],["ceca"],["cecal"],["cecally"],["cecum"],["cedar"],["cedarn"],["cedars"],["cede"],["ceded"],["ceder"],["ceders"],["cedes"],["cedi"],["cedilla"],["cedillas"],["ceding"],["cedis"],["cedula"],["cedulas"],["cee"],["cees"],["ceiba"],["ceibas"],["ceil"],["ceiled"],["ceiler"],["ceilers"],["ceiling"],["ceilings"],["ceils"],["ceinture"],["celadon"],["celadons"],["celeb"],["celebs"],["celeriac"],["celeries"],["celerity"],["celery"],["celesta"],["celestas"],["celeste"],["celestes"],["celiac"],["celiacs"],["celibacy"],["celibate"],["cell"],["cella"],["cellae"],["cellar"],["cellared"],["cellarer"],["cellaret"],["cellars"],["celled"],["celli"],["celling"],["cellist"],["cellists"],["cellmate"],["cello"],["cellos"],["cells"],["cellular"],["cellule"],["cellules"],["celom"],["celomata"],["celoms"],["celosia"],["celosias"],["celt"],["celts"],["cembali"],["cembalo"],["cembalos"],["cement"],["cementa"],["cemented"],["cementer"],["cements"],["cementum"],["cemetery"],["cenacle"],["cenacles"],["cenobite"],["cenotaph"],["cenote"],["cenotes"],["cense"],["censed"],["censer"],["censers"],["censes"],["censing"],["censor"],["censored"],["censors"],["censual"],["censure"],["censured"],["censurer"],["censures"],["census"],["censused"],["censuses"],["cent"],["cental"],["centals"],["centare"],["centares"],["centaur"],["centaurs"],["centaury"],["centavo"],["centavos"],["center"],["centered"],["centers"],["centeses"],["centesis"],["centiare"],["centile"],["centiles"],["centime"],["centimes"],["centimo"],["centimos"],["centner"],["centners"],["cento"],["centones"],["centos"],["centra"],["central"],["centrals"],["centre"],["centred"],["centres"],["centric"],["centring"],["centrism"],["centrist"],["centroid"],["centrum"],["centrums"],["cents"],["centum"],["centums"],["centuple"],["century"],["ceorl"],["ceorlish"],["ceorls"],["cep"],["cepe"],["cepes"],["cephalad"],["cephalic"],["cephalin"],["cepheid"],["cepheids"],["ceps"],["ceramal"],["ceramals"],["ceramic"],["ceramics"],["ceramist"],["cerastes"],["cerate"],["cerated"],["cerates"],["ceratin"],["ceratins"],["ceratoid"],["cercaria"],["cerci"],["cercis"],["cercises"],["cercus"],["cere"],["cereal"],["cereals"],["cerebra"],["cerebral"],["cerebric"],["cerebrum"],["cered"],["cerement"],["ceremony"],["ceres"],["cereus"],["cereuses"],["ceria"],["cerias"],["ceric"],["cering"],["ceriph"],["ceriphs"],["cerise"],["cerises"],["cerite"],["cerites"],["cerium"],["ceriums"],["cermet"],["cermets"],["cernuous"],["cero"],["ceros"],["cerotic"],["cerotype"],["cerous"],["certain"],["certes"],["certify"],["cerulean"],["cerumen"],["cerumens"],["ceruse"],["ceruses"],["cerusite"],["cervelas"],["cervelat"],["cervical"],["cervices"],["cervid"],["cervine"],["cervix"],["cervixes"],["cesarean"],["cesarian"],["cesium"],["cesiums"],["cess"],["cessed"],["cesses"],["cessing"],["cession"],["cessions"],["cesspit"],["cesspits"],["cesspool"],["cesta"],["cestas"],["cesti"],["cestode"],["cestodes"],["cestoi"],["cestoid"],["cestoids"],["cestos"],["cestus"],["cestuses"],["cesura"],["cesurae"],["cesuras"],["cetacean"],["cetane"],["cetanes"],["cete"],["cetes"],["cetology"],["ceviche"],["ceviches"],["chablis"],["chabouk"],["chabouks"],["chabuk"],["chabuks"],["chacma"],["chacmas"],["chaconne"],["chad"],["chadar"],["chadarim"],["chadars"],["chadless"],["chador"],["chadors"],["chadri"],["chads"],["chaeta"],["chaetae"],["chaetal"],["chafe"],["chafed"],["chafer"],["chafers"],["chafes"],["chaff"],["chaffed"],["chaffer"],["chaffers"],["chaffier"],["chaffing"],["chaffs"],["chaffy"],["chafing"],["chagrin"],["chagrins"],["chain"],["chaine"],["chained"],["chaines"],["chaining"],["chainman"],["chainmen"],["chains"],["chair"],["chaired"],["chairing"],["chairman"],["chairmen"],["chairs"],["chaise"],["chaises"],["chakra"],["chakras"],["chalah"],["chalahs"],["chalaza"],["chalazae"],["chalazal"],["chalazas"],["chalazia"],["chalcid"],["chalcids"],["chaldron"],["chaleh"],["chalehs"],["chalet"],["chalets"],["chalice"],["chaliced"],["chalices"],["chalk"],["chalked"],["chalkier"],["chalking"],["chalks"],["chalky"],["challa"],["challah"],["challahs"],["challas"],["challie"],["challies"],["challis"],["challot"],["challoth"],["chally"],["chalone"],["chalones"],["chalot"],["chaloth"],["chalutz"],["cham"],["chamade"],["chamades"],["chamber"],["chambers"],["chambray"],["chamfer"],["chamfers"],["chamfron"],["chamise"],["chamises"],["chamiso"],["chamisos"],["chammied"],["chammies"],["chammy"],["chamois"],["chamoix"],["champ"],["champac"],["champacs"],["champak"],["champaks"],["champed"],["champer"],["champers"],["champing"],["champion"],["champs"],["champy"],["chams"],["chance"],["chanced"],["chancel"],["chancels"],["chancery"],["chances"],["chancier"],["chancily"],["chancing"],["chancre"],["chancres"],["chancy"],["chandler"],["chanfron"],["chang"],["change"],["changed"],["changer"],["changers"],["changes"],["changing"],["changs"],["channel"],["channels"],["chanson"],["chansons"],["chant"],["chantage"],["chanted"],["chanter"],["chanters"],["chantey"],["chanteys"],["chanties"],["chanting"],["chantor"],["chantors"],["chantry"],["chants"],["chanty"],["chao"],["chaos"],["chaoses"],["chaotic"],["chap"],["chapati"],["chapatis"],["chapatti"],["chapbook"],["chape"],["chapeau"],["chapeaus"],["chapeaux"],["chapel"],["chapels"],["chaperon"],["chapes"],["chapiter"],["chaplain"],["chaplet"],["chaplets"],["chapman"],["chapmen"],["chapped"],["chapping"],["chaps"],["chapt"],["chapter"],["chapters"],["chaqueta"],["char"],["characid"],["characin"],["charade"],["charades"],["charas"],["charases"],["charcoal"],["chard"],["chards"],["chare"],["chared"],["chares"],["charge"],["charged"],["charger"],["chargers"],["charges"],["charging"],["charier"],["chariest"],["charily"],["charing"],["chariot"],["chariots"],["charism"],["charisma"],["charisms"],["charity"],["chark"],["charka"],["charkas"],["charked"],["charkha"],["charkhas"],["charking"],["charks"],["charlady"],["charley"],["charleys"],["charlie"],["charlies"],["charlock"],["charm"],["charmed"],["charmer"],["charmers"],["charming"],["charms"],["charnel"],["charnels"],["charpai"],["charpais"],["charpoy"],["charpoys"],["charqui"],["charquid"],["charquis"],["charr"],["charred"],["charrier"],["charring"],["charro"],["charros"],["charrs"],["charry"],["chars"],["chart"],["charted"],["charter"],["charters"],["charting"],["chartist"],["charts"],["chary"],["chase"],["chased"],["chaser"],["chasers"],["chases"],["chasing"],["chasings"],["chasm"],["chasmal"],["chasmed"],["chasmic"],["chasms"],["chasmy"],["chasse"],["chassed"],["chasses"],["chasseur"],["chassis"],["chaste"],["chastely"],["chasten"],["chastens"],["chaster"],["chastest"],["chastise"],["chastity"],["chasuble"],["chat"],["chatchka"],["chatchke"],["chateau"],["chateaus"],["chateaux"],["chats"],["chatted"],["chattel"],["chattels"],["chatter"],["chatters"],["chattery"],["chattier"],["chattily"],["chatting"],["chatty"],["chaufer"],["chaufers"],["chauffer"],["chaunt"],["chaunted"],["chaunter"],["chaunts"],["chausses"],["chaw"],["chawed"],["chawer"],["chawers"],["chawing"],["chaws"],["chay"],["chayote"],["chayotes"],["chays"],["chazan"],["chazanim"],["chazans"],["chazzan"],["chazzans"],["chazzen"],["chazzens"],["cheap"],["cheapen"],["cheapens"],["cheaper"],["cheapest"],["cheapie"],["cheapies"],["cheapish"],["cheaply"],["cheapo"],["cheapos"],["cheaps"],["cheat"],["cheated"],["cheater"],["cheaters"],["cheating"],["cheats"],["chebec"],["chebecs"],["chechako"],["check"],["checked"],["checker"],["checkers"],["checking"],["checkoff"],["checkout"],["checkrow"],["checks"],["checkup"],["checkups"],["cheddar"],["cheddars"],["cheddite"],["cheder"],["cheders"],["chedite"],["chedites"],["cheek"],["cheeked"],["cheekful"],["cheekier"],["cheekily"],["cheeking"],["cheeks"],["cheeky"],["cheep"],["cheeped"],["cheeper"],["cheepers"],["cheeping"],["cheeps"],["cheer"],["cheered"],["cheerer"],["cheerers"],["cheerful"],["cheerier"],["cheerily"],["cheering"],["cheerio"],["cheerios"],["cheerled"],["cheerly"],["cheero"],["cheeros"],["cheers"],["cheery"],["cheese"],["cheesed"],["cheeses"],["cheesier"],["cheesily"],["cheesing"],["cheesy"],["cheetah"],["cheetahs"],["chef"],["chefdom"],["chefdoms"],["cheffed"],["cheffing"],["chefs"],["chegoe"],["chegoes"],["chela"],["chelae"],["chelas"],["chelate"],["chelated"],["chelates"],["chelator"],["cheloid"],["cheloids"],["chemic"],["chemical"],["chemics"],["chemise"],["chemises"],["chemism"],["chemisms"],["chemist"],["chemists"],["chemurgy"],["chenille"],["chenopod"],["cheque"],["chequer"],["chequers"],["cheques"],["cherish"],["cheroot"],["cheroots"],["cherries"],["cherry"],["chert"],["chertier"],["cherts"],["cherty"],["cherub"],["cherubic"],["cherubim"],["cherubs"],["chervil"],["chervils"],["chess"],["chesses"],["chessman"],["chessmen"],["chest"],["chested"],["chestful"],["chestier"],["chestnut"],["chests"],["chesty"],["chetah"],["chetahs"],["cheth"],["cheths"],["chetrum"],["chetrums"],["chevalet"],["cheveron"],["chevied"],["chevies"],["cheviot"],["cheviots"],["chevre"],["chevres"],["chevron"],["chevrons"],["chevy"],["chevying"],["chew"],["chewable"],["chewed"],["chewer"],["chewers"],["chewier"],["chewiest"],["chewing"],["chewink"],["chewinks"],["chews"],["chewy"],["chez"],["chi"],["chia"],["chiao"],["chias"],["chiasm"],["chiasma"],["chiasmal"],["chiasmas"],["chiasmi"],["chiasmic"],["chiasms"],["chiasmus"],["chiastic"],["chiaus"],["chiauses"],["chibouk"],["chibouks"],["chic"],["chicane"],["chicaned"],["chicaner"],["chicanes"],["chicano"],["chicanos"],["chiccory"],["chicer"],["chicest"],["chichi"],["chichis"],["chick"],["chickee"],["chickees"],["chicken"],["chickens"],["chickory"],["chickpea"],["chicks"],["chicle"],["chicles"],["chicly"],["chicness"],["chico"],["chicory"],["chicos"],["chics"],["chid"],["chidden"],["chide"],["chided"],["chider"],["chiders"],["chides"],["chiding"],["chief"],["chiefdom"],["chiefer"],["chiefest"],["chiefly"],["chiefs"],["chiel"],["chield"],["chields"],["chiels"],["chiffon"],["chiffons"],["chigetai"],["chigger"],["chiggers"],["chignon"],["chignons"],["chigoe"],["chigoes"],["child"],["childbed"],["childe"],["childes"],["childing"],["childish"],["childly"],["children"],["chile"],["chiles"],["chili"],["chiliad"],["chiliads"],["chiliasm"],["chiliast"],["chilidog"],["chilies"],["chill"],["chilled"],["chiller"],["chillers"],["chillest"],["chilli"],["chillier"],["chillies"],["chillily"],["chilling"],["chills"],["chillum"],["chillums"],["chilly"],["chilopod"],["chimaera"],["chimar"],["chimars"],["chimb"],["chimbley"],["chimbly"],["chimbs"],["chime"],["chimed"],["chimer"],["chimera"],["chimeras"],["chimere"],["chimeres"],["chimeric"],["chimers"],["chimes"],["chiming"],["chimla"],["chimlas"],["chimley"],["chimleys"],["chimney"],["chimneys"],["chimp"],["chimps"],["chin"],["china"],["chinas"],["chinbone"],["chinch"],["chinches"],["chinchy"],["chine"],["chined"],["chines"],["chining"],["chink"],["chinked"],["chinkier"],["chinking"],["chinks"],["chinky"],["chinless"],["chinned"],["chinning"],["chino"],["chinone"],["chinones"],["chinook"],["chinooks"],["chinos"],["chins"],["chints"],["chintses"],["chintz"],["chintzes"],["chintzy"],["chip"],["chipmuck"],["chipmunk"],["chipped"],["chipper"],["chippers"],["chippie"],["chippies"],["chipping"],["chippy"],["chips"],["chiral"],["chirk"],["chirked"],["chirker"],["chirkest"],["chirking"],["chirks"],["chirm"],["chirmed"],["chirming"],["chirms"],["chiro"],["chiros"],["chirp"],["chirped"],["chirper"],["chirpers"],["chirpier"],["chirpily"],["chirping"],["chirps"],["chirpy"],["chirr"],["chirre"],["chirred"],["chirres"],["chirring"],["chirrs"],["chirrup"],["chirrups"],["chirrupy"],["chis"],["chisel"],["chiseled"],["chiseler"],["chisels"],["chit"],["chital"],["chitchat"],["chitin"],["chitins"],["chitlin"],["chitling"],["chitlins"],["chiton"],["chitons"],["chitosan"],["chits"],["chitter"],["chitters"],["chitties"],["chitty"],["chivalry"],["chivaree"],["chivari"],["chive"],["chives"],["chivied"],["chivies"],["chivvied"],["chivvies"],["chivvy"],["chivy"],["chivying"],["chlamys"],["chloasma"],["chloral"],["chlorals"],["chlorate"],["chlordan"],["chloric"],["chlorid"],["chloride"],["chlorids"],["chlorin"],["chlorine"],["chlorins"],["chlorite"],["chlorous"],["choana"],["choanae"],["chock"],["chocked"],["chockful"],["chocking"],["chocks"],["choice"],["choicely"],["choicer"],["choices"],["choicest"],["choir"],["choirboy"],["choired"],["choiring"],["choirs"],["choke"],["choked"],["choker"],["chokers"],["chokes"],["chokey"],["chokier"],["chokiest"],["choking"],["choky"],["cholate"],["cholates"],["cholent"],["cholents"],["choler"],["cholera"],["choleras"],["choleric"],["cholers"],["choline"],["cholines"],["cholla"],["chollas"],["cholo"],["cholos"],["chomp"],["chomped"],["chomper"],["chompers"],["chomping"],["chomps"],["chon"],["choose"],["chooser"],["choosers"],["chooses"],["choosey"],["choosier"],["choosing"],["choosy"],["chop"],["chopin"],["chopine"],["chopines"],["chopins"],["chopped"],["chopper"],["choppers"],["choppier"],["choppily"],["chopping"],["choppy"],["chops"],["choragi"],["choragic"],["choragus"],["choral"],["chorale"],["chorales"],["chorally"],["chorals"],["chord"],["chordal"],["chordate"],["chorded"],["chording"],["chords"],["chore"],["chorea"],["choreal"],["choreas"],["chored"],["choregi"],["choregus"],["choreic"],["choreman"],["choremen"],["choreoid"],["chores"],["chorial"],["choriamb"],["choric"],["chorine"],["chorines"],["choring"],["chorioid"],["chorion"],["chorions"],["chorizo"],["chorizos"],["choroid"],["choroids"],["chortle"],["chortled"],["chortler"],["chortles"],["chorus"],["chorused"],["choruses"],["chose"],["chosen"],["choses"],["chott"],["chotts"],["chough"],["choughs"],["chouse"],["choused"],["chouser"],["chousers"],["chouses"],["choush"],["choushes"],["chousing"],["chow"],["chowchow"],["chowder"],["chowders"],["chowed"],["chowing"],["chows"],["chowse"],["chowsed"],["chowses"],["chowsing"],["chowtime"],["chresard"],["chrism"],["chrisma"],["chrismal"],["chrismon"],["chrisms"],["chrisom"],["chrisoms"],["christen"],["christie"],["christy"],["chroma"],["chromas"],["chromate"],["chrome"],["chromed"],["chromes"],["chromic"],["chromide"],["chroming"],["chromite"],["chromium"],["chromize"],["chromo"],["chromos"],["chromous"],["chromyl"],["chromyls"],["chronaxy"],["chronic"],["chronics"],["chronon"],["chronons"],["chthonic"],["chub"],["chubasco"],["chubbier"],["chubbily"],["chubby"],["chubs"],["chuck"],["chucked"],["chuckies"],["chucking"],["chuckle"],["chuckled"],["chuckler"],["chuckles"],["chucks"],["chucky"],["chuddah"],["chuddahs"],["chuddar"],["chuddars"],["chudder"],["chudders"],["chufa"],["chufas"],["chuff"],["chuffed"],["chuffer"],["chuffest"],["chuffier"],["chuffing"],["chuffs"],["chuffy"],["chug"],["chugalug"],["chugged"],["chugger"],["chuggers"],["chugging"],["chugs"],["chukar"],["chukars"],["chukka"],["chukkar"],["chukkars"],["chukkas"],["chukker"],["chukkers"],["chum"],["chummed"],["chummier"],["chummily"],["chumming"],["chummy"],["chump"],["chumped"],["chumping"],["chumps"],["chums"],["chumship"],["chunk"],["chunked"],["chunkier"],["chunkily"],["chunking"],["chunks"],["chunky"],["chunter"],["chunters"],["church"],["churched"],["churches"],["churchly"],["churchy"],["churl"],["churlish"],["churls"],["churn"],["churned"],["churner"],["churners"],["churning"],["churns"],["churr"],["churred"],["churring"],["churrs"],["chute"],["chuted"],["chutes"],["chuting"],["chutist"],["chutists"],["chutnee"],["chutnees"],["chutney"],["chutneys"],["chutzpa"],["chutzpah"],["chutzpas"],["chyle"],["chyles"],["chylous"],["chyme"],["chymes"],["chymic"],["chymics"],["chymist"],["chymists"],["chymosin"],["chymous"],["ciao"],["cibol"],["cibols"],["ciboria"],["ciborium"],["ciboule"],["ciboules"],["cicada"],["cicadae"],["cicadas"],["cicala"],["cicalas"],["cicale"],["cicatrix"],["cicelies"],["cicely"],["cicero"],["cicerone"],["ciceroni"],["ciceros"],["cichlid"],["cichlids"],["cicisbei"],["cicisbeo"],["cicoree"],["cicorees"],["cider"],["ciders"],["cigar"],["cigaret"],["cigarets"],["cigars"],["cilantro"],["cilia"],["ciliary"],["ciliate"],["ciliated"],["ciliates"],["cilice"],["cilices"],["cilium"],["cimbalom"],["cimex"],["cimices"],["cinch"],["cinched"],["cinches"],["cinching"],["cinchona"],["cincture"],["cinder"],["cindered"],["cinders"],["cindery"],["cine"],["cineast"],["cineaste"],["cineasts"],["cinema"],["cinemas"],["cineol"],["cineole"],["cineoles"],["cineols"],["cinerary"],["cinerin"],["cinerins"],["cines"],["cingula"],["cingulum"],["cinnabar"],["cinnamic"],["cinnamon"],["cinnamyl"],["cinquain"],["cinque"],["cinques"],["cion"],["cions"],["cioppino"],["cipher"],["ciphered"],["ciphers"],["ciphony"],["cipolin"],["cipolins"],["circa"],["circle"],["circled"],["circler"],["circlers"],["circles"],["circlet"],["circlets"],["circling"],["circuit"],["circuits"],["circuity"],["circular"],["circus"],["circuses"],["circusy"],["cire"],["cires"],["cirque"],["cirques"],["cirrate"],["cirri"],["cirriped"],["cirrose"],["cirrous"],["cirrus"],["cirsoid"],["cis"],["cisco"],["ciscoes"],["ciscos"],["cislunar"],["cissies"],["cissoid"],["cissoids"],["cissy"],["cist"],["cistern"],["cisterna"],["cisterns"],["cistron"],["cistrons"],["cists"],["cistus"],["cistuses"],["citable"],["citadel"],["citadels"],["citation"],["citator"],["citators"],["citatory"],["cite"],["citeable"],["cited"],["citer"],["citers"],["cites"],["cithara"],["citharas"],["cither"],["cithern"],["citherns"],["cithers"],["cithren"],["cithrens"],["citied"],["cities"],["citified"],["citifies"],["citify"],["citing"],["citizen"],["citizens"],["citola"],["citolas"],["citole"],["citoles"],["citral"],["citrals"],["citrate"],["citrated"],["citrates"],["citreous"],["citric"],["citrin"],["citrine"],["citrines"],["citrinin"],["citrins"],["citron"],["citrons"],["citrous"],["citrus"],["citruses"],["cittern"],["citterns"],["city"],["cityfied"],["cityward"],["citywide"],["civet"],["civets"],["civic"],["civicism"],["civics"],["civie"],["civies"],["civil"],["civilian"],["civilise"],["civility"],["civilize"],["civilly"],["civism"],["civisms"],["civvies"],["civvy"],["clabber"],["clabbers"],["clach"],["clachan"],["clachans"],["clachs"],["clack"],["clacked"],["clacker"],["clackers"],["clacking"],["clacks"],["clad"],["cladding"],["cladode"],["cladodes"],["clads"],["clag"],["clagged"],["clagging"],["clags"],["claim"],["claimant"],["claimed"],["claimer"],["claimers"],["claiming"],["claims"],["clam"],["clamant"],["clambake"],["clamber"],["clambers"],["clammed"],["clammer"],["clammers"],["clammier"],["clammily"],["clamming"],["clammy"],["clamor"],["clamored"],["clamorer"],["clamors"],["clamour"],["clamours"],["clamp"],["clamped"],["clamper"],["clampers"],["clamping"],["clamps"],["clams"],["clamworm"],["clan"],["clang"],["clanged"],["clanger"],["clangers"],["clanging"],["clangor"],["clangors"],["clangour"],["clangs"],["clank"],["clanked"],["clanking"],["clanks"],["clannish"],["clans"],["clansman"],["clansmen"],["clap"],["clapped"],["clapper"],["clappers"],["clapping"],["claps"],["clapt"],["claptrap"],["claque"],["claquer"],["claquers"],["claques"],["claqueur"],["clarence"],["claret"],["clarets"],["claries"],["clarify"],["clarinet"],["clarion"],["clarions"],["clarity"],["clarkia"],["clarkias"],["claro"],["claroes"],["claros"],["clary"],["clash"],["clashed"],["clasher"],["clashers"],["clashes"],["clashing"],["clasp"],["clasped"],["clasper"],["claspers"],["clasping"],["clasps"],["claspt"],["class"],["classed"],["classer"],["classers"],["classes"],["classic"],["classico"],["classics"],["classier"],["classify"],["classily"],["classing"],["classis"],["classism"],["classist"],["classy"],["clast"],["clastic"],["clastics"],["clasts"],["clatter"],["clatters"],["clattery"],["claucht"],["claught"],["claughts"],["clausal"],["clause"],["clauses"],["claustra"],["clavate"],["clave"],["claver"],["clavered"],["clavers"],["claves"],["clavi"],["clavicle"],["clavier"],["claviers"],["clavus"],["claw"],["clawed"],["clawer"],["clawers"],["clawing"],["clawless"],["claws"],["claxon"],["claxons"],["clay"],["claybank"],["clayed"],["clayey"],["clayier"],["clayiest"],["claying"],["clayish"],["claylike"],["claymore"],["claypan"],["claypans"],["clays"],["clayware"],["clean"],["cleaned"],["cleaner"],["cleaners"],["cleanest"],["cleaning"],["cleanly"],["cleans"],["cleanse"],["cleansed"],["cleanser"],["cleanses"],["cleanup"],["cleanups"],["clear"],["cleared"],["clearer"],["clearers"],["clearest"],["clearing"],["clearly"],["clears"],["cleat"],["cleated"],["cleating"],["cleats"],["cleavage"],["cleave"],["cleaved"],["cleaver"],["cleavers"],["cleaves"],["cleaving"],["cleek"],["cleeked"],["cleeking"],["cleeks"],["clef"],["clefs"],["cleft"],["clefted"],["clefting"],["clefts"],["cleidoic"],["clematis"],["clemency"],["clement"],["clench"],["clenched"],["clencher"],["clenches"],["cleome"],["cleomes"],["clepe"],["cleped"],["clepes"],["cleping"],["clept"],["clergies"],["clergy"],["cleric"],["clerical"],["clerics"],["clerid"],["clerids"],["clerihew"],["clerisy"],["clerk"],["clerkdom"],["clerked"],["clerking"],["clerkish"],["clerkly"],["clerks"],["cleveite"],["clever"],["cleverer"],["cleverly"],["clevis"],["clevises"],["clew"],["clewed"],["clewing"],["clews"],["cliche"],["cliched"],["cliches"],["click"],["clicked"],["clicker"],["clickers"],["clicking"],["clicks"],["client"],["cliental"],["clients"],["cliff"],["cliffier"],["cliffs"],["cliffy"],["clift"],["clifts"],["climatal"],["climate"],["climates"],["climatic"],["climax"],["climaxed"],["climaxes"],["climb"],["climbed"],["climber"],["climbers"],["climbing"],["climbs"],["clime"],["climes"],["clinal"],["clinally"],["clinch"],["clinched"],["clincher"],["clinches"],["cline"],["clines"],["cling"],["clinged"],["clinger"],["clingers"],["clingier"],["clinging"],["clings"],["clingy"],["clinic"],["clinical"],["clinics"],["clink"],["clinked"],["clinker"],["clinkers"],["clinking"],["clinks"],["clip"],["clipped"],["clipper"],["clippers"],["clipping"],["clips"],["clipt"],["clique"],["cliqued"],["cliques"],["cliquey"],["cliquier"],["cliquing"],["cliquish"],["cliquy"],["clitella"],["clitoral"],["clitoric"],["clitoris"],["clivers"],["clivia"],["clivias"],["cloaca"],["cloacae"],["cloacal"],["cloacas"],["cloak"],["cloaked"],["cloaking"],["cloaks"],["clobber"],["clobbers"],["clochard"],["cloche"],["cloches"],["clock"],["clocked"],["clocker"],["clockers"],["clocking"],["clocks"],["clod"],["cloddier"],["cloddish"],["cloddy"],["clodpate"],["clodpole"],["clodpoll"],["clods"],["clog"],["clogged"],["cloggier"],["clogging"],["cloggy"],["clogs"],["cloister"],["clomb"],["clomp"],["clomped"],["clomping"],["clomps"],["clon"],["clonal"],["clonally"],["clone"],["cloned"],["cloner"],["cloners"],["clones"],["clonic"],["cloning"],["clonings"],["clonism"],["clonisms"],["clonk"],["clonked"],["clonking"],["clonks"],["clons"],["clonus"],["clonuses"],["cloot"],["cloots"],["clop"],["clopped"],["clopping"],["clops"],["cloque"],["cloques"],["closable"],["close"],["closed"],["closely"],["closeout"],["closer"],["closers"],["closes"],["closest"],["closet"],["closeted"],["closets"],["closing"],["closings"],["closure"],["closured"],["closures"],["clot"],["cloth"],["clothe"],["clothed"],["clothes"],["clothier"],["clothing"],["cloths"],["clots"],["clotted"],["clotting"],["clotty"],["cloture"],["clotured"],["clotures"],["cloud"],["clouded"],["cloudier"],["cloudily"],["clouding"],["cloudlet"],["clouds"],["cloudy"],["clough"],["cloughs"],["clour"],["cloured"],["clouring"],["clours"],["clout"],["clouted"],["clouter"],["clouters"],["clouting"],["clouts"],["clove"],["cloven"],["clover"],["clovers"],["cloves"],["clowder"],["clowders"],["clown"],["clowned"],["clownery"],["clowning"],["clownish"],["clowns"],["cloy"],["cloyed"],["cloying"],["cloys"],["cloze"],["clozes"],["club"],["clubable"],["clubbed"],["clubber"],["clubbers"],["clubbier"],["clubbing"],["clubby"],["clubfeet"],["clubfoot"],["clubhand"],["clubhaul"],["clubman"],["clubmen"],["clubroom"],["clubroot"],["clubs"],["cluck"],["clucked"],["clucking"],["clucks"],["clue"],["clued"],["clueing"],["clues"],["cluing"],["clumber"],["clumbers"],["clump"],["clumped"],["clumpier"],["clumping"],["clumpish"],["clumps"],["clumpy"],["clumsier"],["clumsily"],["clumsy"],["clung"],["clunk"],["clunked"],["clunker"],["clunkers"],["clunkier"],["clunking"],["clunks"],["clunky"],["clupeid"],["clupeids"],["clupeoid"],["cluster"],["clusters"],["clustery"],["clutch"],["clutched"],["clutches"],["clutchy"],["clutter"],["clutters"],["cluttery"],["clypeal"],["clypeate"],["clypei"],["clypeus"],["clyster"],["clysters"],["coach"],["coached"],["coacher"],["coachers"],["coaches"],["coaching"],["coachman"],["coachmen"],["coact"],["coacted"],["coacting"],["coaction"],["coactive"],["coactor"],["coactors"],["coacts"],["coadmire"],["coadmit"],["coadmits"],["coaeval"],["coaevals"],["coagency"],["coagent"],["coagents"],["coagula"],["coagulum"],["coal"],["coala"],["coalas"],["coalbin"],["coalbins"],["coalbox"],["coaled"],["coaler"],["coalers"],["coalesce"],["coalfish"],["coalhole"],["coalier"],["coaliest"],["coalify"],["coaling"],["coalless"],["coalpit"],["coalpits"],["coals"],["coalsack"],["coalshed"],["coaly"],["coalyard"],["coaming"],["coamings"],["coannex"],["coappear"],["coapt"],["coapted"],["coapting"],["coapts"],["coarse"],["coarsely"],["coarsen"],["coarsens"],["coarser"],["coarsest"],["coassist"],["coassume"],["coast"],["coastal"],["coasted"],["coaster"],["coasters"],["coasting"],["coasts"],["coat"],["coated"],["coatee"],["coatees"],["coater"],["coaters"],["coati"],["coating"],["coatings"],["coatis"],["coatless"],["coatrack"],["coatroom"],["coats"],["coattail"],["coattend"],["coattest"],["coauthor"],["coax"],["coaxal"],["coaxed"],["coaxer"],["coaxers"],["coaxes"],["coaxial"],["coaxing"],["cob"],["cobalt"],["cobaltic"],["cobalts"],["cobb"],["cobber"],["cobbers"],["cobbier"],["cobbiest"],["cobble"],["cobbled"],["cobbler"],["cobblers"],["cobbles"],["cobbling"],["cobbs"],["cobby"],["cobia"],["cobias"],["coble"],["cobles"],["cobnut"],["cobnuts"],["cobra"],["cobras"],["cobs"],["cobweb"],["cobwebby"],["cobwebs"],["coca"],["cocain"],["cocaine"],["cocaines"],["cocains"],["cocas"],["coccal"],["cocci"],["coccic"],["coccid"],["coccidia"],["coccids"],["coccoid"],["coccoids"],["coccous"],["coccus"],["coccyges"],["coccyx"],["coccyxes"],["cochair"],["cochairs"],["cochin"],["cochins"],["cochlea"],["cochleae"],["cochlear"],["cochleas"],["cocinera"],["cock"],["cockade"],["cockaded"],["cockades"],["cockapoo"],["cockatoo"],["cockbill"],["cockboat"],["cockcrow"],["cocked"],["cocker"],["cockered"],["cockerel"],["cockers"],["cockeye"],["cockeyed"],["cockeyes"],["cockier"],["cockiest"],["cockily"],["cocking"],["cockish"],["cockle"],["cockled"],["cockles"],["cocklike"],["cockling"],["cockloft"],["cockney"],["cockneys"],["cockpit"],["cockpits"],["cocks"],["cockshut"],["cockshy"],["cockspur"],["cocksure"],["cocktail"],["cockup"],["cockups"],["cocky"],["coco"],["cocoa"],["cocoanut"],["cocoas"],["cocobola"],["cocobolo"],["cocomat"],["cocomats"],["coconut"],["coconuts"],["cocoon"],["cocooned"],["cocoons"],["cocos"],["cocotte"],["cocottes"],["cocreate"],["cod"],["coda"],["codable"],["codas"],["codded"],["codder"],["codders"],["codding"],["coddle"],["coddled"],["coddler"],["coddlers"],["coddles"],["coddling"],["code"],["codebook"],["codebtor"],["codec"],["codecs"],["coded"],["codeia"],["codeias"],["codein"],["codeina"],["codeinas"],["codeine"],["codeines"],["codeins"],["codeless"],["coden"],["codens"],["coder"],["coderive"],["coders"],["codes"],["codesign"],["codex"],["codfish"],["codger"],["codgers"],["codices"],["codicil"],["codicils"],["codified"],["codifier"],["codifies"],["codify"],["coding"],["codirect"],["codlin"],["codling"],["codlings"],["codlins"],["codon"],["codons"],["codpiece"],["codrive"],["codriven"],["codriver"],["codrives"],["codrove"],["cods"],["coed"],["coedit"],["coedited"],["coeditor"],["coedits"],["coeds"],["coeffect"],["coeliac"],["coelom"],["coelome"],["coelomes"],["coelomic"],["coeloms"],["coembody"],["coemploy"],["coempt"],["coempted"],["coempts"],["coenact"],["coenacts"],["coenamor"],["coendure"],["coenure"],["coenures"],["coenuri"],["coenurus"],["coenzyme"],["coequal"],["coequals"],["coequate"],["coerce"],["coerced"],["coercer"],["coercers"],["coerces"],["coercing"],["coercion"],["coercive"],["coerect"],["coerects"],["coesite"],["coesites"],["coeval"],["coevally"],["coevals"],["coevolve"],["coexert"],["coexerts"],["coexist"],["coexists"],["coextend"],["cofactor"],["coff"],["coffee"],["coffees"],["coffer"],["coffered"],["coffers"],["coffin"],["coffined"],["coffing"],["coffins"],["coffle"],["coffled"],["coffles"],["coffling"],["coffret"],["coffrets"],["coffs"],["cofound"],["cofounds"],["coft"],["cog"],["cogency"],["cogent"],["cogently"],["cogged"],["cogging"],["cogitate"],["cogito"],["cogitos"],["cognac"],["cognacs"],["cognate"],["cognates"],["cognise"],["cognised"],["cognises"],["cognize"],["cognized"],["cognizer"],["cognizes"],["cognomen"],["cognovit"],["cogon"],["cogons"],["cogs"],["cogway"],["cogways"],["cogwheel"],["cohabit"],["cohabits"],["cohead"],["coheaded"],["coheads"],["coheir"],["coheirs"],["cohere"],["cohered"],["coherent"],["coherer"],["coherers"],["coheres"],["cohering"],["cohesion"],["cohesive"],["coho"],["cohobate"],["cohog"],["cohogs"],["coholder"],["cohort"],["cohorts"],["cohos"],["cohosh"],["cohoshes"],["cohost"],["cohosted"],["cohosts"],["cohune"],["cohunes"],["coif"],["coifed"],["coiffe"],["coiffed"],["coiffes"],["coiffeur"],["coiffing"],["coiffure"],["coifing"],["coifs"],["coign"],["coigne"],["coigned"],["coignes"],["coigning"],["coigns"],["coil"],["coiled"],["coiler"],["coilers"],["coiling"],["coils"],["coin"],["coinable"],["coinage"],["coinages"],["coincide"],["coined"],["coiner"],["coiners"],["coinfer"],["coinfers"],["coinhere"],["coining"],["coinmate"],["coins"],["coinsure"],["cointer"],["cointers"],["coinvent"],["coir"],["coirs"],["coistrel"],["coistril"],["coital"],["coitally"],["coition"],["coitions"],["coitus"],["coituses"],["cojoin"],["cojoined"],["cojoins"],["coke"],["coked"],["cokes"],["coking"],["col"],["cola"],["colander"],["colas"],["cold"],["coldcock"],["colder"],["coldest"],["coldish"],["coldly"],["coldness"],["colds"],["cole"],["colead"],["coleader"],["coleads"],["coled"],["coles"],["coleseed"],["coleslaw"],["colessee"],["colessor"],["coleus"],["coleuses"],["colewort"],["colic"],["colicin"],["colicine"],["colicins"],["colicky"],["colics"],["colies"],["coliform"],["colin"],["colinear"],["colins"],["coliseum"],["colistin"],["colitic"],["colitis"],["collage"],["collaged"],["collagen"],["collages"],["collapse"],["collar"],["collard"],["collards"],["collared"],["collaret"],["collars"],["collate"],["collated"],["collates"],["collator"],["collect"],["collects"],["colleen"],["colleens"],["college"],["colleger"],["colleges"],["collegia"],["collet"],["colleted"],["collets"],["collide"],["collided"],["collides"],["collie"],["collied"],["collier"],["colliers"],["colliery"],["collies"],["collins"],["collogue"],["colloid"],["colloids"],["collop"],["collops"],["colloquy"],["collude"],["colluded"],["colluder"],["colludes"],["colluvia"],["colly"],["collying"],["collyria"],["colobi"],["coloboma"],["colobus"],["colocate"],["colog"],["cologne"],["cologned"],["colognes"],["cologs"],["colon"],["colone"],["colonel"],["colonels"],["colones"],["coloni"],["colonial"],["colonic"],["colonics"],["colonies"],["colonise"],["colonist"],["colonize"],["colons"],["colonus"],["colony"],["colophon"],["color"],["colorado"],["colorant"],["colored"],["coloreds"],["colorer"],["colorers"],["colorful"],["coloring"],["colorism"],["colorist"],["colors"],["colossal"],["colossi"],["colossus"],["colotomy"],["colour"],["coloured"],["colourer"],["colours"],["colpitis"],["cols"],["colt"],["colter"],["colters"],["coltish"],["colts"],["colubrid"],["colugo"],["colugos"],["columbic"],["columel"],["columels"],["column"],["columnal"],["columnar"],["columned"],["columns"],["colure"],["colures"],["coly"],["colza"],["colzas"],["coma"],["comade"],["comae"],["comake"],["comaker"],["comakers"],["comakes"],["comaking"],["comal"],["comanage"],["comas"],["comate"],["comates"],["comatic"],["comatik"],["comatiks"],["comatose"],["comatula"],["comb"],["combat"],["combated"],["combater"],["combats"],["combe"],["combed"],["comber"],["combers"],["combes"],["combine"],["combined"],["combiner"],["combines"],["combing"],["combings"],["comblike"],["combo"],["combos"],["combs"],["combust"],["combusts"],["come"],["comeback"],["comedian"],["comedic"],["comedies"],["comedo"],["comedos"],["comedown"],["comedy"],["comelier"],["comelily"],["comely"],["comer"],["comers"],["comes"],["comet"],["cometary"],["cometh"],["comether"],["cometic"],["comets"],["comfier"],["comfiest"],["comfit"],["comfits"],["comfort"],["comforts"],["comfrey"],["comfreys"],["comfy"],["comic"],["comical"],["comics"],["coming"],["comingle"],["comings"],["comitia"],["comitial"],["comities"],["comity"],["comix"],["comma"],["command"],["commando"],["commands"],["commas"],["commata"],["commence"],["commend"],["commends"],["comment"],["comments"],["commerce"],["commie"],["commies"],["commit"],["commits"],["commix"],["commixed"],["commixes"],["commixt"],["commode"],["commodes"],["common"],["commoner"],["commonly"],["commons"],["commove"],["commoved"],["commoves"],["communal"],["commune"],["communed"],["communes"],["commute"],["commuted"],["commuter"],["commutes"],["commy"],["comose"],["comous"],["comp"],["compact"],["compacts"],["compadre"],["company"],["compare"],["compared"],["comparer"],["compares"],["compart"],["comparts"],["compass"],["comped"],["compeer"],["compeers"],["compel"],["compels"],["compend"],["compends"],["compere"],["compered"],["comperes"],["compete"],["competed"],["competes"],["compile"],["compiled"],["compiler"],["compiles"],["comping"],["complain"],["compleat"],["complect"],["complete"],["complex"],["complice"],["complied"],["complier"],["complies"],["complin"],["compline"],["complins"],["complot"],["complots"],["comply"],["compo"],["compone"],["compony"],["comport"],["comports"],["compos"],["compose"],["composed"],["composer"],["composes"],["compost"],["composts"],["compote"],["compotes"],["compound"],["compress"],["comprise"],["comprize"],["comps"],["compt"],["compted"],["compting"],["compts"],["compute"],["computed"],["computer"],["computes"],["comrade"],["comrades"],["comsymp"],["comsymps"],["comte"],["comtes"],["con"],["conation"],["conative"],["conatus"],["concave"],["concaved"],["concaves"],["conceal"],["conceals"],["concede"],["conceded"],["conceder"],["concedes"],["conceit"],["conceits"],["conceive"],["concent"],["concents"],["concept"],["concepts"],["concern"],["concerns"],["concert"],["concerti"],["concerto"],["concerts"],["conch"],["concha"],["conchae"],["conchal"],["conches"],["conchie"],["conchies"],["conchoid"],["conchs"],["conchy"],["concise"],["conciser"],["conclave"],["conclude"],["concoct"],["concocts"],["concord"],["concords"],["concrete"],["concur"],["concurs"],["concuss"],["condemn"],["condemns"],["condense"],["condign"],["condo"],["condoes"],["condole"],["condoled"],["condoler"],["condoles"],["condom"],["condoms"],["condone"],["condoned"],["condoner"],["condones"],["condor"],["condores"],["condors"],["condos"],["conduce"],["conduced"],["conducer"],["conduces"],["conduct"],["conducts"],["conduit"],["conduits"],["condylar"],["condyle"],["condyles"],["cone"],["coned"],["conelrad"],["conenose"],["conepate"],["conepatl"],["cones"],["coney"],["coneys"],["confab"],["confabs"],["confect"],["confects"],["confer"],["conferee"],["confers"],["conferva"],["confess"],["confetti"],["confetto"],["confide"],["confided"],["confider"],["confides"],["confine"],["confined"],["confiner"],["confines"],["confirm"],["confirms"],["conflate"],["conflict"],["conflux"],["confocal"],["conform"],["conforms"],["confound"],["confrere"],["confront"],["confuse"],["confused"],["confuses"],["confute"],["confuted"],["confuter"],["confutes"],["conga"],["congaed"],["congaing"],["congas"],["conge"],["congeal"],["congeals"],["congee"],["congeed"],["congees"],["congener"],["conger"],["congers"],["conges"],["congest"],["congests"],["congii"],["congius"],["conglobe"],["congo"],["congoes"],["congos"],["congou"],["congous"],["congrats"],["congress"],["coni"],["conic"],["conical"],["conicity"],["conics"],["conidia"],["conidial"],["conidian"],["conidium"],["conies"],["conifer"],["conifers"],["coniine"],["coniines"],["conin"],["conine"],["conines"],["coning"],["conins"],["conioses"],["coniosis"],["conium"],["coniums"],["conjoin"],["conjoins"],["conjoint"],["conjugal"],["conjunct"],["conjure"],["conjured"],["conjurer"],["conjures"],["conjuror"],["conk"],["conked"],["conker"],["conkers"],["conking"],["conks"],["conky"],["conn"],["connate"],["connect"],["connects"],["conned"],["conner"],["conners"],["conning"],["connive"],["connived"],["conniver"],["connives"],["connote"],["connoted"],["connotes"],["conns"],["conodont"],["conoid"],["conoidal"],["conoids"],["conquer"],["conquers"],["conquest"],["conquian"],["cons"],["consent"],["consents"],["conserve"],["consider"],["consign"],["consigns"],["consist"],["consists"],["consol"],["console"],["consoled"],["consoler"],["consoles"],["consols"],["consomme"],["consort"],["consorts"],["conspire"],["constant"],["construe"],["consul"],["consular"],["consuls"],["consult"],["consults"],["consume"],["consumed"],["consumer"],["consumes"],["contact"],["contacts"],["contagia"],["contain"],["contains"],["conte"],["contemn"],["contemns"],["contempt"],["contend"],["contends"],["content"],["contents"],["contes"],["contest"],["contests"],["context"],["contexts"],["continua"],["continue"],["continuo"],["conto"],["contort"],["contorts"],["contos"],["contour"],["contours"],["contra"],["contract"],["contrail"],["contrary"],["contras"],["contrast"],["contrite"],["contrive"],["control"],["controls"],["contuse"],["contused"],["contuses"],["conus"],["convect"],["convects"],["convene"],["convened"],["convener"],["convenes"],["convenor"],["convent"],["convents"],["converge"],["converse"],["convert"],["converts"],["convex"],["convexes"],["convexly"],["convey"],["conveyed"],["conveyer"],["conveyor"],["conveys"],["convict"],["convicts"],["convince"],["convoke"],["convoked"],["convoker"],["convokes"],["convolve"],["convoy"],["convoyed"],["convoys"],["convulse"],["cony"],["coo"],["cooch"],["cooches"],["coocoo"],["cooed"],["cooee"],["cooeed"],["cooeeing"],["cooees"],["cooer"],["cooers"],["cooey"],["cooeyed"],["cooeying"],["cooeys"],["coof"],["coofs"],["cooing"],["cooingly"],["cook"],["cookable"],["cookbook"],["cooked"],["cooker"],["cookers"],["cookery"],["cookey"],["cookeys"],["cookie"],["cookies"],["cooking"],["cookings"],["cookless"],["cookout"],["cookouts"],["cooks"],["cookshop"],["cookware"],["cooky"],["cool"],["coolant"],["coolants"],["cooled"],["cooler"],["coolers"],["coolest"],["coolie"],["coolies"],["cooling"],["coolish"],["coolly"],["coolness"],["cools"],["coolth"],["coolths"],["cooly"],["coomb"],["coombe"],["coombes"],["coombs"],["coon"],["cooncan"],["cooncans"],["coons"],["coonskin"],["coontie"],["coonties"],["coop"],["cooped"],["cooper"],["coopered"],["coopers"],["coopery"],["cooping"],["coops"],["coopt"],["coopted"],["coopting"],["cooption"],["coopts"],["coos"],["coot"],["cootie"],["cooties"],["coots"],["cop"],["copaiba"],["copaibas"],["copal"],["copalm"],["copalms"],["copals"],["coparent"],["copastor"],["copatron"],["cope"],["copeck"],["copecks"],["coped"],["copemate"],["copen"],["copens"],["copepod"],["copepods"],["coper"],["copers"],["copes"],["copied"],["copier"],["copiers"],["copies"],["copihue"],["copihues"],["copilot"],["copilots"],["coping"],["copings"],["copious"],["coplanar"],["coplot"],["coplots"],["copped"],["copper"],["copperah"],["copperas"],["coppered"],["coppers"],["coppery"],["coppice"],["coppiced"],["coppices"],["copping"],["coppra"],["coppras"],["copra"],["coprah"],["coprahs"],["copras"],["copremia"],["copremic"],["coprince"],["cops"],["copse"],["copses"],["copter"],["copters"],["copula"],["copulae"],["copular"],["copulas"],["copulate"],["copurify"],["copy"],["copybook"],["copyboy"],["copyboys"],["copycat"],["copycats"],["copydesk"],["copyedit"],["copyhold"],["copying"],["copyist"],["copyists"],["copyread"],["coquet"],["coquetry"],["coquets"],["coquette"],["coquille"],["coquina"],["coquinas"],["coquito"],["coquitos"],["cor"],["coracle"],["coracles"],["coracoid"],["coral"],["corals"],["coranto"],["corantos"],["corban"],["corbans"],["corbeil"],["corbeils"],["corbel"],["corbeled"],["corbels"],["corbie"],["corbies"],["corbina"],["corbinas"],["corby"],["cord"],["cordage"],["cordages"],["cordate"],["corded"],["cordelle"],["corder"],["corders"],["cordial"],["cordials"],["cording"],["cordings"],["cordite"],["cordites"],["cordless"],["cordlike"],["cordoba"],["cordobas"],["cordon"],["cordoned"],["cordons"],["cordovan"],["cords"],["corduroy"],["cordwain"],["cordwood"],["core"],["cored"],["coredeem"],["coreign"],["coreigns"],["corelate"],["coreless"],["coremia"],["coremium"],["corer"],["corers"],["cores"],["corf"],["corgi"],["corgis"],["coria"],["coring"],["corium"],["cork"],["corkage"],["corkages"],["corked"],["corker"],["corkers"],["corkier"],["corkiest"],["corking"],["corklike"],["corks"],["corkwood"],["corky"],["corm"],["cormel"],["cormels"],["cormlike"],["cormoid"],["cormous"],["corms"],["corn"],["cornball"],["corncake"],["corncob"],["corncobs"],["corncrib"],["cornea"],["corneal"],["corneas"],["corned"],["cornel"],["cornels"],["corneous"],["corner"],["cornered"],["corners"],["cornet"],["cornetcy"],["cornets"],["cornfed"],["cornhusk"],["cornice"],["corniced"],["cornices"],["corniche"],["cornicle"],["cornier"],["corniest"],["cornily"],["corning"],["cornmeal"],["cornrow"],["cornrows"],["corns"],["cornu"],["cornua"],["cornual"],["cornus"],["cornuses"],["cornute"],["cornuted"],["cornuto"],["cornutos"],["corny"],["corodies"],["corody"],["corolla"],["corollas"],["corona"],["coronach"],["coronae"],["coronal"],["coronals"],["coronary"],["coronas"],["coronel"],["coronels"],["coroner"],["coroners"],["coronet"],["coronets"],["coronoid"],["corotate"],["corpora"],["corporal"],["corps"],["corpse"],["corpses"],["corpsman"],["corpsmen"],["corpus"],["corrade"],["corraded"],["corrades"],["corral"],["corrals"],["correct"],["corrects"],["corrida"],["corridas"],["corridor"],["corrie"],["corries"],["corrival"],["corrode"],["corroded"],["corrodes"],["corrody"],["corrupt"],["corrupts"],["corsac"],["corsacs"],["corsage"],["corsages"],["corsair"],["corsairs"],["corse"],["corselet"],["corses"],["corset"],["corseted"],["corsetry"],["corsets"],["corslet"],["corslets"],["cortege"],["corteges"],["cortex"],["cortexes"],["cortical"],["cortices"],["cortin"],["cortins"],["cortisol"],["corundum"],["corvee"],["corvees"],["corves"],["corvet"],["corvets"],["corvette"],["corvina"],["corvinas"],["corvine"],["cory"],["corybant"],["corymb"],["corymbed"],["corymbs"],["coryphee"],["coryza"],["coryzal"],["coryzas"],["cos"],["coscript"],["cosec"],["cosecant"],["cosecs"],["coses"],["coset"],["cosets"],["cosey"],["coseys"],["cosh"],["coshed"],["cosher"],["coshered"],["coshers"],["coshes"],["coshing"],["cosie"],["cosied"],["cosier"],["cosies"],["cosiest"],["cosign"],["cosigned"],["cosigner"],["cosigns"],["cosily"],["cosine"],["cosines"],["cosiness"],["cosmetic"],["cosmic"],["cosmical"],["cosmism"],["cosmisms"],["cosmist"],["cosmists"],["cosmos"],["cosmoses"],["coss"],["cossack"],["cossacks"],["cosset"],["cosseted"],["cossets"],["cost"],["costa"],["costae"],["costal"],["costar"],["costard"],["costards"],["costars"],["costate"],["costed"],["coster"],["costers"],["costing"],["costive"],["costless"],["costlier"],["costly"],["costmary"],["costrel"],["costrels"],["costs"],["costume"],["costumed"],["costumer"],["costumes"],["costumey"],["cosy"],["cosying"],["cot"],["cotan"],["cotans"],["cote"],["coteau"],["coteaux"],["coted"],["cotenant"],["coterie"],["coteries"],["cotes"],["cothurn"],["cothurni"],["cothurns"],["cotidal"],["cotillon"],["coting"],["cotquean"],["cots"],["cotta"],["cottae"],["cottage"],["cottager"],["cottages"],["cottagey"],["cottar"],["cottars"],["cottas"],["cotter"],["cotters"],["cottier"],["cottiers"],["cotton"],["cottoned"],["cottons"],["cottony"],["cotyloid"],["cotype"],["cotypes"],["couch"],["couchant"],["couched"],["coucher"],["couchers"],["couches"],["couching"],["coude"],["cougar"],["cougars"],["cough"],["coughed"],["cougher"],["coughers"],["coughing"],["coughs"],["could"],["couldest"],["couldst"],["coulee"],["coulees"],["coulisse"],["couloir"],["couloirs"],["coulomb"],["coulombs"],["coulter"],["coulters"],["coumaric"],["coumarin"],["coumarou"],["council"],["councils"],["counsel"],["counsels"],["count"],["counted"],["counter"],["counters"],["countess"],["countian"],["counties"],["counting"],["country"],["counts"],["county"],["coup"],["coupe"],["couped"],["coupes"],["couping"],["couple"],["coupled"],["coupler"],["couplers"],["couples"],["couplet"],["couplets"],["coupling"],["coupon"],["coupons"],["coups"],["courage"],["courages"],["courant"],["courante"],["couranto"],["courants"],["courier"],["couriers"],["courlan"],["courlans"],["course"],["coursed"],["courser"],["coursers"],["courses"],["coursing"],["court"],["courted"],["courter"],["courters"],["courtesy"],["courtier"],["courting"],["courtly"],["courts"],["couscous"],["cousin"],["cousinly"],["cousinry"],["cousins"],["couteau"],["couteaux"],["couter"],["couters"],["couth"],["couther"],["couthest"],["couthie"],["couthier"],["couths"],["couture"],["coutures"],["couvade"],["couvades"],["covalent"],["cove"],["coved"],["coven"],["covenant"],["covens"],["cover"],["coverage"],["coverall"],["covered"],["coverer"],["coverers"],["covering"],["coverlet"],["coverlid"],["covers"],["covert"],["covertly"],["coverts"],["coverup"],["coverups"],["coves"],["covet"],["coveted"],["coveter"],["coveters"],["coveting"],["covetous"],["covets"],["covey"],["coveys"],["covin"],["coving"],["covings"],["covins"],["cow"],["cowage"],["cowages"],["coward"],["cowardly"],["cowards"],["cowbane"],["cowbanes"],["cowbell"],["cowbells"],["cowberry"],["cowbind"],["cowbinds"],["cowbird"],["cowbirds"],["cowboy"],["cowboys"],["cowed"],["cowedly"],["cower"],["cowered"],["cowering"],["cowers"],["cowfish"],["cowflap"],["cowflaps"],["cowflop"],["cowflops"],["cowgirl"],["cowgirls"],["cowhage"],["cowhages"],["cowhand"],["cowhands"],["cowherb"],["cowherbs"],["cowherd"],["cowherds"],["cowhide"],["cowhided"],["cowhides"],["cowier"],["cowiest"],["cowing"],["cowinner"],["cowl"],["cowled"],["cowlick"],["cowlicks"],["cowling"],["cowlings"],["cowls"],["cowman"],["cowmen"],["coworker"],["cowpat"],["cowpats"],["cowpea"],["cowpeas"],["cowpie"],["cowpies"],["cowplop"],["cowplops"],["cowpoke"],["cowpokes"],["cowpox"],["cowpoxes"],["cowrie"],["cowries"],["cowrite"],["cowrites"],["cowrote"],["cowry"],["cows"],["cowshed"],["cowsheds"],["cowskin"],["cowskins"],["cowslip"],["cowslips"],["cowy"],["cox"],["coxa"],["coxae"],["coxal"],["coxalgia"],["coxalgic"],["coxalgy"],["coxcomb"],["coxcombs"],["coxed"],["coxes"],["coxing"],["coxitis"],["coxswain"],["coy"],["coydog"],["coydogs"],["coyed"],["coyer"],["coyest"],["coying"],["coyish"],["coyly"],["coyness"],["coyote"],["coyotes"],["coypou"],["coypous"],["coypu"],["coypus"],["coys"],["coz"],["cozen"],["cozenage"],["cozened"],["cozener"],["cozeners"],["cozening"],["cozens"],["cozes"],["cozey"],["cozeys"],["cozie"],["cozied"],["cozier"],["cozies"],["coziest"],["cozily"],["coziness"],["cozy"],["cozying"],["cozzes"],["craal"],["craaled"],["craaling"],["craals"],["crab"],["crabbed"],["crabber"],["crabbers"],["crabbier"],["crabbily"],["crabbing"],["crabby"],["crabmeat"],["crabs"],["crabwise"],["crack"],["cracked"],["cracker"],["crackers"],["cracking"],["crackle"],["crackled"],["crackles"],["crackly"],["cracknel"],["crackpot"],["cracks"],["crackup"],["crackups"],["cracky"],["cradle"],["cradled"],["cradler"],["cradlers"],["cradles"],["cradling"],["craft"],["crafted"],["craftier"],["craftily"],["crafting"],["crafts"],["crafty"],["crag"],["cragged"],["craggier"],["craggily"],["craggy"],["crags"],["cragsman"],["cragsmen"],["crake"],["crakes"],["cram"],["crambe"],["crambes"],["crambo"],["cramboes"],["crambos"],["crammed"],["crammer"],["crammers"],["cramming"],["cramoisy"],["cramp"],["cramped"],["cramping"],["crampit"],["crampits"],["crampon"],["crampons"],["crampoon"],["cramps"],["crams"],["cranch"],["cranched"],["cranches"],["crane"],["craned"],["cranes"],["crania"],["cranial"],["craniate"],["craning"],["cranium"],["craniums"],["crank"],["cranked"],["cranker"],["crankest"],["crankier"],["crankily"],["cranking"],["crankle"],["crankled"],["crankles"],["crankly"],["crankous"],["crankpin"],["cranks"],["cranky"],["crannied"],["crannies"],["crannog"],["crannoge"],["crannogs"],["cranny"],["crap"],["crape"],["craped"],["crapes"],["craping"],["crapped"],["crapper"],["crappers"],["crappie"],["crappier"],["crappies"],["crapping"],["crappy"],["craps"],["crases"],["crash"],["crashed"],["crasher"],["crashers"],["crashes"],["crashing"],["crasis"],["crass"],["crasser"],["crassest"],["crassly"],["cratch"],["cratches"],["crate"],["crated"],["crater"],["cratered"],["craters"],["crates"],["crating"],["craton"],["cratonic"],["cratons"],["craunch"],["cravat"],["cravats"],["crave"],["craved"],["craven"],["cravened"],["cravenly"],["cravens"],["craver"],["cravers"],["craves"],["craving"],["cravings"],["craw"],["crawdad"],["crawdads"],["crawfish"],["crawl"],["crawled"],["crawler"],["crawlers"],["crawlier"],["crawling"],["crawls"],["crawlway"],["crawly"],["craws"],["crayfish"],["crayon"],["crayoned"],["crayons"],["craze"],["crazed"],["crazes"],["crazier"],["crazies"],["craziest"],["crazily"],["crazing"],["crazy"],["creak"],["creaked"],["creakier"],["creakily"],["creaking"],["creaks"],["creaky"],["cream"],["creamed"],["creamer"],["creamers"],["creamery"],["creamier"],["creamily"],["creaming"],["creams"],["creamy"],["crease"],["creased"],["creaser"],["creasers"],["creases"],["creasier"],["creasing"],["creasy"],["create"],["created"],["creates"],["creatin"],["creatine"],["creating"],["creatins"],["creation"],["creative"],["creator"],["creators"],["creature"],["creche"],["creches"],["credal"],["credence"],["credenda"],["credent"],["credenza"],["credible"],["credibly"],["credit"],["credited"],["creditor"],["credits"],["credo"],["credos"],["creed"],["creedal"],["creeds"],["creek"],["creeks"],["creel"],["creeled"],["creeling"],["creels"],["creep"],["creepage"],["creeper"],["creepers"],["creepie"],["creepier"],["creepies"],["creepily"],["creeping"],["creeps"],["creepy"],["creese"],["creeses"],["creesh"],["creeshed"],["creeshes"],["cremains"],["cremate"],["cremated"],["cremates"],["cremator"],["creme"],["cremes"],["crenate"],["crenated"],["crenel"],["creneled"],["crenelle"],["crenels"],["creodont"],["creole"],["creoles"],["creosol"],["creosols"],["creosote"],["crepe"],["creped"],["crepes"],["crepey"],["crepier"],["crepiest"],["creping"],["crepon"],["crepons"],["crept"],["crepy"],["crescent"],["crescive"],["cresol"],["cresols"],["cress"],["cresses"],["cresset"],["cressets"],["crest"],["crestal"],["crested"],["cresting"],["crests"],["cresyl"],["cresylic"],["cresyls"],["cretic"],["cretics"],["cretin"],["cretins"],["cretonne"],["crevalle"],["crevasse"],["crevice"],["creviced"],["crevices"],["crew"],["crewed"],["crewel"],["crewels"],["crewing"],["crewless"],["crewman"],["crewmen"],["crewneck"],["crews"],["crib"],["cribbage"],["cribbed"],["cribber"],["cribbers"],["cribbing"],["cribbled"],["cribrous"],["cribs"],["cribwork"],["cricetid"],["crick"],["cricked"],["cricket"],["crickets"],["crickey"],["cricking"],["cricks"],["cricoid"],["cricoids"],["cried"],["crier"],["criers"],["cries"],["crikey"],["crime"],["crimes"],["criminal"],["crimmer"],["crimmers"],["crimp"],["crimped"],["crimper"],["crimpers"],["crimpier"],["crimping"],["crimple"],["crimpled"],["crimples"],["crimps"],["crimpy"],["crimson"],["crimsons"],["cringe"],["cringed"],["cringer"],["cringers"],["cringes"],["cringing"],["cringle"],["cringles"],["crinite"],["crinites"],["crinkle"],["crinkled"],["crinkles"],["crinkly"],["crinoid"],["crinoids"],["crinum"],["crinums"],["criollo"],["criollos"],["cripe"],["cripes"],["cripple"],["crippled"],["crippler"],["cripples"],["cris"],["crises"],["crisic"],["crisis"],["crisp"],["crispate"],["crisped"],["crispen"],["crispens"],["crisper"],["crispers"],["crispest"],["crispier"],["crispily"],["crisping"],["crisply"],["crisps"],["crispy"],["crissa"],["crissal"],["crissum"],["crista"],["cristae"],["cristate"],["criteria"],["critic"],["critical"],["critics"],["critique"],["critter"],["critters"],["crittur"],["critturs"],["croak"],["croaked"],["croaker"],["croakers"],["croakier"],["croakily"],["croaking"],["croaks"],["croaky"],["croc"],["crocein"],["croceine"],["croceins"],["crochet"],["crochets"],["croci"],["crocine"],["crock"],["crocked"],["crockery"],["crocket"],["crockets"],["crocking"],["crocks"],["crocoite"],["crocs"],["crocus"],["crocuses"],["croft"],["crofter"],["crofters"],["crofts"],["crojik"],["crojiks"],["cromlech"],["crone"],["crones"],["cronies"],["crony"],["cronyism"],["crook"],["crooked"],["crookery"],["crooking"],["crooks"],["croon"],["crooned"],["crooner"],["crooners"],["crooning"],["croons"],["crop"],["cropland"],["cropless"],["cropped"],["cropper"],["croppers"],["croppie"],["croppies"],["cropping"],["crops"],["croquet"],["croquets"],["croquis"],["crore"],["crores"],["crosier"],["crosiers"],["cross"],["crossarm"],["crossbar"],["crossbow"],["crosscut"],["crosse"],["crossed"],["crosser"],["crossers"],["crosses"],["crossest"],["crossing"],["crosslet"],["crossly"],["crosstie"],["crossway"],["crotch"],["crotched"],["crotches"],["crotchet"],["croton"],["crotons"],["crouch"],["crouched"],["crouches"],["croup"],["croupe"],["croupes"],["croupier"],["croupily"],["croupous"],["croups"],["croupy"],["crouse"],["crousely"],["crouton"],["croutons"],["crow"],["crowbar"],["crowbars"],["crowd"],["crowded"],["crowder"],["crowders"],["crowdie"],["crowdies"],["crowding"],["crowds"],["crowdy"],["crowed"],["crower"],["crowers"],["crowfeet"],["crowfoot"],["crowing"],["crown"],["crowned"],["crowner"],["crowners"],["crownet"],["crownets"],["crowning"],["crowns"],["crows"],["crowstep"],["croze"],["crozer"],["crozers"],["crozes"],["crozier"],["croziers"],["cruces"],["crucial"],["crucian"],["crucians"],["cruciate"],["crucible"],["crucifer"],["crucifix"],["crucify"],["cruck"],["crucks"],["crud"],["crudded"],["cruddier"],["crudding"],["cruddy"],["crude"],["crudely"],["cruder"],["crudes"],["crudest"],["crudites"],["crudity"],["cruds"],["cruel"],["crueler"],["cruelest"],["crueller"],["cruelly"],["cruelty"],["cruet"],["cruets"],["cruise"],["cruised"],["cruiser"],["cruisers"],["cruises"],["cruising"],["cruller"],["crullers"],["crumb"],["crumbed"],["crumber"],["crumbers"],["crumbier"],["crumbing"],["crumble"],["crumbled"],["crumbles"],["crumbly"],["crumbs"],["crumbum"],["crumbums"],["crumby"],["crumhorn"],["crummie"],["crummier"],["crummies"],["crummy"],["crump"],["crumped"],["crumpet"],["crumpets"],["crumping"],["crumple"],["crumpled"],["crumples"],["crumply"],["crumps"],["crunch"],["crunched"],["cruncher"],["crunches"],["crunchy"],["crunodal"],["crunode"],["crunodes"],["cruor"],["cruors"],["crupper"],["cruppers"],["crura"],["crural"],["crus"],["crusade"],["crusaded"],["crusader"],["crusades"],["crusado"],["crusados"],["cruse"],["cruses"],["cruset"],["crusets"],["crush"],["crushed"],["crusher"],["crushers"],["crushes"],["crushing"],["crusily"],["crust"],["crustal"],["crusted"],["crustier"],["crustily"],["crusting"],["crustose"],["crusts"],["crusty"],["crutch"],["crutched"],["crutches"],["crux"],["cruxes"],["cruzado"],["cruzados"],["cruzeiro"],["crwth"],["crwths"],["cry"],["crybaby"],["crying"],["cryingly"],["cryogen"],["cryogens"],["cryogeny"],["cryolite"],["cryonic"],["cryonics"],["cryostat"],["cryotron"],["crypt"],["cryptal"],["cryptic"],["crypto"],["cryptos"],["crypts"],["crystal"],["crystals"],["ctenidia"],["ctenoid"],["cub"],["cubage"],["cubages"],["cubature"],["cubbies"],["cubbish"],["cubby"],["cube"],["cubeb"],["cubebs"],["cubed"],["cuber"],["cubers"],["cubes"],["cubic"],["cubical"],["cubicity"],["cubicle"],["cubicles"],["cubicly"],["cubics"],["cubicula"],["cubiform"],["cubing"],["cubism"],["cubisms"],["cubist"],["cubistic"],["cubists"],["cubit"],["cubital"],["cubits"],["cuboid"],["cuboidal"],["cuboids"],["cubs"],["cuckold"],["cuckolds"],["cuckoo"],["cuckooed"],["cuckoos"],["cucumber"],["cucurbit"],["cud"],["cudbear"],["cudbears"],["cuddie"],["cuddies"],["cuddle"],["cuddled"],["cuddles"],["cuddlier"],["cuddling"],["cuddly"],["cuddy"],["cudgel"],["cudgeled"],["cudgeler"],["cudgels"],["cuds"],["cudweed"],["cudweeds"],["cue"],["cued"],["cueing"],["cues"],["cuesta"],["cuestas"],["cuff"],["cuffed"],["cuffing"],["cuffless"],["cuffs"],["cuif"],["cuifs"],["cuing"],["cuirass"],["cuish"],["cuishes"],["cuisine"],["cuisines"],["cuisse"],["cuisses"],["cuittle"],["cuittled"],["cuittles"],["cuke"],["cukes"],["culch"],["culches"],["culet"],["culets"],["culex"],["culices"],["culicid"],["culicids"],["culicine"],["culinary"],["cull"],["cullay"],["cullays"],["culled"],["culler"],["cullers"],["cullet"],["cullets"],["cullied"],["cullies"],["culling"],["cullion"],["cullions"],["cullis"],["cullises"],["culls"],["cully"],["cullying"],["culm"],["culmed"],["culming"],["culms"],["culotte"],["culottes"],["culpa"],["culpable"],["culpably"],["culpae"],["culprit"],["culprits"],["cult"],["cultch"],["cultches"],["culti"],["cultic"],["cultigen"],["cultish"],["cultism"],["cultisms"],["cultist"],["cultists"],["cultivar"],["cultrate"],["cults"],["cultural"],["culture"],["cultured"],["cultures"],["cultus"],["cultuses"],["culver"],["culverin"],["culvers"],["culvert"],["culverts"],["cum"],["cumarin"],["cumarins"],["cumber"],["cumbered"],["cumberer"],["cumbers"],["cumbrous"],["cumin"],["cumins"],["cummer"],["cummers"],["cummin"],["cummins"],["cumquat"],["cumquats"],["cumshaw"],["cumshaws"],["cumulate"],["cumuli"],["cumulous"],["cumulus"],["cundum"],["cundums"],["cuneal"],["cuneate"],["cuneated"],["cuneatic"],["cuniform"],["cunner"],["cunners"],["cunning"],["cunnings"],["cunt"],["cunts"],["cup"],["cupboard"],["cupcake"],["cupcakes"],["cupel"],["cupeled"],["cupeler"],["cupelers"],["cupeling"],["cupelled"],["cupeller"],["cupels"],["cupful"],["cupfuls"],["cupid"],["cupidity"],["cupids"],["cuplike"],["cupola"],["cupolaed"],["cupolas"],["cuppa"],["cuppas"],["cupped"],["cupper"],["cuppers"],["cuppier"],["cuppiest"],["cupping"],["cuppings"],["cuppy"],["cupreous"],["cupric"],["cuprite"],["cuprites"],["cuprous"],["cuprum"],["cuprums"],["cups"],["cupsful"],["cupula"],["cupulae"],["cupular"],["cupulate"],["cupule"],["cupules"],["cur"],["curable"],["curably"],["curacao"],["curacaos"],["curacies"],["curacoa"],["curacoas"],["curacy"],["curagh"],["curaghs"],["curara"],["curaras"],["curare"],["curares"],["curari"],["curarine"],["curaris"],["curarize"],["curassow"],["curate"],["curates"],["curative"],["curator"],["curators"],["curb"],["curbable"],["curbed"],["curber"],["curbers"],["curbing"],["curbings"],["curbs"],["curbside"],["curch"],["curches"],["curculio"],["curcuma"],["curcumas"],["curd"],["curded"],["curdier"],["curdiest"],["curding"],["curdle"],["curdled"],["curdler"],["curdlers"],["curdles"],["curdling"],["curds"],["curdy"],["cure"],["cured"],["cureless"],["curer"],["curers"],["cures"],["curet"],["curets"],["curette"],["curetted"],["curettes"],["curf"],["curfew"],["curfews"],["curfs"],["curia"],["curiae"],["curial"],["curie"],["curies"],["curing"],["curio"],["curios"],["curiosa"],["curious"],["curite"],["curites"],["curium"],["curiums"],["curl"],["curled"],["curler"],["curlers"],["curlew"],["curlews"],["curlicue"],["curlier"],["curliest"],["curlily"],["curling"],["curlings"],["curls"],["curly"],["curlycue"],["curn"],["curns"],["curr"],["currach"],["currachs"],["curragh"],["curraghs"],["curran"],["currans"],["currant"],["currants"],["curred"],["currency"],["current"],["currents"],["curricle"],["currie"],["curried"],["currier"],["curriers"],["curriery"],["curries"],["curring"],["currish"],["currs"],["curry"],["currying"],["curs"],["curse"],["cursed"],["curseder"],["cursedly"],["curser"],["cursers"],["curses"],["cursing"],["cursive"],["cursives"],["cursor"],["cursors"],["cursory"],["curst"],["curt"],["curtail"],["curtails"],["curtain"],["curtains"],["curtal"],["curtalax"],["curtals"],["curtate"],["curter"],["curtest"],["curtesy"],["curtly"],["curtness"],["curtsey"],["curtseys"],["curtsied"],["curtsies"],["curtsy"],["curule"],["curve"],["curved"],["curvedly"],["curves"],["curvet"],["curveted"],["curvets"],["curvey"],["curvier"],["curviest"],["curving"],["curvy"],["cuscus"],["cuscuses"],["cusec"],["cusecs"],["cushat"],["cushats"],["cushaw"],["cushaws"],["cushier"],["cushiest"],["cushily"],["cushion"],["cushions"],["cushiony"],["cushy"],["cusk"],["cusks"],["cusp"],["cuspate"],["cuspated"],["cusped"],["cuspid"],["cuspidal"],["cuspides"],["cuspidor"],["cuspids"],["cuspis"],["cusps"],["cuss"],["cussed"],["cussedly"],["cusser"],["cussers"],["cusses"],["cussing"],["cusso"],["cussos"],["cussword"],["custard"],["custards"],["custodes"],["custody"],["custom"],["customer"],["customs"],["custos"],["custumal"],["cut"],["cutaway"],["cutaways"],["cutback"],["cutbacks"],["cutbank"],["cutbanks"],["cutch"],["cutchery"],["cutches"],["cutdown"],["cutdowns"],["cute"],["cutely"],["cuteness"],["cuter"],["cutes"],["cutesie"],["cutesier"],["cutest"],["cutesy"],["cutey"],["cuteys"],["cutgrass"],["cuticle"],["cuticles"],["cuticula"],["cutie"],["cuties"],["cutin"],["cutinise"],["cutinize"],["cutins"],["cutis"],["cutises"],["cutlas"],["cutlases"],["cutlass"],["cutler"],["cutlers"],["cutlery"],["cutlet"],["cutlets"],["cutline"],["cutlines"],["cutoff"],["cutoffs"],["cutout"],["cutouts"],["cutover"],["cutovers"],["cutpurse"],["cuts"],["cuttable"],["cuttage"],["cuttages"],["cutter"],["cutters"],["cutties"],["cutting"],["cuttings"],["cuttle"],["cuttled"],["cuttles"],["cuttling"],["cutty"],["cutup"],["cutups"],["cutwater"],["cutwork"],["cutworks"],["cutworm"],["cutworms"],["cuvette"],["cuvettes"],["cwm"],["cwms"],["cyan"],["cyanamid"],["cyanate"],["cyanates"],["cyanic"],["cyanid"],["cyanide"],["cyanided"],["cyanides"],["cyanids"],["cyanin"],["cyanine"],["cyanines"],["cyanins"],["cyanite"],["cyanites"],["cyanitic"],["cyano"],["cyanogen"],["cyanosed"],["cyanoses"],["cyanosis"],["cyanotic"],["cyans"],["cyborg"],["cyborgs"],["cycad"],["cycads"],["cycas"],["cycases"],["cycasin"],["cycasins"],["cyclamen"],["cyclase"],["cyclases"],["cycle"],["cyclecar"],["cycled"],["cycler"],["cyclers"],["cyclery"],["cycles"],["cyclic"],["cyclical"],["cyclicly"],["cycling"],["cyclings"],["cyclist"],["cyclists"],["cyclitol"],["cyclize"],["cyclized"],["cyclizes"],["cyclo"],["cycloid"],["cycloids"],["cyclonal"],["cyclone"],["cyclones"],["cyclonic"],["cyclops"],["cyclos"],["cycloses"],["cyclosis"],["cyder"],["cyders"],["cyeses"],["cyesis"],["cygnet"],["cygnets"],["cylices"],["cylinder"],["cylix"],["cyma"],["cymae"],["cymar"],["cymars"],["cymas"],["cymatia"],["cymatium"],["cymbal"],["cymbaler"],["cymbalom"],["cymbals"],["cymbidia"],["cymbling"],["cyme"],["cymene"],["cymenes"],["cymes"],["cymlin"],["cymling"],["cymlings"],["cymlins"],["cymogene"],["cymoid"],["cymol"],["cymols"],["cymose"],["cymosely"],["cymous"],["cynic"],["cynical"],["cynicism"],["cynics"],["cynosure"],["cypher"],["cyphered"],["cyphers"],["cypres"],["cypreses"],["cypress"],["cyprian"],["cyprians"],["cyprinid"],["cyprus"],["cypruses"],["cypsela"],["cypselae"],["cyst"],["cystein"],["cysteine"],["cysteins"],["cystic"],["cystine"],["cystines"],["cystitis"],["cystoid"],["cystoids"],["cysts"],["cytaster"],["cytidine"],["cytogeny"],["cytology"],["cyton"],["cytons"],["cytosine"],["cytosol"],["cytosols"],["czar"],["czardas"],["czardom"],["czardoms"],["czarevna"],["czarina"],["czarinas"],["czarism"],["czarisms"],["czarist"],["czarists"],["czaritza"],["czars"],["da"],["dab"],["dabbed"],["dabber"],["dabbers"],["dabbing"],["dabble"],["dabbled"],["dabbler"],["dabblers"],["dabbles"],["dabbling"],["dabchick"],["dabs"],["dabster"],["dabsters"],["dace"],["daces"],["dacha"],["dachas"],["dacker"],["dackered"],["dackers"],["dacoit"],["dacoits"],["dacoity"],["dactyl"],["dactyli"],["dactylic"],["dactyls"],["dactylus"],["dad"],["dada"],["dadaism"],["dadaisms"],["dadaist"],["dadaists"],["dadas"],["daddies"],["daddle"],["daddled"],["daddles"],["daddling"],["daddy"],["dado"],["dadoed"],["dadoes"],["dadoing"],["dados"],["dads"],["daedal"],["daemon"],["daemonic"],["daemons"],["daff"],["daffed"],["daffier"],["daffiest"],["daffily"],["daffing"],["daffodil"],["daffs"],["daffy"],["daft"],["dafter"],["daftest"],["daftly"],["daftness"],["dag"],["dagga"],["daggas"],["dagger"],["daggered"],["daggers"],["daggle"],["daggled"],["daggles"],["daggling"],["daglock"],["daglocks"],["dago"],["dagoba"],["dagobas"],["dagoes"],["dagos"],["dags"],["dagwood"],["dagwoods"],["dah"],["dahabeah"],["dahabiah"],["dahabieh"],["dahabiya"],["dahl"],["dahlia"],["dahlias"],["dahls"],["dahoon"],["dahoons"],["dahs"],["daiker"],["daikered"],["daikers"],["daikon"],["daikons"],["dailies"],["daily"],["daimen"],["daimio"],["daimios"],["daimon"],["daimones"],["daimonic"],["daimons"],["daimyo"],["daimyos"],["daintier"],["dainties"],["daintily"],["dainty"],["daiquiri"],["dairies"],["dairy"],["dairying"],["dairyman"],["dairymen"],["dais"],["daises"],["daishiki"],["daisied"],["daisies"],["daisy"],["dak"],["dakerhen"],["dakoit"],["dakoits"],["dakoity"],["daks"],["dal"],["dalapon"],["dalapons"],["dalasi"],["dalasis"],["dale"],["daledh"],["daledhs"],["dales"],["dalesman"],["dalesmen"],["daleth"],["daleths"],["dalles"],["dallied"],["dallier"],["dalliers"],["dallies"],["dally"],["dallying"],["dalmatic"],["dals"],["dalton"],["daltonic"],["daltons"],["dam"],["damage"],["damaged"],["damager"],["damagers"],["damages"],["damaging"],["daman"],["damans"],["damar"],["damars"],["damask"],["damasked"],["damasks"],["dame"],["dames"],["damewort"],["dammar"],["dammars"],["dammed"],["dammer"],["dammers"],["damming"],["damn"],["damnable"],["damnably"],["damndest"],["damned"],["damneder"],["damner"],["damners"],["damnify"],["damning"],["damns"],["damosel"],["damosels"],["damozel"],["damozels"],["damp"],["damped"],["dampen"],["dampened"],["dampener"],["dampens"],["damper"],["dampers"],["dampest"],["damping"],["dampings"],["dampish"],["damply"],["dampness"],["damps"],["dams"],["damsel"],["damsels"],["damson"],["damsons"],["dance"],["danced"],["dancer"],["dancers"],["dances"],["dancing"],["dander"],["dandered"],["danders"],["dandier"],["dandies"],["dandiest"],["dandify"],["dandily"],["dandle"],["dandled"],["dandler"],["dandlers"],["dandles"],["dandling"],["dandriff"],["dandruff"],["dandy"],["dandyish"],["dandyism"],["danegeld"],["daneweed"],["danewort"],["dang"],["danged"],["danger"],["dangered"],["dangers"],["danging"],["dangle"],["dangled"],["dangler"],["danglers"],["dangles"],["dangling"],["dangs"],["danio"],["danios"],["danish"],["dank"],["danker"],["dankest"],["dankly"],["dankness"],["danseur"],["danseurs"],["danseuse"],["dap"],["daphne"],["daphnes"],["daphnia"],["daphnias"],["dapped"],["dapper"],["dapperer"],["dapperly"],["dapping"],["dapple"],["dappled"],["dapples"],["dappling"],["daps"],["dapsone"],["dapsones"],["darb"],["darbies"],["darbs"],["dare"],["dared"],["dareful"],["darer"],["darers"],["dares"],["daresay"],["daric"],["darics"],["daring"],["daringly"],["darings"],["dariole"],["darioles"],["dark"],["darked"],["darken"],["darkened"],["darkener"],["darkens"],["darker"],["darkest"],["darkey"],["darkeys"],["darkie"],["darkies"],["darking"],["darkish"],["darkle"],["darkled"],["darkles"],["darklier"],["darkling"],["darkly"],["darkness"],["darkroom"],["darks"],["darksome"],["darky"],["darling"],["darlings"],["darn"],["darndest"],["darned"],["darneder"],["darnel"],["darnels"],["darner"],["darners"],["darning"],["darnings"],["darns"],["darshan"],["darshans"],["dart"],["darted"],["darter"],["darters"],["darting"],["dartle"],["dartled"],["dartles"],["dartling"],["darts"],["dash"],["dashed"],["dasheen"],["dasheens"],["dasher"],["dashers"],["dashes"],["dashi"],["dashier"],["dashiest"],["dashiki"],["dashikis"],["dashing"],["dashis"],["dashpot"],["dashpots"],["dashy"],["dassie"],["dassies"],["dastard"],["dastards"],["dasyure"],["dasyures"],["data"],["databank"],["database"],["datable"],["dataries"],["datary"],["datcha"],["datchas"],["date"],["dateable"],["dated"],["datedly"],["dateless"],["dateline"],["dater"],["daters"],["dates"],["dating"],["datival"],["dative"],["datively"],["datives"],["dato"],["datos"],["datto"],["dattos"],["datum"],["datums"],["datura"],["daturas"],["daturic"],["daub"],["daube"],["daubed"],["dauber"],["daubers"],["daubery"],["daubes"],["daubier"],["daubiest"],["daubing"],["daubries"],["daubry"],["daubs"],["dauby"],["daughter"],["daunder"],["daunders"],["daunt"],["daunted"],["daunter"],["daunters"],["daunting"],["daunts"],["dauphin"],["dauphine"],["dauphins"],["daut"],["dauted"],["dautie"],["dauties"],["dauting"],["dauts"],["daven"],["davened"],["davening"],["davens"],["davies"],["davit"],["davits"],["davy"],["daw"],["dawdle"],["dawdled"],["dawdler"],["dawdlers"],["dawdles"],["dawdling"],["dawed"],["dawen"],["dawing"],["dawk"],["dawks"],["dawn"],["dawned"],["dawning"],["dawnlike"],["dawns"],["daws"],["dawt"],["dawted"],["dawtie"],["dawties"],["dawting"],["dawts"],["day"],["daybed"],["daybeds"],["daybook"],["daybooks"],["daybreak"],["daydream"],["dayflies"],["dayfly"],["dayglow"],["dayglows"],["daylight"],["daylily"],["daylit"],["daylong"],["daymare"],["daymares"],["dayroom"],["dayrooms"],["days"],["dayside"],["daysides"],["daysman"],["daysmen"],["daystar"],["daystars"],["daytime"],["daytimes"],["daywork"],["dayworks"],["daze"],["dazed"],["dazedly"],["dazes"],["dazing"],["dazzle"],["dazzled"],["dazzler"],["dazzlers"],["dazzles"],["dazzling"],["de"],["deacon"],["deaconed"],["deaconry"],["deacons"],["dead"],["deadbeat"],["deadbolt"],["deaden"],["deadened"],["deadener"],["deadens"],["deader"],["deadest"],["deadeye"],["deadeyes"],["deadfall"],["deadhead"],["deadlier"],["deadline"],["deadlock"],["deadly"],["deadness"],["deadpan"],["deadpans"],["deads"],["deadwood"],["deaerate"],["deaf"],["deafen"],["deafened"],["deafens"],["deafer"],["deafest"],["deafish"],["deafly"],["deafness"],["deair"],["deaired"],["deairing"],["deairs"],["deal"],["dealate"],["dealated"],["dealates"],["dealer"],["dealers"],["dealfish"],["dealing"],["dealings"],["deals"],["dealt"],["dean"],["deaned"],["deanery"],["deaning"],["deans"],["deanship"],["dear"],["dearer"],["dearest"],["dearie"],["dearies"],["dearly"],["dearness"],["dears"],["dearth"],["dearths"],["deary"],["deash"],["deashed"],["deashes"],["deashing"],["deasil"],["death"],["deathbed"],["deathcup"],["deathful"],["deathly"],["deaths"],["deathy"],["deave"],["deaved"],["deaves"],["deaving"],["deb"],["debacle"],["debacles"],["debar"],["debark"],["debarked"],["debarks"],["debarred"],["debars"],["debase"],["debased"],["debaser"],["debasers"],["debases"],["debasing"],["debate"],["debated"],["debater"],["debaters"],["debates"],["debating"],["debauch"],["debility"],["debit"],["debited"],["debiting"],["debits"],["debonair"],["debone"],["deboned"],["deboner"],["deboners"],["debones"],["deboning"],["debouch"],["debouche"],["debride"],["debrided"],["debrides"],["debrief"],["debriefs"],["debris"],["debruise"],["debs"],["debt"],["debtless"],["debtor"],["debtors"],["debts"],["debug"],["debugged"],["debugs"],["debunk"],["debunked"],["debunker"],["debunks"],["debut"],["debutant"],["debuted"],["debuting"],["debuts"],["debye"],["debyes"],["decadal"],["decade"],["decadent"],["decades"],["decaf"],["decafs"],["decagon"],["decagons"],["decagram"],["decal"],["decalog"],["decalogs"],["decals"],["decamp"],["decamped"],["decamps"],["decanal"],["decane"],["decanes"],["decant"],["decanted"],["decanter"],["decants"],["decapod"],["decapods"],["decare"],["decares"],["decay"],["decayed"],["decayer"],["decayers"],["decaying"],["decays"],["decease"],["deceased"],["deceases"],["decedent"],["deceit"],["deceits"],["deceive"],["deceived"],["deceiver"],["deceives"],["decemvir"],["decenary"],["decency"],["decennia"],["decent"],["decenter"],["decently"],["decentre"],["decern"],["decerned"],["decerns"],["deciare"],["deciares"],["decibel"],["decibels"],["decide"],["decided"],["decider"],["deciders"],["decides"],["deciding"],["decidua"],["deciduae"],["decidual"],["deciduas"],["decigram"],["decile"],["deciles"],["decimal"],["decimals"],["decimate"],["decipher"],["decision"],["decisive"],["deck"],["decked"],["deckel"],["deckels"],["decker"],["deckers"],["deckhand"],["decking"],["deckings"],["deckle"],["deckles"],["decks"],["declaim"],["declaims"],["declare"],["declared"],["declarer"],["declares"],["declass"],["declasse"],["decline"],["declined"],["decliner"],["declines"],["deco"],["decoct"],["decocted"],["decocts"],["decode"],["decoded"],["decoder"],["decoders"],["decodes"],["decoding"],["decolor"],["decolors"],["decolour"],["decor"],["decorate"],["decorous"],["decors"],["decorum"],["decorums"],["decos"],["decouple"],["decoy"],["decoyed"],["decoyer"],["decoyers"],["decoying"],["decoys"],["decrease"],["decree"],["decreed"],["decreer"],["decreers"],["decrees"],["decrepit"],["decretal"],["decrial"],["decrials"],["decried"],["decrier"],["decriers"],["decries"],["decrown"],["decrowns"],["decry"],["decrying"],["decrypt"],["decrypts"],["decuman"],["decuple"],["decupled"],["decuples"],["decuries"],["decurion"],["decurve"],["decurved"],["decurves"],["decury"],["dedal"],["dedans"],["dedicate"],["deduce"],["deduced"],["deduces"],["deducing"],["deduct"],["deducted"],["deducts"],["dee"],["deed"],["deeded"],["deedier"],["deediest"],["deeding"],["deedless"],["deeds"],["deedy"],["deejay"],["deejays"],["deem"],["deemed"],["deeming"],["deems"],["deemster"],["deep"],["deepen"],["deepened"],["deepener"],["deepens"],["deeper"],["deepest"],["deeply"],["deepness"],["deeps"],["deer"],["deerfly"],["deers"],["deerskin"],["deerweed"],["deeryard"],["dees"],["deet"],["deets"],["deewan"],["deewans"],["deface"],["defaced"],["defacer"],["defacers"],["defaces"],["defacing"],["defame"],["defamed"],["defamer"],["defamers"],["defames"],["defaming"],["defang"],["defanged"],["defangs"],["defat"],["defats"],["defatted"],["default"],["defaults"],["defeat"],["defeated"],["defeater"],["defeats"],["defecate"],["defect"],["defected"],["defector"],["defects"],["defence"],["defences"],["defend"],["defended"],["defender"],["defends"],["defense"],["defensed"],["defenses"],["defer"],["deferent"],["deferral"],["deferred"],["deferrer"],["defers"],["defi"],["defiance"],["defiant"],["deficit"],["deficits"],["defied"],["defier"],["defiers"],["defies"],["defilade"],["defile"],["defiled"],["defiler"],["defilers"],["defiles"],["defiling"],["define"],["defined"],["definer"],["definers"],["defines"],["defining"],["definite"],["defis"],["deflate"],["deflated"],["deflates"],["deflator"],["deflea"],["defleaed"],["defleas"],["deflect"],["deflects"],["deflexed"],["deflower"],["defoam"],["defoamed"],["defoamer"],["defoams"],["defocus"],["defog"],["defogged"],["defogger"],["defogs"],["deforce"],["deforced"],["deforces"],["deforest"],["deform"],["deformed"],["deformer"],["deforms"],["defraud"],["defrauds"],["defray"],["defrayal"],["defrayed"],["defrayer"],["defrays"],["defrock"],["defrocks"],["defrost"],["defrosts"],["deft"],["defter"],["deftest"],["deftly"],["deftness"],["defunct"],["defuse"],["defused"],["defuses"],["defusing"],["defuze"],["defuzed"],["defuzes"],["defuzing"],["defy"],["defying"],["degage"],["degame"],["degames"],["degami"],["degamis"],["degas"],["degases"],["degassed"],["degasser"],["degasses"],["degauss"],["degerm"],["degermed"],["degerms"],["deglaze"],["deglazed"],["deglazes"],["degrade"],["degraded"],["degrader"],["degrades"],["degrease"],["degree"],["degreed"],["degrees"],["degum"],["degummed"],["degums"],["degust"],["degusted"],["degusts"],["dehisce"],["dehisced"],["dehisces"],["dehorn"],["dehorned"],["dehorner"],["dehorns"],["dehort"],["dehorted"],["dehorts"],["dei"],["deice"],["deiced"],["deicer"],["deicers"],["deices"],["deicidal"],["deicide"],["deicides"],["deicing"],["deictic"],["deific"],["deifical"],["deified"],["deifier"],["deifiers"],["deifies"],["deiform"],["deify"],["deifying"],["deign"],["deigned"],["deigning"],["deigns"],["deil"],["deils"],["deionize"],["deism"],["deisms"],["deist"],["deistic"],["deists"],["deities"],["deity"],["deject"],["dejecta"],["dejected"],["dejects"],["dejeuner"],["dekagram"],["dekare"],["dekares"],["deke"],["deked"],["dekes"],["deking"],["dekko"],["dekkos"],["del"],["delaine"],["delaines"],["delate"],["delated"],["delates"],["delating"],["delation"],["delator"],["delators"],["delay"],["delayed"],["delayer"],["delayers"],["delaying"],["delays"],["dele"],["delead"],["deleaded"],["deleads"],["deleave"],["deleaved"],["deleaves"],["deled"],["delegacy"],["delegate"],["deleing"],["deles"],["delete"],["deleted"],["deletes"],["deleting"],["deletion"],["delf"],["delfs"],["delft"],["delfts"],["deli"],["delicacy"],["delicate"],["delict"],["delicts"],["delight"],["delights"],["delime"],["delimed"],["delimes"],["deliming"],["delimit"],["delimits"],["deliria"],["delirium"],["delis"],["delist"],["delisted"],["delists"],["deliver"],["delivers"],["delivery"],["dell"],["dellies"],["dells"],["delly"],["delouse"],["deloused"],["delouser"],["delouses"],["dels"],["delta"],["deltaic"],["deltas"],["deltic"],["deltoid"],["deltoids"],["delude"],["deluded"],["deluder"],["deluders"],["deludes"],["deluding"],["deluge"],["deluged"],["deluges"],["deluging"],["delusion"],["delusive"],["delusory"],["deluster"],["deluxe"],["delve"],["delved"],["delver"],["delvers"],["delves"],["delving"],["demagog"],["demagogs"],["demagogy"],["demand"],["demanded"],["demander"],["demands"],["demarche"],["demark"],["demarked"],["demarks"],["demast"],["demasted"],["demasts"],["deme"],["demean"],["demeaned"],["demeanor"],["demeans"],["dement"],["demented"],["dementia"],["dements"],["demerara"],["demerge"],["demerged"],["demerger"],["demerges"],["demerit"],["demerits"],["demersal"],["demes"],["demesne"],["demesnes"],["demeton"],["demetons"],["demies"],["demigod"],["demigods"],["demijohn"],["demilune"],["demirep"],["demireps"],["demise"],["demised"],["demises"],["demising"],["demit"],["demits"],["demitted"],["demiurge"],["demivolt"],["demo"],["demob"],["demobbed"],["demobs"],["democrat"],["demode"],["demoded"],["demolish"],["demon"],["demoness"],["demoniac"],["demonian"],["demonic"],["demonise"],["demonism"],["demonist"],["demonize"],["demons"],["demos"],["demoses"],["demote"],["demoted"],["demotes"],["demotic"],["demotics"],["demoting"],["demotion"],["demotist"],["demount"],["demounts"],["dempster"],["demur"],["demure"],["demurely"],["demurer"],["demurest"],["demurral"],["demurred"],["demurrer"],["demurs"],["demy"],["den"],["denarii"],["denarius"],["denary"],["denature"],["denazify"],["dendrite"],["dendroid"],["dendron"],["dendrons"],["dene"],["denes"],["dengue"],["dengues"],["deniable"],["deniably"],["denial"],["denials"],["denied"],["denier"],["deniers"],["denies"],["denim"],["denims"],["denizen"],["denizens"],["denned"],["denning"],["denote"],["denoted"],["denotes"],["denoting"],["denotive"],["denounce"],["dens"],["dense"],["densely"],["denser"],["densest"],["densify"],["density"],["dent"],["dental"],["dentalia"],["dentally"],["dentals"],["dentate"],["dentated"],["dented"],["denticle"],["dentil"],["dentils"],["dentin"],["dentinal"],["dentine"],["dentines"],["denting"],["dentins"],["dentist"],["dentists"],["dentoid"],["dents"],["dentural"],["denture"],["dentures"],["denudate"],["denude"],["denuded"],["denuder"],["denuders"],["denudes"],["denuding"],["deny"],["denying"],["deodand"],["deodands"],["deodar"],["deodara"],["deodaras"],["deodars"],["deorbit"],["deorbits"],["depaint"],["depaints"],["depart"],["departed"],["departee"],["departs"],["depend"],["depended"],["depends"],["deperm"],["depermed"],["deperms"],["depict"],["depicted"],["depicter"],["depictor"],["depicts"],["depilate"],["deplane"],["deplaned"],["deplanes"],["deplete"],["depleted"],["depletes"],["deplore"],["deplored"],["deplorer"],["deplores"],["deploy"],["deployed"],["deploys"],["deplume"],["deplumed"],["deplumes"],["depolish"],["depone"],["deponed"],["deponent"],["depones"],["deponing"],["deport"],["deported"],["deportee"],["deports"],["deposal"],["deposals"],["depose"],["deposed"],["deposer"],["deposers"],["deposes"],["deposing"],["deposit"],["deposits"],["depot"],["depots"],["deprave"],["depraved"],["depraver"],["depraves"],["depress"],["deprival"],["deprive"],["deprived"],["depriver"],["deprives"],["depside"],["depsides"],["depth"],["depths"],["depurate"],["depute"],["deputed"],["deputes"],["deputies"],["deputing"],["deputize"],["deputy"],["deraign"],["deraigns"],["derail"],["derailed"],["derails"],["derange"],["deranged"],["deranges"],["derat"],["derats"],["deratted"],["deray"],["derays"],["derbies"],["derby"],["dere"],["derelict"],["deride"],["derided"],["derider"],["deriders"],["derides"],["deriding"],["deringer"],["derision"],["derisive"],["derisory"],["derivate"],["derive"],["derived"],["deriver"],["derivers"],["derives"],["deriving"],["derm"],["derma"],["dermal"],["dermas"],["dermic"],["dermis"],["dermises"],["dermoid"],["dermoids"],["derms"],["dernier"],["derogate"],["derrick"],["derricks"],["derriere"],["derries"],["derris"],["derrises"],["derry"],["dervish"],["des"],["desalt"],["desalted"],["desalter"],["desalts"],["desand"],["desanded"],["desands"],["descant"],["descants"],["descend"],["descends"],["descent"],["descents"],["describe"],["descried"],["descrier"],["descries"],["descry"],["deselect"],["desert"],["deserted"],["deserter"],["desertic"],["deserts"],["deserve"],["deserved"],["deserver"],["deserves"],["desex"],["desexed"],["desexes"],["desexing"],["design"],["designed"],["designee"],["designer"],["designs"],["desilver"],["desinent"],["desire"],["desired"],["desirer"],["desirers"],["desires"],["desiring"],["desirous"],["desist"],["desisted"],["desists"],["desk"],["deskman"],["deskmen"],["desks"],["desktop"],["desktops"],["desman"],["desmans"],["desmid"],["desmids"],["desmoid"],["desmoids"],["desolate"],["desorb"],["desorbed"],["desorbs"],["despair"],["despairs"],["despatch"],["despise"],["despised"],["despiser"],["despises"],["despite"],["despited"],["despites"],["despoil"],["despoils"],["despond"],["desponds"],["despot"],["despotic"],["despots"],["dessert"],["desserts"],["destain"],["destains"],["destine"],["destined"],["destines"],["destiny"],["destrier"],["destroy"],["destroys"],["destruct"],["desugar"],["desugars"],["desulfur"],["detach"],["detached"],["detacher"],["detaches"],["detail"],["detailed"],["detailer"],["details"],["detain"],["detained"],["detainee"],["detainer"],["detains"],["detassel"],["detect"],["detected"],["detecter"],["detector"],["detects"],["detent"],["detente"],["detentes"],["detents"],["deter"],["deterge"],["deterged"],["deterger"],["deterges"],["deterred"],["deterrer"],["deters"],["detest"],["detested"],["detester"],["detests"],["dethrone"],["detick"],["deticked"],["deticker"],["deticks"],["detinue"],["detinues"],["detonate"],["detour"],["detoured"],["detours"],["detox"],["detoxed"],["detoxes"],["detoxify"],["detoxing"],["detract"],["detracts"],["detrain"],["detrains"],["detrital"],["detritus"],["detrude"],["detruded"],["detrudes"],["deuce"],["deuced"],["deucedly"],["deuces"],["deucing"],["deuteric"],["deuteron"],["deutzia"],["deutzias"],["dev"],["deva"],["devalue"],["devalued"],["devalues"],["devas"],["devein"],["deveined"],["deveins"],["devel"],["develed"],["develing"],["develop"],["develope"],["develops"],["devels"],["deverbal"],["devest"],["devested"],["devests"],["deviance"],["deviancy"],["deviant"],["deviants"],["deviate"],["deviated"],["deviates"],["deviator"],["device"],["devices"],["devil"],["deviled"],["deviling"],["devilish"],["devilkin"],["devilled"],["devilry"],["devils"],["deviltry"],["devious"],["devisal"],["devisals"],["devise"],["devised"],["devisee"],["devisees"],["deviser"],["devisers"],["devises"],["devising"],["devisor"],["devisors"],["devoice"],["devoiced"],["devoices"],["devoid"],["devoir"],["devoirs"],["devolve"],["devolved"],["devolves"],["devon"],["devons"],["devote"],["devoted"],["devotee"],["devotees"],["devotes"],["devoting"],["devotion"],["devour"],["devoured"],["devourer"],["devours"],["devout"],["devouter"],["devoutly"],["devs"],["dew"],["dewan"],["dewans"],["dewar"],["dewars"],["dewater"],["dewaters"],["dewax"],["dewaxed"],["dewaxes"],["dewaxing"],["dewberry"],["dewclaw"],["dewclaws"],["dewdrop"],["dewdrops"],["dewed"],["dewfall"],["dewfalls"],["dewier"],["dewiest"],["dewily"],["dewiness"],["dewing"],["dewlap"],["dewlaps"],["dewless"],["dewool"],["dewooled"],["dewools"],["deworm"],["dewormed"],["deworms"],["dews"],["dewy"],["dex"],["dexes"],["dexie"],["dexies"],["dexter"],["dextral"],["dextran"],["dextrans"],["dextrin"],["dextrine"],["dextrins"],["dextro"],["dextrose"],["dextrous"],["dexy"],["dey"],["deys"],["dezinc"],["dezinced"],["dezincs"],["dhak"],["dhaks"],["dhal"],["dhals"],["dharma"],["dharmas"],["dharmic"],["dharna"],["dharnas"],["dhobi"],["dhobis"],["dhole"],["dholes"],["dhoolies"],["dhooly"],["dhoora"],["dhooras"],["dhooti"],["dhootie"],["dhooties"],["dhootis"],["dhoti"],["dhotis"],["dhourra"],["dhourras"],["dhow"],["dhows"],["dhurna"],["dhurnas"],["dhurrie"],["dhurries"],["dhuti"],["dhutis"],["diabase"],["diabases"],["diabasic"],["diabetes"],["diabetic"],["diablery"],["diabolic"],["diabolo"],["diabolos"],["diacetyl"],["diacid"],["diacidic"],["diacids"],["diaconal"],["diadem"],["diademed"],["diadems"],["diagnose"],["diagonal"],["diagram"],["diagrams"],["diagraph"],["dial"],["dialect"],["dialects"],["dialed"],["dialer"],["dialers"],["dialing"],["dialings"],["dialist"],["dialists"],["diallage"],["dialled"],["diallel"],["dialler"],["diallers"],["dialling"],["diallist"],["dialog"],["dialoged"],["dialoger"],["dialogic"],["dialogs"],["dialogue"],["dials"],["dialyse"],["dialysed"],["dialyser"],["dialyses"],["dialysis"],["dialytic"],["dialyze"],["dialyzed"],["dialyzer"],["dialyzes"],["diamante"],["diameter"],["diamide"],["diamides"],["diamin"],["diamine"],["diamines"],["diamins"],["diamond"],["diamonds"],["dianthus"],["diapason"],["diapause"],["diaper"],["diapered"],["diapers"],["diaphone"],["diaphony"],["diapir"],["diapiric"],["diapirs"],["diapsid"],["diarchic"],["diarchy"],["diaries"],["diarist"],["diarists"],["diarrhea"],["diary"],["diaspora"],["diaspore"],["diastase"],["diastem"],["diastema"],["diastems"],["diaster"],["diasters"],["diastole"],["diastral"],["diatom"],["diatomic"],["diatoms"],["diatonic"],["diatribe"],["diatron"],["diatrons"],["diazepam"],["diazin"],["diazine"],["diazines"],["diazinon"],["diazins"],["diazo"],["diazole"],["diazoles"],["dib"],["dibasic"],["dibbed"],["dibber"],["dibbers"],["dibbing"],["dibble"],["dibbled"],["dibbler"],["dibblers"],["dibbles"],["dibbling"],["dibbuk"],["dibbukim"],["dibbuks"],["dibs"],["dicast"],["dicastic"],["dicasts"],["dice"],["diced"],["dicentra"],["dicer"],["dicers"],["dices"],["dicey"],["dichasia"],["dichotic"],["dichroic"],["dicier"],["diciest"],["dicing"],["dick"],["dicked"],["dickens"],["dicker"],["dickered"],["dickers"],["dickey"],["dickeys"],["dickie"],["dickier"],["dickies"],["dickiest"],["dicking"],["dicks"],["dicky"],["dicliny"],["dicot"],["dicots"],["dicotyl"],["dicotyls"],["dicrotal"],["dicrotic"],["dicta"],["dictate"],["dictated"],["dictates"],["dictator"],["dictier"],["dictiest"],["diction"],["dictions"],["dictum"],["dictums"],["dicty"],["dicyclic"],["dicycly"],["did"],["didact"],["didactic"],["didacts"],["didactyl"],["didapper"],["diddle"],["diddled"],["diddler"],["diddlers"],["diddles"],["diddley"],["diddlies"],["diddling"],["diddly"],["didie"],["didies"],["dido"],["didoes"],["didos"],["didst"],["didy"],["didymium"],["didymous"],["didynamy"],["die"],["dieback"],["diebacks"],["diecious"],["died"],["diehard"],["diehards"],["dieing"],["diel"],["dieldrin"],["diemaker"],["diene"],["dienes"],["diereses"],["dieresis"],["dieretic"],["dies"],["diesel"],["dieseled"],["diesels"],["dieses"],["diesis"],["diester"],["diesters"],["diestock"],["diestrum"],["diestrus"],["diet"],["dietary"],["dieted"],["dieter"],["dieters"],["dietetic"],["diether"],["diethers"],["dieting"],["diets"],["differ"],["differed"],["differs"],["diffract"],["diffuse"],["diffused"],["diffuser"],["diffuses"],["diffusor"],["dig"],["digamies"],["digamist"],["digamma"],["digammas"],["digamous"],["digamy"],["digest"],["digested"],["digester"],["digestor"],["digests"],["digged"],["digger"],["diggers"],["digging"],["diggings"],["dight"],["dighted"],["dighting"],["dights"],["digit"],["digital"],["digitals"],["digitate"],["digitize"],["digits"],["diglot"],["diglots"],["dignify"],["dignity"],["digoxin"],["digoxins"],["digraph"],["digraphs"],["digress"],["digs"],["dihedral"],["dihedron"],["dihybrid"],["dihydric"],["dikdik"],["dikdiks"],["dike"],["diked"],["diker"],["dikers"],["dikes"],["dikey"],["diking"],["diktat"],["diktats"],["dilatant"],["dilatate"],["dilate"],["dilated"],["dilater"],["dilaters"],["dilates"],["dilating"],["dilation"],["dilative"],["dilator"],["dilators"],["dilatory"],["dildo"],["dildoe"],["dildoes"],["dildos"],["dilemma"],["dilemmas"],["dilemmic"],["diligent"],["dill"],["dilled"],["dillies"],["dills"],["dilly"],["diluent"],["diluents"],["dilute"],["diluted"],["diluter"],["diluters"],["dilutes"],["diluting"],["dilution"],["dilutive"],["dilutor"],["dilutors"],["diluvia"],["diluvial"],["diluvian"],["diluvion"],["diluvium"],["dim"],["dime"],["dimer"],["dimeric"],["dimerism"],["dimerize"],["dimerous"],["dimers"],["dimes"],["dimeter"],["dimeters"],["dimethyl"],["dimetric"],["diminish"],["dimities"],["dimity"],["dimly"],["dimmable"],["dimmed"],["dimmer"],["dimmers"],["dimmest"],["dimming"],["dimness"],["dimorph"],["dimorphs"],["dimout"],["dimouts"],["dimple"],["dimpled"],["dimples"],["dimplier"],["dimpling"],["dimply"],["dims"],["dimwit"],["dimwits"],["din"],["dinar"],["dinars"],["dindle"],["dindled"],["dindles"],["dindling"],["dine"],["dined"],["diner"],["dineric"],["dinero"],["dineros"],["diners"],["dines"],["dinette"],["dinettes"],["ding"],["dingbat"],["dingbats"],["dingdong"],["dinge"],["dinged"],["dinges"],["dingey"],["dingeys"],["dinghies"],["dinghy"],["dingier"],["dingies"],["dingiest"],["dingily"],["dinging"],["dingle"],["dingles"],["dingo"],["dingoes"],["dings"],["dingus"],["dinguses"],["dingy"],["dining"],["dink"],["dinked"],["dinkey"],["dinkeys"],["dinkier"],["dinkies"],["dinkiest"],["dinking"],["dinkly"],["dinks"],["dinkum"],["dinkums"],["dinky"],["dinned"],["dinner"],["dinners"],["dinning"],["dinosaur"],["dins"],["dint"],["dinted"],["dinting"],["dints"],["diobol"],["diobolon"],["diobols"],["diocesan"],["diocese"],["dioceses"],["diode"],["diodes"],["dioecism"],["dioicous"],["diol"],["diolefin"],["diols"],["diopside"],["dioptase"],["diopter"],["diopters"],["dioptral"],["dioptre"],["dioptres"],["dioptric"],["diorama"],["dioramas"],["dioramic"],["diorite"],["diorites"],["dioritic"],["dioxane"],["dioxanes"],["dioxid"],["dioxide"],["dioxides"],["dioxids"],["dioxin"],["dioxins"],["dip"],["diphase"],["diphasic"],["diphenyl"],["diplegia"],["diplex"],["diplexer"],["diploe"],["diploes"],["diploic"],["diploid"],["diploids"],["diploidy"],["diploma"],["diplomas"],["diplomat"],["diplont"],["diplonts"],["diplopia"],["diplopic"],["diplopod"],["diploses"],["diplosis"],["dipnoan"],["dipnoans"],["dipodic"],["dipodies"],["dipody"],["dipolar"],["dipole"],["dipoles"],["dippable"],["dipped"],["dipper"],["dippers"],["dippier"],["dippiest"],["dipping"],["dippy"],["dips"],["dipsades"],["dipsas"],["dipso"],["dipsos"],["dipstick"],["dipt"],["diptera"],["dipteral"],["dipteran"],["dipteron"],["diptyca"],["diptycas"],["diptych"],["diptychs"],["diquat"],["diquats"],["dirdum"],["dirdums"],["dire"],["direct"],["directed"],["directer"],["directly"],["director"],["directs"],["direful"],["direly"],["direness"],["direr"],["direst"],["dirge"],["dirgeful"],["dirges"],["dirham"],["dirhams"],["diriment"],["dirk"],["dirked"],["dirking"],["dirks"],["dirl"],["dirled"],["dirling"],["dirls"],["dirndl"],["dirndls"],["dirt"],["dirtied"],["dirtier"],["dirties"],["dirtiest"],["dirtily"],["dirts"],["dirty"],["dirtying"],["disable"],["disabled"],["disables"],["disabuse"],["disagree"],["disallow"],["disannul"],["disarm"],["disarmed"],["disarmer"],["disarms"],["disarray"],["disaster"],["disavow"],["disavows"],["disband"],["disbands"],["disbar"],["disbars"],["disbosom"],["disbound"],["disbowel"],["disbud"],["disbuds"],["disburse"],["disc"],["discant"],["discants"],["discard"],["discards"],["discase"],["discased"],["discases"],["disced"],["discept"],["discepts"],["discern"],["discerns"],["disci"],["discing"],["disciple"],["disclaim"],["disclike"],["disclose"],["disco"],["discoed"],["discoid"],["discoids"],["discoing"],["discolor"],["discord"],["discords"],["discos"],["discount"],["discover"],["discreet"],["discrete"],["discrown"],["discs"],["discus"],["discuses"],["discuss"],["disdain"],["disdains"],["disease"],["diseased"],["diseases"],["disendow"],["diseuse"],["diseuses"],["disfavor"],["disfrock"],["disgorge"],["disgrace"],["disguise"],["disgust"],["disgusts"],["dish"],["dished"],["dishelm"],["dishelms"],["disherit"],["dishes"],["dishevel"],["dishful"],["dishfuls"],["dishier"],["dishiest"],["dishing"],["dishlike"],["dishonor"],["dishpan"],["dishpans"],["dishrag"],["dishrags"],["dishware"],["dishy"],["disinter"],["disject"],["disjects"],["disjoin"],["disjoins"],["disjoint"],["disjunct"],["disk"],["disked"],["diskette"],["disking"],["disklike"],["disks"],["dislike"],["disliked"],["disliker"],["dislikes"],["dislimn"],["dislimns"],["dislodge"],["disloyal"],["dismal"],["dismaler"],["dismally"],["dismals"],["dismast"],["dismasts"],["dismay"],["dismayed"],["dismays"],["disme"],["dismes"],["dismiss"],["dismount"],["disobey"],["disobeys"],["disomic"],["disorder"],["disown"],["disowned"],["disowns"],["dispart"],["disparts"],["dispatch"],["dispel"],["dispels"],["dispend"],["dispends"],["dispense"],["disperse"],["dispirit"],["displace"],["displant"],["display"],["displays"],["displode"],["displume"],["disport"],["disports"],["disposal"],["dispose"],["disposed"],["disposer"],["disposes"],["dispread"],["disprize"],["disproof"],["disprove"],["dispute"],["disputed"],["disputer"],["disputes"],["disquiet"],["disrate"],["disrated"],["disrates"],["disrobe"],["disrobed"],["disrober"],["disrobes"],["disroot"],["disroots"],["disrupt"],["disrupts"],["dissave"],["dissaved"],["dissaves"],["disseat"],["disseats"],["dissect"],["dissects"],["disseise"],["disseize"],["dissent"],["dissents"],["dissert"],["disserts"],["disserve"],["dissever"],["dissolve"],["dissuade"],["distaff"],["distaffs"],["distain"],["distains"],["distal"],["distally"],["distance"],["distant"],["distaste"],["distaves"],["distend"],["distends"],["distent"],["distich"],["distichs"],["distil"],["distill"],["distills"],["distils"],["distinct"],["distome"],["distomes"],["distort"],["distorts"],["distract"],["distrain"],["distrait"],["distress"],["district"],["distrust"],["disturb"],["disturbs"],["disulfid"],["disunion"],["disunite"],["disunity"],["disuse"],["disused"],["disuses"],["disusing"],["disvalue"],["disyoke"],["disyoked"],["disyokes"],["dit"],["dita"],["ditas"],["ditch"],["ditched"],["ditcher"],["ditchers"],["ditches"],["ditching"],["dite"],["dites"],["ditheism"],["ditheist"],["dither"],["dithered"],["ditherer"],["dithers"],["dithery"],["dithiol"],["dits"],["ditsier"],["ditsiest"],["ditsy"],["dittany"],["ditties"],["ditto"],["dittoed"],["dittoing"],["dittos"],["ditty"],["ditzier"],["ditziest"],["ditzy"],["diureses"],["diuresis"],["diuretic"],["diurnal"],["diurnals"],["diuron"],["diurons"],["diva"],["divagate"],["divalent"],["divan"],["divans"],["divas"],["dive"],["divebomb"],["dived"],["diver"],["diverge"],["diverged"],["diverges"],["divers"],["diverse"],["divert"],["diverted"],["diverter"],["diverts"],["dives"],["divest"],["divested"],["divests"],["divide"],["divided"],["dividend"],["divider"],["dividers"],["divides"],["dividing"],["dividual"],["divine"],["divined"],["divinely"],["diviner"],["diviners"],["divines"],["divinest"],["diving"],["divining"],["divinise"],["divinity"],["divinize"],["division"],["divisive"],["divisor"],["divisors"],["divorce"],["divorced"],["divorcee"],["divorcer"],["divorces"],["divot"],["divots"],["divulge"],["divulged"],["divulger"],["divulges"],["divvied"],["divvies"],["divvy"],["divvying"],["diwan"],["diwans"],["dixit"],["dixits"],["dizen"],["dizened"],["dizening"],["dizens"],["dizygous"],["dizzied"],["dizzier"],["dizzies"],["dizziest"],["dizzily"],["dizzy"],["dizzying"],["djebel"],["djebels"],["djellaba"],["djin"],["djinn"],["djinni"],["djinns"],["djinny"],["djins"],["do"],["doable"],["doat"],["doated"],["doating"],["doats"],["dobber"],["dobbers"],["dobbies"],["dobbin"],["dobbins"],["dobby"],["dobie"],["dobies"],["dobla"],["doblas"],["doblon"],["doblones"],["doblons"],["dobra"],["dobras"],["dobson"],["dobsons"],["doby"],["doc"],["docent"],["docents"],["docetic"],["docile"],["docilely"],["docility"],["dock"],["dockage"],["dockages"],["docked"],["docker"],["dockers"],["docket"],["docketed"],["dockets"],["dockhand"],["docking"],["dockland"],["docks"],["dockside"],["dockyard"],["docs"],["doctor"],["doctoral"],["doctored"],["doctors"],["doctrine"],["document"],["dodder"],["doddered"],["dodderer"],["dodders"],["doddery"],["dodge"],["dodged"],["dodgem"],["dodgems"],["dodger"],["dodgers"],["dodgery"],["dodges"],["dodgier"],["dodgiest"],["dodging"],["dodgy"],["dodo"],["dodoes"],["dodoism"],["dodoisms"],["dodos"],["doe"],["doer"],["doers"],["does"],["doeskin"],["doeskins"],["doest"],["doeth"],["doff"],["doffed"],["doffer"],["doffers"],["doffing"],["doffs"],["dog"],["dogbane"],["dogbanes"],["dogberry"],["dogcart"],["dogcarts"],["dogdom"],["dogdoms"],["doge"],["dogear"],["dogeared"],["dogears"],["dogedom"],["dogedoms"],["doges"],["dogeship"],["dogey"],["dogeys"],["dogface"],["dogfaces"],["dogfight"],["dogfish"],["dogged"],["doggedly"],["dogger"],["doggerel"],["doggers"],["doggery"],["doggie"],["doggier"],["doggies"],["doggiest"],["dogging"],["doggish"],["doggo"],["doggone"],["doggoned"],["doggoner"],["doggones"],["doggrel"],["doggrels"],["doggy"],["doghouse"],["dogie"],["dogies"],["dogleg"],["doglegs"],["doglike"],["dogma"],["dogmas"],["dogmata"],["dogmatic"],["dognap"],["dognaped"],["dognaper"],["dognaps"],["dogs"],["dogsbody"],["dogsled"],["dogsleds"],["dogteeth"],["dogtooth"],["dogtrot"],["dogtrots"],["dogvane"],["dogvanes"],["dogwatch"],["dogwood"],["dogwoods"],["dogy"],["doiled"],["doilies"],["doily"],["doing"],["doings"],["doit"],["doited"],["doits"],["dojo"],["dojos"],["dol"],["dolce"],["dolci"],["doldrums"],["dole"],["doled"],["doleful"],["dolerite"],["doles"],["dolesome"],["doling"],["doll"],["dollar"],["dollars"],["dolled"],["dollied"],["dollies"],["dolling"],["dollish"],["dollop"],["dolloped"],["dollops"],["dolls"],["dolly"],["dollying"],["dolma"],["dolmades"],["dolman"],["dolmans"],["dolmas"],["dolmen"],["dolmens"],["dolomite"],["dolor"],["doloroso"],["dolorous"],["dolors"],["dolour"],["dolours"],["dolphin"],["dolphins"],["dols"],["dolt"],["doltish"],["dolts"],["dom"],["domain"],["domains"],["domal"],["dome"],["domed"],["domelike"],["domes"],["domesday"],["domestic"],["domic"],["domical"],["domicil"],["domicile"],["domicils"],["dominant"],["dominate"],["domine"],["domineer"],["domines"],["doming"],["dominick"],["dominie"],["dominies"],["dominion"],["dominium"],["domino"],["dominoes"],["dominos"],["doms"],["don"],["dona"],["donas"],["donate"],["donated"],["donates"],["donating"],["donation"],["donative"],["donator"],["donators"],["done"],["donee"],["donees"],["doneness"],["dong"],["donga"],["dongas"],["dongola"],["dongolas"],["dongs"],["donjon"],["donjons"],["donkey"],["donkeys"],["donna"],["donnas"],["donne"],["donned"],["donnee"],["donnees"],["donnerd"],["donnered"],["donnert"],["donning"],["donnish"],["donor"],["donors"],["dons"],["donsie"],["donsy"],["donut"],["donuts"],["donzel"],["donzels"],["doodad"],["doodads"],["doodle"],["doodled"],["doodler"],["doodlers"],["doodles"],["doodling"],["doolee"],["doolees"],["doolie"],["doolies"],["dooly"],["doom"],["doomed"],["doomful"],["dooming"],["dooms"],["doomsday"],["doomster"],["door"],["doorbell"],["doorjamb"],["doorknob"],["doorless"],["doorman"],["doormat"],["doormats"],["doormen"],["doornail"],["doorpost"],["doors"],["doorsill"],["doorstep"],["doorstop"],["doorway"],["doorways"],["dooryard"],["doozer"],["doozers"],["doozie"],["doozies"],["doozy"],["dopa"],["dopamine"],["dopant"],["dopants"],["dopas"],["dope"],["doped"],["doper"],["dopers"],["dopes"],["dopester"],["dopey"],["dopier"],["dopiest"],["dopiness"],["doping"],["dopy"],["dor"],["dorado"],["dorados"],["dorbug"],["dorbugs"],["dore"],["dorhawk"],["dorhawks"],["dories"],["dork"],["dorkier"],["dorkiest"],["dorks"],["dorky"],["dorm"],["dormancy"],["dormant"],["dormer"],["dormers"],["dormice"],["dormie"],["dormient"],["dormin"],["dormins"],["dormouse"],["dorms"],["dormy"],["dorneck"],["dornecks"],["dornick"],["dornicks"],["dornock"],["dornocks"],["dorp"],["dorper"],["dorpers"],["dorps"],["dorr"],["dorrs"],["dors"],["dorsa"],["dorsad"],["dorsal"],["dorsally"],["dorsals"],["dorsel"],["dorsels"],["dorser"],["dorsers"],["dorsum"],["dorty"],["dory"],["dos"],["dosage"],["dosages"],["dose"],["dosed"],["doser"],["dosers"],["doses"],["dosing"],["doss"],["dossal"],["dossals"],["dossed"],["dossel"],["dossels"],["dosser"],["dosseret"],["dossers"],["dosses"],["dossier"],["dossiers"],["dossil"],["dossils"],["dossing"],["dost"],["dot"],["dotage"],["dotages"],["dotal"],["dotard"],["dotardly"],["dotards"],["dotation"],["dote"],["doted"],["doter"],["doters"],["dotes"],["doth"],["dotier"],["dotiest"],["doting"],["dotingly"],["dots"],["dotted"],["dottel"],["dottels"],["dotter"],["dotterel"],["dotters"],["dottier"],["dottiest"],["dottily"],["dotting"],["dottle"],["dottles"],["dottrel"],["dottrels"],["dotty"],["doty"],["double"],["doubled"],["doubler"],["doublers"],["doubles"],["doublet"],["doublets"],["doubling"],["doubloon"],["doublure"],["doubly"],["doubt"],["doubted"],["doubter"],["doubters"],["doubtful"],["doubting"],["doubts"],["douce"],["doucely"],["douceur"],["douceurs"],["douche"],["douched"],["douches"],["douching"],["dough"],["doughboy"],["doughier"],["doughnut"],["doughs"],["dought"],["doughty"],["doughy"],["doum"],["douma"],["doumas"],["doums"],["doupioni"],["dour"],["doura"],["dourah"],["dourahs"],["douras"],["dourer"],["dourest"],["dourine"],["dourines"],["dourly"],["dourness"],["douse"],["doused"],["douser"],["dousers"],["douses"],["dousing"],["doux"],["douzeper"],["dove"],["dovecot"],["dovecote"],["dovecots"],["dovekey"],["dovekeys"],["dovekie"],["dovekies"],["dovelike"],["doven"],["dovened"],["dovening"],["dovens"],["doves"],["dovetail"],["dovish"],["dow"],["dowable"],["dowager"],["dowagers"],["dowdier"],["dowdies"],["dowdiest"],["dowdily"],["dowdy"],["dowdyish"],["dowed"],["dowel"],["doweled"],["doweling"],["dowelled"],["dowels"],["dower"],["dowered"],["doweries"],["dowering"],["dowers"],["dowery"],["dowie"],["dowing"],["down"],["downbeat"],["downcast"],["downcome"],["downed"],["downer"],["downers"],["downfall"],["downhaul"],["downhill"],["downier"],["downiest"],["downing"],["download"],["downplay"],["downpour"],["downs"],["downside"],["downsize"],["downtick"],["downtime"],["downtown"],["downtrod"],["downturn"],["downward"],["downwash"],["downwind"],["downy"],["dowries"],["dowry"],["dows"],["dowsabel"],["dowse"],["dowsed"],["dowser"],["dowsers"],["dowses"],["dowsing"],["doxie"],["doxies"],["doxology"],["doxy"],["doyen"],["doyenne"],["doyennes"],["doyens"],["doyley"],["doyleys"],["doylies"],["doyly"],["doze"],["dozed"],["dozen"],["dozened"],["dozening"],["dozens"],["dozenth"],["dozenths"],["dozer"],["dozers"],["dozes"],["dozier"],["doziest"],["dozily"],["doziness"],["dozing"],["dozy"],["drab"],["drabbed"],["drabber"],["drabbest"],["drabbet"],["drabbets"],["drabbing"],["drabble"],["drabbled"],["drabbles"],["drably"],["drabness"],["drabs"],["dracaena"],["drachm"],["drachma"],["drachmae"],["drachmai"],["drachmas"],["drachms"],["draconic"],["draff"],["draffier"],["draffish"],["draffs"],["draffy"],["draft"],["drafted"],["draftee"],["draftees"],["drafter"],["drafters"],["draftier"],["draftily"],["drafting"],["drafts"],["drafty"],["drag"],["dragee"],["dragees"],["dragged"],["dragger"],["draggers"],["draggier"],["dragging"],["draggle"],["draggled"],["draggles"],["draggy"],["dragline"],["dragnet"],["dragnets"],["dragoman"],["dragomen"],["dragon"],["dragonet"],["dragons"],["dragoon"],["dragoons"],["dragrope"],["drags"],["dragster"],["drail"],["drails"],["drain"],["drainage"],["drained"],["drainer"],["drainers"],["draining"],["drains"],["drake"],["drakes"],["dram"],["drama"],["dramas"],["dramatic"],["drammed"],["dramming"],["drammock"],["drams"],["dramshop"],["drank"],["drapable"],["drape"],["draped"],["draper"],["drapers"],["drapery"],["drapes"],["drapey"],["draping"],["drastic"],["drat"],["drats"],["dratted"],["dratting"],["draught"],["draughts"],["draughty"],["drave"],["draw"],["drawable"],["drawback"],["drawbar"],["drawbars"],["drawbore"],["drawdown"],["drawee"],["drawees"],["drawer"],["drawers"],["drawing"],["drawings"],["drawl"],["drawled"],["drawler"],["drawlers"],["drawlier"],["drawling"],["drawls"],["drawly"],["drawn"],["draws"],["drawtube"],["dray"],["drayage"],["drayages"],["drayed"],["draying"],["drayman"],["draymen"],["drays"],["dread"],["dreaded"],["dreadful"],["dreading"],["dreads"],["dream"],["dreamed"],["dreamer"],["dreamers"],["dreamful"],["dreamier"],["dreamily"],["dreaming"],["dreams"],["dreamt"],["dreamy"],["drear"],["drearier"],["drearies"],["drearily"],["drears"],["dreary"],["dreck"],["drecks"],["drecky"],["dredge"],["dredged"],["dredger"],["dredgers"],["dredges"],["dredging"],["dree"],["dreed"],["dreeing"],["drees"],["dreg"],["dreggier"],["dreggish"],["dreggy"],["dregs"],["dreich"],["dreidel"],["dreidels"],["dreidl"],["dreidls"],["dreigh"],["drek"],["dreks"],["drench"],["drenched"],["drencher"],["drenches"],["dress"],["dressage"],["dressed"],["dresser"],["dressers"],["dresses"],["dressier"],["dressily"],["dressing"],["dressy"],["drest"],["drew"],["drib"],["dribbed"],["dribbing"],["dribble"],["dribbled"],["dribbler"],["dribbles"],["dribblet"],["dribbly"],["driblet"],["driblets"],["dribs"],["dried"],["driegh"],["drier"],["driers"],["dries"],["driest"],["drift"],["driftage"],["drifted"],["drifter"],["drifters"],["driftier"],["drifting"],["driftpin"],["drifts"],["drifty"],["drill"],["drilled"],["driller"],["drillers"],["drilling"],["drills"],["drily"],["drink"],["drinker"],["drinkers"],["drinking"],["drinks"],["drip"],["dripless"],["dripped"],["dripper"],["drippers"],["drippier"],["dripping"],["drippy"],["drips"],["dript"],["drivable"],["drive"],["drivel"],["driveled"],["driveler"],["drivels"],["driven"],["driver"],["drivers"],["drives"],["driveway"],["driving"],["drivings"],["drizzle"],["drizzled"],["drizzles"],["drizzly"],["drogue"],["drogues"],["droit"],["droits"],["droll"],["drolled"],["droller"],["drollery"],["drollest"],["drolling"],["drolls"],["drolly"],["dromon"],["dromond"],["dromonds"],["dromons"],["drone"],["droned"],["droner"],["droners"],["drones"],["drongo"],["drongos"],["droning"],["dronish"],["drool"],["drooled"],["drooling"],["drools"],["droop"],["drooped"],["droopier"],["droopily"],["drooping"],["droops"],["droopy"],["drop"],["drophead"],["dropkick"],["droplet"],["droplets"],["dropout"],["dropouts"],["dropped"],["dropper"],["droppers"],["dropping"],["drops"],["dropshot"],["dropsied"],["dropsies"],["dropsy"],["dropt"],["dropwort"],["drosera"],["droseras"],["droshky"],["droskies"],["drosky"],["dross"],["drosses"],["drossier"],["drossy"],["drought"],["droughts"],["droughty"],["drouk"],["drouked"],["drouking"],["drouks"],["drouth"],["drouths"],["drouthy"],["drove"],["droved"],["drover"],["drovers"],["droves"],["droving"],["drown"],["drownd"],["drownded"],["drownds"],["drowned"],["drowner"],["drowners"],["drowning"],["drowns"],["drowse"],["drowsed"],["drowses"],["drowsier"],["drowsily"],["drowsing"],["drowsy"],["drub"],["drubbed"],["drubber"],["drubbers"],["drubbing"],["drubs"],["drudge"],["drudged"],["drudger"],["drudgers"],["drudgery"],["drudges"],["drudging"],["drug"],["drugged"],["drugget"],["druggets"],["druggie"],["druggier"],["druggies"],["drugging"],["druggist"],["druggy"],["drugs"],["druid"],["druidess"],["druidic"],["druidism"],["druids"],["drum"],["drumbeat"],["drumble"],["drumbled"],["drumbles"],["drumfire"],["drumfish"],["drumhead"],["drumlier"],["drumlike"],["drumlin"],["drumlins"],["drumly"],["drummed"],["drummer"],["drummers"],["drumming"],["drumroll"],["drums"],["drunk"],["drunkard"],["drunken"],["drunker"],["drunkest"],["drunks"],["drupe"],["drupelet"],["drupes"],["druse"],["druses"],["druthers"],["dry"],["dryable"],["dryad"],["dryades"],["dryadic"],["dryads"],["dryer"],["dryers"],["dryest"],["drying"],["dryish"],["dryland"],["drylot"],["drylots"],["dryly"],["dryness"],["drypoint"],["drys"],["drywall"],["drywalls"],["duad"],["duads"],["dual"],["dualism"],["dualisms"],["dualist"],["dualists"],["duality"],["dualize"],["dualized"],["dualizes"],["dually"],["duals"],["dub"],["dubbed"],["dubber"],["dubbers"],["dubbin"],["dubbing"],["dubbings"],["dubbins"],["dubiety"],["dubious"],["dubonnet"],["dubs"],["ducal"],["ducally"],["ducat"],["ducats"],["duce"],["duces"],["duchess"],["duchies"],["duchy"],["duci"],["duck"],["duckbill"],["ducked"],["ducker"],["duckers"],["duckie"],["duckier"],["duckies"],["duckiest"],["ducking"],["duckling"],["duckpin"],["duckpins"],["ducks"],["ducktail"],["duckwalk"],["duckweed"],["ducky"],["duct"],["ductal"],["ducted"],["ductile"],["ducting"],["ductings"],["ductless"],["ducts"],["ductule"],["ductules"],["dud"],["duddie"],["duddy"],["dude"],["duded"],["dudeen"],["dudeens"],["dudes"],["dudgeon"],["dudgeons"],["duding"],["dudish"],["dudishly"],["duds"],["due"],["duecento"],["duel"],["dueled"],["dueler"],["duelers"],["dueling"],["duelist"],["duelists"],["duelled"],["dueller"],["duellers"],["duelli"],["duelling"],["duellist"],["duello"],["duellos"],["duels"],["duende"],["duendes"],["dueness"],["duenna"],["duennas"],["dues"],["duet"],["duets"],["duetted"],["duetting"],["duettist"],["duff"],["duffel"],["duffels"],["duffer"],["duffers"],["duffle"],["duffles"],["duffs"],["dug"],["dugong"],["dugongs"],["dugout"],["dugouts"],["dugs"],["dui"],["duiker"],["duikers"],["duit"],["duits"],["duke"],["dukedom"],["dukedoms"],["dukes"],["dulcet"],["dulcetly"],["dulcets"],["dulciana"],["dulcify"],["dulcimer"],["dulcinea"],["dulia"],["dulias"],["dull"],["dullard"],["dullards"],["dulled"],["duller"],["dullest"],["dulling"],["dullish"],["dullness"],["dulls"],["dully"],["dulness"],["dulse"],["dulses"],["duly"],["duma"],["dumas"],["dumb"],["dumbbell"],["dumbed"],["dumber"],["dumbest"],["dumbhead"],["dumbing"],["dumbly"],["dumbness"],["dumbs"],["dumdum"],["dumdums"],["dumfound"],["dumka"],["dumky"],["dummied"],["dummies"],["dummkopf"],["dummy"],["dummying"],["dump"],["dumpcart"],["dumped"],["dumper"],["dumpers"],["dumpier"],["dumpiest"],["dumpily"],["dumping"],["dumpings"],["dumpish"],["dumpling"],["dumps"],["dumpy"],["dun"],["dunam"],["dunams"],["dunce"],["dunces"],["dunch"],["dunches"],["duncical"],["duncish"],["dune"],["duneland"],["dunelike"],["dunes"],["dung"],["dungaree"],["dunged"],["dungeon"],["dungeons"],["dunghill"],["dungier"],["dungiest"],["dunging"],["dungs"],["dungy"],["dunite"],["dunites"],["dunitic"],["dunk"],["dunked"],["dunker"],["dunkers"],["dunking"],["dunks"],["dunlin"],["dunlins"],["dunnage"],["dunnages"],["dunned"],["dunner"],["dunness"],["dunnest"],["dunning"],["dunnite"],["dunnites"],["duns"],["dunt"],["dunted"],["dunting"],["dunts"],["duo"],["duodena"],["duodenal"],["duodenum"],["duolog"],["duologs"],["duologue"],["duomi"],["duomo"],["duomos"],["duopoly"],["duopsony"],["duos"],["duotone"],["duotones"],["dup"],["dupable"],["dupe"],["duped"],["duper"],["duperies"],["dupers"],["dupery"],["dupes"],["duping"],["duple"],["duplex"],["duplexed"],["duplexer"],["duplexes"],["dupped"],["dupping"],["dups"],["dura"],["durable"],["durables"],["durably"],["dural"],["duramen"],["duramens"],["durance"],["durances"],["duras"],["duration"],["durative"],["durbar"],["durbars"],["dure"],["dured"],["dures"],["duress"],["duresses"],["durian"],["durians"],["during"],["durion"],["durions"],["durmast"],["durmasts"],["durn"],["durndest"],["durned"],["durneder"],["durning"],["durns"],["duro"],["duroc"],["durocs"],["duros"],["durr"],["durra"],["durras"],["durrie"],["durries"],["durrs"],["durst"],["durum"],["durums"],["dusk"],["dusked"],["duskier"],["duskiest"],["duskily"],["dusking"],["duskish"],["dusks"],["dusky"],["dust"],["dustbin"],["dustbins"],["dusted"],["duster"],["dusters"],["dustheap"],["dustier"],["dustiest"],["dustily"],["dusting"],["dustless"],["dustlike"],["dustman"],["dustmen"],["dustoff"],["dustoffs"],["dustpan"],["dustpans"],["dustrag"],["dustrags"],["dusts"],["dustup"],["dustups"],["dusty"],["dutch"],["dutchman"],["dutchmen"],["duteous"],["dutiable"],["duties"],["dutiful"],["duty"],["duumvir"],["duumviri"],["duumvirs"],["duvet"],["duvetine"],["duvets"],["duvetyn"],["duvetyne"],["duvetyns"],["duxelles"],["dwarf"],["dwarfed"],["dwarfer"],["dwarfest"],["dwarfing"],["dwarfish"],["dwarfism"],["dwarfs"],["dwarves"],["dwell"],["dwelled"],["dweller"],["dwellers"],["dwelling"],["dwells"],["dwelt"],["dwindle"],["dwindled"],["dwindles"],["dwine"],["dwined"],["dwines"],["dwining"],["dyable"],["dyad"],["dyadic"],["dyadics"],["dyads"],["dyarchic"],["dyarchy"],["dybbuk"],["dybbukim"],["dybbuks"],["dye"],["dyeable"],["dyed"],["dyeing"],["dyeings"],["dyer"],["dyers"],["dyes"],["dyestuff"],["dyeweed"],["dyeweeds"],["dyewood"],["dyewoods"],["dying"],["dyings"],["dyke"],["dyked"],["dykes"],["dykey"],["dyking"],["dynamic"],["dynamics"],["dynamism"],["dynamist"],["dynamite"],["dynamo"],["dynamos"],["dynast"],["dynastic"],["dynasts"],["dynasty"],["dynatron"],["dyne"],["dynel"],["dynels"],["dynes"],["dynode"],["dynodes"],["dysgenic"],["dyslexia"],["dyslexic"],["dyspepsy"],["dyspnea"],["dyspneal"],["dyspneas"],["dyspneic"],["dyspnoea"],["dyspnoic"],["dystaxia"],["dystocia"],["dystonia"],["dystonic"],["dystopia"],["dysuria"],["dysurias"],["dysuric"],["dyvour"],["dyvours"],["each"],["eager"],["eagerer"],["eagerest"],["eagerly"],["eagers"],["eagle"],["eagles"],["eaglet"],["eaglets"],["eagre"],["eagres"],["eanling"],["eanlings"],["ear"],["earache"],["earaches"],["eardrop"],["eardrops"],["eardrum"],["eardrums"],["eared"],["earflap"],["earflaps"],["earful"],["earfuls"],["earing"],["earings"],["earl"],["earlap"],["earlaps"],["earldom"],["earldoms"],["earless"],["earlier"],["earliest"],["earlobe"],["earlobes"],["earlock"],["earlocks"],["earls"],["earlship"],["early"],["earmark"],["earmarks"],["earmuff"],["earmuffs"],["earn"],["earned"],["earner"],["earners"],["earnest"],["earnests"],["earning"],["earnings"],["earns"],["earphone"],["earpiece"],["earplug"],["earplugs"],["earring"],["earrings"],["ears"],["earshot"],["earshots"],["earstone"],["earth"],["earthed"],["earthen"],["earthier"],["earthily"],["earthing"],["earthly"],["earthman"],["earthmen"],["earthnut"],["earthpea"],["earths"],["earthset"],["earthy"],["earwax"],["earwaxes"],["earwig"],["earwigs"],["earworm"],["earworms"],["ease"],["eased"],["easeful"],["easel"],["easels"],["easement"],["eases"],["easier"],["easies"],["easiest"],["easily"],["easiness"],["easing"],["east"],["easter"],["easterly"],["eastern"],["easters"],["easting"],["eastings"],["easts"],["eastward"],["easy"],["eat"],["eatable"],["eatables"],["eaten"],["eater"],["eateries"],["eaters"],["eatery"],["eath"],["eating"],["eatings"],["eats"],["eau"],["eaux"],["eave"],["eaved"],["eaves"],["ebb"],["ebbed"],["ebbet"],["ebbets"],["ebbing"],["ebbs"],["ebon"],["ebonies"],["ebonise"],["ebonised"],["ebonises"],["ebonite"],["ebonites"],["ebonize"],["ebonized"],["ebonizes"],["ebons"],["ebony"],["ecarte"],["ecartes"],["ecaudate"],["ecbolic"],["ecbolics"],["ecclesia"],["eccrine"],["ecdyses"],["ecdysial"],["ecdysis"],["ecdyson"],["ecdysone"],["ecdysons"],["ecesis"],["ecesises"],["echard"],["echards"],["eche"],["eched"],["echelon"],["echelons"],["eches"],["echidna"],["echidnae"],["echidnas"],["echinate"],["eching"],["echini"],["echinoid"],["echinus"],["echo"],["echoed"],["echoer"],["echoers"],["echoes"],["echoey"],["echogram"],["echoic"],["echoing"],["echoism"],["echoisms"],["echoless"],["eclair"],["eclairs"],["eclat"],["eclats"],["eclectic"],["eclipse"],["eclipsed"],["eclipses"],["eclipsis"],["ecliptic"],["eclogite"],["eclogue"],["eclogues"],["eclosion"],["ecocidal"],["ecocide"],["ecocides"],["ecofreak"],["ecologic"],["ecology"],["economic"],["economy"],["ecotonal"],["ecotone"],["ecotones"],["ecotype"],["ecotypes"],["ecotypic"],["ecraseur"],["ecru"],["ecrus"],["ecstasy"],["ecstatic"],["ectases"],["ectasis"],["ectatic"],["ecthyma"],["ectoderm"],["ectomere"],["ectopia"],["ectopias"],["ectopic"],["ectosarc"],["ectozoa"],["ectozoan"],["ectozoon"],["ectypal"],["ectype"],["ectypes"],["ecu"],["ecumenic"],["ecus"],["eczema"],["eczemas"],["edacious"],["edacity"],["edaphic"],["eddied"],["eddies"],["eddo"],["eddoes"],["eddy"],["eddying"],["edema"],["edemas"],["edemata"],["edenic"],["edentate"],["edge"],["edged"],["edgeless"],["edger"],["edgers"],["edges"],["edgeways"],["edgewise"],["edgier"],["edgiest"],["edgily"],["edginess"],["edging"],["edgings"],["edgy"],["edh"],["edhs"],["edible"],["edibles"],["edict"],["edictal"],["edicts"],["edifice"],["edifices"],["edified"],["edifier"],["edifiers"],["edifies"],["edify"],["edifying"],["edile"],["ediles"],["edit"],["editable"],["edited"],["editing"],["edition"],["editions"],["editor"],["editors"],["editress"],["edits"],["educable"],["educate"],["educated"],["educates"],["educator"],["educe"],["educed"],["educes"],["educible"],["educing"],["educt"],["eduction"],["eductive"],["eductor"],["eductors"],["educts"],["eel"],["eelgrass"],["eelier"],["eeliest"],["eellike"],["eelpout"],["eelpouts"],["eels"],["eelworm"],["eelworms"],["eely"],["eerie"],["eerier"],["eeriest"],["eerily"],["eeriness"],["eery"],["ef"],["eff"],["effable"],["efface"],["effaced"],["effacer"],["effacers"],["effaces"],["effacing"],["effect"],["effected"],["effecter"],["effector"],["effects"],["effendi"],["effendis"],["efferent"],["effete"],["effetely"],["efficacy"],["effigial"],["effigies"],["effigy"],["effluent"],["effluvia"],["efflux"],["effluxes"],["effort"],["efforts"],["effs"],["effulge"],["effulged"],["effulges"],["effuse"],["effused"],["effuses"],["effusing"],["effusion"],["effusive"],["efs"],["eft"],["efts"],["eftsoon"],["eftsoons"],["egad"],["egads"],["egal"],["egalite"],["egalites"],["eger"],["egers"],["egest"],["egesta"],["egested"],["egesting"],["egestion"],["egestive"],["egests"],["egg"],["eggar"],["eggars"],["eggcup"],["eggcups"],["egged"],["egger"],["eggers"],["egghead"],["eggheads"],["egging"],["eggless"],["eggnog"],["eggnogs"],["eggplant"],["eggs"],["eggshell"],["eggy"],["egis"],["egises"],["eglatere"],["ego"],["egoism"],["egoisms"],["egoist"],["egoistic"],["egoists"],["egoless"],["egomania"],["egos"],["egotism"],["egotisms"],["egotist"],["egotists"],["egress"],["egressed"],["egresses"],["egret"],["egrets"],["egyptian"],["eh"],["eide"],["eider"],["eiders"],["eidetic"],["eidola"],["eidolic"],["eidolon"],["eidolons"],["eidos"],["eight"],["eighteen"],["eighth"],["eighthly"],["eighths"],["eighties"],["eights"],["eightvo"],["eightvos"],["eighty"],["eikon"],["eikones"],["eikons"],["einkorn"],["einkorns"],["einstein"],["eirenic"],["either"],["eject"],["ejecta"],["ejected"],["ejecting"],["ejection"],["ejective"],["ejector"],["ejectors"],["ejects"],["eke"],["eked"],["ekes"],["eking"],["ekistic"],["ekistics"],["ekpwele"],["ekpweles"],["ektexine"],["ekuele"],["el"],["elain"],["elains"],["elan"],["eland"],["elands"],["elans"],["elaphine"],["elapid"],["elapids"],["elapine"],["elapse"],["elapsed"],["elapses"],["elapsing"],["elastase"],["elastic"],["elastics"],["elastin"],["elastins"],["elate"],["elated"],["elatedly"],["elater"],["elaterid"],["elaterin"],["elaters"],["elates"],["elating"],["elation"],["elations"],["elative"],["elatives"],["elbow"],["elbowed"],["elbowing"],["elbows"],["eld"],["elder"],["elderly"],["elders"],["eldest"],["eldrich"],["eldritch"],["elds"],["elect"],["elected"],["electee"],["electees"],["electing"],["election"],["elective"],["elector"],["electors"],["electret"],["electric"],["electro"],["electron"],["electros"],["electrum"],["elects"],["elegance"],["elegancy"],["elegant"],["elegiac"],["elegiacs"],["elegies"],["elegise"],["elegised"],["elegises"],["elegist"],["elegists"],["elegit"],["elegits"],["elegize"],["elegized"],["elegizes"],["elegy"],["element"],["elements"],["elemi"],["elemis"],["elenchi"],["elenchic"],["elenchus"],["elenctic"],["elephant"],["elevate"],["elevated"],["elevates"],["elevator"],["eleven"],["elevens"],["eleventh"],["elevon"],["elevons"],["elf"],["elfin"],["elfins"],["elfish"],["elfishly"],["elflike"],["elflock"],["elflocks"],["elhi"],["elicit"],["elicited"],["elicitor"],["elicits"],["elide"],["elided"],["elides"],["elidible"],["eliding"],["eligible"],["eligibly"],["elint"],["elints"],["elision"],["elisions"],["elite"],["elites"],["elitism"],["elitisms"],["elitist"],["elitists"],["elixir"],["elixirs"],["elk"],["elkhound"],["elks"],["ell"],["ellipse"],["ellipses"],["ellipsis"],["elliptic"],["ells"],["elm"],["elmier"],["elmiest"],["elms"],["elmy"],["elodea"],["elodeas"],["eloign"],["eloigned"],["eloigner"],["eloigns"],["eloin"],["eloined"],["eloiner"],["eloiners"],["eloining"],["eloins"],["elongate"],["elope"],["eloped"],["eloper"],["elopers"],["elopes"],["eloping"],["eloquent"],["els"],["else"],["eluant"],["eluants"],["eluate"],["eluates"],["elude"],["eluded"],["eluder"],["eluders"],["eludes"],["eluding"],["eluent"],["eluents"],["elusion"],["elusions"],["elusive"],["elusory"],["elute"],["eluted"],["elutes"],["eluting"],["elution"],["elutions"],["eluvia"],["eluvial"],["eluviate"],["eluvium"],["eluviums"],["elver"],["elvers"],["elves"],["elvish"],["elvishly"],["elysian"],["elytra"],["elytroid"],["elytron"],["elytrous"],["elytrum"],["em"],["emaciate"],["emanate"],["emanated"],["emanates"],["emanator"],["embalm"],["embalmed"],["embalmer"],["embalms"],["embank"],["embanked"],["embanks"],["embar"],["embargo"],["embark"],["embarked"],["embarks"],["embarred"],["embars"],["embassy"],["embattle"],["embay"],["embayed"],["embaying"],["embays"],["embed"],["embedded"],["embeds"],["ember"],["embers"],["embezzle"],["embitter"],["emblaze"],["emblazed"],["emblazer"],["emblazes"],["emblazon"],["emblem"],["emblemed"],["emblems"],["embodied"],["embodier"],["embodies"],["embody"],["embolden"],["emboli"],["embolic"],["embolies"],["embolism"],["embolus"],["emboly"],["emborder"],["embosk"],["embosked"],["embosks"],["embosom"],["embosoms"],["emboss"],["embossed"],["embosser"],["embosses"],["embow"],["embowed"],["embowel"],["embowels"],["embower"],["embowers"],["embowing"],["embows"],["embrace"],["embraced"],["embracer"],["embraces"],["embroil"],["embroils"],["embrown"],["embrowns"],["embrue"],["embrued"],["embrues"],["embruing"],["embrute"],["embruted"],["embrutes"],["embryo"],["embryoid"],["embryon"],["embryons"],["embryos"],["emcee"],["emceed"],["emceeing"],["emcees"],["eme"],["emeer"],["emeerate"],["emeers"],["emend"],["emendate"],["emended"],["emender"],["emenders"],["emending"],["emends"],["emerald"],["emeralds"],["emerge"],["emerged"],["emergent"],["emerges"],["emerging"],["emeries"],["emerita"],["emeritae"],["emeriti"],["emeritus"],["emerod"],["emerods"],["emeroid"],["emeroids"],["emersed"],["emersion"],["emery"],["emes"],["emeses"],["emesis"],["emetic"],["emetics"],["emetin"],["emetine"],["emetines"],["emetins"],["emeu"],["emeus"],["emeute"],["emeutes"],["emic"],["emigrant"],["emigrate"],["emigre"],["emigres"],["eminence"],["eminency"],["eminent"],["emir"],["emirate"],["emirates"],["emirs"],["emissary"],["emission"],["emissive"],["emit"],["emits"],["emitted"],["emitter"],["emitters"],["emitting"],["emmer"],["emmers"],["emmet"],["emmets"],["emodin"],["emodins"],["emote"],["emoted"],["emoter"],["emoters"],["emotes"],["emoting"],["emotion"],["emotions"],["emotive"],["empale"],["empaled"],["empaler"],["empalers"],["empales"],["empaling"],["empanada"],["empanel"],["empanels"],["empathic"],["empathy"],["emperies"],["emperor"],["emperors"],["empery"],["emphases"],["emphasis"],["emphatic"],["empire"],["empires"],["empiric"],["empirics"],["emplace"],["emplaced"],["emplaces"],["emplane"],["emplaned"],["emplanes"],["employ"],["employe"],["employed"],["employee"],["employer"],["employes"],["employs"],["empoison"],["emporia"],["emporium"],["empower"],["empowers"],["empress"],["emprise"],["emprises"],["emprize"],["emprizes"],["emptied"],["emptier"],["emptiers"],["empties"],["emptiest"],["emptily"],["emptings"],["emptins"],["empty"],["emptying"],["empurple"],["empyema"],["empyemas"],["empyemic"],["empyreal"],["empyrean"],["ems"],["emu"],["emulate"],["emulated"],["emulates"],["emulator"],["emulous"],["emulsify"],["emulsion"],["emulsive"],["emulsoid"],["emus"],["emyd"],["emyde"],["emydes"],["emyds"],["en"],["enable"],["enabled"],["enabler"],["enablers"],["enables"],["enabling"],["enact"],["enacted"],["enacting"],["enactive"],["enactor"],["enactors"],["enactory"],["enacts"],["enamel"],["enameled"],["enameler"],["enamels"],["enamine"],["enamines"],["enamor"],["enamored"],["enamors"],["enamour"],["enamours"],["enate"],["enates"],["enatic"],["enation"],["enations"],["encaenia"],["encage"],["encaged"],["encages"],["encaging"],["encamp"],["encamped"],["encamps"],["encase"],["encased"],["encases"],["encash"],["encashed"],["encashes"],["encasing"],["enceinte"],["enchain"],["enchains"],["enchant"],["enchants"],["enchase"],["enchased"],["enchaser"],["enchases"],["enchoric"],["encina"],["encinal"],["encinas"],["encipher"],["encircle"],["enclasp"],["enclasps"],["enclave"],["enclaves"],["enclitic"],["enclose"],["enclosed"],["encloser"],["encloses"],["encode"],["encoded"],["encoder"],["encoders"],["encodes"],["encoding"],["encomia"],["encomium"],["encore"],["encored"],["encores"],["encoring"],["encroach"],["encrust"],["encrusts"],["encrypt"],["encrypts"],["encumber"],["encyclic"],["encyst"],["encysted"],["encysts"],["end"],["endamage"],["endameba"],["endanger"],["endarch"],["endarchy"],["endbrain"],["endear"],["endeared"],["endears"],["endeavor"],["ended"],["endemial"],["endemic"],["endemics"],["endemism"],["ender"],["endermic"],["enders"],["endexine"],["endgame"],["endgames"],["ending"],["endings"],["endite"],["endited"],["endites"],["enditing"],["endive"],["endives"],["endleaf"],["endless"],["endlong"],["endmost"],["endnote"],["endnotes"],["endocarp"],["endocast"],["endoderm"],["endogamy"],["endogen"],["endogens"],["endogeny"],["endopod"],["endopods"],["endorse"],["endorsed"],["endorsee"],["endorser"],["endorses"],["endorsor"],["endosarc"],["endosmos"],["endosome"],["endostea"],["endow"],["endowed"],["endower"],["endowers"],["endowing"],["endows"],["endozoic"],["endpaper"],["endplate"],["endpoint"],["endrin"],["endrins"],["ends"],["endue"],["endued"],["endues"],["enduing"],["endure"],["endured"],["endures"],["enduring"],["enduro"],["enduros"],["endways"],["endwise"],["enema"],["enemas"],["enemata"],["enemies"],["enemy"],["energid"],["energids"],["energies"],["energise"],["energize"],["energy"],["enervate"],["enface"],["enfaced"],["enfaces"],["enfacing"],["enfeeble"],["enfeoff"],["enfeoffs"],["enfetter"],["enfever"],["enfevers"],["enfilade"],["enflame"],["enflamed"],["enflames"],["enfold"],["enfolded"],["enfolder"],["enfolds"],["enforce"],["enforced"],["enforcer"],["enforces"],["enframe"],["enframed"],["enframes"],["eng"],["engage"],["engaged"],["engager"],["engagers"],["engages"],["engaging"],["engender"],["engild"],["engilded"],["engilds"],["engine"],["engined"],["engineer"],["enginery"],["engines"],["engining"],["enginous"],["engird"],["engirded"],["engirdle"],["engirds"],["engirt"],["english"],["englut"],["engluts"],["engorge"],["engorged"],["engorges"],["engraft"],["engrafts"],["engrail"],["engrails"],["engrain"],["engrains"],["engram"],["engramme"],["engrams"],["engrave"],["engraved"],["engraver"],["engraves"],["engross"],["engs"],["engulf"],["engulfed"],["engulfs"],["enhalo"],["enhaloed"],["enhaloes"],["enhalos"],["enhance"],["enhanced"],["enhancer"],["enhances"],["enigma"],["enigmas"],["enigmata"],["enisle"],["enisled"],["enisles"],["enisling"],["enjambed"],["enjoin"],["enjoined"],["enjoiner"],["enjoins"],["enjoy"],["enjoyed"],["enjoyer"],["enjoyers"],["enjoying"],["enjoys"],["enkindle"],["enlace"],["enlaced"],["enlaces"],["enlacing"],["enlarge"],["enlarged"],["enlarger"],["enlarges"],["enlist"],["enlisted"],["enlistee"],["enlister"],["enlists"],["enliven"],["enlivens"],["enmesh"],["enmeshed"],["enmeshes"],["enmities"],["enmity"],["ennead"],["enneadic"],["enneads"],["enneagon"],["ennoble"],["ennobled"],["ennobler"],["ennobles"],["ennui"],["ennuis"],["ennuye"],["ennuyee"],["enol"],["enolase"],["enolases"],["enolic"],["enology"],["enols"],["enorm"],["enormity"],["enormous"],["enosis"],["enosises"],["enough"],["enoughs"],["enounce"],["enounced"],["enounces"],["enow"],["enows"],["enplane"],["enplaned"],["enplanes"],["enquire"],["enquired"],["enquires"],["enquiry"],["enrage"],["enraged"],["enrages"],["enraging"],["enrapt"],["enravish"],["enrich"],["enriched"],["enricher"],["enriches"],["enrobe"],["enrobed"],["enrober"],["enrobers"],["enrobes"],["enrobing"],["enrol"],["enroll"],["enrolled"],["enrollee"],["enroller"],["enrolls"],["enrols"],["enroot"],["enrooted"],["enroots"],["ens"],["ensample"],["ensconce"],["enscroll"],["ensemble"],["enserf"],["enserfed"],["enserfs"],["ensheath"],["enshrine"],["enshroud"],["ensiform"],["ensign"],["ensigncy"],["ensigns"],["ensilage"],["ensile"],["ensiled"],["ensiles"],["ensiling"],["enskied"],["enskies"],["ensky"],["enskyed"],["enskying"],["enslave"],["enslaved"],["enslaver"],["enslaves"],["ensnare"],["ensnared"],["ensnarer"],["ensnares"],["ensnarl"],["ensnarls"],["ensorcel"],["ensoul"],["ensouled"],["ensouls"],["ensphere"],["ensue"],["ensued"],["ensues"],["ensuing"],["ensure"],["ensured"],["ensurer"],["ensurers"],["ensures"],["ensuring"],["enswathe"],["entail"],["entailed"],["entailer"],["entails"],["entameba"],["entangle"],["entases"],["entasia"],["entasias"],["entasis"],["entastic"],["entellus"],["entente"],["ententes"],["enter"],["entera"],["enteral"],["entered"],["enterer"],["enterers"],["enteric"],["entering"],["enteron"],["enterons"],["enters"],["enthalpy"],["enthetic"],["enthral"],["enthrall"],["enthrals"],["enthrone"],["enthuse"],["enthused"],["enthuses"],["entia"],["entice"],["enticed"],["enticer"],["enticers"],["entices"],["enticing"],["entire"],["entirely"],["entires"],["entirety"],["entities"],["entitle"],["entitled"],["entitles"],["entity"],["entoderm"],["entoil"],["entoiled"],["entoils"],["entomb"],["entombed"],["entombs"],["entopic"],["entozoa"],["entozoal"],["entozoan"],["entozoic"],["entozoon"],["entrails"],["entrain"],["entrains"],["entrance"],["entrant"],["entrants"],["entrap"],["entraps"],["entreat"],["entreats"],["entreaty"],["entree"],["entrees"],["entrench"],["entrepot"],["entresol"],["entries"],["entropic"],["entropy"],["entrust"],["entrusts"],["entry"],["entryway"],["entwine"],["entwined"],["entwines"],["entwist"],["entwists"],["enure"],["enured"],["enures"],["enuresis"],["enuretic"],["enuring"],["envelop"],["envelope"],["envelops"],["envenom"],["envenoms"],["enviable"],["enviably"],["envied"],["envier"],["enviers"],["envies"],["envious"],["environ"],["environs"],["envisage"],["envision"],["envoi"],["envois"],["envoy"],["envoys"],["envy"],["envying"],["enwheel"],["enwheels"],["enwind"],["enwinds"],["enwomb"],["enwombed"],["enwombs"],["enwound"],["enwrap"],["enwraps"],["enzootic"],["enzym"],["enzyme"],["enzymes"],["enzymic"],["enzyms"],["eobiont"],["eobionts"],["eohippus"],["eolian"],["eolipile"],["eolith"],["eolithic"],["eoliths"],["eolopile"],["eon"],["eonian"],["eonism"],["eonisms"],["eons"],["eosin"],["eosine"],["eosines"],["eosinic"],["eosins"],["epact"],["epacts"],["eparch"],["eparchs"],["eparchy"],["epaulet"],["epaulets"],["epazote"],["epazotes"],["epee"],["epeeist"],["epeeists"],["epees"],["epeiric"],["ependyma"],["epergne"],["epergnes"],["epha"],["ephah"],["ephahs"],["ephas"],["ephebe"],["ephebes"],["ephebi"],["ephebic"],["epheboi"],["ephebos"],["ephebus"],["ephedra"],["ephedras"],["ephedrin"],["ephemera"],["ephod"],["ephods"],["ephor"],["ephoral"],["ephorate"],["ephori"],["ephors"],["epiblast"],["epibolic"],["epiboly"],["epic"],["epical"],["epically"],["epicalyx"],["epicarp"],["epicarps"],["epicedia"],["epicene"],["epicenes"],["epiclike"],["epicotyl"],["epics"],["epicure"],["epicures"],["epicycle"],["epidemic"],["epiderm"],["epiderms"],["epidote"],["epidotes"],["epidotic"],["epidural"],["epifauna"],["epifocal"],["epigeal"],["epigean"],["epigeic"],["epigene"],["epigenic"],["epigeous"],["epigon"],["epigone"],["epigones"],["epigoni"],["epigonic"],["epigons"],["epigonus"],["epigram"],["epigrams"],["epigraph"],["epigyny"],["epilepsy"],["epilog"],["epilogs"],["epilogue"],["epimer"],["epimere"],["epimeres"],["epimeric"],["epimers"],["epimysia"],["epinaoi"],["epinaos"],["epinasty"],["epiphany"],["epiphyte"],["episcia"],["episcias"],["episcope"],["episode"],["episodes"],["episodic"],["episomal"],["episome"],["episomes"],["epistasy"],["epistle"],["epistler"],["epistles"],["epistome"],["epistyle"],["epitaph"],["epitaphs"],["epitases"],["epitasis"],["epitaxic"],["epitaxy"],["epithet"],["epithets"],["epitome"],["epitomes"],["epitomic"],["epizoa"],["epizoic"],["epizoism"],["epizoite"],["epizoon"],["epizooty"],["epoch"],["epochal"],["epochs"],["epode"],["epodes"],["eponym"],["eponymic"],["eponyms"],["eponymy"],["epopee"],["epopees"],["epopoeia"],["epos"],["eposes"],["epoxide"],["epoxides"],["epoxied"],["epoxies"],["epoxy"],["epoxyed"],["epoxying"],["epsilon"],["epsilons"],["equable"],["equably"],["equal"],["equaled"],["equaling"],["equalise"],["equality"],["equalize"],["equalled"],["equally"],["equals"],["equate"],["equated"],["equates"],["equating"],["equation"],["equator"],["equators"],["equerry"],["equine"],["equinely"],["equines"],["equinity"],["equinox"],["equip"],["equipage"],["equipped"],["equipper"],["equips"],["equiseta"],["equitant"],["equites"],["equities"],["equity"],["equivoke"],["er"],["era"],["eradiate"],["eras"],["erasable"],["erase"],["erased"],["eraser"],["erasers"],["erases"],["erasing"],["erasion"],["erasions"],["erasure"],["erasures"],["erbium"],["erbiums"],["ere"],["erect"],["erected"],["erecter"],["erecters"],["erectile"],["erecting"],["erection"],["erective"],["erectly"],["erector"],["erectors"],["erects"],["erelong"],["eremite"],["eremites"],["eremitic"],["eremuri"],["eremurus"],["erenow"],["erepsin"],["erepsins"],["erethic"],["erethism"],["erewhile"],["erg"],["ergastic"],["ergate"],["ergates"],["ergo"],["ergodic"],["ergot"],["ergotic"],["ergotism"],["ergots"],["ergs"],["erica"],["ericas"],["ericoid"],["erigeron"],["eringo"],["eringoes"],["eringos"],["eristic"],["eristics"],["erlking"],["erlkings"],["ermine"],["ermined"],["ermines"],["ern"],["erne"],["ernes"],["erns"],["erode"],["eroded"],["erodent"],["erodes"],["erodible"],["eroding"],["erogenic"],["eros"],["erose"],["erosely"],["eroses"],["erosible"],["erosion"],["erosions"],["erosive"],["erotic"],["erotica"],["erotical"],["erotics"],["erotism"],["erotisms"],["erotize"],["erotized"],["erotizes"],["err"],["errancy"],["errand"],["errands"],["errant"],["errantly"],["errantry"],["errants"],["errata"],["erratas"],["erratic"],["erratics"],["erratum"],["erred"],["errhine"],["errhines"],["erring"],["erringly"],["error"],["errors"],["errs"],["ers"],["ersatz"],["ersatzes"],["erses"],["erst"],["eruct"],["eructate"],["eructed"],["eructing"],["eructs"],["erudite"],["erugo"],["erugos"],["erumpent"],["erupt"],["erupted"],["erupting"],["eruption"],["eruptive"],["erupts"],["ervil"],["ervils"],["eryngo"],["eryngoes"],["eryngos"],["erythema"],["erythron"],["es"],["escalade"],["escalate"],["escallop"],["escalop"],["escalops"],["escapade"],["escape"],["escaped"],["escapee"],["escapees"],["escaper"],["escapers"],["escapes"],["escaping"],["escapism"],["escapist"],["escar"],["escargot"],["escarole"],["escarp"],["escarped"],["escarps"],["escars"],["eschalot"],["eschar"],["eschars"],["escheat"],["escheats"],["eschew"],["eschewal"],["eschewed"],["eschews"],["escolar"],["escolars"],["escort"],["escorted"],["escorts"],["escot"],["escoted"],["escoting"],["escots"],["escrow"],["escrowed"],["escrows"],["escuage"],["escuages"],["escudo"],["escudos"],["esculent"],["eserine"],["eserines"],["eses"],["eskar"],["eskars"],["esker"],["eskers"],["esophagi"],["esoteric"],["espalier"],["espanol"],["esparto"],["espartos"],["especial"],["espial"],["espials"],["espied"],["espiegle"],["espies"],["espousal"],["espouse"],["espoused"],["espouser"],["espouses"],["espresso"],["esprit"],["esprits"],["espy"],["espying"],["esquire"],["esquired"],["esquires"],["ess"],["essay"],["essayed"],["essayer"],["essayers"],["essaying"],["essayist"],["essays"],["essence"],["essences"],["esses"],["essoin"],["essoins"],["essonite"],["estancia"],["estate"],["estated"],["estates"],["estating"],["esteem"],["esteemed"],["esteems"],["ester"],["esterase"],["esterify"],["esters"],["estheses"],["esthesia"],["esthesis"],["esthete"],["esthetes"],["esthetic"],["estimate"],["estival"],["estivate"],["estop"],["estopped"],["estoppel"],["estops"],["estovers"],["estragon"],["estral"],["estrange"],["estray"],["estrayed"],["estrays"],["estreat"],["estreats"],["estrin"],["estrins"],["estriol"],["estriols"],["estrogen"],["estrone"],["estrones"],["estrous"],["estrual"],["estrum"],["estrums"],["estrus"],["estruses"],["estuary"],["esurient"],["et"],["eta"],["etagere"],["etageres"],["etalon"],["etalons"],["etamin"],["etamine"],["etamines"],["etamins"],["etape"],["etapes"],["etas"],["etatism"],["etatisms"],["etatist"],["etcetera"],["etch"],["etchant"],["etchants"],["etched"],["etcher"],["etchers"],["etches"],["etching"],["etchings"],["eternal"],["eternals"],["eterne"],["eternise"],["eternity"],["eternize"],["etesian"],["etesians"],["eth"],["ethane"],["ethanes"],["ethanol"],["ethanols"],["ethene"],["ethenes"],["ethephon"],["ether"],["ethereal"],["etheric"],["etherify"],["etherish"],["etherize"],["ethers"],["ethic"],["ethical"],["ethicals"],["ethician"],["ethicist"],["ethicize"],["ethics"],["ethinyl"],["ethinyls"],["ethion"],["ethions"],["ethmoid"],["ethmoids"],["ethnarch"],["ethnic"],["ethnical"],["ethnics"],["ethnos"],["ethnoses"],["ethology"],["ethos"],["ethoses"],["ethoxies"],["ethoxy"],["ethoxyl"],["ethoxyls"],["eths"],["ethyl"],["ethylate"],["ethylene"],["ethylic"],["ethyls"],["ethyne"],["ethynes"],["ethynyl"],["ethynyls"],["etic"],["etiolate"],["etiology"],["etna"],["etnas"],["etoile"],["etoiles"],["etude"],["etudes"],["etui"],["etuis"],["etwee"],["etwees"],["etyma"],["etymon"],["etymons"],["eucaine"],["eucaines"],["eucalypt"],["eucharis"],["euchre"],["euchred"],["euchres"],["euchring"],["euclase"],["euclases"],["eucrite"],["eucrites"],["eucritic"],["eudaemon"],["eudemon"],["eudemons"],["eugenia"],["eugenias"],["eugenic"],["eugenics"],["eugenist"],["eugenol"],["eugenols"],["euglena"],["euglenas"],["eulachan"],["eulachon"],["eulogia"],["eulogiae"],["eulogias"],["eulogies"],["eulogise"],["eulogist"],["eulogium"],["eulogize"],["eulogy"],["eunuch"],["eunuchs"],["euonymus"],["eupatrid"],["eupepsia"],["eupepsy"],["eupeptic"],["euphenic"],["euphonic"],["euphony"],["euphoria"],["euphoric"],["euphotic"],["euphrasy"],["euphroe"],["euphroes"],["euphuism"],["euphuist"],["euploid"],["euploids"],["euploidy"],["eupnea"],["eupneas"],["eupneic"],["eupnoea"],["eupnoeas"],["eupnoeic"],["eureka"],["euripi"],["euripus"],["euro"],["eurokies"],["eurokous"],["euroky"],["europium"],["euros"],["eurybath"],["euryoky"],["eurythmy"],["eustacy"],["eustatic"],["eustele"],["eusteles"],["eutaxies"],["eutaxy"],["eutectic"],["eutrophy"],["euxenite"],["evacuant"],["evacuate"],["evacuee"],["evacuees"],["evadable"],["evade"],["evaded"],["evader"],["evaders"],["evades"],["evadible"],["evading"],["evaluate"],["evanesce"],["evangel"],["evangels"],["evanish"],["evasion"],["evasions"],["evasive"],["eve"],["evection"],["even"],["evened"],["evener"],["eveners"],["evenest"],["evenfall"],["evening"],["evenings"],["evenly"],["evenness"],["evens"],["evensong"],["event"],["eventful"],["eventide"],["events"],["eventual"],["ever"],["evermore"],["eversion"],["evert"],["everted"],["everting"],["evertor"],["evertors"],["everts"],["every"],["everyday"],["everyman"],["everymen"],["everyone"],["everyway"],["eves"],["evict"],["evicted"],["evictee"],["evictees"],["evicting"],["eviction"],["evictor"],["evictors"],["evicts"],["evidence"],["evident"],["evil"],["evildoer"],["eviler"],["evilest"],["eviller"],["evillest"],["evilly"],["evilness"],["evils"],["evince"],["evinced"],["evinces"],["evincing"],["evincive"],["evitable"],["evite"],["evited"],["evites"],["eviting"],["evocable"],["evocator"],["evoke"],["evoked"],["evoker"],["evokers"],["evokes"],["evoking"],["evolute"],["evolutes"],["evolve"],["evolved"],["evolver"],["evolvers"],["evolves"],["evolving"],["evonymus"],["evulsion"],["evzone"],["evzones"],["ewe"],["ewer"],["ewers"],["ewes"],["ex"],["exact"],["exacta"],["exactas"],["exacted"],["exacter"],["exacters"],["exactest"],["exacting"],["exaction"],["exactly"],["exactor"],["exactors"],["exacts"],["exalt"],["exalted"],["exalter"],["exalters"],["exalting"],["exalts"],["exam"],["examen"],["examens"],["examine"],["examined"],["examinee"],["examiner"],["examines"],["example"],["exampled"],["examples"],["exams"],["exanthem"],["exarch"],["exarchal"],["exarchs"],["exarchy"],["excavate"],["exceed"],["exceeded"],["exceeder"],["exceeds"],["excel"],["excelled"],["excels"],["except"],["excepted"],["excepts"],["excerpt"],["excerpts"],["excess"],["excessed"],["excesses"],["exchange"],["excide"],["excided"],["excides"],["exciding"],["excimer"],["excimers"],["exciple"],["exciples"],["excise"],["excised"],["excises"],["excising"],["excision"],["excitant"],["excite"],["excited"],["exciter"],["exciters"],["excites"],["exciting"],["exciton"],["excitons"],["excitor"],["excitors"],["exclaim"],["exclaims"],["exclave"],["exclaves"],["exclude"],["excluded"],["excluder"],["excludes"],["excreta"],["excretal"],["excrete"],["excreted"],["excreter"],["excretes"],["excursus"],["excuse"],["excused"],["excuser"],["excusers"],["excuses"],["excusing"],["exec"],["execrate"],["execs"],["execute"],["executed"],["executer"],["executes"],["executor"],["exedra"],["exedrae"],["exegeses"],["exegesis"],["exegete"],["exegetes"],["exegetic"],["exempla"],["exemplar"],["exemplum"],["exempt"],["exempted"],["exempts"],["exequial"],["exequies"],["exequy"],["exercise"],["exergual"],["exergue"],["exergues"],["exert"],["exerted"],["exerting"],["exertion"],["exertive"],["exerts"],["exes"],["exeunt"],["exhalant"],["exhale"],["exhaled"],["exhalent"],["exhales"],["exhaling"],["exhaust"],["exhausts"],["exhibit"],["exhibits"],["exhort"],["exhorted"],["exhorter"],["exhorts"],["exhume"],["exhumed"],["exhumer"],["exhumers"],["exhumes"],["exhuming"],["exigence"],["exigency"],["exigent"],["exigible"],["exiguity"],["exiguous"],["exile"],["exiled"],["exiles"],["exilian"],["exilic"],["exiling"],["eximious"],["exine"],["exines"],["exist"],["existed"],["existent"],["existing"],["exists"],["exit"],["exited"],["exiting"],["exitless"],["exits"],["exocarp"],["exocarps"],["exocrine"],["exoderm"],["exoderms"],["exodoi"],["exodos"],["exodus"],["exoduses"],["exoergic"],["exogamic"],["exogamy"],["exogen"],["exogens"],["exon"],["exonic"],["exons"],["exonumia"],["exorable"],["exorcise"],["exorcism"],["exorcist"],["exorcize"],["exordia"],["exordial"],["exordium"],["exosmic"],["exosmose"],["exospore"],["exoteric"],["exotic"],["exotica"],["exotics"],["exotism"],["exotisms"],["exotoxic"],["exotoxin"],["expand"],["expanded"],["expander"],["expandor"],["expands"],["expanse"],["expanses"],["expect"],["expected"],["expects"],["expedite"],["expel"],["expelled"],["expellee"],["expeller"],["expels"],["expend"],["expended"],["expender"],["expends"],["expense"],["expensed"],["expenses"],["expert"],["experted"],["expertly"],["experts"],["expiable"],["expiate"],["expiated"],["expiates"],["expiator"],["expire"],["expired"],["expirer"],["expirers"],["expires"],["expiries"],["expiring"],["expiry"],["explain"],["explains"],["explant"],["explants"],["explicit"],["explode"],["exploded"],["exploder"],["explodes"],["exploit"],["exploits"],["explore"],["explored"],["explorer"],["explores"],["expo"],["exponent"],["export"],["exported"],["exporter"],["exports"],["expos"],["exposal"],["exposals"],["expose"],["exposed"],["exposer"],["exposers"],["exposes"],["exposing"],["exposit"],["exposits"],["exposure"],["expound"],["expounds"],["express"],["expresso"],["expulse"],["expulsed"],["expulses"],["expunge"],["expunged"],["expunger"],["expunges"],["exscind"],["exscinds"],["exsecant"],["exsect"],["exsected"],["exsects"],["exsert"],["exserted"],["exserts"],["extant"],["extend"],["extended"],["extender"],["extends"],["extensor"],["extent"],["extents"],["exterior"],["extern"],["external"],["externe"],["externes"],["externs"],["extinct"],["extincts"],["extol"],["extoll"],["extolled"],["extoller"],["extolls"],["extols"],["extort"],["extorted"],["extorter"],["extorts"],["extra"],["extract"],["extracts"],["extrados"],["extras"],["extrema"],["extreme"],["extremer"],["extremes"],["extremum"],["extrorse"],["extrude"],["extruded"],["extruder"],["extrudes"],["extubate"],["exudate"],["exudates"],["exude"],["exuded"],["exudes"],["exuding"],["exult"],["exultant"],["exulted"],["exulting"],["exults"],["exurb"],["exurban"],["exurbia"],["exurbias"],["exurbs"],["exuvia"],["exuviae"],["exuvial"],["exuviate"],["exuvium"],["eyas"],["eyases"],["eye"],["eyeable"],["eyeball"],["eyeballs"],["eyebeam"],["eyebeams"],["eyebolt"],["eyebolts"],["eyebrow"],["eyebrows"],["eyecup"],["eyecups"],["eyed"],["eyedness"],["eyeful"],["eyefuls"],["eyeglass"],["eyehole"],["eyeholes"],["eyehook"],["eyehooks"],["eyeing"],["eyelash"],["eyeless"],["eyelet"],["eyelets"],["eyelid"],["eyelids"],["eyelike"],["eyeliner"],["eyen"],["eyepiece"],["eyepoint"],["eyer"],["eyers"],["eyes"],["eyeshade"],["eyeshot"],["eyeshots"],["eyesight"],["eyesome"],["eyesore"],["eyesores"],["eyespot"],["eyespots"],["eyestalk"],["eyestone"],["eyeteeth"],["eyetooth"],["eyewash"],["eyewater"],["eyewink"],["eyewinks"],["eying"],["eyne"],["eyra"],["eyras"],["eyre"],["eyres"],["eyrie"],["eyries"],["eyrir"],["eyry"],["fa"],["fable"],["fabled"],["fabler"],["fablers"],["fables"],["fabliau"],["fabliaux"],["fabling"],["fabric"],["fabrics"],["fabular"],["fabulist"],["fabulous"],["facade"],["facades"],["face"],["faceable"],["faced"],["facedown"],["faceless"],["facer"],["facers"],["faces"],["facet"],["facete"],["faceted"],["facetely"],["facetiae"],["faceting"],["facets"],["facetted"],["faceup"],["facia"],["facial"],["facially"],["facials"],["facias"],["faciend"],["faciends"],["facies"],["facile"],["facilely"],["facility"],["facing"],["facings"],["fact"],["factful"],["faction"],["factions"],["factious"],["factor"],["factored"],["factors"],["factory"],["factotum"],["facts"],["factual"],["facture"],["factures"],["facula"],["faculae"],["facular"],["faculty"],["fad"],["fadable"],["faddier"],["faddiest"],["faddish"],["faddism"],["faddisms"],["faddist"],["faddists"],["faddy"],["fade"],["fadeaway"],["faded"],["fadedly"],["fadeless"],["fader"],["faders"],["fades"],["fadge"],["fadged"],["fadges"],["fadging"],["fading"],["fadings"],["fado"],["fados"],["fads"],["faecal"],["faeces"],["faena"],["faenas"],["faerie"],["faeries"],["faery"],["fag"],["fagged"],["fagging"],["faggot"],["faggoted"],["faggotry"],["faggots"],["faggoty"],["faggy"],["fagin"],["fagins"],["fagot"],["fagoted"],["fagoter"],["fagoters"],["fagoting"],["fagots"],["fags"],["fahlband"],["faience"],["faiences"],["fail"],["failed"],["failing"],["failings"],["faille"],["failles"],["fails"],["failure"],["failures"],["fain"],["faineant"],["fainer"],["fainest"],["faint"],["fainted"],["fainter"],["fainters"],["faintest"],["fainting"],["faintish"],["faintly"],["faints"],["fair"],["faired"],["fairer"],["fairest"],["fairies"],["fairing"],["fairings"],["fairish"],["fairlead"],["fairly"],["fairness"],["fairs"],["fairway"],["fairways"],["fairy"],["fairyism"],["faith"],["faithed"],["faithful"],["faithing"],["faiths"],["faitour"],["faitours"],["fajita"],["fajitas"],["fake"],["faked"],["fakeer"],["fakeers"],["faker"],["fakeries"],["fakers"],["fakery"],["fakes"],["fakey"],["faking"],["fakir"],["fakirs"],["falafel"],["falbala"],["falbalas"],["falcate"],["falcated"],["falces"],["falchion"],["falcon"],["falconer"],["falconet"],["falconry"],["falcons"],["falderal"],["falderol"],["fall"],["fallacy"],["fallal"],["fallals"],["fallback"],["fallen"],["faller"],["fallers"],["fallfish"],["fallible"],["fallibly"],["falling"],["falloff"],["falloffs"],["fallout"],["fallouts"],["fallow"],["fallowed"],["fallows"],["falls"],["false"],["falsely"],["falser"],["falsest"],["falsetto"],["falsie"],["falsies"],["falsify"],["falsity"],["faltboat"],["falter"],["faltered"],["falterer"],["falters"],["falx"],["fame"],["famed"],["fameless"],["fames"],["familial"],["familiar"],["families"],["familism"],["family"],["famine"],["famines"],["faming"],["famish"],["famished"],["famishes"],["famous"],["famously"],["famuli"],["famulus"],["fan"],["fanatic"],["fanatics"],["fancied"],["fancier"],["fanciers"],["fancies"],["fanciest"],["fanciful"],["fancily"],["fancy"],["fancying"],["fandango"],["fandom"],["fandoms"],["fane"],["fanega"],["fanegada"],["fanegas"],["fanes"],["fanfare"],["fanfares"],["fanfaron"],["fanfold"],["fanfolds"],["fang"],["fanga"],["fangas"],["fanged"],["fangless"],["fanglike"],["fangs"],["fanion"],["fanions"],["fanjet"],["fanjets"],["fanlight"],["fanlike"],["fanned"],["fanner"],["fanners"],["fannies"],["fanning"],["fanny"],["fano"],["fanon"],["fanons"],["fanos"],["fans"],["fantail"],["fantails"],["fantasia"],["fantasie"],["fantasm"],["fantasms"],["fantast"],["fantasts"],["fantasy"],["fantod"],["fantods"],["fantom"],["fantoms"],["fanum"],["fanums"],["fanwise"],["fanwort"],["fanworts"],["fanzine"],["fanzines"],["faqir"],["faqirs"],["faquir"],["faquirs"],["far"],["farad"],["faradaic"],["faraday"],["faradays"],["faradic"],["faradise"],["faradism"],["faradize"],["farads"],["faraway"],["farce"],["farced"],["farcer"],["farcers"],["farces"],["farceur"],["farceurs"],["farci"],["farcical"],["farcie"],["farcies"],["farcing"],["farcy"],["fard"],["farded"],["fardel"],["fardels"],["farding"],["fards"],["fare"],["fared"],["farer"],["farers"],["fares"],["farewell"],["farfal"],["farfals"],["farfel"],["farfels"],["farina"],["farinas"],["faring"],["farinha"],["farinhas"],["farinose"],["farl"],["farle"],["farles"],["farls"],["farm"],["farmable"],["farmed"],["farmer"],["farmers"],["farmhand"],["farming"],["farmings"],["farmland"],["farms"],["farmyard"],["farnesol"],["farness"],["faro"],["faros"],["farouche"],["farrago"],["farrier"],["farriers"],["farriery"],["farrow"],["farrowed"],["farrows"],["fart"],["farted"],["farther"],["farthest"],["farthing"],["farting"],["farts"],["fas"],["fasces"],["fascia"],["fasciae"],["fascial"],["fascias"],["fasciate"],["fascicle"],["fascine"],["fascines"],["fascism"],["fascisms"],["fascist"],["fascists"],["fash"],["fashed"],["fashes"],["fashing"],["fashion"],["fashions"],["fashious"],["fast"],["fastback"],["fastball"],["fasted"],["fasten"],["fastened"],["fastener"],["fastens"],["faster"],["fastest"],["fasting"],["fastings"],["fastness"],["fasts"],["fastuous"],["fat"],["fatal"],["fatalism"],["fatalist"],["fatality"],["fatally"],["fatback"],["fatbacks"],["fatbird"],["fatbirds"],["fate"],["fated"],["fateful"],["fates"],["fathead"],["fatheads"],["father"],["fathered"],["fatherly"],["fathers"],["fathom"],["fathomed"],["fathoms"],["fatidic"],["fatigue"],["fatigued"],["fatigues"],["fating"],["fatless"],["fatlike"],["fatling"],["fatlings"],["fatly"],["fatness"],["fats"],["fatso"],["fatsoes"],["fatsos"],["fatstock"],["fatted"],["fatten"],["fattened"],["fattener"],["fattens"],["fatter"],["fattest"],["fattier"],["fatties"],["fattiest"],["fattily"],["fatting"],["fattish"],["fatty"],["fatuity"],["fatuous"],["faubourg"],["faucal"],["faucals"],["fauces"],["faucet"],["faucets"],["faucial"],["faugh"],["fauld"],["faulds"],["fault"],["faulted"],["faultier"],["faultily"],["faulting"],["faults"],["faulty"],["faun"],["fauna"],["faunae"],["faunal"],["faunally"],["faunas"],["faunlike"],["fauns"],["fauteuil"],["fauve"],["fauves"],["fauvism"],["fauvisms"],["fauvist"],["fauvists"],["faux"],["favela"],["favelas"],["favism"],["favisms"],["favonian"],["favor"],["favored"],["favorer"],["favorers"],["favoring"],["favorite"],["favors"],["favour"],["favoured"],["favourer"],["favours"],["favus"],["favuses"],["fawn"],["fawned"],["fawner"],["fawners"],["fawnier"],["fawniest"],["fawning"],["fawnlike"],["fawns"],["fawny"],["fax"],["faxed"],["faxes"],["faxing"],["fay"],["fayalite"],["fayed"],["faying"],["fays"],["faze"],["fazed"],["fazenda"],["fazendas"],["fazes"],["fazing"],["feal"],["fealties"],["fealty"],["fear"],["feared"],["fearer"],["fearers"],["fearful"],["fearing"],["fearless"],["fears"],["fearsome"],["feasance"],["fease"],["feased"],["feases"],["feasible"],["feasibly"],["feasing"],["feast"],["feasted"],["feaster"],["feasters"],["feastful"],["feasting"],["feasts"],["feat"],["feater"],["featest"],["feather"],["feathers"],["feathery"],["featlier"],["featly"],["feats"],["feature"],["featured"],["features"],["feaze"],["feazed"],["feazes"],["feazing"],["febrific"],["febrile"],["fecal"],["feces"],["fecial"],["fecials"],["feck"],["feckless"],["feckly"],["fecks"],["fecula"],["feculae"],["feculent"],["fecund"],["fed"],["fedayee"],["fedayeen"],["federacy"],["federal"],["federals"],["federate"],["fedora"],["fedoras"],["feds"],["fee"],["feeble"],["feebler"],["feeblest"],["feeblish"],["feebly"],["feed"],["feedable"],["feedback"],["feedbag"],["feedbags"],["feedbox"],["feeder"],["feeders"],["feedhole"],["feeding"],["feedlot"],["feedlots"],["feeds"],["feeing"],["feel"],["feeler"],["feelers"],["feeless"],["feeling"],["feelings"],["feels"],["fees"],["feet"],["feetless"],["feeze"],["feezed"],["feezes"],["feezing"],["feh"],["fehs"],["feign"],["feigned"],["feigner"],["feigners"],["feigning"],["feigns"],["feint"],["feinted"],["feinting"],["feints"],["feirie"],["feist"],["feistier"],["feists"],["feisty"],["felafel"],["feldsher"],["feldspar"],["felicity"],["felid"],["felids"],["feline"],["felinely"],["felines"],["felinity"],["fell"],["fella"],["fellable"],["fellah"],["fellahin"],["fellahs"],["fellas"],["fellate"],["fellated"],["fellates"],["fellatio"],["fellator"],["felled"],["feller"],["fellers"],["fellest"],["fellies"],["felling"],["fellness"],["felloe"],["felloes"],["fellow"],["fellowed"],["fellowly"],["fellows"],["fells"],["felly"],["felon"],["felonies"],["felonry"],["felons"],["felony"],["felsite"],["felsites"],["felsitic"],["felspar"],["felspars"],["felstone"],["felt"],["felted"],["felting"],["feltings"],["felts"],["felucca"],["feluccas"],["felwort"],["felworts"],["fem"],["female"],["females"],["feme"],["femes"],["feminacy"],["feminie"],["feminine"],["feminise"],["feminism"],["feminist"],["feminity"],["feminize"],["femme"],["femmes"],["femora"],["femoral"],["fems"],["femur"],["femurs"],["fen"],["fenagle"],["fenagled"],["fenagles"],["fence"],["fenced"],["fencer"],["fencerow"],["fencers"],["fences"],["fencible"],["fencing"],["fencings"],["fend"],["fended"],["fender"],["fendered"],["fenders"],["fending"],["fends"],["fenestra"],["fennec"],["fennecs"],["fennel"],["fennels"],["fenny"],["fens"],["fenthion"],["fenuron"],["fenurons"],["feod"],["feodary"],["feods"],["feoff"],["feoffed"],["feoffee"],["feoffees"],["feoffer"],["feoffers"],["feoffing"],["feoffor"],["feoffors"],["feoffs"],["fer"],["feracity"],["feral"],["ferbam"],["ferbams"],["fere"],["feres"],["feretory"],["feria"],["feriae"],["ferial"],["ferias"],["ferine"],["ferities"],["ferity"],["ferlie"],["ferlies"],["ferly"],["fermata"],["fermatas"],["fermate"],["ferment"],["ferments"],["fermi"],["fermion"],["fermions"],["fermis"],["fermium"],["fermiums"],["fern"],["fernery"],["fernier"],["ferniest"],["fernless"],["fernlike"],["ferns"],["ferny"],["ferocity"],["ferrate"],["ferrates"],["ferrel"],["ferreled"],["ferrels"],["ferreous"],["ferret"],["ferreted"],["ferreter"],["ferrets"],["ferrety"],["ferriage"],["ferric"],["ferried"],["ferries"],["ferrite"],["ferrites"],["ferritic"],["ferritin"],["ferrous"],["ferrule"],["ferruled"],["ferrules"],["ferrum"],["ferrums"],["ferry"],["ferrying"],["ferryman"],["ferrymen"],["fertile"],["ferula"],["ferulae"],["ferulas"],["ferule"],["feruled"],["ferules"],["feruling"],["fervency"],["fervent"],["fervid"],["fervidly"],["fervor"],["fervors"],["fervour"],["fervours"],["fescue"],["fescues"],["fess"],["fesse"],["fessed"],["fesses"],["fessing"],["fesswise"],["festal"],["festally"],["fester"],["festered"],["festers"],["festival"],["festive"],["festoon"],["festoons"],["fet"],["feta"],["fetal"],["fetas"],["fetation"],["fetch"],["fetched"],["fetcher"],["fetchers"],["fetches"],["fetching"],["fete"],["feted"],["feterita"],["fetes"],["fetial"],["fetiales"],["fetialis"],["fetials"],["fetich"],["fetiches"],["feticide"],["fetid"],["fetidly"],["feting"],["fetish"],["fetishes"],["fetlock"],["fetlocks"],["fetology"],["fetor"],["fetors"],["fets"],["fetted"],["fetter"],["fettered"],["fetterer"],["fetters"],["fetting"],["fettle"],["fettled"],["fettles"],["fettling"],["fetus"],["fetuses"],["feu"],["feuar"],["feuars"],["feud"],["feudal"],["feudally"],["feudary"],["feuded"],["feuding"],["feudist"],["feudists"],["feuds"],["feued"],["feuing"],["feus"],["fever"],["fevered"],["feverfew"],["fevering"],["feverish"],["feverous"],["fevers"],["few"],["fewer"],["fewest"],["fewness"],["fewtrils"],["fey"],["feyer"],["feyest"],["feyly"],["feyness"],["fez"],["fezes"],["fezzed"],["fezzes"],["fiacre"],["fiacres"],["fiance"],["fiancee"],["fiancees"],["fiances"],["fiar"],["fiars"],["fiaschi"],["fiasco"],["fiascoes"],["fiascos"],["fiat"],["fiats"],["fib"],["fibbed"],["fibber"],["fibbers"],["fibbing"],["fiber"],["fibered"],["fiberize"],["fibers"],["fibranne"],["fibre"],["fibres"],["fibril"],["fibrilla"],["fibrils"],["fibrin"],["fibrins"],["fibroid"],["fibroids"],["fibroin"],["fibroins"],["fibroma"],["fibromas"],["fibroses"],["fibrosis"],["fibrotic"],["fibrous"],["fibs"],["fibula"],["fibulae"],["fibular"],["fibulas"],["fice"],["fices"],["fiche"],["fiches"],["fichu"],["fichus"],["ficin"],["ficins"],["fickle"],["fickler"],["ficklest"],["fickly"],["fico"],["ficoes"],["fictile"],["fiction"],["fictions"],["fictive"],["ficus"],["ficuses"],["fid"],["fiddle"],["fiddled"],["fiddler"],["fiddlers"],["fiddles"],["fiddling"],["fideism"],["fideisms"],["fideist"],["fideists"],["fidelity"],["fidge"],["fidged"],["fidges"],["fidget"],["fidgeted"],["fidgeter"],["fidgets"],["fidgety"],["fidging"],["fido"],["fidos"],["fids"],["fiducial"],["fie"],["fief"],["fiefdom"],["fiefdoms"],["fiefs"],["field"],["fielded"],["fielder"],["fielders"],["fielding"],["fields"],["fiend"],["fiendish"],["fiends"],["fierce"],["fiercely"],["fiercer"],["fiercest"],["fierier"],["fieriest"],["fierily"],["fiery"],["fiesta"],["fiestas"],["fife"],["fifed"],["fifer"],["fifers"],["fifes"],["fifing"],["fifteen"],["fifteens"],["fifth"],["fifthly"],["fifths"],["fifties"],["fiftieth"],["fifty"],["fig"],["figeater"],["figged"],["figging"],["fight"],["fighter"],["fighters"],["fighting"],["fights"],["figment"],["figments"],["figs"],["figuline"],["figural"],["figurant"],["figurate"],["figure"],["figured"],["figurer"],["figurers"],["figures"],["figurine"],["figuring"],["figwort"],["figworts"],["fil"],["fila"],["filagree"],["filament"],["filar"],["filaree"],["filarees"],["filaria"],["filariae"],["filarial"],["filarian"],["filariid"],["filature"],["filbert"],["filberts"],["filch"],["filched"],["filcher"],["filchers"],["filches"],["filching"],["file"],["fileable"],["filed"],["filefish"],["filemot"],["filer"],["filers"],["files"],["filet"],["fileted"],["fileting"],["filets"],["filial"],["filially"],["filiate"],["filiated"],["filiates"],["filibeg"],["filibegs"],["filicide"],["filiform"],["filigree"],["filing"],["filings"],["filister"],["fill"],["fille"],["filled"],["filler"],["fillers"],["filles"],["fillet"],["filleted"],["fillets"],["fillies"],["filling"],["fillings"],["fillip"],["filliped"],["fillips"],["fillo"],["fillos"],["fills"],["filly"],["film"],["filmcard"],["filmdom"],["filmdoms"],["filmed"],["filmer"],["filmers"],["filmgoer"],["filmic"],["filmier"],["filmiest"],["filmily"],["filming"],["filmland"],["films"],["filmset"],["filmsets"],["filmy"],["filo"],["filos"],["filose"],["fils"],["filter"],["filtered"],["filterer"],["filters"],["filth"],["filthier"],["filthily"],["filths"],["filthy"],["filtrate"],["filum"],["fimble"],["fimbles"],["fimbria"],["fimbriae"],["fimbrial"],["fin"],["finable"],["finagle"],["finagled"],["finagler"],["finagles"],["final"],["finale"],["finales"],["finalis"],["finalism"],["finalist"],["finality"],["finalize"],["finally"],["finals"],["finance"],["financed"],["finances"],["finback"],["finbacks"],["finch"],["finches"],["find"],["findable"],["finder"],["finders"],["finding"],["findings"],["finds"],["fine"],["fineable"],["fined"],["finely"],["fineness"],["finer"],["fineries"],["finery"],["fines"],["finespun"],["finesse"],["finessed"],["finesses"],["finest"],["finfish"],["finfoot"],["finfoots"],["finger"],["fingered"],["fingerer"],["fingers"],["finial"],["finialed"],["finials"],["finical"],["finickin"],["finicky"],["finikin"],["finiking"],["fining"],["finings"],["finis"],["finises"],["finish"],["finished"],["finisher"],["finishes"],["finite"],["finitely"],["finites"],["finitude"],["fink"],["finked"],["finking"],["finks"],["finless"],["finlike"],["finmark"],["finmarks"],["finned"],["finnicky"],["finnier"],["finniest"],["finning"],["finnmark"],["finny"],["fino"],["finochio"],["finos"],["fins"],["fiord"],["fiords"],["fipple"],["fipples"],["fique"],["fiques"],["fir"],["fire"],["firearm"],["firearms"],["fireball"],["firebase"],["firebird"],["fireboat"],["firebomb"],["firebox"],["firebrat"],["firebug"],["firebugs"],["fireclay"],["fired"],["firedamp"],["firedog"],["firedogs"],["firefang"],["firefly"],["firehall"],["fireless"],["firelock"],["fireman"],["firemen"],["firepan"],["firepans"],["firepink"],["fireplug"],["firer"],["fireroom"],["firers"],["fires"],["fireside"],["firetrap"],["fireweed"],["firewood"],["firework"],["fireworm"],["firing"],["firings"],["firkin"],["firkins"],["firm"],["firman"],["firmans"],["firmed"],["firmer"],["firmers"],["firmest"],["firming"],["firmly"],["firmness"],["firms"],["firmware"],["firn"],["firns"],["firry"],["firs"],["first"],["firstly"],["firsts"],["firth"],["firths"],["fisc"],["fiscal"],["fiscally"],["fiscals"],["fiscs"],["fish"],["fishable"],["fishbolt"],["fishbone"],["fishbowl"],["fished"],["fisher"],["fishers"],["fishery"],["fishes"],["fisheye"],["fisheyes"],["fishgig"],["fishgigs"],["fishhook"],["fishier"],["fishiest"],["fishily"],["fishing"],["fishings"],["fishless"],["fishlike"],["fishline"],["fishmeal"],["fishnet"],["fishnets"],["fishpole"],["fishpond"],["fishtail"],["fishway"],["fishways"],["fishwife"],["fishworm"],["fishy"],["fissate"],["fissile"],["fission"],["fissions"],["fissiped"],["fissure"],["fissured"],["fissures"],["fist"],["fisted"],["fistful"],["fistfuls"],["fistic"],["fisting"],["fistnote"],["fists"],["fistula"],["fistulae"],["fistular"],["fistulas"],["fit"],["fitch"],["fitchee"],["fitches"],["fitchet"],["fitchets"],["fitchew"],["fitchews"],["fitchy"],["fitful"],["fitfully"],["fitly"],["fitment"],["fitments"],["fitness"],["fits"],["fittable"],["fitted"],["fitter"],["fitters"],["fittest"],["fitting"],["fittings"],["five"],["fivefold"],["fivepins"],["fiver"],["fivers"],["fives"],["fix"],["fixable"],["fixate"],["fixated"],["fixates"],["fixatif"],["fixatifs"],["fixating"],["fixation"],["fixative"],["fixed"],["fixedly"],["fixer"],["fixers"],["fixes"],["fixing"],["fixings"],["fixit"],["fixities"],["fixity"],["fixt"],["fixture"],["fixtures"],["fixure"],["fixures"],["fiz"],["fizgig"],["fizgigs"],["fizz"],["fizzed"],["fizzer"],["fizzers"],["fizzes"],["fizzier"],["fizziest"],["fizzing"],["fizzle"],["fizzled"],["fizzles"],["fizzling"],["fizzy"],["fjeld"],["fjelds"],["fjord"],["fjords"],["flab"],["flabbier"],["flabbily"],["flabby"],["flabella"],["flabs"],["flaccid"],["flack"],["flacked"],["flackery"],["flacking"],["flacks"],["flacon"],["flacons"],["flag"],["flagella"],["flagged"],["flagger"],["flaggers"],["flaggier"],["flagging"],["flaggy"],["flagless"],["flagman"],["flagmen"],["flagon"],["flagons"],["flagpole"],["flagrant"],["flags"],["flagship"],["flail"],["flailed"],["flailing"],["flails"],["flair"],["flairs"],["flak"],["flake"],["flaked"],["flaker"],["flakers"],["flakes"],["flakier"],["flakiest"],["flakily"],["flaking"],["flaky"],["flam"],["flambe"],["flambeau"],["flambee"],["flambeed"],["flambes"],["flame"],["flamed"],["flamen"],["flamenco"],["flamens"],["flameout"],["flamer"],["flamers"],["flames"],["flamier"],["flamiest"],["flamines"],["flaming"],["flamingo"],["flammed"],["flamming"],["flams"],["flamy"],["flan"],["flancard"],["flanerie"],["flanes"],["flaneur"],["flaneurs"],["flange"],["flanged"],["flanger"],["flangers"],["flanges"],["flanging"],["flank"],["flanked"],["flanken"],["flanker"],["flankers"],["flanking"],["flanks"],["flannel"],["flannels"],["flans"],["flap"],["flapjack"],["flapless"],["flapped"],["flapper"],["flappers"],["flappier"],["flapping"],["flappy"],["flaps"],["flare"],["flared"],["flares"],["flaring"],["flash"],["flashed"],["flasher"],["flashers"],["flashes"],["flashgun"],["flashier"],["flashily"],["flashing"],["flashy"],["flask"],["flasket"],["flaskets"],["flasks"],["flat"],["flatbed"],["flatbeds"],["flatboat"],["flatcap"],["flatcaps"],["flatcar"],["flatcars"],["flatfeet"],["flatfish"],["flatfoot"],["flathead"],["flatiron"],["flatland"],["flatlet"],["flatlets"],["flatling"],["flatlong"],["flatly"],["flatness"],["flats"],["flatted"],["flatten"],["flattens"],["flatter"],["flatters"],["flattery"],["flattest"],["flatting"],["flattish"],["flattop"],["flattops"],["flatus"],["flatuses"],["flatware"],["flatwash"],["flatways"],["flatwise"],["flatwork"],["flatworm"],["flaunt"],["flaunted"],["flaunter"],["flaunts"],["flaunty"],["flautist"],["flavanol"],["flavin"],["flavine"],["flavines"],["flavins"],["flavone"],["flavones"],["flavonol"],["flavor"],["flavored"],["flavorer"],["flavors"],["flavory"],["flavour"],["flavours"],["flavoury"],["flaw"],["flawed"],["flawier"],["flawiest"],["flawing"],["flawless"],["flaws"],["flawy"],["flax"],["flaxen"],["flaxes"],["flaxier"],["flaxiest"],["flaxseed"],["flaxy"],["flay"],["flayed"],["flayer"],["flayers"],["flaying"],["flays"],["flea"],["fleabag"],["fleabags"],["fleabane"],["fleabite"],["fleam"],["fleams"],["fleapit"],["fleapits"],["fleas"],["fleawort"],["fleche"],["fleches"],["fleck"],["flecked"],["flecking"],["flecks"],["flecky"],["flection"],["fled"],["fledge"],["fledged"],["fledges"],["fledgier"],["fledging"],["fledgy"],["flee"],["fleece"],["fleeced"],["fleecer"],["fleecers"],["fleeces"],["fleech"],["fleeched"],["fleeches"],["fleecier"],["fleecily"],["fleecing"],["fleecy"],["fleeing"],["fleer"],["fleered"],["fleering"],["fleers"],["flees"],["fleet"],["fleeted"],["fleeter"],["fleetest"],["fleeting"],["fleetly"],["fleets"],["fleishig"],["flemish"],["flench"],["flenched"],["flenches"],["flense"],["flensed"],["flenser"],["flensers"],["flenses"],["flensing"],["flesh"],["fleshed"],["flesher"],["fleshers"],["fleshes"],["fleshier"],["fleshing"],["fleshly"],["fleshpot"],["fleshy"],["fletch"],["fletched"],["fletcher"],["fletches"],["fleury"],["flew"],["flews"],["flex"],["flexagon"],["flexed"],["flexes"],["flexible"],["flexibly"],["flexile"],["flexing"],["flexion"],["flexions"],["flexor"],["flexors"],["flextime"],["flexuose"],["flexuous"],["flexural"],["flexure"],["flexures"],["fley"],["fleyed"],["fleying"],["fleys"],["flic"],["flichter"],["flick"],["flicked"],["flicker"],["flickers"],["flickery"],["flicking"],["flicks"],["flics"],["flied"],["flier"],["fliers"],["flies"],["fliest"],["flight"],["flighted"],["flights"],["flighty"],["flimflam"],["flimsier"],["flimsies"],["flimsily"],["flimsy"],["flinch"],["flinched"],["flincher"],["flinches"],["flinder"],["flinders"],["fling"],["flinger"],["flingers"],["flinging"],["flings"],["flinkite"],["flint"],["flinted"],["flintier"],["flintily"],["flinting"],["flints"],["flinty"],["flip"],["flippant"],["flipped"],["flipper"],["flippers"],["flippest"],["flipping"],["flips"],["flirt"],["flirted"],["flirter"],["flirters"],["flirtier"],["flirting"],["flirts"],["flirty"],["flit"],["flitch"],["flitched"],["flitches"],["flite"],["flited"],["flites"],["fliting"],["flits"],["flitted"],["flitter"],["flitters"],["flitting"],["flivver"],["flivvers"],["float"],["floatage"],["floated"],["floatel"],["floatels"],["floater"],["floaters"],["floatier"],["floating"],["floats"],["floaty"],["floc"],["flocced"],["flocci"],["floccing"],["floccose"],["floccule"],["flocculi"],["floccus"],["flock"],["flocked"],["flockier"],["flocking"],["flocks"],["flocky"],["flocs"],["floe"],["floes"],["flog"],["flogged"],["flogger"],["floggers"],["flogging"],["flogs"],["flokati"],["flokatis"],["flong"],["flongs"],["flood"],["flooded"],["flooder"],["flooders"],["flooding"],["floodlit"],["floods"],["floodway"],["flooey"],["flooie"],["floor"],["floorage"],["floored"],["floorer"],["floorers"],["flooring"],["floors"],["floosie"],["floosies"],["floosy"],["floozie"],["floozies"],["floozy"],["flop"],["flopover"],["flopped"],["flopper"],["floppers"],["floppier"],["floppies"],["floppily"],["flopping"],["floppy"],["flops"],["flora"],["florae"],["floral"],["florally"],["floras"],["florence"],["floret"],["florets"],["florid"],["floridly"],["florigen"],["florin"],["florins"],["florist"],["florists"],["floruit"],["floruits"],["floss"],["flossed"],["flosses"],["flossie"],["flossier"],["flossies"],["flossily"],["flossing"],["flossy"],["flota"],["flotage"],["flotages"],["flotas"],["flotilla"],["flotsam"],["flotsams"],["flounce"],["flounced"],["flounces"],["flouncy"],["flounder"],["flour"],["floured"],["flouring"],["flourish"],["flours"],["floury"],["flout"],["flouted"],["flouter"],["flouters"],["flouting"],["flouts"],["flow"],["flowage"],["flowages"],["flowed"],["flower"],["flowered"],["flowerer"],["floweret"],["flowers"],["flowery"],["flowing"],["flown"],["flows"],["flu"],["flub"],["flubbed"],["flubber"],["flubbers"],["flubbing"],["flubdub"],["flubdubs"],["flubs"],["flue"],["flued"],["fluency"],["fluent"],["fluently"],["flueric"],["fluerics"],["flues"],["fluff"],["fluffed"],["fluffier"],["fluffily"],["fluffing"],["fluffs"],["fluffy"],["fluid"],["fluidal"],["fluidic"],["fluidics"],["fluidise"],["fluidity"],["fluidize"],["fluidly"],["fluidram"],["fluids"],["fluke"],["fluked"],["flukes"],["flukey"],["flukier"],["flukiest"],["fluking"],["fluky"],["flume"],["flumed"],["flumes"],["fluming"],["flummery"],["flummox"],["flump"],["flumped"],["flumping"],["flumps"],["flung"],["flunk"],["flunked"],["flunker"],["flunkers"],["flunkey"],["flunkeys"],["flunkies"],["flunking"],["flunks"],["flunky"],["fluor"],["fluorene"],["fluoric"],["fluorid"],["fluoride"],["fluorids"],["fluorin"],["fluorine"],["fluorins"],["fluorite"],["fluors"],["flurried"],["flurries"],["flurry"],["flus"],["flush"],["flushed"],["flusher"],["flushers"],["flushes"],["flushest"],["flushing"],["fluster"],["flusters"],["flute"],["fluted"],["fluter"],["fluters"],["flutes"],["flutey"],["flutier"],["flutiest"],["fluting"],["flutings"],["flutist"],["flutists"],["flutter"],["flutters"],["fluttery"],["fluty"],["fluvial"],["flux"],["fluxed"],["fluxes"],["fluxing"],["fluxion"],["fluxions"],["fluyt"],["fluyts"],["fly"],["flyable"],["flyaway"],["flyaways"],["flybelt"],["flybelts"],["flyblew"],["flyblow"],["flyblown"],["flyblows"],["flyboat"],["flyboats"],["flyboy"],["flyboys"],["flyby"],["flybys"],["flyer"],["flyers"],["flying"],["flyings"],["flyleaf"],["flyless"],["flyman"],["flymen"],["flyoff"],["flyoffs"],["flyover"],["flyovers"],["flypaper"],["flypast"],["flypasts"],["flysch"],["flysches"],["flyspeck"],["flyte"],["flyted"],["flytes"],["flytier"],["flytiers"],["flyting"],["flytings"],["flytrap"],["flytraps"],["flyway"],["flyways"],["flywheel"],["foal"],["foaled"],["foaling"],["foals"],["foam"],["foamable"],["foamed"],["foamer"],["foamers"],["foamier"],["foamiest"],["foamily"],["foaming"],["foamless"],["foamlike"],["foams"],["foamy"],["fob"],["fobbed"],["fobbing"],["fobs"],["focal"],["focalise"],["focalize"],["focally"],["foci"],["focus"],["focused"],["focuser"],["focusers"],["focuses"],["focusing"],["focussed"],["focusses"],["fodder"],["foddered"],["fodders"],["fodgel"],["foe"],["foehn"],["foehns"],["foeman"],["foemen"],["foes"],["foetal"],["foetid"],["foetor"],["foetors"],["foetus"],["foetuses"],["fog"],["fogbound"],["fogbow"],["fogbows"],["fogdog"],["fogdogs"],["fogey"],["fogeys"],["fogfruit"],["foggage"],["foggages"],["fogged"],["fogger"],["foggers"],["foggier"],["foggiest"],["foggily"],["fogging"],["foggy"],["foghorn"],["foghorns"],["fogie"],["fogies"],["fogless"],["fogs"],["fogy"],["fogyish"],["fogyism"],["fogyisms"],["foh"],["fohn"],["fohns"],["foible"],["foibles"],["foil"],["foilable"],["foiled"],["foiling"],["foils"],["foilsman"],["foilsmen"],["foin"],["foined"],["foining"],["foins"],["foison"],["foisons"],["foist"],["foisted"],["foisting"],["foists"],["folacin"],["folacins"],["folate"],["folates"],["fold"],["foldable"],["foldaway"],["foldboat"],["folded"],["folder"],["folderol"],["folders"],["folding"],["foldout"],["foldouts"],["folds"],["folia"],["foliage"],["foliaged"],["foliages"],["foliar"],["foliate"],["foliated"],["foliates"],["folio"],["folioed"],["folioing"],["folios"],["foliose"],["folious"],["folium"],["foliums"],["folk"],["folkie"],["folkies"],["folkish"],["folklike"],["folklore"],["folkmoot"],["folkmot"],["folkmote"],["folkmots"],["folks"],["folksier"],["folksily"],["folksy"],["folktale"],["folkway"],["folkways"],["folky"],["folles"],["follicle"],["follies"],["follis"],["follow"],["followed"],["follower"],["follows"],["folly"],["foment"],["fomented"],["fomenter"],["foments"],["fomite"],["fomites"],["fon"],["fond"],["fondant"],["fondants"],["fonded"],["fonder"],["fondest"],["fonding"],["fondle"],["fondled"],["fondler"],["fondlers"],["fondles"],["fondling"],["fondly"],["fondness"],["fonds"],["fondu"],["fondue"],["fondues"],["fondus"],["fons"],["font"],["fontal"],["fontanel"],["fontina"],["fontinas"],["fonts"],["food"],["foodie"],["foodies"],["foodless"],["foods"],["foofaraw"],["fool"],["fooled"],["foolery"],["foolfish"],["fooling"],["foolish"],["fools"],["foolscap"],["foot"],["footage"],["footages"],["football"],["footbath"],["footboy"],["footboys"],["footed"],["footer"],["footers"],["footfall"],["footgear"],["foothill"],["foothold"],["footie"],["footier"],["footies"],["footiest"],["footing"],["footings"],["footle"],["footled"],["footler"],["footlers"],["footles"],["footless"],["footlike"],["footling"],["footman"],["footmark"],["footmen"],["footnote"],["footpace"],["footpad"],["footpads"],["footpath"],["footrace"],["footrest"],["footrope"],["foots"],["footsie"],["footsies"],["footslog"],["footsore"],["footstep"],["footsy"],["footwall"],["footway"],["footways"],["footwear"],["footwork"],["footworn"],["footy"],["foozle"],["foozled"],["foozler"],["foozlers"],["foozles"],["foozling"],["fop"],["fopped"],["foppery"],["fopping"],["foppish"],["fops"],["for"],["fora"],["forage"],["foraged"],["forager"],["foragers"],["forages"],["foraging"],["foram"],["foramen"],["foramens"],["foramina"],["forams"],["foray"],["forayed"],["forayer"],["forayers"],["foraying"],["forays"],["forb"],["forbad"],["forbade"],["forbear"],["forbears"],["forbid"],["forbidal"],["forbids"],["forbode"],["forboded"],["forbodes"],["forbore"],["forborne"],["forbs"],["forby"],["forbye"],["force"],["forced"],["forcedly"],["forceful"],["forceps"],["forcer"],["forcers"],["forces"],["forcible"],["forcibly"],["forcing"],["forcipes"],["ford"],["fordable"],["forded"],["fordid"],["fording"],["fordless"],["fordo"],["fordoes"],["fordoing"],["fordone"],["fords"],["fore"],["forearm"],["forearms"],["forebay"],["forebays"],["forebear"],["forebode"],["forebody"],["foreboom"],["foreby"],["forebye"],["forecast"],["foredate"],["foredeck"],["foredid"],["foredo"],["foredoes"],["foredone"],["foredoom"],["foreface"],["forefeel"],["forefeet"],["forefelt"],["forefend"],["forefoot"],["forego"],["foregoer"],["foregoes"],["foregone"],["foregut"],["foreguts"],["forehand"],["forehead"],["forehoof"],["foreign"],["foreknew"],["foreknow"],["forelady"],["foreland"],["foreleg"],["forelegs"],["forelimb"],["forelock"],["foreman"],["foremast"],["foremen"],["foremilk"],["foremost"],["forename"],["forenoon"],["forensic"],["forepart"],["forepast"],["forepaw"],["forepaws"],["forepeak"],["foreplay"],["foreran"],["forerank"],["forerun"],["foreruns"],["fores"],["foresaid"],["foresail"],["foresaw"],["foresee"],["foreseen"],["foreseer"],["foresees"],["foreshow"],["foreside"],["foreskin"],["forest"],["forestal"],["forestay"],["forested"],["forester"],["forestry"],["forests"],["foretell"],["foretime"],["foretold"],["foretop"],["foretops"],["forever"],["forevers"],["forewarn"],["forewent"],["forewing"],["foreword"],["foreworn"],["foreyard"],["forfeit"],["forfeits"],["forfend"],["forfends"],["forgat"],["forgave"],["forge"],["forged"],["forger"],["forgers"],["forgery"],["forges"],["forget"],["forgets"],["forging"],["forgings"],["forgive"],["forgiven"],["forgiver"],["forgives"],["forgo"],["forgoer"],["forgoers"],["forgoes"],["forgoing"],["forgone"],["forgot"],["forint"],["forints"],["forjudge"],["fork"],["forkball"],["forked"],["forkedly"],["forker"],["forkers"],["forkful"],["forkfuls"],["forkier"],["forkiest"],["forking"],["forkless"],["forklift"],["forklike"],["forks"],["forksful"],["forky"],["forlorn"],["form"],["formable"],["formal"],["formalin"],["formally"],["formals"],["formant"],["formants"],["format"],["formate"],["formates"],["formats"],["forme"],["formed"],["formee"],["former"],["formerly"],["formers"],["formes"],["formful"],["formic"],["forming"],["formless"],["formol"],["formols"],["forms"],["formula"],["formulae"],["formulas"],["formyl"],["formyls"],["fornical"],["fornices"],["fornix"],["forrader"],["forrit"],["forsake"],["forsaken"],["forsaker"],["forsakes"],["forsook"],["forsooth"],["forspent"],["forswear"],["forswore"],["forsworn"],["fort"],["forte"],["fortes"],["forth"],["forties"],["fortieth"],["fortify"],["fortis"],["fortress"],["forts"],["fortuity"],["fortune"],["fortuned"],["fortunes"],["forty"],["forum"],["forums"],["forward"],["forwards"],["forwent"],["forwhy"],["forworn"],["forzando"],["foss"],["fossa"],["fossae"],["fossate"],["fosse"],["fosses"],["fossette"],["fossick"],["fossicks"],["fossil"],["fossils"],["foster"],["fostered"],["fosterer"],["fosters"],["fou"],["fought"],["foughten"],["foul"],["foulard"],["foulards"],["fouled"],["fouler"],["foulest"],["fouling"],["foulings"],["foully"],["foulness"],["fouls"],["found"],["founded"],["founder"],["founders"],["founding"],["foundry"],["founds"],["fount"],["fountain"],["founts"],["four"],["fourchee"],["fourfold"],["fourgon"],["fourgons"],["fourplex"],["fours"],["foursome"],["fourteen"],["fourth"],["fourthly"],["fourths"],["fovea"],["foveae"],["foveal"],["foveas"],["foveate"],["foveated"],["foveola"],["foveolae"],["foveolar"],["foveolas"],["foveole"],["foveoles"],["foveolet"],["fowl"],["fowled"],["fowler"],["fowlers"],["fowling"],["fowlings"],["fowlpox"],["fowls"],["fox"],["foxed"],["foxes"],["foxfire"],["foxfires"],["foxfish"],["foxglove"],["foxhole"],["foxholes"],["foxhound"],["foxier"],["foxiest"],["foxily"],["foxiness"],["foxing"],["foxings"],["foxlike"],["foxskin"],["foxskins"],["foxtail"],["foxtails"],["foxtrot"],["foxtrots"],["foxy"],["foy"],["foyer"],["foyers"],["foys"],["fozier"],["foziest"],["foziness"],["fozy"],["frabjous"],["fracas"],["fracases"],["fractal"],["fractals"],["fracted"],["fracti"],["fraction"],["fractur"],["fracture"],["fracturs"],["fractus"],["frae"],["fraena"],["fraenum"],["fraenums"],["frag"],["fragged"],["fragging"],["fragile"],["fragment"],["fragrant"],["frags"],["frail"],["frailer"],["frailest"],["frailly"],["frails"],["frailty"],["fraise"],["fraises"],["fraktur"],["frakturs"],["framable"],["frame"],["framed"],["framer"],["framers"],["frames"],["framing"],["framings"],["franc"],["francium"],["francs"],["frank"],["franked"],["franker"],["frankers"],["frankest"],["franking"],["franklin"],["frankly"],["franks"],["frantic"],["frap"],["frappe"],["frapped"],["frappes"],["frapping"],["fraps"],["frat"],["frater"],["fraters"],["frats"],["fraud"],["frauds"],["fraught"],["fraughts"],["fraulein"],["fray"],["frayed"],["fraying"],["frayings"],["frays"],["frazil"],["frazils"],["frazzle"],["frazzled"],["frazzles"],["freak"],["freaked"],["freakier"],["freakily"],["freaking"],["freakish"],["freakout"],["freaks"],["freaky"],["freckle"],["freckled"],["freckles"],["freckly"],["free"],["freebase"],["freebee"],["freebees"],["freebie"],["freebies"],["freeboot"],["freeborn"],["freed"],["freedman"],["freedmen"],["freedom"],["freedoms"],["freeform"],["freehand"],["freehold"],["freeing"],["freeload"],["freely"],["freeman"],["freemen"],["freeness"],["freer"],["freers"],["frees"],["freesia"],["freesias"],["freest"],["freeway"],["freeways"],["freewill"],["freeze"],["freezer"],["freezers"],["freezes"],["freezing"],["freight"],["freights"],["fremd"],["fremitus"],["frena"],["french"],["frenched"],["frenches"],["frenetic"],["frenula"],["frenulum"],["frenum"],["frenums"],["frenzied"],["frenzies"],["frenzily"],["frenzy"],["frequent"],["frere"],["freres"],["fresco"],["frescoed"],["frescoer"],["frescoes"],["frescos"],["fresh"],["freshed"],["freshen"],["freshens"],["fresher"],["freshes"],["freshest"],["freshet"],["freshets"],["freshing"],["freshly"],["freshman"],["freshmen"],["fresnel"],["fresnels"],["fret"],["fretful"],["fretless"],["frets"],["fretsaw"],["fretsaws"],["fretsome"],["fretted"],["fretter"],["fretters"],["frettier"],["fretting"],["fretty"],["fretwork"],["friable"],["friar"],["friaries"],["friarly"],["friars"],["friary"],["fribble"],["fribbled"],["fribbler"],["fribbles"],["fricando"],["friction"],["fridge"],["fridges"],["fried"],["friend"],["friended"],["friendly"],["friends"],["frier"],["friers"],["fries"],["frieze"],["friezes"],["frig"],["frigate"],["frigates"],["frigged"],["frigging"],["fright"],["frighted"],["frighten"],["frights"],["frigid"],["frigidly"],["frigs"],["frijol"],["frijole"],["frijoles"],["frill"],["frilled"],["friller"],["frillers"],["frillier"],["frilling"],["frills"],["frilly"],["fringe"],["fringed"],["fringes"],["fringier"],["fringing"],["fringy"],["frippery"],["frise"],["frises"],["frisette"],["friseur"],["friseurs"],["frisk"],["frisked"],["frisker"],["friskers"],["frisket"],["friskets"],["friskier"],["friskily"],["frisking"],["frisks"],["frisky"],["frisson"],["frissons"],["frit"],["frith"],["friths"],["frits"],["fritt"],["frittata"],["fritted"],["fritter"],["fritters"],["fritting"],["fritts"],["fritz"],["fritzes"],["frivol"],["frivoled"],["frivoler"],["frivols"],["friz"],["frized"],["frizer"],["frizers"],["frizes"],["frizette"],["frizing"],["frizz"],["frizzed"],["frizzer"],["frizzers"],["frizzes"],["frizzier"],["frizzily"],["frizzing"],["frizzle"],["frizzled"],["frizzler"],["frizzles"],["frizzly"],["frizzy"],["fro"],["frock"],["frocked"],["frocking"],["frocks"],["froe"],["froes"],["frog"],["frogeye"],["frogeyed"],["frogeyes"],["frogfish"],["frogged"],["froggier"],["frogging"],["froggy"],["froglike"],["frogman"],["frogmen"],["frogs"],["frolic"],["frolicky"],["frolics"],["from"],["fromage"],["fromages"],["fromenty"],["frond"],["fronded"],["frondeur"],["frondose"],["fronds"],["frons"],["front"],["frontage"],["frontal"],["frontals"],["fronted"],["fronter"],["frontes"],["frontier"],["fronting"],["frontlet"],["fronton"],["frontons"],["fronts"],["frore"],["frosh"],["frost"],["frostbit"],["frosted"],["frosteds"],["frostier"],["frostily"],["frosting"],["frosts"],["frosty"],["froth"],["frothed"],["frothier"],["frothily"],["frothing"],["froths"],["frothy"],["frottage"],["frotteur"],["froufrou"],["frounce"],["frounced"],["frounces"],["frouzier"],["frouzy"],["frow"],["froward"],["frown"],["frowned"],["frowner"],["frowners"],["frowning"],["frowns"],["frows"],["frowsier"],["frowst"],["frowsted"],["frowsts"],["frowsty"],["frowsy"],["frowzier"],["frowzily"],["frowzy"],["froze"],["frozen"],["frozenly"],["fructify"],["fructose"],["frug"],["frugal"],["frugally"],["frugged"],["frugging"],["frugs"],["fruit"],["fruitage"],["fruited"],["fruiter"],["fruiters"],["fruitful"],["fruitier"],["fruitily"],["fruiting"],["fruition"],["fruitlet"],["fruits"],["fruity"],["frumenty"],["frump"],["frumpier"],["frumpily"],["frumpish"],["frumps"],["frumpy"],["frusta"],["frustule"],["frustum"],["frustums"],["fry"],["fryer"],["fryers"],["frying"],["frypan"],["frypans"],["fub"],["fubbed"],["fubbing"],["fubs"],["fubsier"],["fubsiest"],["fubsy"],["fuchsia"],["fuchsias"],["fuchsin"],["fuchsine"],["fuchsins"],["fuci"],["fuck"],["fucked"],["fucker"],["fuckers"],["fucking"],["fucks"],["fuckup"],["fuckups"],["fucoid"],["fucoidal"],["fucoids"],["fucose"],["fucoses"],["fucous"],["fucus"],["fucuses"],["fud"],["fuddle"],["fuddled"],["fuddles"],["fuddling"],["fudge"],["fudged"],["fudges"],["fudging"],["fuds"],["fuehrer"],["fuehrers"],["fuel"],["fueled"],["fueler"],["fuelers"],["fueling"],["fuelled"],["fueller"],["fuellers"],["fuelling"],["fuels"],["fuelwood"],["fug"],["fugacity"],["fugal"],["fugally"],["fugato"],["fugatos"],["fugged"],["fuggier"],["fuggiest"],["fuggily"],["fugging"],["fuggy"],["fugio"],["fugios"],["fugitive"],["fugle"],["fugled"],["fugleman"],["fuglemen"],["fugles"],["fugling"],["fugs"],["fugu"],["fugue"],["fugued"],["fugues"],["fuguing"],["fuguist"],["fuguists"],["fugus"],["fuhrer"],["fuhrers"],["fuji"],["fujis"],["fulcra"],["fulcrum"],["fulcrums"],["fulfil"],["fulfill"],["fulfills"],["fulfils"],["fulgent"],["fulgid"],["fulham"],["fulhams"],["full"],["fullam"],["fullams"],["fullback"],["fulled"],["fuller"],["fullered"],["fullers"],["fullery"],["fullest"],["fullface"],["fulling"],["fullness"],["fulls"],["fully"],["fulmar"],["fulmars"],["fulmine"],["fulmined"],["fulmines"],["fulminic"],["fulness"],["fulsome"],["fulvous"],["fumarase"],["fumarate"],["fumaric"],["fumarole"],["fumatory"],["fumble"],["fumbled"],["fumbler"],["fumblers"],["fumbles"],["fumbling"],["fume"],["fumed"],["fumeless"],["fumelike"],["fumer"],["fumers"],["fumes"],["fumet"],["fumets"],["fumette"],["fumettes"],["fumier"],["fumiest"],["fumigant"],["fumigate"],["fuming"],["fumingly"],["fumitory"],["fumuli"],["fumulus"],["fumy"],["fun"],["function"],["functor"],["functors"],["fund"],["funded"],["fundi"],["fundic"],["funding"],["funds"],["fundus"],["funeral"],["funerals"],["funerary"],["funereal"],["funest"],["funfair"],["funfairs"],["fungal"],["fungals"],["fungi"],["fungible"],["fungic"],["fungo"],["fungoes"],["fungoid"],["fungoids"],["fungous"],["fungus"],["funguses"],["funicle"],["funicles"],["funiculi"],["funk"],["funked"],["funker"],["funkers"],["funkia"],["funkias"],["funkier"],["funkiest"],["funking"],["funks"],["funky"],["funned"],["funnel"],["funneled"],["funnels"],["funnier"],["funnies"],["funniest"],["funnily"],["funning"],["funny"],["funnyman"],["funnymen"],["funs"],["fur"],["furan"],["furane"],["furanes"],["furanose"],["furans"],["furbelow"],["furbish"],["furcate"],["furcated"],["furcates"],["furcraea"],["furcula"],["furculae"],["furcular"],["furculum"],["furfur"],["furfural"],["furfuran"],["furfures"],["furibund"],["furies"],["furioso"],["furious"],["furl"],["furlable"],["furled"],["furler"],["furlers"],["furless"],["furling"],["furlong"],["furlongs"],["furlough"],["furls"],["furmenty"],["furmety"],["furmity"],["furnace"],["furnaced"],["furnaces"],["furnish"],["furor"],["furore"],["furores"],["furors"],["furred"],["furrier"],["furriers"],["furriery"],["furriest"],["furrily"],["furriner"],["furring"],["furrings"],["furrow"],["furrowed"],["furrower"],["furrows"],["furrowy"],["furry"],["furs"],["further"],["furthers"],["furthest"],["furtive"],["furuncle"],["fury"],["furze"],["furzes"],["furzier"],["furziest"],["furzy"],["fusain"],["fusains"],["fuscous"],["fuse"],["fused"],["fusee"],["fusees"],["fusel"],["fuselage"],["fuseless"],["fusels"],["fuses"],["fusible"],["fusibly"],["fusiform"],["fusil"],["fusile"],["fusileer"],["fusilier"],["fusils"],["fusing"],["fusion"],["fusions"],["fuss"],["fussed"],["fusser"],["fussers"],["fusses"],["fussier"],["fussiest"],["fussily"],["fussing"],["fusspot"],["fusspots"],["fussy"],["fustian"],["fustians"],["fustic"],["fustics"],["fustier"],["fustiest"],["fustily"],["fusty"],["futharc"],["futharcs"],["futhark"],["futharks"],["futhorc"],["futhorcs"],["futhork"],["futhorks"],["futile"],["futilely"],["futility"],["futon"],["futons"],["futtock"],["futtocks"],["futural"],["future"],["futures"],["futurism"],["futurist"],["futurity"],["futz"],["futzed"],["futzes"],["futzing"],["fuze"],["fuzed"],["fuzee"],["fuzees"],["fuzes"],["fuzil"],["fuzils"],["fuzing"],["fuzz"],["fuzzed"],["fuzzes"],["fuzzier"],["fuzziest"],["fuzzily"],["fuzzing"],["fuzzy"],["fyce"],["fyces"],["fyke"],["fykes"],["fylfot"],["fylfots"],["fytte"],["fyttes"],["gab"],["gabbard"],["gabbards"],["gabbart"],["gabbarts"],["gabbed"],["gabber"],["gabbers"],["gabbier"],["gabbiest"],["gabbing"],["gabble"],["gabbled"],["gabbler"],["gabblers"],["gabbles"],["gabbling"],["gabbro"],["gabbroic"],["gabbroid"],["gabbros"],["gabby"],["gabelle"],["gabelled"],["gabelles"],["gabfest"],["gabfests"],["gabies"],["gabion"],["gabions"],["gable"],["gabled"],["gables"],["gabling"],["gaboon"],["gaboons"],["gabs"],["gaby"],["gad"],["gadabout"],["gadarene"],["gadded"],["gadder"],["gadders"],["gaddi"],["gadding"],["gaddis"],["gadflies"],["gadfly"],["gadget"],["gadgetry"],["gadgets"],["gadgety"],["gadi"],["gadid"],["gadids"],["gadis"],["gadoid"],["gadoids"],["gadroon"],["gadroons"],["gads"],["gadwall"],["gadwalls"],["gadzooks"],["gae"],["gaed"],["gaeing"],["gaen"],["gaes"],["gaff"],["gaffe"],["gaffed"],["gaffer"],["gaffers"],["gaffes"],["gaffing"],["gaffs"],["gag"],["gaga"],["gage"],["gaged"],["gager"],["gagers"],["gages"],["gagged"],["gagger"],["gaggers"],["gagging"],["gaggle"],["gaggled"],["gaggles"],["gaggling"],["gaging"],["gagman"],["gagmen"],["gags"],["gagster"],["gagsters"],["gahnite"],["gahnites"],["gaieties"],["gaiety"],["gaily"],["gain"],["gainable"],["gained"],["gainer"],["gainers"],["gainful"],["gaining"],["gainless"],["gainlier"],["gainly"],["gains"],["gainsaid"],["gainsay"],["gainsays"],["gainst"],["gait"],["gaited"],["gaiter"],["gaiters"],["gaiting"],["gaits"],["gal"],["gala"],["galabia"],["galabias"],["galabieh"],["galabiya"],["galactic"],["galago"],["galagos"],["galah"],["galahs"],["galangal"],["galas"],["galatea"],["galateas"],["galavant"],["galax"],["galaxes"],["galaxies"],["galaxy"],["galbanum"],["gale"],["galea"],["galeae"],["galeas"],["galeate"],["galeated"],["galena"],["galenas"],["galenic"],["galenite"],["galere"],["galeres"],["gales"],["galilee"],["galilees"],["galiot"],["galiots"],["galipot"],["galipots"],["galivant"],["gall"],["gallant"],["gallants"],["gallate"],["gallates"],["galleass"],["galled"],["gallein"],["galleins"],["galleon"],["galleons"],["galleria"],["gallery"],["gallet"],["galleta"],["galletas"],["galleted"],["gallets"],["galley"],["galleys"],["gallfly"],["galliard"],["galliass"],["gallic"],["gallican"],["gallied"],["gallies"],["galling"],["galliot"],["galliots"],["gallipot"],["gallium"],["galliums"],["gallnut"],["gallnuts"],["gallon"],["gallons"],["galloon"],["galloons"],["galloot"],["galloots"],["gallop"],["galloped"],["galloper"],["gallops"],["gallous"],["gallows"],["galls"],["gallus"],["gallused"],["galluses"],["gally"],["gallying"],["galoot"],["galoots"],["galop"],["galopade"],["galoped"],["galoping"],["galops"],["galore"],["galores"],["galosh"],["galoshe"],["galoshed"],["galoshes"],["gals"],["galumph"],["galumphs"],["galvanic"],["galyac"],["galyacs"],["galyak"],["galyaks"],["gam"],["gama"],["gamas"],["gamashes"],["gamay"],["gamays"],["gamb"],["gamba"],["gambade"],["gambades"],["gambado"],["gambados"],["gambas"],["gambe"],["gambes"],["gambeson"],["gambia"],["gambias"],["gambier"],["gambiers"],["gambir"],["gambirs"],["gambit"],["gambits"],["gamble"],["gambled"],["gambler"],["gamblers"],["gambles"],["gambling"],["gamboge"],["gamboges"],["gambol"],["gamboled"],["gambols"],["gambrel"],["gambrels"],["gambs"],["gambusia"],["game"],["gamecock"],["gamed"],["gamelan"],["gamelans"],["gamelike"],["gamely"],["gameness"],["gamer"],["games"],["gamesome"],["gamest"],["gamester"],["gamete"],["gametes"],["gametic"],["gamey"],["gamic"],["gamier"],["gamiest"],["gamily"],["gamin"],["gamine"],["gamines"],["gaminess"],["gaming"],["gamings"],["gamins"],["gamma"],["gammadia"],["gammas"],["gammed"],["gammer"],["gammers"],["gammier"],["gammiest"],["gamming"],["gammon"],["gammoned"],["gammoner"],["gammons"],["gammy"],["gamodeme"],["gamp"],["gamps"],["gams"],["gamut"],["gamuts"],["gamy"],["gan"],["gander"],["gandered"],["ganders"],["gane"],["ganef"],["ganefs"],["ganev"],["ganevs"],["gang"],["gangbang"],["ganged"],["ganger"],["gangers"],["ganging"],["gangland"],["ganglia"],["ganglial"],["gangliar"],["ganglier"],["gangling"],["ganglion"],["gangly"],["gangplow"],["gangrel"],["gangrels"],["gangrene"],["gangs"],["gangster"],["gangue"],["gangues"],["gangway"],["gangways"],["ganister"],["ganja"],["ganjah"],["ganjahs"],["ganjas"],["gannet"],["gannets"],["ganof"],["ganofs"],["ganoid"],["ganoids"],["gantlet"],["gantlets"],["gantline"],["gantlope"],["gantries"],["gantry"],["ganymede"],["gaol"],["gaoled"],["gaoler"],["gaolers"],["gaoling"],["gaols"],["gap"],["gape"],["gaped"],["gaper"],["gapers"],["gapes"],["gapeseed"],["gapeworm"],["gaping"],["gapingly"],["gaposis"],["gapped"],["gappier"],["gappiest"],["gapping"],["gappy"],["gaps"],["gapy"],["gar"],["garage"],["garaged"],["garages"],["garaging"],["garb"],["garbage"],["garbages"],["garbanzo"],["garbed"],["garbing"],["garble"],["garbled"],["garbler"],["garblers"],["garbles"],["garbless"],["garbling"],["garboard"],["garboil"],["garboils"],["garbs"],["garcon"],["garcons"],["gardant"],["garden"],["gardened"],["gardener"],["gardenia"],["gardens"],["gardyloo"],["garfish"],["garganey"],["garget"],["gargets"],["gargety"],["gargle"],["gargled"],["gargler"],["garglers"],["gargles"],["gargling"],["gargoyle"],["garigue"],["garigues"],["garish"],["garishly"],["garland"],["garlands"],["garlic"],["garlicky"],["garlics"],["garment"],["garments"],["garner"],["garnered"],["garners"],["garnet"],["garnets"],["garni"],["garnish"],["garote"],["garoted"],["garotes"],["garoting"],["garotte"],["garotted"],["garotter"],["garottes"],["garpike"],["garpikes"],["garred"],["garret"],["garrets"],["garring"],["garrison"],["garron"],["garrons"],["garrote"],["garroted"],["garroter"],["garrotes"],["garrotte"],["gars"],["garter"],["gartered"],["garters"],["garth"],["garths"],["garvey"],["garveys"],["gas"],["gasalier"],["gasbag"],["gasbags"],["gascon"],["gascons"],["gaselier"],["gaseous"],["gases"],["gash"],["gashed"],["gasher"],["gashes"],["gashest"],["gashing"],["gashouse"],["gasified"],["gasifier"],["gasifies"],["gasiform"],["gasify"],["gasket"],["gaskets"],["gaskin"],["gasking"],["gaskings"],["gaskins"],["gasless"],["gaslight"],["gaslit"],["gasman"],["gasmen"],["gasogene"],["gasohol"],["gasohols"],["gasolene"],["gasolier"],["gasoline"],["gasp"],["gasped"],["gasper"],["gaspers"],["gasping"],["gasps"],["gassed"],["gasser"],["gassers"],["gasses"],["gassier"],["gassiest"],["gassing"],["gassings"],["gassy"],["gast"],["gasted"],["gaster"],["gasters"],["gastight"],["gasting"],["gastness"],["gastraea"],["gastral"],["gastrea"],["gastreas"],["gastric"],["gastrin"],["gastrins"],["gastrula"],["gasts"],["gasworks"],["gat"],["gate"],["gateau"],["gateaux"],["gated"],["gatefold"],["gateless"],["gatelike"],["gateman"],["gatemen"],["gatepost"],["gates"],["gateway"],["gateways"],["gather"],["gathered"],["gatherer"],["gathers"],["gating"],["gator"],["gators"],["gats"],["gauche"],["gauchely"],["gaucher"],["gauchest"],["gaucho"],["gauchos"],["gaud"],["gaudery"],["gaudier"],["gaudies"],["gaudiest"],["gaudily"],["gauds"],["gaudy"],["gauffer"],["gauffers"],["gauge"],["gauged"],["gauger"],["gaugers"],["gauges"],["gauging"],["gault"],["gaults"],["gaum"],["gaumed"],["gauming"],["gaums"],["gaun"],["gaunt"],["gaunter"],["gauntest"],["gauntlet"],["gauntly"],["gauntry"],["gaur"],["gaurs"],["gauss"],["gausses"],["gauze"],["gauzes"],["gauzier"],["gauziest"],["gauzily"],["gauzy"],["gavage"],["gavages"],["gave"],["gavel"],["gaveled"],["gaveling"],["gavelled"],["gavelock"],["gavels"],["gavial"],["gavials"],["gavot"],["gavots"],["gavotte"],["gavotted"],["gavottes"],["gawk"],["gawked"],["gawker"],["gawkers"],["gawkier"],["gawkies"],["gawkiest"],["gawkily"],["gawking"],["gawkish"],["gawks"],["gawky"],["gawp"],["gawped"],["gawping"],["gawps"],["gawsie"],["gawsy"],["gay"],["gayal"],["gayals"],["gayer"],["gayest"],["gayeties"],["gayety"],["gayly"],["gayness"],["gays"],["gaywings"],["gazabo"],["gazaboes"],["gazabos"],["gaze"],["gazebo"],["gazeboes"],["gazebos"],["gazed"],["gazelle"],["gazelles"],["gazer"],["gazers"],["gazes"],["gazette"],["gazetted"],["gazettes"],["gazing"],["gazogene"],["gazpacho"],["gazump"],["gazumped"],["gazumper"],["gazumps"],["gear"],["gearbox"],["gearcase"],["geared"],["gearing"],["gearings"],["gearless"],["gears"],["geck"],["gecked"],["gecking"],["gecko"],["geckoes"],["geckos"],["gecks"],["ged"],["geds"],["gee"],["geed"],["geegaw"],["geegaws"],["geeing"],["geek"],["geekier"],["geekiest"],["geeks"],["geeky"],["geepound"],["gees"],["geese"],["geest"],["geests"],["geezer"],["geezers"],["geisha"],["geishas"],["gel"],["gelable"],["gelada"],["geladas"],["gelant"],["gelants"],["gelate"],["gelated"],["gelates"],["gelati"],["gelatin"],["gelatine"],["gelating"],["gelatins"],["gelation"],["gelato"],["gelatos"],["geld"],["gelded"],["gelder"],["gelders"],["gelding"],["geldings"],["gelds"],["gelee"],["gelees"],["gelid"],["gelidity"],["gelidly"],["gellant"],["gellants"],["gelled"],["gelling"],["gels"],["gelsemia"],["gelt"],["gelts"],["gem"],["geminal"],["geminate"],["gemlike"],["gemma"],["gemmae"],["gemmate"],["gemmated"],["gemmates"],["gemmed"],["gemmier"],["gemmiest"],["gemmily"],["gemming"],["gemmule"],["gemmules"],["gemmy"],["gemology"],["gemot"],["gemote"],["gemotes"],["gemots"],["gems"],["gemsbok"],["gemsboks"],["gemsbuck"],["gemstone"],["gendarme"],["gender"],["gendered"],["genders"],["gene"],["genera"],["general"],["generals"],["generate"],["generic"],["generics"],["generous"],["genes"],["geneses"],["genesis"],["genet"],["genetic"],["genetics"],["genets"],["genette"],["genettes"],["geneva"],["genevas"],["genial"],["genially"],["genic"],["genie"],["genies"],["genii"],["genip"],["genipap"],["genipaps"],["genips"],["genital"],["genitals"],["genitive"],["genitor"],["genitors"],["geniture"],["genius"],["geniuses"],["genoa"],["genoas"],["genocide"],["genoise"],["genoises"],["genom"],["genome"],["genomes"],["genomic"],["genoms"],["genotype"],["genre"],["genres"],["genro"],["genros"],["gens"],["genseng"],["gensengs"],["gent"],["genteel"],["gentes"],["gentian"],["gentians"],["gentil"],["gentile"],["gentiles"],["gentle"],["gentled"],["gentler"],["gentles"],["gentlest"],["gentling"],["gently"],["gentrice"],["gentries"],["gentrify"],["gentry"],["gents"],["genu"],["genua"],["genuine"],["genus"],["genuses"],["geode"],["geodes"],["geodesic"],["geodesy"],["geodetic"],["geodic"],["geoduck"],["geoducks"],["geognosy"],["geoid"],["geoidal"],["geoids"],["geologer"],["geologic"],["geology"],["geomancy"],["geometer"],["geometry"],["geophagy"],["geophone"],["geophyte"],["geoponic"],["geoprobe"],["georgic"],["georgics"],["geotaxes"],["geotaxis"],["gerah"],["gerahs"],["geranial"],["geraniol"],["geranium"],["gerardia"],["gerbera"],["gerberas"],["gerbil"],["gerbille"],["gerbils"],["gerent"],["gerents"],["gerenuk"],["gerenuks"],["germ"],["german"],["germane"],["germanic"],["germans"],["germen"],["germens"],["germfree"],["germier"],["germiest"],["germina"],["germinal"],["germs"],["germy"],["gerontic"],["gerund"],["gerunds"],["gesneria"],["gesso"],["gessoed"],["gessoes"],["gest"],["gestalt"],["gestalts"],["gestapo"],["gestapos"],["gestate"],["gestated"],["gestates"],["geste"],["gestes"],["gestic"],["gestical"],["gests"],["gestural"],["gesture"],["gestured"],["gesturer"],["gestures"],["get"],["geta"],["getable"],["getas"],["getaway"],["getaways"],["gets"],["gettable"],["getter"],["gettered"],["getters"],["getting"],["getup"],["getups"],["geum"],["geums"],["gewgaw"],["gewgaws"],["gey"],["geyser"],["geysers"],["gharri"],["gharries"],["gharris"],["gharry"],["ghast"],["ghastful"],["ghastly"],["ghat"],["ghats"],["ghaut"],["ghauts"],["ghazi"],["ghazies"],["ghazis"],["ghee"],["ghees"],["gherao"],["gheraoed"],["gheraoes"],["gherkin"],["gherkins"],["ghetto"],["ghettoed"],["ghettoes"],["ghettos"],["ghi"],["ghibli"],["ghiblis"],["ghillie"],["ghillies"],["ghis"],["ghost"],["ghosted"],["ghostier"],["ghosting"],["ghostly"],["ghosts"],["ghosty"],["ghoul"],["ghoulish"],["ghouls"],["ghyll"],["ghylls"],["giant"],["giantess"],["giantism"],["giants"],["giaour"],["giaours"],["gib"],["gibbed"],["gibber"],["gibbered"],["gibbers"],["gibbet"],["gibbeted"],["gibbets"],["gibbing"],["gibbon"],["gibbons"],["gibbose"],["gibbous"],["gibbsite"],["gibe"],["gibed"],["giber"],["gibers"],["gibes"],["gibing"],["gibingly"],["giblet"],["giblets"],["gibs"],["gibson"],["gibsons"],["gid"],["giddap"],["giddied"],["giddier"],["giddies"],["giddiest"],["giddily"],["giddy"],["giddyap"],["giddying"],["giddyup"],["gids"],["gie"],["gied"],["gieing"],["gien"],["gies"],["gift"],["gifted"],["giftedly"],["gifting"],["giftless"],["gifts"],["giftware"],["gig"],["giga"],["gigabit"],["gigabits"],["gigantic"],["gigas"],["gigaton"],["gigatons"],["gigawatt"],["gigged"],["gigging"],["giggle"],["giggled"],["giggler"],["gigglers"],["giggles"],["gigglier"],["giggling"],["giggly"],["gighe"],["giglet"],["giglets"],["giglot"],["giglots"],["gigolo"],["gigolos"],["gigot"],["gigots"],["gigs"],["gigue"],["gigues"],["gilbert"],["gilberts"],["gild"],["gilded"],["gilder"],["gilders"],["gildhall"],["gilding"],["gildings"],["gilds"],["gill"],["gilled"],["giller"],["gillers"],["gillie"],["gillied"],["gillies"],["gilling"],["gillnet"],["gillnets"],["gills"],["gilly"],["gillying"],["gilt"],["gilthead"],["gilts"],["gimbal"],["gimbaled"],["gimbals"],["gimcrack"],["gimel"],["gimels"],["gimlet"],["gimleted"],["gimlets"],["gimmal"],["gimmals"],["gimme"],["gimmick"],["gimmicks"],["gimmicky"],["gimmie"],["gimmies"],["gimp"],["gimped"],["gimpier"],["gimpiest"],["gimping"],["gimps"],["gimpy"],["gin"],["gingal"],["gingall"],["gingalls"],["gingals"],["gingeley"],["gingeli"],["gingelis"],["gingelli"],["gingelly"],["gingely"],["ginger"],["gingered"],["gingerly"],["gingers"],["gingery"],["gingham"],["ginghams"],["gingili"],["gingilis"],["gingilli"],["gingiva"],["gingivae"],["gingival"],["gingko"],["gingkoes"],["gink"],["ginkgo"],["ginkgoes"],["ginkgos"],["ginks"],["ginned"],["ginner"],["ginners"],["ginnier"],["ginniest"],["ginning"],["ginnings"],["ginny"],["gins"],["ginseng"],["ginsengs"],["gip"],["gipon"],["gipons"],["gipped"],["gipper"],["gippers"],["gipping"],["gips"],["gipsied"],["gipsies"],["gipsy"],["gipsying"],["giraffe"],["giraffes"],["girasol"],["girasole"],["girasols"],["gird"],["girded"],["girder"],["girders"],["girding"],["girdle"],["girdled"],["girdler"],["girdlers"],["girdles"],["girdling"],["girds"],["girl"],["girlhood"],["girlie"],["girlies"],["girlish"],["girls"],["girly"],["girn"],["girned"],["girning"],["girns"],["giro"],["giron"],["girons"],["giros"],["girosol"],["girosols"],["girsh"],["girshes"],["girt"],["girted"],["girth"],["girthed"],["girthing"],["girths"],["girting"],["girts"],["gisarme"],["gisarmes"],["gismo"],["gismos"],["gist"],["gists"],["git"],["gitano"],["gitanos"],["gittern"],["gitterns"],["give"],["giveable"],["giveaway"],["giveback"],["given"],["givens"],["giver"],["givers"],["gives"],["giving"],["gizmo"],["gizmos"],["gizzard"],["gizzards"],["gjetost"],["gjetosts"],["glabella"],["glabrate"],["glabrous"],["glace"],["glaceed"],["glaceing"],["glaces"],["glacial"],["glaciate"],["glacier"],["glaciers"],["glacis"],["glacises"],["glad"],["gladded"],["gladden"],["gladdens"],["gladder"],["gladdest"],["gladding"],["glade"],["glades"],["gladiate"],["gladier"],["gladiest"],["gladiola"],["gladioli"],["gladlier"],["gladly"],["gladness"],["glads"],["gladsome"],["glady"],["glaiket"],["glaikit"],["glair"],["glaire"],["glaired"],["glaires"],["glairier"],["glairing"],["glairs"],["glairy"],["glaive"],["glaived"],["glaives"],["glamor"],["glamors"],["glamour"],["glamours"],["glance"],["glanced"],["glancer"],["glancers"],["glances"],["glancing"],["gland"],["glanders"],["glandes"],["glands"],["glandule"],["glans"],["glare"],["glared"],["glares"],["glarier"],["glariest"],["glaring"],["glary"],["glass"],["glassed"],["glasses"],["glassful"],["glassie"],["glassier"],["glassies"],["glassily"],["glassine"],["glassing"],["glassman"],["glassmen"],["glassy"],["glaucoma"],["glaucous"],["glaze"],["glazed"],["glazer"],["glazers"],["glazes"],["glazier"],["glaziers"],["glaziery"],["glaziest"],["glazing"],["glazings"],["glazy"],["gleam"],["gleamed"],["gleamer"],["gleamers"],["gleamier"],["gleaming"],["gleams"],["gleamy"],["glean"],["gleaned"],["gleaner"],["gleaners"],["gleaning"],["gleans"],["gleba"],["glebae"],["glebe"],["glebes"],["gled"],["glede"],["gledes"],["gleds"],["glee"],["gleed"],["gleeds"],["gleeful"],["gleek"],["gleeked"],["gleeking"],["gleeks"],["gleeman"],["gleemen"],["glees"],["gleesome"],["gleet"],["gleeted"],["gleetier"],["gleeting"],["gleets"],["gleety"],["gleg"],["glegly"],["glegness"],["glen"],["glenlike"],["glenoid"],["glens"],["gley"],["gleys"],["glia"],["gliadin"],["gliadine"],["gliadins"],["glial"],["glias"],["glib"],["glibber"],["glibbest"],["glibly"],["glibness"],["glide"],["glided"],["glider"],["gliders"],["glides"],["gliding"],["gliff"],["gliffs"],["glim"],["glime"],["glimed"],["glimes"],["gliming"],["glimmer"],["glimmers"],["glimpse"],["glimpsed"],["glimpser"],["glimpses"],["glims"],["glint"],["glinted"],["glinting"],["glints"],["glioma"],["gliomas"],["gliomata"],["glissade"],["glisten"],["glistens"],["glister"],["glisters"],["glitch"],["glitches"],["glitchy"],["glitter"],["glitters"],["glittery"],["glitz"],["glitzes"],["glitzier"],["glitzy"],["gloam"],["gloaming"],["gloams"],["gloat"],["gloated"],["gloater"],["gloaters"],["gloating"],["gloats"],["glob"],["global"],["globally"],["globate"],["globated"],["globbier"],["globby"],["globe"],["globed"],["globes"],["globin"],["globing"],["globins"],["globoid"],["globoids"],["globose"],["globous"],["globs"],["globular"],["globule"],["globules"],["globulin"],["glochid"],["glochids"],["glogg"],["gloggs"],["glom"],["glomera"],["glommed"],["glomming"],["gloms"],["glomus"],["glonoin"],["glonoins"],["gloom"],["gloomed"],["gloomful"],["gloomier"],["gloomily"],["glooming"],["glooms"],["gloomy"],["glop"],["glopped"],["glopping"],["gloppy"],["glops"],["gloria"],["glorias"],["gloried"],["glories"],["glorify"],["gloriole"],["glorious"],["glory"],["glorying"],["gloss"],["glossa"],["glossae"],["glossal"],["glossary"],["glossas"],["glossed"],["glosseme"],["glosser"],["glossers"],["glosses"],["glossier"],["glossies"],["glossily"],["glossina"],["glossing"],["glossy"],["glost"],["glosts"],["glottal"],["glottic"],["glottis"],["glout"],["glouted"],["glouting"],["glouts"],["glove"],["gloved"],["glover"],["glovers"],["gloves"],["gloving"],["glow"],["glowed"],["glower"],["glowered"],["glowers"],["glowfly"],["glowing"],["glows"],["glowworm"],["gloxinia"],["gloze"],["glozed"],["glozes"],["glozing"],["glucagon"],["glucinic"],["glucinum"],["glucose"],["glucoses"],["glucosic"],["glue"],["glued"],["glueing"],["gluelike"],["gluepot"],["gluepots"],["gluer"],["gluers"],["glues"],["gluey"],["glug"],["glugged"],["glugging"],["glugs"],["gluier"],["gluiest"],["gluily"],["gluing"],["glum"],["glume"],["glumes"],["glumly"],["glummer"],["glummest"],["glumness"],["glumpier"],["glumpily"],["glumpy"],["glunch"],["glunched"],["glunches"],["gluon"],["gluons"],["glut"],["gluteal"],["glutei"],["glutelin"],["gluten"],["glutens"],["gluteus"],["gluts"],["glutted"],["glutting"],["glutton"],["gluttons"],["gluttony"],["glycan"],["glycans"],["glyceric"],["glycerin"],["glycerol"],["glyceryl"],["glycin"],["glycine"],["glycines"],["glycins"],["glycogen"],["glycol"],["glycolic"],["glycols"],["glyconic"],["glycosyl"],["glycyl"],["glycyls"],["glyph"],["glyphic"],["glyphs"],["glyptic"],["glyptics"],["gnar"],["gnarl"],["gnarled"],["gnarlier"],["gnarling"],["gnarls"],["gnarly"],["gnarr"],["gnarred"],["gnarring"],["gnarrs"],["gnars"],["gnash"],["gnashed"],["gnashes"],["gnashing"],["gnat"],["gnathal"],["gnathic"],["gnathion"],["gnathite"],["gnatlike"],["gnats"],["gnattier"],["gnatty"],["gnaw"],["gnawable"],["gnawed"],["gnawer"],["gnawers"],["gnawing"],["gnawings"],["gnawn"],["gnaws"],["gneiss"],["gneisses"],["gneissic"],["gnocchi"],["gnome"],["gnomes"],["gnomic"],["gnomical"],["gnomish"],["gnomist"],["gnomists"],["gnomon"],["gnomonic"],["gnomons"],["gnoses"],["gnosis"],["gnostic"],["gnu"],["gnus"],["go"],["goa"],["goad"],["goaded"],["goading"],["goadlike"],["goads"],["goal"],["goaled"],["goalie"],["goalies"],["goaling"],["goalless"],["goalpost"],["goals"],["goanna"],["goannas"],["goas"],["goat"],["goatee"],["goateed"],["goatees"],["goatfish"],["goatherd"],["goatish"],["goatlike"],["goats"],["goatskin"],["gob"],["goban"],["gobang"],["gobangs"],["gobans"],["gobbed"],["gobbet"],["gobbets"],["gobbing"],["gobble"],["gobbled"],["gobbler"],["gobblers"],["gobbles"],["gobbling"],["gobies"],["gobioid"],["gobioids"],["goblet"],["goblets"],["goblin"],["goblins"],["gobo"],["goboes"],["gobonee"],["gobony"],["gobos"],["gobs"],["goby"],["god"],["godchild"],["goddam"],["goddamn"],["goddamns"],["goddams"],["godded"],["goddess"],["godding"],["godhead"],["godheads"],["godhood"],["godhoods"],["godless"],["godlier"],["godliest"],["godlike"],["godlily"],["godling"],["godlings"],["godly"],["godown"],["godowns"],["godroon"],["godroons"],["gods"],["godsend"],["godsends"],["godship"],["godships"],["godson"],["godsons"],["godwit"],["godwits"],["goer"],["goers"],["goes"],["goethite"],["gofer"],["gofers"],["goffer"],["goffered"],["goffers"],["goggle"],["goggled"],["goggler"],["gogglers"],["goggles"],["gogglier"],["goggling"],["goggly"],["goglet"],["goglets"],["gogo"],["gogos"],["going"],["goings"],["goiter"],["goiters"],["goitre"],["goitres"],["goitrous"],["golconda"],["gold"],["goldarn"],["goldarns"],["goldbug"],["goldbugs"],["golden"],["goldener"],["goldenly"],["golder"],["goldest"],["goldeye"],["goldeyes"],["goldfish"],["golds"],["goldurn"],["goldurns"],["golem"],["golems"],["golf"],["golfed"],["golfer"],["golfers"],["golfing"],["golfings"],["golfs"],["golgotha"],["goliard"],["goliards"],["golliwog"],["golly"],["golosh"],["goloshe"],["goloshes"],["gombo"],["gombos"],["gombroon"],["gomeral"],["gomerals"],["gomerel"],["gomerels"],["gomeril"],["gomerils"],["gomuti"],["gomutis"],["gonad"],["gonadal"],["gonadial"],["gonadic"],["gonads"],["gondola"],["gondolas"],["gone"],["gonef"],["gonefs"],["goneness"],["goner"],["goners"],["gonfalon"],["gonfanon"],["gong"],["gonged"],["gonging"],["gonglike"],["gongs"],["gonia"],["gonidia"],["gonidial"],["gonidic"],["gonidium"],["gonif"],["goniff"],["goniffs"],["gonifs"],["gonion"],["gonium"],["gonocyte"],["gonof"],["gonofs"],["gonoph"],["gonophs"],["gonopore"],["gonzo"],["goo"],["goober"],["goobers"],["good"],["goodby"],["goodbye"],["goodbyes"],["goodbys"],["goodie"],["goodies"],["goodish"],["goodlier"],["goodly"],["goodman"],["goodmen"],["goodness"],["goods"],["goodwife"],["goodwill"],["goody"],["gooey"],["goof"],["goofball"],["goofed"],["goofier"],["goofiest"],["goofily"],["goofing"],["goofs"],["goofy"],["googlies"],["googly"],["googol"],["googols"],["gooier"],["gooiest"],["gook"],["gooks"],["gooky"],["goombah"],["goombahs"],["goombay"],["goombays"],["goon"],["gooney"],["gooneys"],["goonie"],["goonies"],["goons"],["goony"],["goop"],["goopier"],["goopiest"],["goops"],["goopy"],["gooral"],["goorals"],["goos"],["goose"],["goosed"],["gooses"],["goosey"],["goosier"],["goosiest"],["goosing"],["goosy"],["gopher"],["gophers"],["gor"],["goral"],["gorals"],["gorbelly"],["gorblimy"],["gorcock"],["gorcocks"],["gore"],["gored"],["gores"],["gorge"],["gorged"],["gorgedly"],["gorgeous"],["gorger"],["gorgerin"],["gorgers"],["gorges"],["gorget"],["gorgeted"],["gorgets"],["gorging"],["gorgon"],["gorgons"],["gorhen"],["gorhens"],["gorier"],["goriest"],["gorilla"],["gorillas"],["gorily"],["goriness"],["goring"],["gormand"],["gormands"],["gormless"],["gorp"],["gorps"],["gorse"],["gorses"],["gorsier"],["gorsiest"],["gorsy"],["gory"],["gosh"],["goshawk"],["goshawks"],["gosling"],["goslings"],["gospel"],["gospeler"],["gospels"],["gosport"],["gosports"],["gossamer"],["gossan"],["gossans"],["gossip"],["gossiped"],["gossiper"],["gossipry"],["gossips"],["gossipy"],["gossoon"],["gossoons"],["gossypol"],["got"],["gothic"],["gothics"],["gothite"],["gothites"],["gotten"],["gouache"],["gouaches"],["gouge"],["gouged"],["gouger"],["gougers"],["gouges"],["gouging"],["goulash"],["gourami"],["gouramis"],["gourd"],["gourde"],["gourdes"],["gourds"],["gourmand"],["gourmet"],["gourmets"],["gout"],["goutier"],["goutiest"],["goutily"],["gouts"],["gouty"],["govern"],["governed"],["governor"],["governs"],["gowan"],["gowaned"],["gowans"],["gowany"],["gowd"],["gowds"],["gowk"],["gowks"],["gown"],["gowned"],["gowning"],["gowns"],["gownsman"],["gownsmen"],["gox"],["goxes"],["goy"],["goyim"],["goyish"],["goys"],["graal"],["graals"],["grab"],["grabbed"],["grabber"],["grabbers"],["grabbier"],["grabbing"],["grabble"],["grabbled"],["grabbler"],["grabbles"],["grabby"],["graben"],["grabens"],["grabs"],["grace"],["graced"],["graceful"],["graces"],["gracile"],["graciles"],["gracilis"],["gracing"],["gracioso"],["gracious"],["grackle"],["grackles"],["grad"],["gradable"],["gradate"],["gradated"],["gradates"],["grade"],["graded"],["grader"],["graders"],["grades"],["gradient"],["gradin"],["gradine"],["gradines"],["grading"],["gradins"],["grads"],["gradual"],["graduals"],["graduand"],["graduate"],["gradus"],["graduses"],["graecize"],["graffiti"],["graffito"],["graft"],["graftage"],["grafted"],["grafter"],["grafters"],["grafting"],["grafts"],["graham"],["grahams"],["grail"],["grails"],["grain"],["grained"],["grainer"],["grainers"],["grainier"],["graining"],["grains"],["grainy"],["gram"],["grama"],["gramary"],["gramarye"],["gramas"],["gramercy"],["grammar"],["grammars"],["gramme"],["grammes"],["gramp"],["gramps"],["grampus"],["grams"],["gran"],["grana"],["granary"],["grand"],["grandad"],["grandads"],["grandam"],["grandame"],["grandams"],["granddad"],["grandee"],["grandees"],["grander"],["grandest"],["grandeur"],["grandly"],["grandma"],["grandmas"],["grandpa"],["grandpas"],["grands"],["grandsir"],["grandson"],["grange"],["granger"],["grangers"],["granges"],["granite"],["granites"],["granitic"],["grannie"],["grannies"],["granny"],["granola"],["granolas"],["grans"],["grant"],["granted"],["grantee"],["grantees"],["granter"],["granters"],["granting"],["grantor"],["grantors"],["grants"],["granular"],["granule"],["granules"],["granum"],["grape"],["grapery"],["grapes"],["grapey"],["graph"],["graphed"],["grapheme"],["graphic"],["graphics"],["graphing"],["graphite"],["graphs"],["grapier"],["grapiest"],["graplin"],["grapline"],["graplins"],["grapnel"],["grapnels"],["grappa"],["grappas"],["grapple"],["grappled"],["grappler"],["grapples"],["grapy"],["grasp"],["grasped"],["grasper"],["graspers"],["grasping"],["grasps"],["grass"],["grassed"],["grasses"],["grassier"],["grassily"],["grassing"],["grassy"],["grat"],["grate"],["grated"],["grateful"],["grater"],["graters"],["grates"],["gratify"],["gratin"],["gratine"],["gratinee"],["grating"],["gratings"],["gratins"],["gratis"],["gratuity"],["graupel"],["graupels"],["gravamen"],["grave"],["graved"],["gravel"],["graveled"],["gravelly"],["gravels"],["gravely"],["graven"],["graver"],["gravers"],["graves"],["gravest"],["gravid"],["gravida"],["gravidae"],["gravidas"],["gravidly"],["gravies"],["graving"],["gravitas"],["graviton"],["gravity"],["gravure"],["gravures"],["gravy"],["gray"],["grayback"],["grayed"],["grayer"],["grayest"],["grayfish"],["graying"],["grayish"],["graylag"],["graylags"],["grayling"],["grayly"],["graymail"],["grayness"],["grayout"],["grayouts"],["grays"],["grazable"],["graze"],["grazed"],["grazer"],["grazers"],["grazes"],["grazier"],["graziers"],["grazing"],["grazings"],["grazioso"],["grease"],["greased"],["greaser"],["greasers"],["greases"],["greasier"],["greasily"],["greasing"],["greasy"],["great"],["greaten"],["greatens"],["greater"],["greatest"],["greatly"],["greats"],["greave"],["greaved"],["greaves"],["grebe"],["grebes"],["grecize"],["grecized"],["grecizes"],["gree"],["greed"],["greedier"],["greedily"],["greeds"],["greedy"],["greegree"],["greeing"],["greek"],["green"],["greenbug"],["greened"],["greener"],["greenery"],["greenest"],["greenfly"],["greenie"],["greenier"],["greenies"],["greening"],["greenish"],["greenlet"],["greenly"],["greens"],["greenth"],["greenths"],["greeny"],["grees"],["greet"],["greeted"],["greeter"],["greeters"],["greeting"],["greets"],["grego"],["gregos"],["greige"],["greiges"],["greisen"],["greisens"],["gremial"],["gremials"],["gremlin"],["gremlins"],["gremmie"],["gremmies"],["gremmy"],["grenade"],["grenades"],["grew"],["grewsome"],["grey"],["greyed"],["greyer"],["greyest"],["greyhen"],["greyhens"],["greying"],["greyish"],["greylag"],["greylags"],["greyly"],["greyness"],["greys"],["gribble"],["gribbles"],["grid"],["gridder"],["gridders"],["griddle"],["griddled"],["griddles"],["gride"],["grided"],["grides"],["griding"],["gridiron"],["gridlock"],["grids"],["grief"],["griefs"],["grievant"],["grieve"],["grieved"],["griever"],["grievers"],["grieves"],["grieving"],["grievous"],["griff"],["griffe"],["griffes"],["griffin"],["griffins"],["griffon"],["griffons"],["griffs"],["grift"],["grifted"],["grifter"],["grifters"],["grifting"],["grifts"],["grig"],["grigri"],["grigris"],["grigs"],["grill"],["grillade"],["grillage"],["grille"],["grilled"],["griller"],["grillers"],["grilles"],["grilling"],["grills"],["grilse"],["grilses"],["grim"],["grimace"],["grimaced"],["grimacer"],["grimaces"],["grime"],["grimed"],["grimes"],["grimier"],["grimiest"],["grimily"],["griming"],["grimly"],["grimmer"],["grimmest"],["grimness"],["grimy"],["grin"],["grind"],["grinded"],["grinder"],["grinders"],["grindery"],["grinding"],["grinds"],["gringo"],["gringos"],["grinned"],["grinner"],["grinners"],["grinning"],["grins"],["griot"],["griots"],["grip"],["gripe"],["griped"],["griper"],["gripers"],["gripes"],["gripey"],["gripier"],["gripiest"],["griping"],["grippe"],["gripped"],["gripper"],["grippers"],["grippes"],["grippier"],["gripping"],["gripple"],["grippy"],["grips"],["gripsack"],["gript"],["gripy"],["griseous"],["grisette"],["griskin"],["griskins"],["grislier"],["grisly"],["grison"],["grisons"],["grist"],["gristle"],["gristles"],["gristly"],["grists"],["grit"],["grith"],["griths"],["grits"],["gritted"],["grittier"],["grittily"],["gritting"],["gritty"],["grivet"],["grivets"],["grizzle"],["grizzled"],["grizzler"],["grizzles"],["grizzly"],["groan"],["groaned"],["groaner"],["groaners"],["groaning"],["groans"],["groat"],["groats"],["grocer"],["grocers"],["grocery"],["grog"],["groggery"],["groggier"],["groggily"],["groggy"],["grogram"],["grograms"],["grogs"],["grogshop"],["groin"],["groined"],["groining"],["groins"],["grommet"],["grommets"],["gromwell"],["groom"],["groomed"],["groomer"],["groomers"],["grooming"],["grooms"],["groove"],["grooved"],["groover"],["groovers"],["grooves"],["groovier"],["grooving"],["groovy"],["grope"],["groped"],["groper"],["gropers"],["gropes"],["groping"],["grosbeak"],["groschen"],["gross"],["grossed"],["grosser"],["grossers"],["grosses"],["grossest"],["grossing"],["grossly"],["grosz"],["grosze"],["groszy"],["grot"],["grots"],["grottier"],["grotto"],["grottoes"],["grottos"],["grotty"],["grouch"],["grouched"],["grouches"],["grouchy"],["ground"],["grounded"],["grounder"],["grounds"],["group"],["grouped"],["grouper"],["groupers"],["groupie"],["groupies"],["grouping"],["groupoid"],["groups"],["grouse"],["groused"],["grouser"],["grousers"],["grouses"],["grousing"],["grout"],["grouted"],["grouter"],["grouters"],["groutier"],["grouting"],["grouts"],["grouty"],["grove"],["groved"],["grovel"],["groveled"],["groveler"],["grovels"],["groves"],["grow"],["growable"],["grower"],["growers"],["growing"],["growl"],["growled"],["growler"],["growlers"],["growlier"],["growling"],["growls"],["growly"],["grown"],["grownup"],["grownups"],["grows"],["growth"],["growths"],["groyne"],["groynes"],["grub"],["grubbed"],["grubber"],["grubbers"],["grubbier"],["grubbily"],["grubbing"],["grubby"],["grubs"],["grubworm"],["grudge"],["grudged"],["grudger"],["grudgers"],["grudges"],["grudging"],["grue"],["gruel"],["grueled"],["grueler"],["gruelers"],["grueling"],["gruelled"],["grueller"],["gruels"],["grues"],["gruesome"],["gruff"],["gruffed"],["gruffer"],["gruffest"],["gruffier"],["gruffily"],["gruffing"],["gruffish"],["gruffly"],["gruffs"],["gruffy"],["grugru"],["grugrus"],["gruiform"],["grum"],["grumble"],["grumbled"],["grumbler"],["grumbles"],["grumbly"],["grume"],["grumes"],["grummer"],["grummest"],["grummet"],["grummets"],["grumose"],["grumous"],["grump"],["grumped"],["grumphie"],["grumphy"],["grumpier"],["grumpily"],["grumping"],["grumpish"],["grumps"],["grumpy"],["grunge"],["grunges"],["grungier"],["grungy"],["grunion"],["grunions"],["grunt"],["grunted"],["grunter"],["grunters"],["grunting"],["gruntle"],["gruntled"],["gruntles"],["grunts"],["grushie"],["grutch"],["grutched"],["grutches"],["grutten"],["gruyere"],["gruyeres"],["gryphon"],["gryphons"],["guacharo"],["guaco"],["guacos"],["guaiac"],["guaiacol"],["guaiacs"],["guaiacum"],["guaiocum"],["guan"],["guanaco"],["guanacos"],["guanase"],["guanases"],["guanay"],["guanays"],["guanidin"],["guanin"],["guanine"],["guanines"],["guanins"],["guano"],["guanos"],["guans"],["guar"],["guarani"],["guaranis"],["guaranty"],["guard"],["guardant"],["guarded"],["guarder"],["guarders"],["guardian"],["guarding"],["guards"],["guars"],["guava"],["guavas"],["guayule"],["guayules"],["guck"],["gucks"],["gude"],["gudes"],["gudgeon"],["gudgeons"],["guenon"],["guenons"],["guerdon"],["guerdons"],["guerilla"],["guernsey"],["guess"],["guessed"],["guesser"],["guessers"],["guesses"],["guessing"],["guest"],["guested"],["guesting"],["guests"],["guff"],["guffaw"],["guffawed"],["guffaws"],["guffs"],["guggle"],["guggled"],["guggles"],["guggling"],["guglet"],["guglets"],["guid"],["guidable"],["guidance"],["guide"],["guided"],["guider"],["guiders"],["guides"],["guideway"],["guiding"],["guidon"],["guidons"],["guids"],["guild"],["guilder"],["guilders"],["guilds"],["guile"],["guiled"],["guileful"],["guiles"],["guiling"],["guilt"],["guiltier"],["guiltily"],["guilts"],["guilty"],["guimpe"],["guimpes"],["guinea"],["guineas"],["guipure"],["guipures"],["guiro"],["guiros"],["guisard"],["guisards"],["guise"],["guised"],["guises"],["guising"],["guitar"],["guitars"],["guitguit"],["gul"],["gulag"],["gulags"],["gular"],["gulch"],["gulches"],["gulden"],["guldens"],["gules"],["gulf"],["gulfed"],["gulfier"],["gulfiest"],["gulfing"],["gulflike"],["gulfs"],["gulfweed"],["gulfy"],["gull"],["gullable"],["gullably"],["gulled"],["gullet"],["gullets"],["gulley"],["gulleys"],["gullible"],["gullibly"],["gullied"],["gullies"],["gulling"],["gulls"],["gully"],["gullying"],["gulosity"],["gulp"],["gulped"],["gulper"],["gulpers"],["gulpier"],["gulpiest"],["gulping"],["gulps"],["gulpy"],["guls"],["gum"],["gumbo"],["gumboil"],["gumboils"],["gumboot"],["gumboots"],["gumbos"],["gumbotil"],["gumdrop"],["gumdrops"],["gumless"],["gumlike"],["gumma"],["gummas"],["gummata"],["gummed"],["gummer"],["gummers"],["gummier"],["gummiest"],["gumming"],["gummite"],["gummites"],["gummose"],["gummoses"],["gummosis"],["gummous"],["gummy"],["gumption"],["gums"],["gumshoe"],["gumshoed"],["gumshoes"],["gumtree"],["gumtrees"],["gumweed"],["gumweeds"],["gumwood"],["gumwoods"],["gun"],["gunboat"],["gunboats"],["gundog"],["gundogs"],["gunfight"],["gunfire"],["gunfires"],["gunflint"],["gunk"],["gunkhole"],["gunks"],["gunky"],["gunless"],["gunlock"],["gunlocks"],["gunman"],["gunmen"],["gunmetal"],["gunned"],["gunnel"],["gunnels"],["gunnen"],["gunner"],["gunners"],["gunnery"],["gunnies"],["gunning"],["gunnings"],["gunny"],["gunnybag"],["gunpaper"],["gunplay"],["gunplays"],["gunpoint"],["gunroom"],["gunrooms"],["guns"],["gunsel"],["gunsels"],["gunship"],["gunships"],["gunshot"],["gunshots"],["gunsmith"],["gunstock"],["gunwale"],["gunwales"],["guppies"],["guppy"],["gurge"],["gurged"],["gurges"],["gurging"],["gurgle"],["gurgled"],["gurgles"],["gurglet"],["gurglets"],["gurgling"],["gurnard"],["gurnards"],["gurnet"],["gurnets"],["gurney"],["gurneys"],["gurries"],["gurry"],["gursh"],["gurshes"],["guru"],["gurus"],["guruship"],["gush"],["gushed"],["gusher"],["gushers"],["gushes"],["gushier"],["gushiest"],["gushily"],["gushing"],["gushy"],["gusset"],["gusseted"],["gussets"],["gussie"],["gussied"],["gussies"],["gussy"],["gussying"],["gust"],["gustable"],["gusted"],["gustier"],["gustiest"],["gustily"],["gusting"],["gustless"],["gusto"],["gustoes"],["gusts"],["gusty"],["gut"],["gutless"],["gutlike"],["guts"],["gutsier"],["gutsiest"],["gutsily"],["gutsy"],["gutta"],["guttae"],["guttate"],["guttated"],["gutted"],["gutter"],["guttered"],["gutters"],["guttery"],["guttier"],["guttiest"],["gutting"],["guttle"],["guttled"],["guttler"],["guttlers"],["guttles"],["guttling"],["guttural"],["gutty"],["guv"],["guvs"],["guy"],["guyed"],["guying"],["guyot"],["guyots"],["guys"],["guzzle"],["guzzled"],["guzzler"],["guzzlers"],["guzzles"],["guzzling"],["gweduc"],["gweduck"],["gweducks"],["gweducs"],["gybe"],["gybed"],["gybes"],["gybing"],["gym"],["gymkhana"],["gymnasia"],["gymnast"],["gymnasts"],["gyms"],["gynaecea"],["gynaecia"],["gynandry"],["gynarchy"],["gynecia"],["gynecic"],["gynecium"],["gynecoid"],["gyniatry"],["gynoecia"],["gyp"],["gyplure"],["gyplures"],["gypped"],["gypper"],["gyppers"],["gypping"],["gyps"],["gypseian"],["gypseous"],["gypsied"],["gypsies"],["gypster"],["gypsters"],["gypsum"],["gypsums"],["gypsy"],["gypsydom"],["gypsying"],["gypsyish"],["gypsyism"],["gyral"],["gyrally"],["gyrate"],["gyrated"],["gyrates"],["gyrating"],["gyration"],["gyrator"],["gyrators"],["gyratory"],["gyre"],["gyred"],["gyrene"],["gyrenes"],["gyres"],["gyri"],["gyring"],["gyro"],["gyroidal"],["gyron"],["gyrons"],["gyros"],["gyrose"],["gyrostat"],["gyrus"],["gyve"],["gyved"],["gyves"],["gyving"],["ha"],["haaf"],["haafs"],["haar"],["haars"],["habanera"],["habdalah"],["habile"],["habit"],["habitan"],["habitans"],["habitant"],["habitat"],["habitats"],["habited"],["habiting"],["habits"],["habitual"],["habitude"],["habitue"],["habitues"],["habitus"],["haboob"],["haboobs"],["habu"],["habus"],["hacek"],["haceks"],["hachure"],["hachured"],["hachures"],["hacienda"],["hack"],["hackbut"],["hackbuts"],["hacked"],["hackee"],["hackees"],["hacker"],["hackers"],["hackie"],["hackies"],["hacking"],["hackle"],["hackled"],["hackler"],["hacklers"],["hackles"],["hacklier"],["hackling"],["hackly"],["hackman"],["hackmen"],["hackney"],["hackneys"],["hacks"],["hacksaw"],["hacksaws"],["hackwork"],["had"],["hadal"],["hadarim"],["haddest"],["haddock"],["haddocks"],["hade"],["haded"],["hades"],["hading"],["hadj"],["hadjee"],["hadjees"],["hadjes"],["hadji"],["hadjis"],["hadron"],["hadronic"],["hadrons"],["hadst"],["hae"],["haed"],["haeing"],["haem"],["haemal"],["haematal"],["haematic"],["haematin"],["haemic"],["haemin"],["haemins"],["haemoid"],["haems"],["haen"],["haeredes"],["haeres"],["haes"],["haet"],["haets"],["haffet"],["haffets"],["haffit"],["haffits"],["hafis"],["hafiz"],["hafnium"],["hafniums"],["haft"],["haftara"],["haftarah"],["haftaras"],["haftarot"],["hafted"],["hafter"],["hafters"],["hafting"],["haftorah"],["haftorot"],["hafts"],["hag"],["hagadic"],["hagadist"],["hagberry"],["hagborn"],["hagbush"],["hagbut"],["hagbuts"],["hagdon"],["hagdons"],["hagfish"],["haggada"],["haggadah"],["haggadas"],["haggadic"],["haggadot"],["haggard"],["haggards"],["hagged"],["hagging"],["haggis"],["haggises"],["haggish"],["haggle"],["haggled"],["haggler"],["hagglers"],["haggles"],["haggling"],["hagride"],["hagrides"],["hagrode"],["hags"],["hah"],["haha"],["hahas"],["hahnium"],["hahniums"],["hahs"],["haik"],["haika"],["haiks"],["haiku"],["hail"],["hailed"],["hailer"],["hailers"],["hailing"],["hails"],["hair"],["hairball"],["hairband"],["haircap"],["haircaps"],["haircut"],["haircuts"],["hairdo"],["hairdos"],["haired"],["hairier"],["hairiest"],["hairless"],["hairlike"],["hairline"],["hairlock"],["hairnet"],["hairnets"],["hairpin"],["hairpins"],["hairs"],["hairwork"],["hairworm"],["hairy"],["haj"],["hajes"],["haji"],["hajis"],["hajj"],["hajjes"],["hajji"],["hajjis"],["hake"],["hakeem"],["hakeems"],["hakes"],["hakim"],["hakims"],["halacha"],["halachas"],["halachot"],["halakah"],["halakahs"],["halakha"],["halakhas"],["halakhot"],["halakic"],["halakist"],["halakoth"],["halala"],["halalah"],["halalahs"],["halalas"],["halation"],["halavah"],["halavahs"],["halazone"],["halberd"],["halberds"],["halbert"],["halberts"],["halcyon"],["halcyons"],["hale"],["haled"],["haleness"],["haler"],["halers"],["haleru"],["hales"],["halest"],["half"],["halfback"],["halfbeak"],["halflife"],["halfness"],["halftime"],["halftone"],["halfway"],["halibut"],["halibuts"],["halid"],["halide"],["halides"],["halidom"],["halidome"],["halidoms"],["halids"],["haling"],["halite"],["halites"],["halitus"],["hall"],["hallah"],["hallahs"],["hallel"],["hallels"],["halliard"],["hallmark"],["hallo"],["halloa"],["halloaed"],["halloas"],["halloed"],["halloes"],["halloing"],["halloo"],["hallooed"],["halloos"],["hallos"],["hallot"],["halloth"],["hallow"],["hallowed"],["hallower"],["hallows"],["halls"],["halluces"],["hallux"],["hallway"],["hallways"],["halm"],["halms"],["halo"],["haloed"],["haloes"],["halogen"],["halogens"],["haloid"],["haloids"],["haloing"],["halolike"],["halos"],["halt"],["halted"],["halter"],["haltere"],["haltered"],["halteres"],["halters"],["halting"],["haltless"],["halts"],["halutz"],["halutzim"],["halva"],["halvah"],["halvahs"],["halvas"],["halve"],["halved"],["halvers"],["halves"],["halving"],["halyard"],["halyards"],["ham"],["hamada"],["hamadas"],["hamal"],["hamals"],["hamartia"],["hamate"],["hamates"],["hamaul"],["hamauls"],["hambone"],["hamboned"],["hambones"],["hamburg"],["hamburgs"],["hame"],["hames"],["hamlet"],["hamlets"],["hammada"],["hammadas"],["hammal"],["hammals"],["hammed"],["hammer"],["hammered"],["hammerer"],["hammers"],["hammier"],["hammiest"],["hammily"],["hamming"],["hammock"],["hammocks"],["hammy"],["hamper"],["hampered"],["hamperer"],["hampers"],["hams"],["hamster"],["hamsters"],["hamular"],["hamulate"],["hamuli"],["hamulose"],["hamulous"],["hamulus"],["hamza"],["hamzah"],["hamzahs"],["hamzas"],["hanaper"],["hanapers"],["hance"],["hances"],["hand"],["handbag"],["handbags"],["handball"],["handbill"],["handbook"],["handcar"],["handcars"],["handcart"],["handcuff"],["handed"],["handfast"],["handful"],["handfuls"],["handgrip"],["handgun"],["handguns"],["handhold"],["handicap"],["handier"],["handiest"],["handily"],["handing"],["handle"],["handled"],["handler"],["handlers"],["handles"],["handless"],["handlike"],["handling"],["handlist"],["handloom"],["handmade"],["handmaid"],["handoff"],["handoffs"],["handout"],["handouts"],["handpick"],["handrail"],["hands"],["handsaw"],["handsaws"],["handsel"],["handsels"],["handset"],["handsets"],["handsewn"],["handsful"],["handsome"],["handwork"],["handwrit"],["handy"],["handyman"],["handymen"],["hang"],["hangable"],["hangar"],["hangared"],["hangars"],["hangbird"],["hangdog"],["hangdogs"],["hanged"],["hanger"],["hangers"],["hangfire"],["hanging"],["hangings"],["hangman"],["hangmen"],["hangnail"],["hangnest"],["hangout"],["hangouts"],["hangover"],["hangs"],["hangtag"],["hangtags"],["hangup"],["hangups"],["hank"],["hanked"],["hanker"],["hankered"],["hankerer"],["hankers"],["hankie"],["hankies"],["hanking"],["hanks"],["hanky"],["hansa"],["hansas"],["hanse"],["hansel"],["hanseled"],["hansels"],["hanses"],["hansom"],["hansoms"],["hant"],["hanted"],["hanting"],["hantle"],["hantles"],["hants"],["hanuman"],["hanumans"],["hao"],["haole"],["haoles"],["hap"],["hapax"],["hapaxes"],["haphtara"],["hapless"],["haplite"],["haplites"],["haploid"],["haploids"],["haploidy"],["haplont"],["haplonts"],["haplopia"],["haploses"],["haplosis"],["haply"],["happed"],["happen"],["happened"],["happens"],["happier"],["happiest"],["happily"],["happing"],["happy"],["haps"],["hapten"],["haptene"],["haptenes"],["haptenic"],["haptens"],["haptic"],["haptical"],["harangue"],["harass"],["harassed"],["harasser"],["harasses"],["harbor"],["harbored"],["harborer"],["harbors"],["harbour"],["harbours"],["hard"],["hardback"],["hardball"],["hardboot"],["hardcase"],["hardcore"],["hardedge"],["harden"],["hardened"],["hardener"],["hardens"],["harder"],["hardest"],["hardhack"],["hardhat"],["hardhats"],["hardhead"],["hardier"],["hardies"],["hardiest"],["hardily"],["hardline"],["hardly"],["hardness"],["hardnose"],["hardpan"],["hardpans"],["hards"],["hardset"],["hardship"],["hardtack"],["hardtop"],["hardtops"],["hardware"],["hardwire"],["hardwood"],["hardy"],["hare"],["harebell"],["hared"],["hareem"],["hareems"],["harelike"],["harelip"],["harelips"],["harem"],["harems"],["hares"],["hariana"],["harianas"],["haricot"],["haricots"],["harijan"],["harijans"],["haring"],["hark"],["harked"],["harken"],["harkened"],["harkener"],["harkens"],["harking"],["harks"],["harl"],["harlot"],["harlotry"],["harlots"],["harls"],["harm"],["harmed"],["harmer"],["harmers"],["harmful"],["harmin"],["harmine"],["harmines"],["harming"],["harmins"],["harmless"],["harmonic"],["harmony"],["harms"],["harness"],["harp"],["harped"],["harper"],["harpers"],["harpies"],["harpin"],["harping"],["harpings"],["harpins"],["harpist"],["harpists"],["harpoon"],["harpoons"],["harps"],["harpy"],["harridan"],["harried"],["harrier"],["harriers"],["harries"],["harrow"],["harrowed"],["harrower"],["harrows"],["harrumph"],["harry"],["harrying"],["harsh"],["harshen"],["harshens"],["harsher"],["harshest"],["harshly"],["harslet"],["harslets"],["hart"],["hartal"],["hartals"],["harts"],["harumph"],["harumphs"],["haruspex"],["harvest"],["harvests"],["has"],["hash"],["hashed"],["hasheesh"],["hashes"],["hashhead"],["hashing"],["hashish"],["haslet"],["haslets"],["hasp"],["hasped"],["hasping"],["hasps"],["hassel"],["hassels"],["hassle"],["hassled"],["hassles"],["hassling"],["hassock"],["hassocks"],["hast"],["hastate"],["haste"],["hasted"],["hasteful"],["hasten"],["hastened"],["hastener"],["hastens"],["hastes"],["hastier"],["hastiest"],["hastily"],["hasting"],["hasty"],["hat"],["hatable"],["hatband"],["hatbands"],["hatbox"],["hatboxes"],["hatch"],["hatcheck"],["hatched"],["hatchel"],["hatchels"],["hatcher"],["hatchers"],["hatchery"],["hatches"],["hatchet"],["hatchets"],["hatching"],["hatchway"],["hate"],["hateable"],["hated"],["hateful"],["hater"],["haters"],["hates"],["hatful"],["hatfuls"],["hath"],["hating"],["hatless"],["hatlike"],["hatmaker"],["hatpin"],["hatpins"],["hatrack"],["hatracks"],["hatred"],["hatreds"],["hats"],["hatsful"],["hatted"],["hatter"],["hatteria"],["hatters"],["hatting"],["hauberk"],["hauberks"],["haugh"],["haughs"],["haughty"],["haul"],["haulage"],["haulages"],["hauled"],["hauler"],["haulers"],["haulier"],["hauliers"],["hauling"],["haulm"],["haulmier"],["haulms"],["haulmy"],["hauls"],["haulyard"],["haunch"],["haunched"],["haunches"],["haunt"],["haunted"],["haunter"],["haunters"],["haunting"],["haunts"],["hausen"],["hausens"],["hausfrau"],["haut"],["hautbois"],["hautboy"],["hautboys"],["haute"],["hauteur"],["hauteurs"],["havarti"],["havartis"],["havdalah"],["have"],["havelock"],["haven"],["havened"],["havening"],["havens"],["haver"],["havered"],["haverel"],["haverels"],["havering"],["havers"],["haves"],["having"],["havior"],["haviors"],["haviour"],["haviours"],["havoc"],["havocked"],["havocker"],["havocs"],["haw"],["hawed"],["hawfinch"],["hawing"],["hawk"],["hawkbill"],["hawked"],["hawker"],["hawkers"],["hawkey"],["hawkeys"],["hawkie"],["hawkies"],["hawking"],["hawkings"],["hawkish"],["hawklike"],["hawkmoth"],["hawknose"],["hawks"],["hawkshaw"],["hawkweed"],["haws"],["hawse"],["hawser"],["hawsers"],["hawses"],["hawthorn"],["hay"],["haycock"],["haycocks"],["hayed"],["hayer"],["hayers"],["hayfield"],["hayfork"],["hayforks"],["haying"],["hayings"],["haylage"],["haylages"],["hayloft"],["haylofts"],["haymaker"],["haymow"],["haymows"],["hayrack"],["hayracks"],["hayrick"],["hayricks"],["hayride"],["hayrides"],["hays"],["hayseed"],["hayseeds"],["haystack"],["hayward"],["haywards"],["haywire"],["haywires"],["hazan"],["hazanim"],["hazans"],["hazard"],["hazarded"],["hazards"],["haze"],["hazed"],["hazel"],["hazelhen"],["hazelly"],["hazelnut"],["hazels"],["hazer"],["hazers"],["hazes"],["hazier"],["haziest"],["hazily"],["haziness"],["hazing"],["hazings"],["hazy"],["hazzan"],["hazzanim"],["hazzans"],["he"],["head"],["headache"],["headachy"],["headband"],["headed"],["header"],["headers"],["headfish"],["headgate"],["headgear"],["headhunt"],["headier"],["headiest"],["headily"],["heading"],["headings"],["headlamp"],["headland"],["headless"],["headline"],["headlock"],["headlong"],["headman"],["headmen"],["headmost"],["headnote"],["headpin"],["headpins"],["headrace"],["headrest"],["headroom"],["heads"],["headsail"],["headset"],["headsets"],["headship"],["headsman"],["headsmen"],["headstay"],["headway"],["headways"],["headwind"],["headword"],["headwork"],["heady"],["heal"],["healable"],["healed"],["healer"],["healers"],["healing"],["heals"],["health"],["healths"],["healthy"],["heap"],["heaped"],["heaping"],["heaps"],["hear"],["hearable"],["heard"],["hearer"],["hearers"],["hearing"],["hearings"],["hearken"],["hearkens"],["hears"],["hearsay"],["hearsays"],["hearse"],["hearsed"],["hearses"],["hearsing"],["heart"],["hearted"],["hearten"],["heartens"],["hearth"],["hearths"],["heartier"],["hearties"],["heartily"],["hearting"],["hearts"],["hearty"],["heat"],["heatable"],["heated"],["heatedly"],["heater"],["heaters"],["heath"],["heathen"],["heathens"],["heather"],["heathers"],["heathery"],["heathier"],["heaths"],["heathy"],["heating"],["heatless"],["heats"],["heaume"],["heaumes"],["heave"],["heaved"],["heaven"],["heavenly"],["heavens"],["heaver"],["heavers"],["heaves"],["heavier"],["heavies"],["heaviest"],["heavily"],["heaving"],["heavy"],["heavyset"],["hebdomad"],["hebe"],["hebes"],["hebetate"],["hebetic"],["hebetude"],["hebraize"],["hecatomb"],["heck"],["heckle"],["heckled"],["heckler"],["hecklers"],["heckles"],["heckling"],["hecks"],["hectare"],["hectares"],["hectic"],["hectical"],["hecticly"],["hector"],["hectored"],["hectors"],["heddle"],["heddles"],["heder"],["heders"],["hedge"],["hedged"],["hedgehog"],["hedgehop"],["hedgepig"],["hedger"],["hedgerow"],["hedgers"],["hedges"],["hedgier"],["hedgiest"],["hedging"],["hedgy"],["hedonic"],["hedonics"],["hedonism"],["hedonist"],["heed"],["heeded"],["heeder"],["heeders"],["heedful"],["heeding"],["heedless"],["heeds"],["heehaw"],["heehawed"],["heehaws"],["heel"],["heelball"],["heeled"],["heeler"],["heelers"],["heeling"],["heelings"],["heelless"],["heelpost"],["heels"],["heeltap"],["heeltaps"],["heeze"],["heezed"],["heezes"],["heezing"],["heft"],["hefted"],["hefter"],["hefters"],["heftier"],["heftiest"],["heftily"],["hefting"],["hefts"],["hefty"],["hegari"],["hegaris"],["hegemony"],["hegira"],["hegiras"],["hegumen"],["hegumene"],["hegumens"],["hegumeny"],["heh"],["hehs"],["heifer"],["heifers"],["heigh"],["height"],["heighten"],["heighth"],["heighths"],["heights"],["heil"],["heiled"],["heiling"],["heils"],["heimish"],["heinie"],["heinies"],["heinous"],["heir"],["heirdom"],["heirdoms"],["heired"],["heiress"],["heiring"],["heirless"],["heirloom"],["heirs"],["heirship"],["heishi"],["heist"],["heisted"],["heister"],["heisters"],["heisting"],["heists"],["hejira"],["hejiras"],["hektare"],["hektares"],["held"],["heliac"],["heliacal"],["heliast"],["heliasts"],["helical"],["helices"],["helicity"],["helicoid"],["helicon"],["helicons"],["helicopt"],["helilift"],["helio"],["helios"],["helipad"],["helipads"],["heliport"],["helistop"],["helium"],["heliums"],["helix"],["helixes"],["hell"],["hellbent"],["hellbox"],["hellcat"],["hellcats"],["helled"],["heller"],["helleri"],["hellers"],["hellery"],["hellfire"],["hellhole"],["helling"],["hellion"],["hellions"],["hellish"],["hellkite"],["hello"],["helloed"],["helloes"],["helloing"],["hellos"],["hells"],["helluva"],["helm"],["helmed"],["helmet"],["helmeted"],["helmets"],["helming"],["helminth"],["helmless"],["helms"],["helmsman"],["helmsmen"],["helot"],["helotage"],["helotism"],["helotry"],["helots"],["help"],["helpable"],["helped"],["helper"],["helpers"],["helpful"],["helping"],["helpings"],["helpless"],["helpmate"],["helpmeet"],["helps"],["helve"],["helved"],["helves"],["helving"],["hem"],["hemagog"],["hemagogs"],["hemal"],["hematal"],["hematein"],["hematic"],["hematics"],["hematin"],["hematine"],["hematins"],["hematite"],["hematoid"],["hematoma"],["heme"],["hemes"],["hemic"],["hemin"],["hemins"],["hemiola"],["hemiolas"],["hemiolia"],["hemipter"],["hemline"],["hemlines"],["hemlock"],["hemlocks"],["hemmed"],["hemmer"],["hemmers"],["hemming"],["hemocoel"],["hemocyte"],["hemoid"],["hemolyze"],["hemostat"],["hemp"],["hempen"],["hempie"],["hempier"],["hempiest"],["hemplike"],["hemps"],["hempseed"],["hempweed"],["hempy"],["hems"],["hen"],["henbane"],["henbanes"],["henbit"],["henbits"],["hence"],["henchman"],["henchmen"],["hencoop"],["hencoops"],["henequen"],["henequin"],["henhouse"],["heniquen"],["henlike"],["henna"],["hennaed"],["hennaing"],["hennas"],["hennery"],["henpeck"],["henpecks"],["henries"],["henry"],["henrys"],["hens"],["hent"],["hented"],["henting"],["hents"],["hep"],["heparin"],["heparins"],["hepatic"],["hepatica"],["hepatics"],["hepatize"],["hepatoma"],["hepcat"],["hepcats"],["heptad"],["heptads"],["heptagon"],["heptane"],["heptanes"],["heptarch"],["heptose"],["heptoses"],["her"],["herald"],["heralded"],["heraldic"],["heraldry"],["heralds"],["herb"],["herbage"],["herbages"],["herbal"],["herbals"],["herbaria"],["herbed"],["herbier"],["herbiest"],["herbless"],["herblike"],["herbs"],["herby"],["hercules"],["herd"],["herded"],["herder"],["herders"],["herdic"],["herdics"],["herding"],["herdlike"],["herdman"],["herdmen"],["herds"],["herdsman"],["herdsmen"],["here"],["hereat"],["hereaway"],["hereby"],["heredes"],["heredity"],["herein"],["hereinto"],["hereof"],["hereon"],["heres"],["heresies"],["heresy"],["heretic"],["heretics"],["hereto"],["heretrix"],["hereunto"],["hereupon"],["herewith"],["heriot"],["heriots"],["heritage"],["heritor"],["heritors"],["heritrix"],["herl"],["herls"],["herm"],["herma"],["hermae"],["hermaean"],["hermai"],["hermetic"],["hermit"],["hermitic"],["hermitry"],["hermits"],["herms"],["hern"],["hernia"],["herniae"],["hernial"],["hernias"],["herniate"],["herns"],["hero"],["heroes"],["heroic"],["heroical"],["heroics"],["heroin"],["heroine"],["heroines"],["heroins"],["heroism"],["heroisms"],["heroize"],["heroized"],["heroizes"],["heron"],["heronry"],["herons"],["heros"],["herpes"],["herpeses"],["herpetic"],["herried"],["herries"],["herring"],["herrings"],["herry"],["herrying"],["hers"],["herself"],["hertz"],["hertzes"],["hes"],["hesitant"],["hesitate"],["hessian"],["hessians"],["hessite"],["hessites"],["hest"],["hests"],["het"],["hetaera"],["hetaerae"],["hetaeras"],["hetaeric"],["hetaira"],["hetairai"],["hetairas"],["hetero"],["heteros"],["heth"],["heths"],["hetman"],["hetmans"],["hets"],["heuch"],["heuchs"],["heugh"],["heughs"],["hew"],["hewable"],["hewed"],["hewer"],["hewers"],["hewing"],["hewn"],["hews"],["hex"],["hexad"],["hexade"],["hexades"],["hexadic"],["hexads"],["hexagon"],["hexagons"],["hexagram"],["hexamine"],["hexane"],["hexanes"],["hexapla"],["hexaplar"],["hexaplas"],["hexapod"],["hexapods"],["hexapody"],["hexarchy"],["hexed"],["hexer"],["hexerei"],["hexereis"],["hexers"],["hexes"],["hexing"],["hexone"],["hexones"],["hexosan"],["hexosans"],["hexose"],["hexoses"],["hexyl"],["hexyls"],["hey"],["heyday"],["heydays"],["heydey"],["heydeys"],["hi"],["hiatal"],["hiatus"],["hiatuses"],["hibachi"],["hibachis"],["hibernal"],["hibiscus"],["hic"],["hiccough"],["hiccup"],["hiccuped"],["hiccups"],["hick"],["hickey"],["hickeys"],["hickies"],["hickish"],["hickory"],["hicks"],["hid"],["hidable"],["hidalgo"],["hidalgos"],["hidden"],["hiddenly"],["hide"],["hideaway"],["hided"],["hideless"],["hideous"],["hideout"],["hideouts"],["hider"],["hiders"],["hides"],["hiding"],["hidings"],["hidroses"],["hidrosis"],["hidrotic"],["hie"],["hied"],["hieing"],["hiemal"],["hierarch"],["hieratic"],["hies"],["higgle"],["higgled"],["higgler"],["higglers"],["higgles"],["higgling"],["high"],["highball"],["highborn"],["highboy"],["highboys"],["highbred"],["highbrow"],["highbush"],["higher"],["highest"],["highjack"],["highland"],["highlife"],["highly"],["highness"],["highroad"],["highs"],["hight"],["hightail"],["highted"],["highth"],["highths"],["highting"],["hights"],["highway"],["highways"],["hijack"],["hijacked"],["hijacker"],["hijacks"],["hijinks"],["hike"],["hiked"],["hiker"],["hikers"],["hikes"],["hiking"],["hila"],["hilar"],["hilarity"],["hilding"],["hildings"],["hili"],["hill"],["hilled"],["hiller"],["hillers"],["hillier"],["hilliest"],["hilling"],["hillo"],["hilloa"],["hilloaed"],["hilloas"],["hillock"],["hillocks"],["hillocky"],["hilloed"],["hilloes"],["hilloing"],["hillos"],["hills"],["hillside"],["hilltop"],["hilltops"],["hilly"],["hilt"],["hilted"],["hilting"],["hiltless"],["hilts"],["hilum"],["hilus"],["him"],["himatia"],["himation"],["himself"],["hin"],["hind"],["hinder"],["hindered"],["hinderer"],["hinders"],["hindgut"],["hindguts"],["hindmost"],["hinds"],["hinge"],["hinged"],["hinger"],["hingers"],["hinges"],["hinging"],["hinnied"],["hinnies"],["hinny"],["hinnying"],["hins"],["hint"],["hinted"],["hinter"],["hinters"],["hinting"],["hints"],["hip"],["hipbone"],["hipbones"],["hipless"],["hiplike"],["hipline"],["hiplines"],["hipness"],["hipparch"],["hipped"],["hipper"],["hippest"],["hippie"],["hippier"],["hippies"],["hippiest"],["hipping"],["hippish"],["hippo"],["hippos"],["hippy"],["hips"],["hipshot"],["hipster"],["hipsters"],["hirable"],["hiragana"],["hircine"],["hire"],["hireable"],["hired"],["hireling"],["hirer"],["hirers"],["hires"],["hiring"],["hirple"],["hirpled"],["hirples"],["hirpling"],["hirsel"],["hirseled"],["hirsels"],["hirsle"],["hirsled"],["hirsles"],["hirsling"],["hirsute"],["hirudin"],["hirudins"],["his"],["hisn"],["hispid"],["hiss"],["hissed"],["hisself"],["hisser"],["hissers"],["hisses"],["hissing"],["hissings"],["hist"],["histamin"],["histed"],["histidin"],["histing"],["histogen"],["histoid"],["histone"],["histones"],["historic"],["history"],["hists"],["hit"],["hitch"],["hitched"],["hitcher"],["hitchers"],["hitches"],["hitching"],["hither"],["hitherto"],["hitless"],["hits"],["hitter"],["hitters"],["hitting"],["hive"],["hived"],["hiveless"],["hives"],["hiving"],["hizzoner"],["hm"],["hmm"],["ho"],["hoactzin"],["hoagie"],["hoagies"],["hoagy"],["hoar"],["hoard"],["hoarded"],["hoarder"],["hoarders"],["hoarding"],["hoards"],["hoarier"],["hoariest"],["hoarily"],["hoars"],["hoarse"],["hoarsely"],["hoarsen"],["hoarsens"],["hoarser"],["hoarsest"],["hoary"],["hoatzin"],["hoatzins"],["hoax"],["hoaxed"],["hoaxer"],["hoaxers"],["hoaxes"],["hoaxing"],["hob"],["hobbed"],["hobbies"],["hobbing"],["hobble"],["hobbled"],["hobbler"],["hobblers"],["hobbles"],["hobbling"],["hobby"],["hobbyist"],["hoblike"],["hobnail"],["hobnails"],["hobnob"],["hobnobs"],["hobo"],["hoboed"],["hoboes"],["hoboing"],["hoboism"],["hoboisms"],["hobos"],["hobs"],["hock"],["hocked"],["hocker"],["hockers"],["hockey"],["hockeys"],["hocking"],["hocks"],["hockshop"],["hocus"],["hocused"],["hocuses"],["hocusing"],["hocussed"],["hocusses"],["hod"],["hodad"],["hodaddy"],["hodads"],["hodden"],["hoddens"],["hoddin"],["hoddins"],["hods"],["hoe"],["hoecake"],["hoecakes"],["hoed"],["hoedown"],["hoedowns"],["hoeing"],["hoelike"],["hoer"],["hoers"],["hoes"],["hog"],["hogan"],["hogans"],["hogback"],["hogbacks"],["hogfish"],["hogg"],["hogged"],["hogger"],["hoggers"],["hogget"],["hoggets"],["hogging"],["hoggish"],["hoggs"],["hoglike"],["hogmanay"],["hogmane"],["hogmanes"],["hogmenay"],["hognose"],["hognoses"],["hognut"],["hognuts"],["hogs"],["hogshead"],["hogtie"],["hogtied"],["hogties"],["hogtying"],["hogwash"],["hogweed"],["hogweeds"],["hoick"],["hoicked"],["hoicking"],["hoicks"],["hoiden"],["hoidened"],["hoidens"],["hoise"],["hoised"],["hoises"],["hoising"],["hoist"],["hoisted"],["hoister"],["hoisters"],["hoisting"],["hoists"],["hoke"],["hoked"],["hokes"],["hokey"],["hokier"],["hokiest"],["hokily"],["hokiness"],["hoking"],["hokku"],["hokum"],["hokums"],["hokypoky"],["holard"],["holards"],["hold"],["holdable"],["holdall"],["holdalls"],["holdback"],["holden"],["holder"],["holders"],["holdfast"],["holding"],["holdings"],["holdout"],["holdouts"],["holdover"],["holds"],["holdup"],["holdups"],["hole"],["holed"],["holeless"],["holes"],["holey"],["holibut"],["holibuts"],["holiday"],["holidays"],["holier"],["holies"],["holiest"],["holily"],["holiness"],["holing"],["holism"],["holisms"],["holist"],["holistic"],["holists"],["holk"],["holked"],["holking"],["holks"],["holla"],["hollaed"],["hollaing"],["holland"],["hollands"],["hollas"],["holler"],["hollered"],["hollers"],["hollies"],["hollo"],["holloa"],["holloaed"],["holloas"],["holloed"],["holloes"],["holloing"],["holloo"],["hollooed"],["holloos"],["hollos"],["hollow"],["hollowed"],["hollower"],["hollowly"],["hollows"],["holly"],["holm"],["holmic"],["holmium"],["holmiums"],["holms"],["hologamy"],["hologram"],["hologyny"],["holotype"],["holozoic"],["holp"],["holpen"],["hols"],["holstein"],["holster"],["holsters"],["holt"],["holts"],["holy"],["holyday"],["holydays"],["holytide"],["homage"],["homaged"],["homager"],["homagers"],["homages"],["homaging"],["hombre"],["hombres"],["homburg"],["homburgs"],["home"],["homebody"],["homebred"],["homed"],["homeland"],["homeless"],["homelier"],["homelike"],["homely"],["homemade"],["homer"],["homered"],["homering"],["homeroom"],["homers"],["homes"],["homesick"],["homesite"],["homespun"],["homestay"],["hometown"],["homeward"],["homework"],["homey"],["homicide"],["homier"],["homiest"],["homilies"],["homilist"],["homily"],["homines"],["hominess"],["homing"],["hominian"],["hominid"],["hominids"],["hominies"],["hominine"],["hominize"],["hominoid"],["hominy"],["hommock"],["hommocks"],["hommos"],["hommoses"],["homo"],["homogamy"],["homogeny"],["homogony"],["homolog"],["homologs"],["homology"],["homonym"],["homonyms"],["homonymy"],["homos"],["homosex"],["homy"],["hon"],["honan"],["honans"],["honcho"],["honchoed"],["honchos"],["honda"],["hondas"],["hondle"],["hondled"],["hondles"],["hondling"],["hone"],["honed"],["honer"],["honers"],["hones"],["honest"],["honester"],["honestly"],["honesty"],["honewort"],["honey"],["honeybee"],["honeybun"],["honeydew"],["honeyed"],["honeyful"],["honeying"],["honeys"],["hong"],["hongs"],["honied"],["honing"],["honk"],["honked"],["honker"],["honkers"],["honkey"],["honkeys"],["honkie"],["honkies"],["honking"],["honks"],["honky"],["honor"],["honorand"],["honorary"],["honored"],["honoree"],["honorees"],["honorer"],["honorers"],["honoring"],["honors"],["honour"],["honoured"],["honourer"],["honours"],["hons"],["hooch"],["hooches"],["hood"],["hooded"],["hoodie"],["hoodies"],["hooding"],["hoodless"],["hoodlike"],["hoodlum"],["hoodlums"],["hoodoo"],["hoodooed"],["hoodoos"],["hoods"],["hoodwink"],["hooey"],["hooeys"],["hoof"],["hoofbeat"],["hoofed"],["hoofer"],["hoofers"],["hoofing"],["hoofless"],["hooflike"],["hoofs"],["hook"],["hooka"],["hookah"],["hookahs"],["hookas"],["hooked"],["hooker"],["hookers"],["hookey"],["hookeys"],["hookier"],["hookies"],["hookiest"],["hooking"],["hookless"],["hooklet"],["hooklets"],["hooklike"],["hooknose"],["hooks"],["hookup"],["hookups"],["hookworm"],["hooky"],["hoolie"],["hooligan"],["hooly"],["hoop"],["hooped"],["hooper"],["hoopers"],["hooping"],["hoopla"],["hooplas"],["hoopless"],["hooplike"],["hoopoe"],["hoopoes"],["hoopoo"],["hoopoos"],["hoops"],["hoopster"],["hoorah"],["hoorahed"],["hoorahs"],["hooray"],["hoorayed"],["hoorays"],["hoosegow"],["hoosgow"],["hoosgows"],["hoot"],["hootch"],["hootches"],["hooted"],["hooter"],["hooters"],["hootier"],["hootiest"],["hooting"],["hoots"],["hooty"],["hooves"],["hop"],["hope"],["hoped"],["hopeful"],["hopefuls"],["hopeless"],["hoper"],["hopers"],["hopes"],["hophead"],["hopheads"],["hoping"],["hoplite"],["hoplites"],["hoplitic"],["hopped"],["hopper"],["hoppers"],["hopping"],["hopple"],["hoppled"],["hopples"],["hoppling"],["hops"],["hopsack"],["hopsacks"],["hoptoad"],["hoptoads"],["hora"],["horah"],["horahs"],["horal"],["horary"],["horas"],["horde"],["horded"],["hordein"],["hordeins"],["hordes"],["hording"],["horizon"],["horizons"],["hormonal"],["hormone"],["hormones"],["hormonic"],["horn"],["hornbeam"],["hornbill"],["hornbook"],["horned"],["hornet"],["hornets"],["hornfels"],["hornier"],["horniest"],["hornily"],["horning"],["hornist"],["hornists"],["hornito"],["hornitos"],["hornless"],["hornlike"],["hornpipe"],["hornpout"],["horns"],["horntail"],["hornworm"],["hornwort"],["horny"],["horologe"],["horology"],["horrent"],["horrible"],["horribly"],["horrid"],["horridly"],["horrific"],["horrify"],["horror"],["horrors"],["horse"],["horsecar"],["horsed"],["horsefly"],["horseman"],["horsemen"],["horsepox"],["horses"],["horsey"],["horsier"],["horsiest"],["horsily"],["horsing"],["horst"],["horste"],["horstes"],["horsts"],["horsy"],["hosanna"],["hosannah"],["hosannas"],["hose"],["hosed"],["hosel"],["hosels"],["hosen"],["hoses"],["hosier"],["hosiers"],["hosiery"],["hosing"],["hospice"],["hospices"],["hospital"],["hospitia"],["hospodar"],["host"],["hosta"],["hostage"],["hostages"],["hostas"],["hosted"],["hostel"],["hosteled"],["hosteler"],["hostelry"],["hostels"],["hostess"],["hostile"],["hostiles"],["hosting"],["hostler"],["hostlers"],["hostly"],["hosts"],["hot"],["hotbed"],["hotbeds"],["hotblood"],["hotbox"],["hotboxes"],["hotcake"],["hotcakes"],["hotch"],["hotched"],["hotches"],["hotching"],["hotchpot"],["hotdog"],["hotdogs"],["hotel"],["hoteldom"],["hotelier"],["hotelman"],["hotelmen"],["hotels"],["hotfoot"],["hotfoots"],["hothead"],["hotheads"],["hothouse"],["hotline"],["hotlines"],["hotly"],["hotness"],["hotpress"],["hotrod"],["hotrods"],["hots"],["hotshot"],["hotshots"],["hotspur"],["hotspurs"],["hotted"],["hotter"],["hottest"],["hotting"],["hottish"],["houdah"],["houdahs"],["hound"],["hounded"],["hounder"],["hounders"],["hounding"],["hounds"],["hour"],["houri"],["houris"],["hourly"],["hours"],["house"],["houseboy"],["housed"],["housefly"],["houseful"],["housel"],["houseled"],["housels"],["houseman"],["housemen"],["houser"],["housers"],["houses"],["housesat"],["housesit"],["housetop"],["housing"],["housings"],["hove"],["hovel"],["hoveled"],["hoveling"],["hovelled"],["hovels"],["hover"],["hovered"],["hoverer"],["hoverers"],["hovering"],["hovers"],["how"],["howbeit"],["howdah"],["howdahs"],["howdie"],["howdied"],["howdies"],["howdy"],["howdying"],["howe"],["howes"],["however"],["howf"],["howff"],["howffs"],["howfs"],["howitzer"],["howk"],["howked"],["howking"],["howks"],["howl"],["howled"],["howler"],["howlers"],["howlet"],["howlets"],["howling"],["howls"],["hows"],["hoy"],["hoya"],["hoyas"],["hoyden"],["hoydened"],["hoydens"],["hoyle"],["hoyles"],["hoys"],["huarache"],["huaracho"],["hub"],["hubbies"],["hubbly"],["hubbub"],["hubbubs"],["hubby"],["hubcap"],["hubcaps"],["hubris"],["hubrises"],["hubs"],["huck"],["huckle"],["huckles"],["hucks"],["huckster"],["huddle"],["huddled"],["huddler"],["huddlers"],["huddles"],["huddling"],["hue"],["hued"],["hueless"],["hues"],["huff"],["huffed"],["huffier"],["huffiest"],["huffily"],["huffing"],["huffish"],["huffs"],["huffy"],["hug"],["huge"],["hugely"],["hugeness"],["hugeous"],["huger"],["hugest"],["huggable"],["hugged"],["hugger"],["huggers"],["hugging"],["hugs"],["huh"],["huic"],["huipil"],["huipiles"],["huipils"],["huisache"],["hula"],["hulas"],["hulk"],["hulked"],["hulkier"],["hulkiest"],["hulking"],["hulks"],["hulky"],["hull"],["hulled"],["huller"],["hullers"],["hulling"],["hullo"],["hulloa"],["hulloaed"],["hulloas"],["hulloed"],["hulloes"],["hulloing"],["hullos"],["hulls"],["hum"],["human"],["humane"],["humanely"],["humaner"],["humanest"],["humanise"],["humanism"],["humanist"],["humanity"],["humanize"],["humanly"],["humanoid"],["humans"],["humate"],["humates"],["humble"],["humbled"],["humbler"],["humblers"],["humbles"],["humblest"],["humbling"],["humbly"],["humbug"],["humbugs"],["humdrum"],["humdrums"],["humeral"],["humerals"],["humeri"],["humerus"],["humic"],["humid"],["humidify"],["humidity"],["humidly"],["humidor"],["humidors"],["humified"],["humility"],["hummable"],["hummed"],["hummer"],["hummers"],["humming"],["hummock"],["hummocks"],["hummocky"],["hummus"],["hummuses"],["humor"],["humoral"],["humored"],["humorful"],["humoring"],["humorist"],["humorous"],["humors"],["humour"],["humoured"],["humours"],["hump"],["humpback"],["humped"],["humph"],["humphed"],["humphing"],["humphs"],["humpier"],["humpiest"],["humping"],["humpless"],["humps"],["humpy"],["hums"],["humus"],["humuses"],["hun"],["hunch"],["hunched"],["hunches"],["hunching"],["hundred"],["hundreds"],["hung"],["hunger"],["hungered"],["hungers"],["hungrier"],["hungrily"],["hungry"],["hunh"],["hunk"],["hunker"],["hunkered"],["hunkers"],["hunkies"],["hunks"],["hunky"],["hunnish"],["huns"],["hunt"],["huntable"],["hunted"],["huntedly"],["hunter"],["hunters"],["hunting"],["huntings"],["huntress"],["hunts"],["huntsman"],["huntsmen"],["hup"],["hurdies"],["hurdle"],["hurdled"],["hurdler"],["hurdlers"],["hurdles"],["hurdling"],["hurds"],["hurl"],["hurled"],["hurler"],["hurlers"],["hurley"],["hurleys"],["hurlies"],["hurling"],["hurlings"],["hurls"],["hurly"],["hurrah"],["hurrahed"],["hurrahs"],["hurray"],["hurrayed"],["hurrays"],["hurried"],["hurrier"],["hurriers"],["hurries"],["hurry"],["hurrying"],["hurst"],["hursts"],["hurt"],["hurter"],["hurters"],["hurtful"],["hurting"],["hurtle"],["hurtled"],["hurtles"],["hurtless"],["hurtling"],["hurts"],["husband"],["husbands"],["hush"],["hushaby"],["hushed"],["hushedly"],["hushes"],["hushful"],["hushing"],["husk"],["husked"],["husker"],["huskers"],["huskier"],["huskies"],["huskiest"],["huskily"],["husking"],["huskings"],["husklike"],["husks"],["husky"],["hussar"],["hussars"],["hussies"],["hussy"],["hustings"],["hustle"],["hustled"],["hustler"],["hustlers"],["hustles"],["hustling"],["huswife"],["huswifes"],["huswives"],["hut"],["hutch"],["hutched"],["hutches"],["hutching"],["hutlike"],["hutment"],["hutments"],["huts"],["hutted"],["hutting"],["hutzpa"],["hutzpah"],["hutzpahs"],["hutzpas"],["huzza"],["huzzaed"],["huzzah"],["huzzahed"],["huzzahs"],["huzzaing"],["huzzas"],["hwan"],["hyacinth"],["hyaena"],["hyaenas"],["hyaenic"],["hyalin"],["hyaline"],["hyalines"],["hyalins"],["hyalite"],["hyalites"],["hyalogen"],["hyaloid"],["hyaloids"],["hybrid"],["hybrids"],["hybris"],["hybrises"],["hydatid"],["hydatids"],["hydra"],["hydracid"],["hydrae"],["hydragog"],["hydrant"],["hydranth"],["hydrants"],["hydras"],["hydrase"],["hydrases"],["hydrate"],["hydrated"],["hydrates"],["hydrator"],["hydria"],["hydriae"],["hydric"],["hydrid"],["hydride"],["hydrides"],["hydrids"],["hydro"],["hydrogel"],["hydrogen"],["hydroid"],["hydroids"],["hydromel"],["hydronic"],["hydropic"],["hydrops"],["hydropsy"],["hydros"],["hydroski"],["hydrosol"],["hydrous"],["hydroxy"],["hydroxyl"],["hyena"],["hyenas"],["hyenic"],["hyenine"],["hyenoid"],["hyetal"],["hygeist"],["hygeists"],["hygieist"],["hygiene"],["hygienes"],["hygienic"],["hying"],["hyla"],["hylas"],["hylozoic"],["hymen"],["hymenal"],["hymeneal"],["hymenia"],["hymenial"],["hymenium"],["hymens"],["hymn"],["hymnal"],["hymnals"],["hymnary"],["hymnbook"],["hymned"],["hymning"],["hymnist"],["hymnists"],["hymnless"],["hymnlike"],["hymnody"],["hymns"],["hyoid"],["hyoidal"],["hyoidean"],["hyoids"],["hyoscine"],["hyp"],["hype"],["hyped"],["hyper"],["hypergol"],["hyperon"],["hyperons"],["hyperope"],["hypes"],["hypha"],["hyphae"],["hyphal"],["hyphemia"],["hyphen"],["hyphened"],["hyphens"],["hyping"],["hypnic"],["hypnoid"],["hypnoses"],["hypnosis"],["hypnotic"],["hypo"],["hypoacid"],["hypoderm"],["hypoed"],["hypogea"],["hypogeal"],["hypogean"],["hypogene"],["hypogeum"],["hypogyny"],["hypoing"],["hyponea"],["hyponeas"],["hyponoia"],["hypopnea"],["hypopyon"],["hypos"],["hypothec"],["hypoxia"],["hypoxias"],["hypoxic"],["hyps"],["hyraces"],["hyracoid"],["hyrax"],["hyraxes"],["hyson"],["hysons"],["hyssop"],["hyssops"],["hysteria"],["hysteric"],["hyte"],["iamb"],["iambi"],["iambic"],["iambics"],["iambs"],["iambus"],["iambuses"],["iatric"],["iatrical"],["ibex"],["ibexes"],["ibices"],["ibidem"],["ibis"],["ibises"],["ibogaine"],["ice"],["iceberg"],["icebergs"],["iceblink"],["iceboat"],["iceboats"],["icebound"],["icebox"],["iceboxes"],["icecap"],["icecaps"],["iced"],["icefall"],["icefalls"],["icehouse"],["icekhana"],["iceless"],["icelike"],["iceman"],["icemen"],["ices"],["ich"],["ichnite"],["ichnites"],["ichor"],["ichorous"],["ichors"],["ichs"],["ichthyic"],["icicle"],["icicled"],["icicles"],["icier"],["iciest"],["icily"],["iciness"],["icing"],["icings"],["ick"],["icker"],["ickers"],["ickier"],["ickiest"],["ickily"],["ickiness"],["icky"],["icon"],["icones"],["iconic"],["iconical"],["icons"],["icteric"],["icterics"],["icterus"],["ictic"],["ictus"],["ictuses"],["icy"],["id"],["idea"],["ideal"],["idealess"],["idealise"],["idealism"],["idealist"],["ideality"],["idealize"],["ideally"],["idealogy"],["ideals"],["ideas"],["ideate"],["ideated"],["ideates"],["ideating"],["ideation"],["ideative"],["idem"],["identic"],["identify"],["identity"],["ideogram"],["ideology"],["ides"],["idiocies"],["idiocy"],["idiolect"],["idiom"],["idioms"],["idiot"],["idiotic"],["idiotism"],["idiots"],["idle"],["idled"],["idleness"],["idler"],["idlers"],["idles"],["idlesse"],["idlesses"],["idlest"],["idling"],["idly"],["idocrase"],["idol"],["idolater"],["idolator"],["idolatry"],["idolise"],["idolised"],["idoliser"],["idolises"],["idolism"],["idolisms"],["idolize"],["idolized"],["idolizer"],["idolizes"],["idols"],["idoneity"],["idoneous"],["ids"],["idyl"],["idylist"],["idylists"],["idyll"],["idyllic"],["idyllist"],["idylls"],["idyls"],["if"],["iffier"],["iffiest"],["iffiness"],["iffy"],["ifs"],["igloo"],["igloos"],["iglu"],["iglus"],["ignatia"],["ignatias"],["igneous"],["ignified"],["ignifies"],["ignify"],["ignite"],["ignited"],["igniter"],["igniters"],["ignites"],["igniting"],["ignition"],["ignitor"],["ignitors"],["ignitron"],["ignoble"],["ignobly"],["ignominy"],["ignorant"],["ignore"],["ignored"],["ignorer"],["ignorers"],["ignores"],["ignoring"],["iguana"],["iguanas"],["iguanian"],["ihram"],["ihrams"],["ikebana"],["ikebanas"],["ikon"],["ikons"],["ilea"],["ileac"],["ileal"],["ileitis"],["ileum"],["ileus"],["ileuses"],["ilex"],["ilexes"],["ilia"],["iliac"],["iliad"],["iliads"],["ilial"],["ilium"],["ilk"],["ilka"],["ilks"],["ill"],["illation"],["illative"],["illegal"],["illegals"],["illicit"],["illinium"],["illiquid"],["illite"],["illites"],["illitic"],["illness"],["illogic"],["illogics"],["ills"],["illume"],["illumed"],["illumes"],["illumine"],["illuming"],["illusion"],["illusive"],["illusory"],["illuvia"],["illuvial"],["illuvium"],["illy"],["ilmenite"],["image"],["imaged"],["imager"],["imagers"],["imagery"],["images"],["imaginal"],["imagine"],["imagined"],["imaginer"],["imagines"],["imaging"],["imagism"],["imagisms"],["imagist"],["imagists"],["imago"],["imagoes"],["imagos"],["imam"],["imamate"],["imamates"],["imams"],["imaret"],["imarets"],["imaum"],["imaums"],["imbalm"],["imbalmed"],["imbalmer"],["imbalms"],["imbark"],["imbarked"],["imbarks"],["imbecile"],["imbed"],["imbedded"],["imbeds"],["imbibe"],["imbibed"],["imbiber"],["imbibers"],["imbibes"],["imbibing"],["imbitter"],["imblaze"],["imblazed"],["imblazes"],["imbodied"],["imbodies"],["imbody"],["imbolden"],["imbosom"],["imbosoms"],["imbower"],["imbowers"],["imbrown"],["imbrowns"],["imbrue"],["imbrued"],["imbrues"],["imbruing"],["imbrute"],["imbruted"],["imbrutes"],["imbue"],["imbued"],["imbues"],["imbuing"],["imid"],["imide"],["imides"],["imidic"],["imido"],["imids"],["imine"],["imines"],["imino"],["imitable"],["imitate"],["imitated"],["imitates"],["imitator"],["immane"],["immanent"],["immature"],["immense"],["immenser"],["immerge"],["immerged"],["immerges"],["immerse"],["immersed"],["immerses"],["immesh"],["immeshed"],["immeshes"],["immies"],["imminent"],["immingle"],["immix"],["immixed"],["immixes"],["immixing"],["immobile"],["immodest"],["immolate"],["immoral"],["immortal"],["immotile"],["immune"],["immunes"],["immunise"],["immunity"],["immunize"],["immure"],["immured"],["immures"],["immuring"],["immy"],["imp"],["impact"],["impacted"],["impacter"],["impactor"],["impacts"],["impaint"],["impaints"],["impair"],["impaired"],["impairer"],["impairs"],["impala"],["impalas"],["impale"],["impaled"],["impaler"],["impalers"],["impales"],["impaling"],["impanel"],["impanels"],["imparity"],["impark"],["imparked"],["imparks"],["impart"],["imparted"],["imparter"],["imparts"],["impasse"],["impasses"],["impaste"],["impasted"],["impastes"],["impasto"],["impastos"],["impavid"],["impawn"],["impawned"],["impawns"],["impeach"],["impearl"],["impearls"],["imped"],["impede"],["impeded"],["impeder"],["impeders"],["impedes"],["impeding"],["impel"],["impelled"],["impeller"],["impellor"],["impels"],["impend"],["impended"],["impends"],["imperia"],["imperial"],["imperil"],["imperils"],["imperium"],["impetigo"],["impetus"],["imphee"],["imphees"],["impi"],["impiety"],["imping"],["impinge"],["impinged"],["impinger"],["impinges"],["impings"],["impious"],["impis"],["impish"],["impishly"],["implant"],["implants"],["implead"],["impleads"],["impledge"],["implicit"],["implied"],["implies"],["implode"],["imploded"],["implodes"],["implore"],["implored"],["implorer"],["implores"],["imply"],["implying"],["impolicy"],["impolite"],["impone"],["imponed"],["impones"],["imponing"],["imporous"],["import"],["imported"],["importer"],["imports"],["impose"],["imposed"],["imposer"],["imposers"],["imposes"],["imposing"],["impost"],["imposted"],["imposter"],["impostor"],["imposts"],["impotent"],["impound"],["impounds"],["impower"],["impowers"],["impregn"],["impregns"],["impresa"],["impresas"],["imprese"],["impreses"],["impress"],["imprest"],["imprests"],["imprimis"],["imprint"],["imprints"],["imprison"],["improper"],["improv"],["improve"],["improved"],["improver"],["improves"],["improvs"],["imps"],["impudent"],["impugn"],["impugned"],["impugner"],["impugns"],["impulse"],["impulsed"],["impulses"],["impunity"],["impure"],["impurely"],["impurity"],["impute"],["imputed"],["imputer"],["imputers"],["imputes"],["imputing"],["in"],["inaction"],["inactive"],["inane"],["inanely"],["inaner"],["inanes"],["inanest"],["inanity"],["inapt"],["inaptly"],["inarable"],["inarch"],["inarched"],["inarches"],["inarm"],["inarmed"],["inarming"],["inarms"],["inbeing"],["inbeings"],["inboard"],["inboards"],["inborn"],["inbound"],["inbounds"],["inbred"],["inbreds"],["inbreed"],["inbreeds"],["inbuilt"],["inburst"],["inbursts"],["inby"],["inbye"],["incage"],["incaged"],["incages"],["incaging"],["incant"],["incanted"],["incants"],["incase"],["incased"],["incases"],["incasing"],["incense"],["incensed"],["incenses"],["incept"],["incepted"],["inceptor"],["incepts"],["incest"],["incests"],["inch"],["inched"],["inches"],["inching"],["inchmeal"],["inchoate"],["inchworm"],["incident"],["incipit"],["incipits"],["incisal"],["incise"],["incised"],["incises"],["incising"],["incision"],["incisive"],["incisor"],["incisors"],["incisory"],["incisure"],["incitant"],["incite"],["incited"],["inciter"],["inciters"],["incites"],["inciting"],["incivil"],["inclasp"],["inclasps"],["incline"],["inclined"],["incliner"],["inclines"],["inclip"],["inclips"],["inclose"],["inclosed"],["incloser"],["incloses"],["include"],["included"],["includes"],["incog"],["incogs"],["income"],["incomer"],["incomers"],["incomes"],["incoming"],["inconnu"],["inconnus"],["incony"],["incorpse"],["increase"],["increate"],["incross"],["incrust"],["incrusts"],["incubate"],["incubi"],["incubus"],["incudal"],["incudate"],["incudes"],["incult"],["incumber"],["incur"],["incurred"],["incurs"],["incurve"],["incurved"],["incurves"],["incus"],["incuse"],["incused"],["incuses"],["incusing"],["indaba"],["indabas"],["indagate"],["indamin"],["indamine"],["indamins"],["indebted"],["indecent"],["indeed"],["indene"],["indenes"],["indent"],["indented"],["indenter"],["indentor"],["indents"],["indevout"],["index"],["indexed"],["indexer"],["indexers"],["indexes"],["indexing"],["indican"],["indicans"],["indicant"],["indicate"],["indices"],["indicia"],["indicias"],["indicium"],["indict"],["indicted"],["indictee"],["indicter"],["indictor"],["indicts"],["indie"],["indies"],["indigen"],["indigene"],["indigens"],["indigent"],["indign"],["indignly"],["indigo"],["indigoes"],["indigoid"],["indigos"],["indirect"],["indite"],["indited"],["inditer"],["inditers"],["indites"],["inditing"],["indium"],["indiums"],["indocile"],["indol"],["indole"],["indolent"],["indoles"],["indols"],["indoor"],["indoors"],["indorse"],["indorsed"],["indorsee"],["indorser"],["indorses"],["indorsor"],["indow"],["indowed"],["indowing"],["indows"],["indoxyl"],["indoxyls"],["indraft"],["indrafts"],["indrawn"],["indri"],["indris"],["induce"],["induced"],["inducer"],["inducers"],["induces"],["inducing"],["induct"],["inducted"],["inductee"],["inductor"],["inducts"],["indue"],["indued"],["indues"],["induing"],["indulge"],["indulged"],["indulger"],["indulges"],["indulin"],["induline"],["indulins"],["indult"],["indults"],["indurate"],["indusia"],["indusial"],["indusium"],["industry"],["indwell"],["indwells"],["indwelt"],["inearth"],["inearths"],["inedible"],["inedita"],["inedited"],["inept"],["ineptly"],["inequity"],["inerrant"],["inert"],["inertia"],["inertiae"],["inertial"],["inertias"],["inertly"],["inerts"],["inexact"],["inexpert"],["infamies"],["infamous"],["infamy"],["infancy"],["infant"],["infanta"],["infantas"],["infante"],["infantes"],["infantry"],["infants"],["infarct"],["infarcts"],["infare"],["infares"],["infauna"],["infaunae"],["infaunal"],["infaunas"],["infect"],["infected"],["infecter"],["infector"],["infects"],["infecund"],["infeoff"],["infeoffs"],["infer"],["inferior"],["infernal"],["inferno"],["infernos"],["inferred"],["inferrer"],["infers"],["infest"],["infested"],["infester"],["infests"],["infidel"],["infidels"],["infield"],["infields"],["infight"],["infights"],["infinite"],["infinity"],["infirm"],["infirmed"],["infirmly"],["infirms"],["infix"],["infixed"],["infixes"],["infixing"],["infixion"],["inflame"],["inflamed"],["inflamer"],["inflames"],["inflate"],["inflated"],["inflater"],["inflates"],["inflator"],["inflect"],["inflects"],["inflexed"],["inflict"],["inflicts"],["inflight"],["inflow"],["inflows"],["influent"],["influx"],["influxes"],["info"],["infold"],["infolded"],["infolder"],["infolds"],["inform"],["informal"],["informed"],["informer"],["informs"],["infos"],["infought"],["infra"],["infract"],["infracts"],["infrared"],["infringe"],["infrugal"],["infuse"],["infused"],["infuser"],["infusers"],["infuses"],["infusing"],["infusion"],["infusive"],["ingate"],["ingates"],["ingather"],["ingenue"],["ingenues"],["ingest"],["ingesta"],["ingested"],["ingests"],["ingle"],["ingles"],["ingoing"],["ingot"],["ingoted"],["ingoting"],["ingots"],["ingraft"],["ingrafts"],["ingrain"],["ingrains"],["ingrate"],["ingrates"],["ingress"],["ingroup"],["ingroups"],["ingrown"],["ingrowth"],["inguinal"],["ingulf"],["ingulfed"],["ingulfs"],["inhabit"],["inhabits"],["inhalant"],["inhale"],["inhaled"],["inhaler"],["inhalers"],["inhales"],["inhaling"],["inhaul"],["inhauler"],["inhauls"],["inhere"],["inhered"],["inherent"],["inheres"],["inhering"],["inherit"],["inherits"],["inhesion"],["inhibit"],["inhibits"],["inhuman"],["inhumane"],["inhume"],["inhumed"],["inhumer"],["inhumers"],["inhumes"],["inhuming"],["inia"],["inimical"],["inion"],["iniquity"],["initial"],["initials"],["initiate"],["inject"],["injected"],["injector"],["injects"],["injure"],["injured"],["injurer"],["injurers"],["injures"],["injuries"],["injuring"],["injury"],["ink"],["inkberry"],["inkblot"],["inkblots"],["inked"],["inker"],["inkers"],["inkhorn"],["inkhorns"],["inkier"],["inkiest"],["inkiness"],["inking"],["inkjet"],["inkle"],["inkles"],["inkless"],["inklike"],["inkling"],["inklings"],["inkpot"],["inkpots"],["inks"],["inkstand"],["inkwell"],["inkwells"],["inkwood"],["inkwoods"],["inky"],["inlace"],["inlaced"],["inlaces"],["inlacing"],["inlaid"],["inland"],["inlander"],["inlands"],["inlay"],["inlayer"],["inlayers"],["inlaying"],["inlays"],["inlet"],["inlets"],["inlier"],["inliers"],["inly"],["inmate"],["inmates"],["inmesh"],["inmeshed"],["inmeshes"],["inmost"],["inn"],["innards"],["innate"],["innately"],["inned"],["inner"],["innerly"],["inners"],["innerve"],["innerved"],["innerves"],["inning"],["innings"],["innless"],["innocent"],["innovate"],["inns"],["innuendo"],["inocula"],["inoculum"],["inosite"],["inosites"],["inositol"],["inphase"],["inpour"],["inpoured"],["inpours"],["input"],["inputs"],["inputted"],["inquest"],["inquests"],["inquiet"],["inquiets"],["inquire"],["inquired"],["inquirer"],["inquires"],["inquiry"],["inro"],["inroad"],["inroads"],["inrush"],["inrushes"],["ins"],["insane"],["insanely"],["insaner"],["insanest"],["insanity"],["inscape"],["inscapes"],["inscribe"],["inscroll"],["insculp"],["insculps"],["inseam"],["inseams"],["insect"],["insectan"],["insects"],["insecure"],["insert"],["inserted"],["inserter"],["inserts"],["inset"],["insets"],["insetted"],["insetter"],["insheath"],["inshore"],["inshrine"],["inside"],["insider"],["insiders"],["insides"],["insight"],["insights"],["insigne"],["insignia"],["insipid"],["insist"],["insisted"],["insister"],["insists"],["insnare"],["insnared"],["insnarer"],["insnares"],["insofar"],["insolate"],["insole"],["insolent"],["insoles"],["insomnia"],["insomuch"],["insoul"],["insouled"],["insouls"],["inspan"],["inspans"],["inspect"],["inspects"],["insphere"],["inspire"],["inspired"],["inspirer"],["inspires"],["inspirit"],["instable"],["instal"],["install"],["installs"],["instals"],["instance"],["instancy"],["instant"],["instants"],["instar"],["instars"],["instate"],["instated"],["instates"],["instead"],["instep"],["insteps"],["instil"],["instill"],["instills"],["instils"],["instinct"],["instroke"],["instruct"],["insulant"],["insular"],["insulars"],["insulate"],["insulin"],["insulins"],["insult"],["insulted"],["insulter"],["insults"],["insurant"],["insure"],["insured"],["insureds"],["insurer"],["insurers"],["insures"],["insuring"],["inswathe"],["inswept"],["intact"],["intagli"],["intaglio"],["intake"],["intakes"],["intarsia"],["integer"],["integers"],["integral"],["intend"],["intended"],["intender"],["intends"],["intense"],["intenser"],["intent"],["intently"],["intents"],["inter"],["interact"],["interage"],["interbed"],["intercom"],["intercut"],["interest"],["interim"],["interims"],["interior"],["interlap"],["interlay"],["intermit"],["intermix"],["intern"],["internal"],["interne"],["interned"],["internee"],["internes"],["interns"],["interred"],["interrex"],["interrow"],["inters"],["intersex"],["intertie"],["interval"],["interwar"],["inthral"],["inthrall"],["inthrals"],["inthrone"],["inti"],["intima"],["intimacy"],["intimae"],["intimal"],["intimas"],["intimate"],["intime"],["intimist"],["intine"],["intines"],["intis"],["intitle"],["intitled"],["intitles"],["intitule"],["into"],["intomb"],["intombed"],["intombs"],["intonate"],["intone"],["intoned"],["intoner"],["intoners"],["intones"],["intoning"],["intort"],["intorted"],["intorts"],["intown"],["intraday"],["intrados"],["intrant"],["intrants"],["intreat"],["intreats"],["intrench"],["intrepid"],["intrigue"],["intro"],["introfy"],["introit"],["introits"],["intromit"],["intron"],["introns"],["introrse"],["intros"],["intrude"],["intruded"],["intruder"],["intrudes"],["intrust"],["intrusts"],["intubate"],["intuit"],["intuited"],["intuits"],["inturn"],["inturned"],["inturns"],["intwine"],["intwined"],["intwines"],["intwist"],["intwists"],["inulase"],["inulases"],["inulin"],["inulins"],["inundant"],["inundate"],["inurbane"],["inure"],["inured"],["inures"],["inuring"],["inurn"],["inurned"],["inurning"],["inurns"],["inutile"],["invade"],["invaded"],["invader"],["invaders"],["invades"],["invading"],["invalid"],["invalids"],["invasion"],["invasive"],["invected"],["inveigh"],["inveighs"],["inveigle"],["invent"],["invented"],["inventer"],["inventor"],["invents"],["inverity"],["inverse"],["inverses"],["invert"],["inverted"],["inverter"],["invertor"],["inverts"],["invest"],["invested"],["investor"],["invests"],["inviable"],["inviably"],["invirile"],["inviscid"],["invital"],["invite"],["invited"],["invitee"],["invitees"],["inviter"],["inviters"],["invites"],["inviting"],["invocate"],["invoice"],["invoiced"],["invoices"],["invoke"],["invoked"],["invoker"],["invokers"],["invokes"],["invoking"],["involute"],["involve"],["involved"],["involver"],["involves"],["inwall"],["inwalled"],["inwalls"],["inward"],["inwardly"],["inwards"],["inweave"],["inweaved"],["inweaves"],["inwind"],["inwinds"],["inwound"],["inwove"],["inwoven"],["inwrap"],["inwraps"],["iodate"],["iodated"],["iodates"],["iodating"],["iodation"],["iodic"],["iodid"],["iodide"],["iodides"],["iodids"],["iodin"],["iodinate"],["iodine"],["iodines"],["iodins"],["iodism"],["iodisms"],["iodize"],["iodized"],["iodizer"],["iodizers"],["iodizes"],["iodizing"],["iodoform"],["iodophor"],["iodopsin"],["iodous"],["iolite"],["iolites"],["ion"],["ionic"],["ionicity"],["ionics"],["ionise"],["ionised"],["ionises"],["ionising"],["ionium"],["ioniums"],["ionize"],["ionized"],["ionizer"],["ionizers"],["ionizes"],["ionizing"],["ionogen"],["ionogens"],["ionomer"],["ionomers"],["ionone"],["ionones"],["ions"],["iota"],["iotacism"],["iotas"],["ipecac"],["ipecacs"],["ipomoea"],["ipomoeas"],["iracund"],["irade"],["irades"],["irate"],["irately"],["irater"],["iratest"],["ire"],["ired"],["ireful"],["irefully"],["ireless"],["irenic"],["irenical"],["irenics"],["ires"],["irid"],["irides"],["iridic"],["iridium"],["iridiums"],["irids"],["iring"],["iris"],["irised"],["irises"],["irising"],["iritic"],["iritis"],["iritises"],["irk"],["irked"],["irking"],["irks"],["irksome"],["iron"],["ironbark"],["ironclad"],["irone"],["ironed"],["ironer"],["ironers"],["irones"],["ironic"],["ironical"],["ironies"],["ironing"],["ironings"],["ironist"],["ironists"],["ironize"],["ironized"],["ironizes"],["ironlike"],["ironness"],["irons"],["ironside"],["ironware"],["ironweed"],["ironwood"],["ironwork"],["irony"],["irreal"],["irrigate"],["irritant"],["irritate"],["irrupt"],["irrupted"],["irrupts"],["is"],["isagoge"],["isagoges"],["isagogic"],["isarithm"],["isatin"],["isatine"],["isatines"],["isatinic"],["isatins"],["isba"],["isbas"],["ischemia"],["ischemic"],["ischia"],["ischial"],["ischium"],["island"],["islanded"],["islander"],["islands"],["isle"],["isled"],["isleless"],["isles"],["islet"],["islets"],["isling"],["ism"],["isms"],["isobar"],["isobare"],["isobares"],["isobaric"],["isobars"],["isobath"],["isobaths"],["isocheim"],["isochime"],["isochor"],["isochore"],["isochors"],["isochron"],["isocline"],["isocracy"],["isodose"],["isogamy"],["isogenic"],["isogeny"],["isogloss"],["isogon"],["isogonal"],["isogone"],["isogones"],["isogonic"],["isogons"],["isogony"],["isograft"],["isogram"],["isograms"],["isograph"],["isogriv"],["isogrivs"],["isohel"],["isohels"],["isohyet"],["isohyets"],["isolable"],["isolate"],["isolated"],["isolates"],["isolator"],["isolead"],["isoleads"],["isoline"],["isolines"],["isolog"],["isologs"],["isologue"],["isomer"],["isomeric"],["isomers"],["isometry"],["isomorph"],["isonomic"],["isonomy"],["isopach"],["isopachs"],["isophote"],["isopleth"],["isopod"],["isopodan"],["isopods"],["isoprene"],["isospin"],["isospins"],["isospory"],["isostasy"],["isotach"],["isotachs"],["isothere"],["isotherm"],["isotone"],["isotones"],["isotonic"],["isotope"],["isotopes"],["isotopic"],["isotopy"],["isotropy"],["isotype"],["isotypes"],["isotypic"],["isozyme"],["isozymes"],["isozymic"],["issei"],["isseis"],["issuable"],["issuably"],["issuance"],["issuant"],["issue"],["issued"],["issuer"],["issuers"],["issues"],["issuing"],["isthmi"],["isthmian"],["isthmic"],["isthmoid"],["isthmus"],["istle"],["istles"],["it"],["italic"],["italics"],["itch"],["itched"],["itches"],["itchier"],["itchiest"],["itchily"],["itching"],["itchings"],["itchy"],["item"],["itemed"],["iteming"],["itemize"],["itemized"],["itemizer"],["itemizes"],["items"],["iterance"],["iterant"],["iterate"],["iterated"],["iterates"],["iterum"],["ither"],["its"],["itself"],["ivied"],["ivies"],["ivories"],["ivory"],["ivy"],["ivylike"],["iwis"],["ixia"],["ixias"],["ixodid"],["ixodids"],["ixora"],["ixoras"],["ixtle"],["ixtles"],["izar"],["izars"],["izzard"],["izzards"],["jab"],["jabbed"],["jabber"],["jabbered"],["jabberer"],["jabbers"],["jabbing"],["jabiru"],["jabirus"],["jabot"],["jabots"],["jabs"],["jacal"],["jacales"],["jacals"],["jacamar"],["jacamars"],["jacana"],["jacanas"],["jacinth"],["jacinthe"],["jacinths"],["jack"],["jackal"],["jackals"],["jackaroo"],["jackass"],["jackboot"],["jackdaw"],["jackdaws"],["jacked"],["jacker"],["jackeroo"],["jackers"],["jacket"],["jacketed"],["jackets"],["jackfish"],["jackies"],["jacking"],["jackleg"],["jacklegs"],["jackpot"],["jackpots"],["jackroll"],["jacks"],["jackstay"],["jacky"],["jacobin"],["jacobins"],["jacobus"],["jaconet"],["jaconets"],["jacquard"],["jaculate"],["jade"],["jaded"],["jadedly"],["jadeite"],["jadeites"],["jades"],["jading"],["jadish"],["jadishly"],["jaditic"],["jaeger"],["jaegers"],["jag"],["jager"],["jagers"],["jagg"],["jaggary"],["jagged"],["jaggeder"],["jaggedly"],["jagger"],["jaggers"],["jaggery"],["jagghery"],["jaggier"],["jaggiest"],["jagging"],["jaggs"],["jaggy"],["jagless"],["jagra"],["jagras"],["jags"],["jaguar"],["jaguars"],["jail"],["jailbait"],["jailbird"],["jailed"],["jailer"],["jailers"],["jailing"],["jailor"],["jailors"],["jails"],["jake"],["jakes"],["jalap"],["jalapeno"],["jalapic"],["jalapin"],["jalapins"],["jalaps"],["jalop"],["jalopies"],["jaloppy"],["jalops"],["jalopy"],["jalousie"],["jam"],["jamb"],["jambe"],["jambeau"],["jambeaux"],["jambed"],["jambes"],["jambing"],["jamboree"],["jambs"],["jammed"],["jammer"],["jammers"],["jamming"],["jams"],["jane"],["janes"],["jangle"],["jangled"],["jangler"],["janglers"],["jangles"],["jangling"],["janiform"],["janisary"],["janitor"],["janitors"],["janizary"],["janty"],["japan"],["japanize"],["japanned"],["japanner"],["japans"],["jape"],["japed"],["japer"],["japeries"],["japers"],["japery"],["japes"],["japing"],["japingly"],["japonica"],["jar"],["jarful"],["jarfuls"],["jargon"],["jargoned"],["jargonel"],["jargons"],["jargoon"],["jargoons"],["jarina"],["jarinas"],["jarl"],["jarldom"],["jarldoms"],["jarls"],["jarosite"],["jarovize"],["jarrah"],["jarrahs"],["jarred"],["jarring"],["jars"],["jarsful"],["jarvey"],["jarveys"],["jasmin"],["jasmine"],["jasmines"],["jasmins"],["jasper"],["jaspers"],["jaspery"],["jassid"],["jassids"],["jato"],["jatos"],["jauk"],["jauked"],["jauking"],["jauks"],["jaunce"],["jaunced"],["jaunces"],["jauncing"],["jaundice"],["jaunt"],["jaunted"],["jauntier"],["jauntily"],["jaunting"],["jaunts"],["jaunty"],["jaup"],["jauped"],["jauping"],["jaups"],["java"],["javas"],["javelin"],["javelina"],["javelins"],["jaw"],["jawan"],["jawans"],["jawbone"],["jawboned"],["jawboner"],["jawbones"],["jawed"],["jawing"],["jawlike"],["jawline"],["jawlines"],["jaws"],["jay"],["jaybird"],["jaybirds"],["jaygee"],["jaygees"],["jays"],["jayvee"],["jayvees"],["jaywalk"],["jaywalks"],["jazz"],["jazzed"],["jazzer"],["jazzers"],["jazzes"],["jazzier"],["jazziest"],["jazzily"],["jazzing"],["jazzlike"],["jazzman"],["jazzmen"],["jazzy"],["jealous"],["jealousy"],["jean"],["jeans"],["jebel"],["jebels"],["jee"],["jeed"],["jeeing"],["jeep"],["jeeped"],["jeepers"],["jeeping"],["jeepney"],["jeepneys"],["jeeps"],["jeer"],["jeered"],["jeerer"],["jeerers"],["jeering"],["jeers"],["jees"],["jeez"],["jefe"],["jefes"],["jehad"],["jehads"],["jehu"],["jehus"],["jejuna"],["jejunal"],["jejune"],["jejunely"],["jejunity"],["jejunum"],["jell"],["jellaba"],["jellabas"],["jelled"],["jellied"],["jellies"],["jellify"],["jelling"],["jells"],["jelly"],["jellying"],["jelutong"],["jemadar"],["jemadars"],["jemidar"],["jemidars"],["jemmied"],["jemmies"],["jemmy"],["jemmying"],["jennet"],["jennets"],["jennies"],["jenny"],["jeon"],["jeopard"],["jeopards"],["jeopardy"],["jerboa"],["jerboas"],["jereed"],["jereeds"],["jeremiad"],["jerid"],["jerids"],["jerk"],["jerked"],["jerker"],["jerkers"],["jerkier"],["jerkies"],["jerkiest"],["jerkily"],["jerkin"],["jerking"],["jerkins"],["jerks"],["jerky"],["jeroboam"],["jerreed"],["jerreeds"],["jerrican"],["jerrid"],["jerrids"],["jerries"],["jerry"],["jerrycan"],["jersey"],["jerseyed"],["jerseys"],["jess"],["jessant"],["jesse"],["jessed"],["jesses"],["jessing"],["jest"],["jested"],["jester"],["jesters"],["jestful"],["jesting"],["jestings"],["jests"],["jesuit"],["jesuitic"],["jesuitry"],["jesuits"],["jet"],["jetbead"],["jetbeads"],["jete"],["jetes"],["jetliner"],["jeton"],["jetons"],["jetport"],["jetports"],["jets"],["jetsam"],["jetsams"],["jetsom"],["jetsoms"],["jetted"],["jettied"],["jettier"],["jetties"],["jettiest"],["jetting"],["jettison"],["jetton"],["jettons"],["jetty"],["jettying"],["jeu"],["jeux"],["jew"],["jewed"],["jewel"],["jeweled"],["jeweler"],["jewelers"],["jeweling"],["jewelled"],["jeweller"],["jewelry"],["jewels"],["jewfish"],["jewing"],["jews"],["jezail"],["jezails"],["jezebel"],["jezebels"],["jiao"],["jib"],["jibb"],["jibbed"],["jibber"],["jibbers"],["jibbing"],["jibboom"],["jibbooms"],["jibbs"],["jibe"],["jibed"],["jiber"],["jibers"],["jibes"],["jibing"],["jibingly"],["jibs"],["jicama"],["jicamas"],["jiff"],["jiffies"],["jiffs"],["jiffy"],["jig"],["jigaboo"],["jigaboos"],["jigged"],["jigger"],["jiggered"],["jiggers"],["jigging"],["jiggle"],["jiggled"],["jiggles"],["jigglier"],["jiggling"],["jiggly"],["jigs"],["jigsaw"],["jigsawed"],["jigsawn"],["jigsaws"],["jihad"],["jihads"],["jill"],["jillion"],["jillions"],["jills"],["jilt"],["jilted"],["jilter"],["jilters"],["jilting"],["jilts"],["jiminy"],["jimjams"],["jimmied"],["jimmies"],["jimminy"],["jimmy"],["jimmying"],["jimp"],["jimper"],["jimpest"],["jimply"],["jimpy"],["jin"],["jingal"],["jingall"],["jingalls"],["jingals"],["jingko"],["jingkoes"],["jingle"],["jingled"],["jingler"],["jinglers"],["jingles"],["jinglier"],["jingling"],["jingly"],["jingo"],["jingoes"],["jingoish"],["jingoism"],["jingoist"],["jink"],["jinked"],["jinker"],["jinkers"],["jinking"],["jinks"],["jinn"],["jinnee"],["jinni"],["jinns"],["jins"],["jinx"],["jinxed"],["jinxes"],["jinxing"],["jipijapa"],["jism"],["jisms"],["jitney"],["jitneys"],["jitter"],["jittered"],["jitters"],["jittery"],["jiujitsu"],["jiujutsu"],["jive"],["jiveass"],["jived"],["jiver"],["jivers"],["jives"],["jiving"],["jnana"],["jnanas"],["jo"],["joannes"],["job"],["jobbed"],["jobber"],["jobbers"],["jobbery"],["jobbing"],["jobless"],["jobname"],["jobnames"],["jobs"],["jock"],["jockette"],["jockey"],["jockeyed"],["jockeys"],["jocko"],["jockos"],["jocks"],["jocose"],["jocosely"],["jocosity"],["jocular"],["jocund"],["jocundly"],["jodhpur"],["jodhpurs"],["joe"],["joes"],["joey"],["joeys"],["jog"],["jogged"],["jogger"],["joggers"],["jogging"],["joggings"],["joggle"],["joggled"],["joggler"],["jogglers"],["joggles"],["joggling"],["jogs"],["johannes"],["john"],["johnboat"],["johnnies"],["johnny"],["johns"],["join"],["joinable"],["joinder"],["joinders"],["joined"],["joiner"],["joiners"],["joinery"],["joining"],["joinings"],["joins"],["joint"],["jointed"],["jointer"],["jointers"],["jointing"],["jointly"],["joints"],["jointure"],["joist"],["joisted"],["joisting"],["joists"],["jojoba"],["jojobas"],["joke"],["joked"],["joker"],["jokers"],["jokes"],["jokester"],["jokey"],["jokier"],["jokiest"],["joking"],["jokingly"],["joky"],["jole"],["joles"],["jollied"],["jollier"],["jollies"],["jolliest"],["jollify"],["jollily"],["jollity"],["jolly"],["jollying"],["jolt"],["jolted"],["jolter"],["jolters"],["joltier"],["joltiest"],["joltily"],["jolting"],["jolts"],["jolty"],["jones"],["joneses"],["jongleur"],["jonquil"],["jonquils"],["joram"],["jorams"],["jordan"],["jordans"],["jorum"],["jorums"],["joseph"],["josephs"],["josh"],["joshed"],["josher"],["joshers"],["joshes"],["joshing"],["joss"],["josses"],["jostle"],["jostled"],["jostler"],["jostlers"],["jostles"],["jostling"],["jot"],["jota"],["jotas"],["jots"],["jotted"],["jotter"],["jotters"],["jotting"],["jottings"],["jotty"],["joual"],["jouals"],["jouk"],["jouked"],["jouking"],["jouks"],["joule"],["joules"],["jounce"],["jounced"],["jounces"],["jouncier"],["jouncing"],["jouncy"],["journal"],["journals"],["journey"],["journeys"],["joust"],["jousted"],["jouster"],["jousters"],["jousting"],["jousts"],["jovial"],["jovially"],["jovialty"],["jow"],["jowar"],["jowars"],["jowed"],["jowing"],["jowl"],["jowled"],["jowlier"],["jowliest"],["jowls"],["jowly"],["jows"],["joy"],["joyance"],["joyances"],["joyed"],["joyful"],["joyfully"],["joying"],["joyless"],["joyous"],["joyously"],["joypop"],["joypops"],["joyride"],["joyrider"],["joyrides"],["joyrode"],["joys"],["joystick"],["juba"],["jubas"],["jubbah"],["jubbahs"],["jube"],["jubes"],["jubhah"],["jubhahs"],["jubilant"],["jubilate"],["jubile"],["jubilee"],["jubilees"],["jubiles"],["judas"],["judases"],["judder"],["juddered"],["judders"],["judge"],["judged"],["judger"],["judgers"],["judges"],["judging"],["judgment"],["judicial"],["judo"],["judoist"],["judoists"],["judoka"],["judokas"],["judos"],["jug"],["juga"],["jugal"],["jugate"],["jugful"],["jugfuls"],["jugged"],["jugging"],["juggle"],["juggled"],["juggler"],["jugglers"],["jugglery"],["juggles"],["juggling"],["jughead"],["jugheads"],["jugs"],["jugsful"],["jugula"],["jugular"],["jugulars"],["jugulate"],["jugulum"],["jugum"],["jugums"],["juice"],["juiced"],["juicer"],["juicers"],["juices"],["juicier"],["juiciest"],["juicily"],["juicing"],["juicy"],["jujitsu"],["jujitsus"],["juju"],["jujube"],["jujubes"],["jujuism"],["jujuisms"],["jujuist"],["jujuists"],["jujus"],["jujutsu"],["jujutsus"],["juke"],["jukebox"],["juked"],["jukes"],["juking"],["julep"],["juleps"],["julienne"],["jumbal"],["jumbals"],["jumble"],["jumbled"],["jumbler"],["jumblers"],["jumbles"],["jumbling"],["jumbo"],["jumbos"],["jumbuck"],["jumbucks"],["jump"],["jumped"],["jumper"],["jumpers"],["jumpier"],["jumpiest"],["jumpily"],["jumping"],["jumpoff"],["jumpoffs"],["jumps"],["jumpsuit"],["jumpy"],["jun"],["junco"],["juncoes"],["juncos"],["junction"],["juncture"],["jungle"],["jungles"],["junglier"],["jungly"],["junior"],["juniors"],["juniper"],["junipers"],["junk"],["junked"],["junker"],["junkers"],["junket"],["junketed"],["junketer"],["junkets"],["junkie"],["junkier"],["junkies"],["junkiest"],["junking"],["junkman"],["junkmen"],["junks"],["junky"],["junkyard"],["junta"],["juntas"],["junto"],["juntos"],["jupe"],["jupes"],["jupon"],["jupons"],["jura"],["jural"],["jurally"],["jurant"],["jurants"],["jurat"],["juratory"],["jurats"],["jurel"],["jurels"],["juridic"],["juries"],["jurist"],["juristic"],["jurists"],["juror"],["jurors"],["jury"],["juryman"],["jurymen"],["jus"],["jussive"],["jussives"],["just"],["justed"],["juster"],["justers"],["justest"],["justice"],["justices"],["justify"],["justing"],["justle"],["justled"],["justles"],["justling"],["justly"],["justness"],["justs"],["jut"],["jute"],["jutes"],["juts"],["jutted"],["juttied"],["jutties"],["jutting"],["jutty"],["juttying"],["juvenal"],["juvenals"],["juvenile"],["ka"],["kaas"],["kab"],["kabab"],["kababs"],["kabaka"],["kabakas"],["kabala"],["kabalas"],["kabar"],["kabars"],["kabaya"],["kabayas"],["kabbala"],["kabbalah"],["kabbalas"],["kabeljou"],["kabiki"],["kabikis"],["kabob"],["kabobs"],["kabs"],["kabuki"],["kabukis"],["kachina"],["kachinas"],["kaddish"],["kadi"],["kadis"],["kae"],["kaes"],["kaf"],["kaffir"],["kaffirs"],["kaffiyeh"],["kafir"],["kafirs"],["kafs"],["kaftan"],["kaftans"],["kagu"],["kagus"],["kahuna"],["kahunas"],["kaiak"],["kaiaks"],["kaif"],["kaifs"],["kail"],["kails"],["kailyard"],["kain"],["kainit"],["kainite"],["kainites"],["kainits"],["kains"],["kaiser"],["kaiserin"],["kaisers"],["kajeput"],["kajeputs"],["kaka"],["kakapo"],["kakapos"],["kakas"],["kakemono"],["kaki"],["kakis"],["kalam"],["kalams"],["kale"],["kalends"],["kales"],["kalewife"],["kaleyard"],["kalian"],["kalians"],["kalif"],["kalifate"],["kalifs"],["kalimba"],["kalimbas"],["kaliph"],["kaliphs"],["kalium"],["kaliums"],["kallidin"],["kalmia"],["kalmias"],["kalong"],["kalongs"],["kalpa"],["kalpak"],["kalpaks"],["kalpas"],["kalyptra"],["kamaaina"],["kamacite"],["kamala"],["kamalas"],["kame"],["kames"],["kami"],["kamik"],["kamikaze"],["kamiks"],["kampong"],["kampongs"],["kamseen"],["kamseens"],["kamsin"],["kamsins"],["kana"],["kanas"],["kane"],["kanes"],["kangaroo"],["kanji"],["kanjis"],["kantar"],["kantars"],["kantele"],["kanteles"],["kaoliang"],["kaolin"],["kaoline"],["kaolines"],["kaolinic"],["kaolins"],["kaon"],["kaons"],["kapa"],["kapas"],["kaph"],["kaphs"],["kapok"],["kapoks"],["kappa"],["kappas"],["kaput"],["kaputt"],["karakul"],["karakuls"],["karat"],["karate"],["karates"],["karats"],["karma"],["karmas"],["karmic"],["karn"],["karns"],["karoo"],["karoos"],["kaross"],["karosses"],["karroo"],["karroos"],["karst"],["karstic"],["karsts"],["kart"],["karting"],["kartings"],["karts"],["karyotin"],["kas"],["kasbah"],["kasbahs"],["kasha"],["kashas"],["kasher"],["kashered"],["kashers"],["kashmir"],["kashmirs"],["kashrut"],["kashruth"],["kashruts"],["kat"],["katakana"],["katchina"],["katcina"],["katcinas"],["kathodal"],["kathode"],["kathodes"],["kathodic"],["kation"],["kations"],["kats"],["katydid"],["katydids"],["kauri"],["kauries"],["kauris"],["kaury"],["kava"],["kavakava"],["kavas"],["kavass"],["kavasses"],["kay"],["kayak"],["kayaked"],["kayaker"],["kayakers"],["kayaking"],["kayaks"],["kayles"],["kayo"],["kayoed"],["kayoes"],["kayoing"],["kayos"],["kays"],["kazachki"],["kazachok"],["kazatski"],["kazatsky"],["kazoo"],["kazoos"],["kbar"],["kbars"],["kea"],["keas"],["kebab"],["kebabs"],["kebar"],["kebars"],["kebbie"],["kebbies"],["kebbock"],["kebbocks"],["kebbuck"],["kebbucks"],["keblah"],["keblahs"],["kebob"],["kebobs"],["keck"],["kecked"],["kecking"],["keckle"],["keckled"],["keckles"],["keckling"],["kecks"],["keddah"],["keddahs"],["kedge"],["kedged"],["kedgeree"],["kedges"],["kedging"],["keef"],["keefs"],["keek"],["keeked"],["keeking"],["keeks"],["keel"],["keelage"],["keelages"],["keelboat"],["keeled"],["keelhale"],["keelhaul"],["keeling"],["keelless"],["keels"],["keelson"],["keelsons"],["keen"],["keened"],["keener"],["keeners"],["keenest"],["keening"],["keenly"],["keenness"],["keens"],["keep"],["keepable"],["keeper"],["keepers"],["keeping"],["keepings"],["keeps"],["keepsake"],["keeshond"],["keester"],["keesters"],["keet"],["keets"],["keeve"],["keeves"],["kef"],["kefir"],["kefirs"],["kefs"],["keg"],["kegeler"],["kegelers"],["kegler"],["keglers"],["kegling"],["keglings"],["kegs"],["keir"],["keirs"],["keister"],["keisters"],["keitloa"],["keitloas"],["kelep"],["keleps"],["kellies"],["kelly"],["keloid"],["keloidal"],["keloids"],["kelp"],["kelped"],["kelpie"],["kelpies"],["kelping"],["kelps"],["kelpy"],["kelson"],["kelsons"],["kelter"],["kelters"],["kelvin"],["kelvins"],["kemp"],["kemps"],["kempt"],["ken"],["kenaf"],["kenafs"],["kench"],["kenches"],["kendo"],["kendos"],["kenned"],["kennel"],["kenneled"],["kennels"],["kenning"],["kennings"],["keno"],["kenos"],["kenosis"],["kenotic"],["kenotron"],["kens"],["kent"],["kep"],["kephalin"],["kepi"],["kepis"],["kepped"],["keppen"],["kepping"],["keps"],["kept"],["keramic"],["keramics"],["keratin"],["keratins"],["keratoid"],["keratoma"],["keratose"],["kerb"],["kerbed"],["kerbing"],["kerbs"],["kerchief"],["kerchoo"],["kerf"],["kerfed"],["kerfing"],["kerfs"],["kermes"],["kermess"],["kermis"],["kermises"],["kern"],["kerne"],["kerned"],["kernel"],["kerneled"],["kernels"],["kernes"],["kerning"],["kernite"],["kernites"],["kerns"],["kerogen"],["kerogens"],["kerosene"],["kerosine"],["kerplunk"],["kerria"],["kerrias"],["kerries"],["kerry"],["kersey"],["kerseys"],["kerygma"],["kestrel"],["kestrels"],["ketch"],["ketches"],["ketchup"],["ketchups"],["ketene"],["ketenes"],["keto"],["ketol"],["ketols"],["ketone"],["ketones"],["ketonic"],["ketose"],["ketoses"],["ketosis"],["ketotic"],["kettle"],["kettles"],["kev"],["kevel"],["kevels"],["kevil"],["kevils"],["kex"],["kexes"],["key"],["keyboard"],["keycard"],["keycards"],["keyed"],["keyhole"],["keyholes"],["keying"],["keyless"],["keynote"],["keynoted"],["keynoter"],["keynotes"],["keypad"],["keypads"],["keypunch"],["keys"],["keyset"],["keysets"],["keyster"],["keysters"],["keystone"],["keyway"],["keyways"],["keyword"],["keywords"],["khaddar"],["khaddars"],["khadi"],["khadis"],["khaf"],["khafs"],["khaki"],["khakis"],["khalif"],["khalifa"],["khalifas"],["khalifs"],["khamseen"],["khamsin"],["khamsins"],["khan"],["khanate"],["khanates"],["khans"],["khaph"],["khaphs"],["khat"],["khats"],["khazen"],["khazenim"],["khazens"],["kheda"],["khedah"],["khedahs"],["khedas"],["khedival"],["khedive"],["khedives"],["khet"],["kheth"],["kheths"],["khets"],["khi"],["khirkah"],["khirkahs"],["khis"],["khoum"],["khoums"],["kiang"],["kiangs"],["kiaugh"],["kiaughs"],["kibbe"],["kibbeh"],["kibbehs"],["kibbes"],["kibble"],["kibbled"],["kibbles"],["kibbling"],["kibbutz"],["kibe"],["kibei"],["kibeis"],["kibes"],["kibitz"],["kibitzed"],["kibitzer"],["kibitzes"],["kibla"],["kiblah"],["kiblahs"],["kiblas"],["kibosh"],["kiboshed"],["kiboshes"],["kick"],["kickable"],["kickback"],["kickball"],["kicked"],["kicker"],["kickers"],["kickier"],["kickiest"],["kicking"],["kickoff"],["kickoffs"],["kicks"],["kickshaw"],["kickup"],["kickups"],["kicky"],["kid"],["kidded"],["kidder"],["kidders"],["kiddie"],["kiddies"],["kidding"],["kiddish"],["kiddo"],["kiddoes"],["kiddos"],["kiddush"],["kiddy"],["kidlike"],["kidnap"],["kidnaped"],["kidnapee"],["kidnaper"],["kidnaps"],["kidney"],["kidneys"],["kids"],["kidskin"],["kidskins"],["kidvid"],["kidvids"],["kief"],["kiefs"],["kielbasa"],["kielbasi"],["kielbasy"],["kier"],["kiers"],["kiester"],["kiesters"],["kif"],["kifs"],["kike"],["kikes"],["kilim"],["kilims"],["kill"],["killdee"],["killdeer"],["killdees"],["killed"],["killer"],["killers"],["killick"],["killicks"],["killie"],["killies"],["killing"],["killings"],["killjoy"],["killjoys"],["killock"],["killocks"],["kills"],["kiln"],["kilned"],["kilning"],["kilns"],["kilo"],["kilobar"],["kilobars"],["kilobaud"],["kilobit"],["kilobits"],["kilobyte"],["kilogram"],["kilomole"],["kilorad"],["kilorads"],["kilos"],["kiloton"],["kilotons"],["kilovolt"],["kilowatt"],["kilt"],["kilted"],["kilter"],["kilters"],["kiltie"],["kilties"],["kilting"],["kiltings"],["kilts"],["kilty"],["kimchee"],["kimchees"],["kimchi"],["kimchis"],["kimono"],["kimonoed"],["kimonos"],["kin"],["kina"],["kinas"],["kinase"],["kinases"],["kind"],["kinder"],["kindest"],["kindle"],["kindled"],["kindler"],["kindlers"],["kindles"],["kindless"],["kindlier"],["kindling"],["kindly"],["kindness"],["kindred"],["kindreds"],["kinds"],["kine"],["kinema"],["kinemas"],["kines"],["kineses"],["kinesic"],["kinesics"],["kinesis"],["kinetic"],["kinetics"],["kinetin"],["kinetins"],["kinfolk"],["kinfolks"],["king"],["kingbird"],["kingbolt"],["kingcup"],["kingcups"],["kingdom"],["kingdoms"],["kinged"],["kingfish"],["kinghood"],["kinging"],["kingless"],["kinglet"],["kinglets"],["kinglier"],["kinglike"],["kingly"],["kingpin"],["kingpins"],["kingpost"],["kings"],["kingship"],["kingside"],["kingwood"],["kinin"],["kinins"],["kink"],["kinkajou"],["kinked"],["kinkier"],["kinkiest"],["kinkily"],["kinking"],["kinks"],["kinky"],["kino"],["kinos"],["kins"],["kinsfolk"],["kinship"],["kinships"],["kinsman"],["kinsmen"],["kiosk"],["kiosks"],["kip"],["kipped"],["kippen"],["kipper"],["kippered"],["kipperer"],["kippers"],["kipping"],["kips"],["kipskin"],["kipskins"],["kir"],["kirigami"],["kirk"],["kirkman"],["kirkmen"],["kirks"],["kirmess"],["kirn"],["kirned"],["kirning"],["kirns"],["kirs"],["kirsch"],["kirsches"],["kirtle"],["kirtled"],["kirtles"],["kishka"],["kishkas"],["kishke"],["kishkes"],["kismat"],["kismats"],["kismet"],["kismetic"],["kismets"],["kiss"],["kissable"],["kissably"],["kissed"],["kisser"],["kissers"],["kisses"],["kissing"],["kissy"],["kist"],["kistful"],["kistfuls"],["kists"],["kit"],["kitchen"],["kitchens"],["kite"],["kited"],["kitelike"],["kiter"],["kiters"],["kites"],["kith"],["kithara"],["kitharas"],["kithe"],["kithed"],["kithes"],["kithing"],["kiths"],["kiting"],["kitling"],["kitlings"],["kits"],["kitsch"],["kitsches"],["kitschy"],["kitted"],["kittel"],["kitten"],["kittened"],["kittens"],["kitties"],["kitting"],["kittle"],["kittled"],["kittler"],["kittles"],["kittlest"],["kittling"],["kitty"],["kiva"],["kivas"],["kiwi"],["kiwis"],["klatch"],["klatches"],["klatsch"],["klavern"],["klaverns"],["klaxon"],["klaxons"],["kleagle"],["kleagles"],["klepht"],["klephtic"],["klephts"],["klezmer"],["klister"],["klisters"],["klong"],["klongs"],["kloof"],["kloofs"],["kludge"],["kludges"],["kluge"],["kluges"],["klutz"],["klutzes"],["klutzier"],["klutzy"],["klystron"],["knack"],["knacked"],["knacker"],["knackers"],["knackery"],["knacking"],["knacks"],["knap"],["knapped"],["knapper"],["knappers"],["knapping"],["knaps"],["knapsack"],["knapweed"],["knar"],["knarred"],["knarry"],["knars"],["knaur"],["knaurs"],["knave"],["knavery"],["knaves"],["knavish"],["knawel"],["knawels"],["knead"],["kneaded"],["kneader"],["kneaders"],["kneading"],["kneads"],["knee"],["kneecap"],["kneecaps"],["kneed"],["kneehole"],["kneeing"],["kneel"],["kneeled"],["kneeler"],["kneelers"],["kneeling"],["kneels"],["kneepad"],["kneepads"],["kneepan"],["kneepans"],["knees"],["knell"],["knelled"],["knelling"],["knells"],["knelt"],["knesset"],["knessets"],["knew"],["knickers"],["knife"],["knifed"],["knifer"],["knifers"],["knifes"],["knifing"],["knight"],["knighted"],["knightly"],["knights"],["knish"],["knishes"],["knit"],["knits"],["knitted"],["knitter"],["knitters"],["knitting"],["knitwear"],["knives"],["knob"],["knobbed"],["knobbier"],["knobbly"],["knobby"],["knoblike"],["knobs"],["knock"],["knocked"],["knocker"],["knockers"],["knocking"],["knockoff"],["knockout"],["knocks"],["knoll"],["knolled"],["knoller"],["knollers"],["knolling"],["knolls"],["knolly"],["knop"],["knopped"],["knops"],["knosp"],["knosps"],["knot"],["knothole"],["knotless"],["knotlike"],["knots"],["knotted"],["knotter"],["knotters"],["knottier"],["knottily"],["knotting"],["knotty"],["knotweed"],["knout"],["knouted"],["knouting"],["knouts"],["know"],["knowable"],["knower"],["knowers"],["knowing"],["knowings"],["known"],["knowns"],["knows"],["knubbier"],["knubby"],["knuckle"],["knuckled"],["knuckler"],["knuckles"],["knuckly"],["knur"],["knurl"],["knurled"],["knurlier"],["knurling"],["knurls"],["knurly"],["knurs"],["koa"],["koala"],["koalas"],["koan"],["koans"],["koas"],["kob"],["kobo"],["kobold"],["kobolds"],["kobs"],["koel"],["koels"],["kohl"],["kohlrabi"],["kohls"],["koine"],["koines"],["kokanee"],["kokanees"],["kola"],["kolacky"],["kolas"],["kolbasi"],["kolbasis"],["kolbassi"],["kolhoz"],["kolhozes"],["kolhozy"],["kolinski"],["kolinsky"],["kolkhos"],["kolkhosy"],["kolkhoz"],["kolkhozy"],["kolkoz"],["kolkozes"],["kolkozy"],["kolo"],["kolos"],["komatik"],["komatiks"],["komondor"],["konk"],["konked"],["konking"],["konks"],["koodoo"],["koodoos"],["kook"],["kookie"],["kookier"],["kookiest"],["kooks"],["kooky"],["kop"],["kopeck"],["kopecks"],["kopek"],["kopeks"],["koph"],["kophs"],["kopje"],["kopjes"],["koppa"],["koppas"],["koppie"],["koppies"],["kops"],["kor"],["korat"],["korats"],["kors"],["korun"],["koruna"],["korunas"],["koruny"],["kos"],["kosher"],["koshered"],["koshers"],["koss"],["koto"],["kotos"],["kotow"],["kotowed"],["kotower"],["kotowers"],["kotowing"],["kotows"],["koumis"],["koumises"],["koumiss"],["koumys"],["koumyses"],["koumyss"],["kousso"],["koussos"],["kowtow"],["kowtowed"],["kowtower"],["kowtows"],["kraal"],["kraaled"],["kraaling"],["kraals"],["kraft"],["krafts"],["krait"],["kraits"],["kraken"],["krakens"],["krater"],["kraters"],["kraut"],["krauts"],["kreep"],["kreeps"],["kremlin"],["kremlins"],["kreplach"],["kreutzer"],["kreuzer"],["kreuzers"],["krill"],["krills"],["krimmer"],["krimmers"],["kris"],["krises"],["krona"],["krone"],["kronen"],["kroner"],["kronor"],["kronur"],["kroon"],["krooni"],["kroons"],["krubi"],["krubis"],["krubut"],["krubuts"],["kruller"],["krullers"],["krumhorn"],["kryolite"],["kryolith"],["krypton"],["kryptons"],["kuchen"],["kudo"],["kudos"],["kudu"],["kudus"],["kudzu"],["kudzus"],["kue"],["kues"],["kugel"],["kugels"],["kukri"],["kukris"],["kulak"],["kulaki"],["kulaks"],["kultur"],["kulturs"],["kumiss"],["kumisses"],["kummel"],["kummels"],["kumquat"],["kumquats"],["kumys"],["kumyses"],["kunzite"],["kunzites"],["kurbash"],["kurgan"],["kurgans"],["kurta"],["kurtas"],["kurtosis"],["kuru"],["kurus"],["kusso"],["kussos"],["kuvasz"],["kuvaszok"],["kvas"],["kvases"],["kvass"],["kvasses"],["kvetch"],["kvetched"],["kvetches"],["kwacha"],["kwanza"],["kwanzas"],["kyack"],["kyacks"],["kyak"],["kyaks"],["kyanise"],["kyanised"],["kyanises"],["kyanite"],["kyanites"],["kyanize"],["kyanized"],["kyanizes"],["kyar"],["kyars"],["kyat"],["kyats"],["kylikes"],["kylix"],["kymogram"],["kyphoses"],["kyphosis"],["kyphotic"],["kyrie"],["kyries"],["kyte"],["kytes"],["kythe"],["kythed"],["kythes"],["kything"],["la"],["laager"],["laagered"],["laagers"],["lab"],["labara"],["labarum"],["labarums"],["labdanum"],["label"],["labeled"],["labeler"],["labelers"],["labeling"],["labella"],["labelled"],["labeller"],["labellum"],["labels"],["labia"],["labial"],["labially"],["labials"],["labiate"],["labiated"],["labiates"],["labile"],["lability"],["labium"],["labor"],["labored"],["laborer"],["laborers"],["laboring"],["laborite"],["labors"],["labour"],["laboured"],["labourer"],["labours"],["labra"],["labrador"],["labret"],["labrets"],["labroid"],["labroids"],["labrum"],["labrums"],["labrusca"],["labs"],["laburnum"],["lac"],["lace"],["laced"],["laceless"],["lacelike"],["lacer"],["lacerate"],["lacers"],["lacertid"],["laces"],["lacewing"],["lacewood"],["lacework"],["lacey"],["laches"],["lacier"],["laciest"],["lacily"],["laciness"],["lacing"],["lacings"],["lack"],["lackaday"],["lacked"],["lacker"],["lackered"],["lackers"],["lackey"],["lackeyed"],["lackeys"],["lacking"],["lacks"],["laconic"],["laconism"],["lacquer"],["lacquers"],["lacquey"],["lacqueys"],["lacrimal"],["lacrosse"],["lacs"],["lactam"],["lactams"],["lactary"],["lactase"],["lactases"],["lactate"],["lactated"],["lactates"],["lacteal"],["lacteals"],["lactean"],["lacteous"],["lactic"],["lactone"],["lactones"],["lactonic"],["lactose"],["lactoses"],["lacuna"],["lacunae"],["lacunal"],["lacunar"],["lacunars"],["lacunary"],["lacunas"],["lacunate"],["lacune"],["lacunes"],["lacunose"],["lacy"],["lad"],["ladanum"],["ladanums"],["ladder"],["laddered"],["ladders"],["laddie"],["laddies"],["lade"],["laded"],["laden"],["ladened"],["ladening"],["ladens"],["lader"],["laders"],["lades"],["ladies"],["lading"],["ladings"],["ladino"],["ladinos"],["ladle"],["ladled"],["ladleful"],["ladler"],["ladlers"],["ladles"],["ladling"],["ladron"],["ladrone"],["ladrones"],["ladrons"],["lads"],["lady"],["ladybird"],["ladybug"],["ladybugs"],["ladyfish"],["ladyhood"],["ladyish"],["ladykin"],["ladykins"],["ladylike"],["ladylove"],["ladypalm"],["ladyship"],["laetrile"],["laevo"],["lag"],["lagan"],["lagans"],["lagend"],["lagends"],["lager"],["lagered"],["lagering"],["lagers"],["laggard"],["laggards"],["lagged"],["lagger"],["laggers"],["lagging"],["laggings"],["lagnappe"],["lagoon"],["lagoonal"],["lagoons"],["lags"],["laguna"],["lagunas"],["lagune"],["lagunes"],["lahar"],["lahars"],["laic"],["laical"],["laically"],["laich"],["laichs"],["laicise"],["laicised"],["laicises"],["laicism"],["laicisms"],["laicize"],["laicized"],["laicizes"],["laics"],["laid"],["laigh"],["laighs"],["lain"],["lair"],["laird"],["lairdly"],["lairds"],["laired"],["lairing"],["lairs"],["laitance"],["laith"],["laithly"],["laities"],["laity"],["lake"],["laked"],["lakeport"],["laker"],["lakers"],["lakes"],["lakeside"],["lakh"],["lakhs"],["lakier"],["lakiest"],["laking"],["lakings"],["laky"],["lall"],["lallan"],["lalland"],["lallands"],["lallans"],["lalled"],["lalling"],["lalls"],["lallygag"],["lam"],["lama"],["lamas"],["lamasery"],["lamb"],["lambast"],["lambaste"],["lambasts"],["lambda"],["lambdas"],["lambdoid"],["lambed"],["lambency"],["lambent"],["lamber"],["lambers"],["lambert"],["lamberts"],["lambie"],["lambies"],["lambing"],["lambkill"],["lambkin"],["lambkins"],["lamblike"],["lambs"],["lambskin"],["lame"],["lamed"],["lamedh"],["lamedhs"],["lameds"],["lamella"],["lamellae"],["lamellar"],["lamellas"],["lamely"],["lameness"],["lament"],["lamented"],["lamenter"],["laments"],["lamer"],["lames"],["lamest"],["lamia"],["lamiae"],["lamias"],["lamina"],["laminae"],["laminal"],["laminar"],["laminary"],["laminas"],["laminate"],["laming"],["laminose"],["laminous"],["lamister"],["lammed"],["lamming"],["lamp"],["lampad"],["lampads"],["lampas"],["lampases"],["lamped"],["lampers"],["lamping"],["lampion"],["lampions"],["lampoon"],["lampoons"],["lamppost"],["lamprey"],["lampreys"],["lamps"],["lampyrid"],["lams"],["lamster"],["lamsters"],["lanai"],["lanais"],["lanate"],["lanated"],["lance"],["lanced"],["lancelet"],["lancer"],["lancers"],["lances"],["lancet"],["lanceted"],["lancets"],["lanciers"],["lancing"],["land"],["landau"],["landaus"],["landed"],["lander"],["landers"],["landfall"],["landfill"],["landform"],["landing"],["landings"],["landlady"],["landler"],["landlers"],["landless"],["landlord"],["landman"],["landmark"],["landmass"],["landmen"],["lands"],["landside"],["landskip"],["landslid"],["landslip"],["landsman"],["landsmen"],["landward"],["lane"],["lanely"],["lanes"],["lang"],["langlauf"],["langley"],["langleys"],["langrage"],["langrel"],["langrels"],["langshan"],["langsyne"],["language"],["langue"],["langues"],["languet"],["languets"],["languid"],["languish"],["languor"],["languors"],["langur"],["langurs"],["laniard"],["laniards"],["laniary"],["lanital"],["lanitals"],["lank"],["lanker"],["lankest"],["lankier"],["lankiest"],["lankily"],["lankly"],["lankness"],["lanky"],["lanner"],["lanneret"],["lanners"],["lanolin"],["lanoline"],["lanolins"],["lanose"],["lanosity"],["lantana"],["lantanas"],["lantern"],["lanterns"],["lanthorn"],["lanugo"],["lanugos"],["lanyard"],["lanyards"],["lap"],["lapboard"],["lapdog"],["lapdogs"],["lapel"],["lapeled"],["lapelled"],["lapels"],["lapful"],["lapfuls"],["lapidary"],["lapidate"],["lapides"],["lapidify"],["lapidist"],["lapilli"],["lapillus"],["lapin"],["lapins"],["lapis"],["lapises"],["lapped"],["lapper"],["lappered"],["lappers"],["lappet"],["lappeted"],["lappets"],["lapping"],["laps"],["lapsable"],["lapse"],["lapsed"],["lapser"],["lapsers"],["lapses"],["lapsible"],["lapsing"],["lapsus"],["laptop"],["laptops"],["lapwing"],["lapwings"],["lar"],["larboard"],["larcener"],["larceny"],["larch"],["larches"],["lard"],["larded"],["larder"],["larders"],["lardier"],["lardiest"],["larding"],["lardlike"],["lardon"],["lardons"],["lardoon"],["lardoons"],["lards"],["lardy"],["laree"],["larees"],["lares"],["largando"],["large"],["largely"],["larger"],["larges"],["largess"],["largesse"],["largest"],["largish"],["largo"],["largos"],["lari"],["lariat"],["lariated"],["lariats"],["larine"],["laris"],["lark"],["larked"],["larker"],["larkers"],["larkier"],["larkiest"],["larking"],["larkish"],["larks"],["larksome"],["larkspur"],["larky"],["larrigan"],["larrikin"],["larrup"],["larruped"],["larruper"],["larrups"],["lars"],["larum"],["larums"],["larva"],["larvae"],["larval"],["larvas"],["laryngal"],["larynges"],["larynx"],["larynxes"],["las"],["lasagna"],["lasagnas"],["lasagne"],["lasagnes"],["lascar"],["lascars"],["lase"],["lased"],["laser"],["lasers"],["lases"],["lash"],["lashed"],["lasher"],["lashers"],["lashes"],["lashing"],["lashings"],["lashins"],["lashkar"],["lashkars"],["lasing"],["lass"],["lasses"],["lassie"],["lassies"],["lasso"],["lassoed"],["lassoer"],["lassoers"],["lassoes"],["lassoing"],["lassos"],["last"],["lasted"],["laster"],["lasters"],["lasting"],["lastings"],["lastly"],["lasts"],["lat"],["latakia"],["latakias"],["latch"],["latched"],["latches"],["latchet"],["latchets"],["latching"],["latchkey"],["late"],["lated"],["lateen"],["lateener"],["lateens"],["lately"],["laten"],["latency"],["latened"],["lateness"],["latening"],["latens"],["latent"],["latently"],["latents"],["later"],["laterad"],["lateral"],["laterals"],["laterite"],["laterize"],["latest"],["latests"],["latewood"],["latex"],["latexes"],["lath"],["lathe"],["lathed"],["lather"],["lathered"],["latherer"],["lathers"],["lathery"],["lathes"],["lathi"],["lathier"],["lathiest"],["lathing"],["lathings"],["lathis"],["laths"],["lathwork"],["lathy"],["lati"],["latices"],["latigo"],["latigoes"],["latigos"],["latinity"],["latinize"],["latino"],["latinos"],["latish"],["latitude"],["latke"],["latkes"],["latosol"],["latosols"],["latria"],["latrias"],["latrine"],["latrines"],["lats"],["latten"],["lattens"],["latter"],["latterly"],["lattice"],["latticed"],["lattices"],["lattin"],["lattins"],["lauan"],["lauans"],["laud"],["laudable"],["laudably"],["laudanum"],["laudator"],["lauded"],["lauder"],["lauders"],["lauding"],["lauds"],["laugh"],["laughed"],["laugher"],["laughers"],["laughing"],["laughs"],["laughter"],["launce"],["launces"],["launch"],["launched"],["launcher"],["launches"],["launder"],["launders"],["laundry"],["laura"],["laurae"],["lauras"],["laureate"],["laurel"],["laureled"],["laurels"],["lauwine"],["lauwines"],["lav"],["lava"],["lavabo"],["lavaboes"],["lavabos"],["lavage"],["lavages"],["lavalava"],["lavalier"],["lavalike"],["lavas"],["lavation"],["lavatory"],["lave"],["laved"],["laveer"],["laveered"],["laveers"],["lavender"],["laver"],["laverock"],["lavers"],["laves"],["laving"],["lavish"],["lavished"],["lavisher"],["lavishes"],["lavishly"],["lavrock"],["lavrocks"],["lavs"],["law"],["lawbook"],["lawbooks"],["lawed"],["lawful"],["lawfully"],["lawgiver"],["lawine"],["lawines"],["lawing"],["lawings"],["lawless"],["lawlike"],["lawmaker"],["lawman"],["lawmen"],["lawn"],["lawns"],["lawny"],["laws"],["lawsuit"],["lawsuits"],["lawyer"],["lawyered"],["lawyerly"],["lawyers"],["lax"],["laxation"],["laxative"],["laxer"],["laxest"],["laxities"],["laxity"],["laxly"],["laxness"],["lay"],["layabout"],["layaway"],["layaways"],["layed"],["layer"],["layerage"],["layered"],["layering"],["layers"],["layette"],["layettes"],["laying"],["layman"],["laymen"],["layoff"],["layoffs"],["layout"],["layouts"],["layover"],["layovers"],["lays"],["layup"],["layups"],["laywoman"],["laywomen"],["lazar"],["lazaret"],["lazarets"],["lazars"],["laze"],["lazed"],["lazes"],["lazied"],["lazier"],["lazies"],["laziest"],["lazily"],["laziness"],["lazing"],["lazuli"],["lazulis"],["lazulite"],["lazurite"],["lazy"],["lazying"],["lazyish"],["lea"],["leach"],["leachate"],["leached"],["leacher"],["leachers"],["leaches"],["leachier"],["leaching"],["leachy"],["lead"],["leaded"],["leaden"],["leadenly"],["leader"],["leaders"],["leadier"],["leadiest"],["leading"],["leadings"],["leadless"],["leadman"],["leadmen"],["leadoff"],["leadoffs"],["leads"],["leadsman"],["leadsmen"],["leadwork"],["leadwort"],["leady"],["leaf"],["leafage"],["leafages"],["leafed"],["leafier"],["leafiest"],["leafing"],["leafless"],["leaflet"],["leaflets"],["leaflike"],["leafs"],["leafworm"],["leafy"],["league"],["leagued"],["leaguer"],["leaguers"],["leagues"],["leaguing"],["leak"],["leakage"],["leakages"],["leaked"],["leaker"],["leakers"],["leakier"],["leakiest"],["leakily"],["leaking"],["leakless"],["leaks"],["leaky"],["leal"],["leally"],["lealties"],["lealty"],["lean"],["leaned"],["leaner"],["leaners"],["leanest"],["leaning"],["leanings"],["leanly"],["leanness"],["leans"],["leant"],["leap"],["leaped"],["leaper"],["leapers"],["leapfrog"],["leaping"],["leaps"],["leapt"],["lear"],["learier"],["leariest"],["learn"],["learned"],["learner"],["learners"],["learning"],["learns"],["learnt"],["lears"],["leary"],["leas"],["leasable"],["lease"],["leased"],["leaser"],["leasers"],["leases"],["leash"],["leashed"],["leashes"],["leashing"],["leasing"],["leasings"],["least"],["leasts"],["leather"],["leathern"],["leathers"],["leathery"],["leave"],["leaved"],["leaven"],["leavened"],["leavens"],["leaver"],["leavers"],["leaves"],["leavier"],["leaviest"],["leaving"],["leavings"],["leavy"],["leben"],["lebens"],["lech"],["lechayim"],["leched"],["lecher"],["lechered"],["lechers"],["lechery"],["leches"],["leching"],["lecithin"],["lectern"],["lecterns"],["lectin"],["lectins"],["lection"],["lections"],["lector"],["lectors"],["lecture"],["lectured"],["lecturer"],["lectures"],["lecythi"],["lecythis"],["lecythus"],["led"],["ledge"],["ledger"],["ledgers"],["ledges"],["ledgier"],["ledgiest"],["ledgy"],["lee"],["leeboard"],["leech"],["leeched"],["leeches"],["leeching"],["leek"],["leeks"],["leer"],["leered"],["leerier"],["leeriest"],["leerily"],["leering"],["leers"],["leery"],["lees"],["leet"],["leets"],["leeward"],["leewards"],["leeway"],["leeways"],["left"],["lefter"],["leftest"],["lefties"],["leftish"],["leftism"],["leftisms"],["leftist"],["leftists"],["leftover"],["lefts"],["leftward"],["leftwing"],["lefty"],["leg"],["legacies"],["legacy"],["legal"],["legalese"],["legalise"],["legalism"],["legalist"],["legality"],["legalize"],["legally"],["legals"],["legate"],["legated"],["legatee"],["legatees"],["legates"],["legatine"],["legating"],["legation"],["legato"],["legator"],["legators"],["legatos"],["legend"],["legendry"],["legends"],["leger"],["legerity"],["legers"],["leges"],["legged"],["leggier"],["leggiero"],["leggiest"],["leggin"],["legging"],["leggings"],["leggins"],["leggy"],["leghorn"],["leghorns"],["legible"],["legibly"],["legion"],["legions"],["legist"],["legists"],["legit"],["legits"],["legless"],["leglike"],["legman"],["legmen"],["legong"],["legongs"],["legroom"],["legrooms"],["legs"],["legume"],["legumes"],["legumin"],["legumins"],["legwork"],["legworks"],["lehayim"],["lehayims"],["lehr"],["lehrs"],["lehua"],["lehuas"],["lei"],["leis"],["leister"],["leisters"],["leisure"],["leisured"],["leisures"],["lek"],["leke"],["leks"],["leku"],["lekvar"],["lekvars"],["lekythi"],["lekythoi"],["lekythos"],["lekythus"],["leman"],["lemans"],["lemma"],["lemmas"],["lemmata"],["lemming"],["lemmings"],["lemnisci"],["lemon"],["lemonade"],["lemonish"],["lemons"],["lemony"],["lempira"],["lempiras"],["lemur"],["lemures"],["lemurine"],["lemuroid"],["lemurs"],["lend"],["lendable"],["lender"],["lenders"],["lending"],["lends"],["lenes"],["length"],["lengthen"],["lengths"],["lengthy"],["lenience"],["leniency"],["lenient"],["lenis"],["lenities"],["lenitive"],["lenity"],["leno"],["lenos"],["lens"],["lense"],["lensed"],["lenses"],["lensing"],["lensless"],["lent"],["lentando"],["lenten"],["lentic"],["lenticel"],["lentigo"],["lentil"],["lentils"],["lentisk"],["lentisks"],["lento"],["lentoid"],["lentos"],["leone"],["leones"],["leonine"],["leopard"],["leopards"],["leotard"],["leotards"],["leper"],["lepers"],["lepidote"],["leporid"],["leporids"],["leporine"],["leprose"],["leprosy"],["leprotic"],["leprous"],["lept"],["lepta"],["lepton"],["leptonic"],["leptons"],["lesbian"],["lesbians"],["lesion"],["lesioned"],["lesions"],["less"],["lessee"],["lessees"],["lessen"],["lessened"],["lessens"],["lesser"],["lesson"],["lessoned"],["lessons"],["lessor"],["lessors"],["lest"],["let"],["letch"],["letched"],["letches"],["letching"],["letdown"],["letdowns"],["lethal"],["lethally"],["lethals"],["lethargy"],["lethe"],["lethean"],["lethes"],["lets"],["letted"],["letter"],["lettered"],["letterer"],["letters"],["letting"],["lettuce"],["lettuces"],["letup"],["letups"],["leu"],["leucemia"],["leucemic"],["leucin"],["leucine"],["leucines"],["leucins"],["leucite"],["leucites"],["leucitic"],["leucoma"],["leucomas"],["leud"],["leudes"],["leuds"],["leukemia"],["leukemic"],["leukoma"],["leukomas"],["leukon"],["leukons"],["leukoses"],["leukosis"],["leukotic"],["lev"],["leva"],["levant"],["levanted"],["levanter"],["levants"],["levator"],["levators"],["levee"],["leveed"],["leveeing"],["levees"],["level"],["leveled"],["leveler"],["levelers"],["leveling"],["levelled"],["leveller"],["levelly"],["levels"],["lever"],["leverage"],["levered"],["leveret"],["leverets"],["levering"],["levers"],["leviable"],["levied"],["levier"],["leviers"],["levies"],["levigate"],["levin"],["levins"],["levirate"],["levitate"],["levities"],["levity"],["levo"],["levodopa"],["levogyre"],["levulin"],["levulins"],["levulose"],["levy"],["levying"],["lewd"],["lewder"],["lewdest"],["lewdly"],["lewdness"],["lewis"],["lewises"],["lewisite"],["lewisson"],["lex"],["lexeme"],["lexemes"],["lexemic"],["lexes"],["lexica"],["lexical"],["lexicon"],["lexicons"],["lexis"],["ley"],["leys"],["lez"],["lezes"],["lezzie"],["lezzies"],["lezzy"],["li"],["liable"],["liaise"],["liaised"],["liaises"],["liaising"],["liaison"],["liaisons"],["liana"],["lianas"],["liane"],["lianes"],["liang"],["liangs"],["lianoid"],["liar"],["liard"],["liards"],["liars"],["lib"],["libation"],["libber"],["libbers"],["libeccio"],["libel"],["libelant"],["libeled"],["libelee"],["libelees"],["libeler"],["libelers"],["libeling"],["libelist"],["libelled"],["libellee"],["libeller"],["libelous"],["libels"],["liber"],["liberal"],["liberals"],["liberate"],["libers"],["liberty"],["libido"],["libidos"],["liblab"],["liblabs"],["libra"],["librae"],["library"],["libras"],["librate"],["librated"],["librates"],["libretti"],["libretto"],["libri"],["libs"],["lice"],["licence"],["licenced"],["licencee"],["licencer"],["licences"],["license"],["licensed"],["licensee"],["licenser"],["licenses"],["licensor"],["licente"],["licenti"],["lich"],["lichee"],["lichees"],["lichen"],["lichened"],["lichenin"],["lichens"],["liches"],["lichi"],["lichis"],["licht"],["lichted"],["lichting"],["lichtly"],["lichts"],["licit"],["licitly"],["lick"],["licked"],["licker"],["lickers"],["licking"],["lickings"],["licks"],["lickspit"],["licorice"],["lictor"],["lictors"],["lid"],["lidar"],["lidars"],["lidded"],["lidding"],["lidless"],["lido"],["lidos"],["lids"],["lie"],["lied"],["lieder"],["lief"],["liefer"],["liefest"],["liefly"],["liege"],["liegeman"],["liegemen"],["lieges"],["lien"],["lienable"],["lienal"],["liens"],["lientery"],["lier"],["lierne"],["liernes"],["liers"],["lies"],["lieu"],["lieus"],["lieve"],["liever"],["lievest"],["life"],["lifeboat"],["lifeful"],["lifeless"],["lifelike"],["lifeline"],["lifelong"],["lifer"],["lifers"],["lifetime"],["lifeway"],["lifeways"],["lifework"],["lift"],["liftable"],["lifted"],["lifter"],["lifters"],["liftgate"],["lifting"],["liftman"],["liftmen"],["liftoff"],["liftoffs"],["lifts"],["ligament"],["ligan"],["ligand"],["ligands"],["ligans"],["ligase"],["ligases"],["ligate"],["ligated"],["ligates"],["ligating"],["ligation"],["ligative"],["ligature"],["liger"],["ligers"],["light"],["lighted"],["lighten"],["lightens"],["lighter"],["lighters"],["lightest"],["lightful"],["lighting"],["lightish"],["lightly"],["lights"],["ligneous"],["lignify"],["lignin"],["lignins"],["lignite"],["lignites"],["lignitic"],["ligroin"],["ligroine"],["ligroins"],["ligula"],["ligulae"],["ligular"],["ligulas"],["ligulate"],["ligule"],["ligules"],["liguloid"],["ligure"],["ligures"],["likable"],["like"],["likeable"],["liked"],["likelier"],["likely"],["liken"],["likened"],["likeness"],["likening"],["likens"],["liker"],["likers"],["likes"],["likest"],["likewise"],["liking"],["likings"],["likuta"],["lilac"],["lilacs"],["lilied"],["lilies"],["lilliput"],["lilt"],["lilted"],["lilting"],["lilts"],["lily"],["lilylike"],["lima"],["limacine"],["limacon"],["limacons"],["liman"],["limans"],["limas"],["limb"],["limba"],["limbas"],["limbate"],["limbeck"],["limbecks"],["limbed"],["limber"],["limbered"],["limberer"],["limberly"],["limbers"],["limbi"],["limbic"],["limbier"],["limbiest"],["limbing"],["limbless"],["limbo"],["limbos"],["limbs"],["limbus"],["limbuses"],["limby"],["lime"],["limeade"],["limeades"],["limed"],["limekiln"],["limeless"],["limen"],["limens"],["limerick"],["limes"],["limey"],["limeys"],["limier"],["limiest"],["limina"],["liminal"],["liminess"],["liming"],["limit"],["limitary"],["limited"],["limiteds"],["limiter"],["limiters"],["limites"],["limiting"],["limits"],["limmer"],["limmers"],["limn"],["limned"],["limner"],["limners"],["limnetic"],["limnic"],["limning"],["limns"],["limo"],["limonene"],["limonite"],["limos"],["limp"],["limpa"],["limpas"],["limped"],["limper"],["limpers"],["limpest"],["limpet"],["limpets"],["limpid"],["limpidly"],["limping"],["limpkin"],["limpkins"],["limply"],["limpness"],["limps"],["limpsey"],["limpsier"],["limpsy"],["limuli"],["limuloid"],["limulus"],["limy"],["lin"],["linable"],["linac"],["linacs"],["linage"],["linages"],["linalol"],["linalols"],["linalool"],["linchpin"],["lindane"],["lindanes"],["linden"],["lindens"],["lindies"],["lindy"],["line"],["lineable"],["lineage"],["lineages"],["lineal"],["lineally"],["linear"],["linearly"],["lineate"],["lineated"],["linebred"],["linecut"],["linecuts"],["lined"],["lineless"],["linelike"],["lineman"],["linemen"],["linen"],["linens"],["lineny"],["liner"],["liners"],["lines"],["linesman"],["linesmen"],["lineup"],["lineups"],["liney"],["ling"],["linga"],["lingam"],["lingams"],["lingas"],["lingcod"],["lingcods"],["linger"],["lingered"],["lingerer"],["lingerie"],["lingers"],["lingier"],["lingiest"],["lingo"],["lingoes"],["lings"],["lingua"],["linguae"],["lingual"],["linguals"],["linguine"],["linguini"],["linguist"],["lingy"],["linier"],["liniest"],["liniment"],["linin"],["lining"],["linings"],["linins"],["link"],["linkable"],["linkage"],["linkages"],["linkboy"],["linkboys"],["linked"],["linker"],["linkers"],["linking"],["linkman"],["linkmen"],["links"],["linksman"],["linksmen"],["linkup"],["linkups"],["linkwork"],["linky"],["linn"],["linnet"],["linnets"],["linns"],["lino"],["linocut"],["linocuts"],["linoleum"],["linos"],["lins"],["linsang"],["linsangs"],["linseed"],["linseeds"],["linsey"],["linseys"],["linstock"],["lint"],["lintel"],["lintels"],["linter"],["linters"],["lintier"],["lintiest"],["lintless"],["lintol"],["lintols"],["lints"],["linty"],["linum"],["linums"],["linuron"],["linurons"],["liny"],["lion"],["lioness"],["lionfish"],["lionise"],["lionised"],["lioniser"],["lionises"],["lionize"],["lionized"],["lionizer"],["lionizes"],["lionlike"],["lions"],["lip"],["lipase"],["lipases"],["lipid"],["lipide"],["lipides"],["lipidic"],["lipids"],["lipin"],["lipins"],["lipless"],["liplike"],["lipocyte"],["lipoid"],["lipoidal"],["lipoids"],["lipoma"],["lipomas"],["lipomata"],["liposome"],["lipped"],["lippen"],["lippened"],["lippens"],["lipper"],["lippered"],["lippers"],["lippier"],["lippiest"],["lipping"],["lippings"],["lippy"],["lips"],["lipstick"],["liquate"],["liquated"],["liquates"],["liquefy"],["liqueur"],["liqueurs"],["liquid"],["liquidly"],["liquids"],["liquify"],["liquor"],["liquored"],["liquors"],["lira"],["liras"],["lire"],["liripipe"],["lirot"],["liroth"],["lis"],["lisente"],["lisle"],["lisles"],["lisp"],["lisped"],["lisper"],["lispers"],["lisping"],["lisps"],["lissom"],["lissome"],["lissomly"],["list"],["listable"],["listed"],["listel"],["listels"],["listen"],["listened"],["listener"],["listens"],["lister"],["listers"],["listing"],["listings"],["listless"],["lists"],["lit"],["litai"],["litanies"],["litany"],["litas"],["litchi"],["litchis"],["liter"],["literacy"],["literal"],["literals"],["literary"],["literate"],["literati"],["liters"],["litharge"],["lithe"],["lithely"],["lithemia"],["lithemic"],["lither"],["lithest"],["lithia"],["lithias"],["lithic"],["lithium"],["lithiums"],["litho"],["lithoed"],["lithoid"],["lithoing"],["lithos"],["lithosol"],["litigant"],["litigate"],["litmus"],["litmuses"],["litoral"],["litotes"],["litotic"],["litre"],["litres"],["lits"],["litten"],["litter"],["littered"],["litterer"],["litters"],["littery"],["little"],["littler"],["littles"],["littlest"],["littlish"],["littoral"],["litu"],["liturgic"],["liturgy"],["livable"],["live"],["liveable"],["lived"],["livelier"],["livelily"],["livelong"],["lively"],["liven"],["livened"],["livener"],["liveners"],["liveness"],["livening"],["livens"],["liver"],["liveried"],["liveries"],["liverish"],["livers"],["livery"],["lives"],["livest"],["livetrap"],["livid"],["lividity"],["lividly"],["livier"],["liviers"],["living"],["livingly"],["livings"],["livre"],["livres"],["livyer"],["livyers"],["lixivia"],["lixivial"],["lixivium"],["lizard"],["lizards"],["llama"],["llamas"],["llano"],["llanos"],["lo"],["loach"],["loaches"],["load"],["loaded"],["loader"],["loaders"],["loading"],["loadings"],["loads"],["loadstar"],["loaf"],["loafed"],["loafer"],["loafers"],["loafing"],["loafs"],["loam"],["loamed"],["loamier"],["loamiest"],["loaming"],["loamless"],["loams"],["loamy"],["loan"],["loanable"],["loaned"],["loaner"],["loaners"],["loaning"],["loanings"],["loans"],["loanword"],["loath"],["loathe"],["loathed"],["loather"],["loathers"],["loathes"],["loathful"],["loathing"],["loathly"],["loaves"],["lob"],["lobar"],["lobate"],["lobated"],["lobately"],["lobation"],["lobbed"],["lobber"],["lobbers"],["lobbied"],["lobbies"],["lobbing"],["lobby"],["lobbyer"],["lobbyers"],["lobbygow"],["lobbying"],["lobbyism"],["lobbyist"],["lobe"],["lobed"],["lobefin"],["lobefins"],["lobelia"],["lobelias"],["lobeline"],["lobes"],["loblolly"],["lobo"],["lobos"],["lobotomy"],["lobs"],["lobster"],["lobsters"],["lobstick"],["lobular"],["lobulate"],["lobule"],["lobules"],["lobulose"],["lobworm"],["lobworms"],["loca"],["local"],["locale"],["locales"],["localise"],["localism"],["localist"],["localite"],["locality"],["localize"],["locally"],["locals"],["locate"],["located"],["locater"],["locaters"],["locates"],["locating"],["location"],["locative"],["locator"],["locators"],["loch"],["lochia"],["lochial"],["lochs"],["loci"],["lock"],["lockable"],["lockage"],["lockages"],["lockbox"],["locked"],["locker"],["lockers"],["locket"],["lockets"],["locking"],["lockjaw"],["lockjaws"],["locknut"],["locknuts"],["lockout"],["lockouts"],["lockram"],["lockrams"],["locks"],["lockstep"],["lockup"],["lockups"],["loco"],["locoed"],["locoes"],["locofoco"],["locoing"],["locoism"],["locoisms"],["locomote"],["locos"],["locoweed"],["locular"],["loculate"],["locule"],["loculed"],["locules"],["loculi"],["loculus"],["locum"],["locums"],["locus"],["locust"],["locusta"],["locustae"],["locustal"],["locusts"],["locution"],["locutory"],["lode"],["loden"],["lodens"],["lodes"],["lodestar"],["lodge"],["lodged"],["lodger"],["lodgers"],["lodges"],["lodging"],["lodgings"],["lodgment"],["lodicule"],["loess"],["loessal"],["loesses"],["loessial"],["loft"],["lofted"],["lofter"],["lofters"],["loftier"],["loftiest"],["loftily"],["lofting"],["loftless"],["lofts"],["lofty"],["log"],["logan"],["logania"],["logans"],["logbook"],["logbooks"],["loge"],["loges"],["loggats"],["logged"],["logger"],["loggers"],["loggets"],["loggia"],["loggias"],["loggie"],["loggier"],["loggiest"],["logging"],["loggings"],["loggy"],["logia"],["logic"],["logical"],["logician"],["logicise"],["logicize"],["logics"],["logier"],["logiest"],["logily"],["loginess"],["logion"],["logions"],["logistic"],["logjam"],["logjams"],["logo"],["logogram"],["logoi"],["logomach"],["logos"],["logotype"],["logotypy"],["logroll"],["logrolls"],["logs"],["logway"],["logways"],["logwood"],["logwoods"],["logy"],["loin"],["loins"],["loiter"],["loitered"],["loiterer"],["loiters"],["loll"],["lolled"],["loller"],["lollers"],["lollies"],["lolling"],["lollipop"],["lollop"],["lolloped"],["lollops"],["lolls"],["lolly"],["lollygag"],["lollypop"],["lomein"],["lomeins"],["loment"],["lomenta"],["loments"],["lomentum"],["lone"],["lonelier"],["lonelily"],["lonely"],["loneness"],["loner"],["loners"],["lonesome"],["long"],["longan"],["longans"],["longboat"],["longbow"],["longbows"],["longe"],["longed"],["longeing"],["longer"],["longeron"],["longers"],["longes"],["longest"],["longhair"],["longhand"],["longhead"],["longhorn"],["longies"],["longing"],["longings"],["longish"],["longleaf"],["longline"],["longly"],["longness"],["longs"],["longship"],["longsome"],["longspur"],["longtime"],["longueur"],["longways"],["longwise"],["loo"],["loobies"],["looby"],["looed"],["looey"],["looeys"],["loof"],["loofa"],["loofah"],["loofahs"],["loofas"],["loofs"],["looie"],["looies"],["looing"],["look"],["lookdown"],["looked"],["looker"],["lookers"],["looking"],["lookout"],["lookouts"],["looks"],["lookup"],["lookups"],["loom"],["loomed"],["looming"],["looms"],["loon"],["looney"],["looneys"],["loonier"],["loonies"],["looniest"],["loons"],["loony"],["loop"],["looped"],["looper"],["loopers"],["loophole"],["loopier"],["loopiest"],["looping"],["loops"],["loopy"],["loos"],["loose"],["loosed"],["loosely"],["loosen"],["loosened"],["loosener"],["loosens"],["looser"],["looses"],["loosest"],["loosing"],["loot"],["looted"],["looter"],["looters"],["looting"],["loots"],["lop"],["lope"],["loped"],["loper"],["lopers"],["lopes"],["loping"],["lopped"],["lopper"],["loppered"],["loppers"],["loppier"],["loppiest"],["lopping"],["loppy"],["lops"],["lopsided"],["lopstick"],["loquat"],["loquats"],["loral"],["loran"],["lorans"],["lord"],["lorded"],["lording"],["lordings"],["lordless"],["lordlier"],["lordlike"],["lordling"],["lordly"],["lordoma"],["lordomas"],["lordoses"],["lordosis"],["lordotic"],["lords"],["lordship"],["lore"],["loreal"],["lores"],["lorgnon"],["lorgnons"],["lorica"],["loricae"],["loricate"],["lories"],["lorikeet"],["lorimer"],["lorimers"],["loriner"],["loriners"],["loris"],["lorises"],["lorn"],["lornness"],["lorries"],["lorry"],["lory"],["losable"],["lose"],["losel"],["losels"],["loser"],["losers"],["loses"],["losing"],["losingly"],["losings"],["loss"],["losses"],["lossy"],["lost"],["lostness"],["lot"],["lota"],["lotah"],["lotahs"],["lotas"],["loth"],["lothario"],["lothsome"],["loti"],["lotic"],["lotion"],["lotions"],["lotos"],["lotoses"],["lots"],["lotted"],["lottery"],["lotting"],["lotto"],["lottos"],["lotus"],["lotuses"],["louche"],["loud"],["louden"],["loudened"],["loudens"],["louder"],["loudest"],["loudish"],["loudlier"],["loudly"],["loudness"],["lough"],["loughs"],["louie"],["louies"],["louis"],["lounge"],["lounged"],["lounger"],["loungers"],["lounges"],["lounging"],["loungy"],["loup"],["loupe"],["louped"],["loupen"],["loupes"],["louping"],["loups"],["lour"],["loured"],["louring"],["lours"],["loury"],["louse"],["loused"],["louses"],["lousier"],["lousiest"],["lousily"],["lousing"],["lousy"],["lout"],["louted"],["louting"],["loutish"],["louts"],["louver"],["louvered"],["louvers"],["louvre"],["louvres"],["lovable"],["lovably"],["lovage"],["lovages"],["lovat"],["lovats"],["love"],["loveable"],["loveably"],["lovebird"],["lovebug"],["lovebugs"],["loved"],["loveless"],["lovelier"],["lovelies"],["lovelily"],["lovelock"],["lovelorn"],["lovely"],["lover"],["loverly"],["lovers"],["loves"],["lovesick"],["lovesome"],["lovevine"],["loving"],["lovingly"],["low"],["lowball"],["lowballs"],["lowborn"],["lowboy"],["lowboys"],["lowbred"],["lowbrow"],["lowbrows"],["lowdown"],["lowdowns"],["lowe"],["lowed"],["lower"],["lowered"],["lowering"],["lowers"],["lowery"],["lowes"],["lowest"],["lowing"],["lowings"],["lowish"],["lowland"],["lowlands"],["lowlier"],["lowliest"],["lowlife"],["lowlifer"],["lowlifes"],["lowlives"],["lowly"],["lown"],["lowness"],["lowrider"],["lows"],["lowse"],["lox"],["loxed"],["loxes"],["loxing"],["loyal"],["loyaler"],["loyalest"],["loyalism"],["loyalist"],["loyally"],["loyalty"],["lozenge"],["lozenges"],["luau"],["luaus"],["lubber"],["lubberly"],["lubbers"],["lube"],["lubes"],["lubric"],["lubrical"],["lucarne"],["lucarnes"],["luce"],["lucence"],["lucences"],["lucency"],["lucent"],["lucently"],["lucern"],["lucerne"],["lucernes"],["lucerns"],["luces"],["lucid"],["lucidity"],["lucidly"],["lucifer"],["lucifers"],["luck"],["lucked"],["luckie"],["luckier"],["luckies"],["luckiest"],["luckily"],["lucking"],["luckless"],["lucks"],["lucky"],["lucre"],["lucres"],["luculent"],["lude"],["ludes"],["ludic"],["lues"],["luetic"],["luetics"],["luff"],["luffa"],["luffas"],["luffed"],["luffing"],["luffs"],["lug"],["luge"],["luged"],["lugeing"],["luges"],["luggage"],["luggages"],["lugged"],["lugger"],["luggers"],["luggie"],["luggies"],["lugging"],["lugs"],["lugsail"],["lugsails"],["lugworm"],["lugworms"],["lukewarm"],["lull"],["lullaby"],["lulled"],["lulling"],["lulls"],["lulu"],["lulus"],["lum"],["lumbago"],["lumbagos"],["lumbar"],["lumbars"],["lumber"],["lumbered"],["lumberer"],["lumbers"],["lumen"],["lumenal"],["lumens"],["lumina"],["luminal"],["luminary"],["luminist"],["luminous"],["lummox"],["lummoxes"],["lump"],["lumped"],["lumpen"],["lumpens"],["lumper"],["lumpers"],["lumpfish"],["lumpier"],["lumpiest"],["lumpily"],["lumping"],["lumpish"],["lumps"],["lumpy"],["lums"],["luna"],["lunacies"],["lunacy"],["lunar"],["lunarian"],["lunars"],["lunas"],["lunate"],["lunated"],["lunately"],["lunatic"],["lunatics"],["lunation"],["lunch"],["lunched"],["luncheon"],["luncher"],["lunchers"],["lunches"],["lunching"],["lune"],["lunes"],["lunet"],["lunets"],["lunette"],["lunettes"],["lung"],["lungan"],["lungans"],["lunge"],["lunged"],["lungee"],["lungees"],["lunger"],["lungers"],["lunges"],["lungfish"],["lungi"],["lunging"],["lungis"],["lungs"],["lungworm"],["lungwort"],["lungyi"],["lungyis"],["lunier"],["lunies"],["luniest"],["lunk"],["lunker"],["lunkers"],["lunkhead"],["lunks"],["lunt"],["lunted"],["lunting"],["lunts"],["lunula"],["lunulae"],["lunular"],["lunulate"],["lunule"],["lunules"],["luny"],["lupanar"],["lupanars"],["lupin"],["lupine"],["lupines"],["lupins"],["lupous"],["lupulin"],["lupulins"],["lupus"],["lupuses"],["lurch"],["lurched"],["lurcher"],["lurchers"],["lurches"],["lurching"],["lurdan"],["lurdane"],["lurdanes"],["lurdans"],["lure"],["lured"],["lurer"],["lurers"],["lures"],["lurid"],["luridly"],["luring"],["lurk"],["lurked"],["lurker"],["lurkers"],["lurking"],["lurks"],["luscious"],["lush"],["lushed"],["lusher"],["lushes"],["lushest"],["lushing"],["lushly"],["lushness"],["lust"],["lusted"],["luster"],["lustered"],["lusters"],["lustful"],["lustier"],["lustiest"],["lustily"],["lusting"],["lustra"],["lustral"],["lustrate"],["lustre"],["lustred"],["lustres"],["lustring"],["lustrous"],["lustrum"],["lustrums"],["lusts"],["lusty"],["lusus"],["lususes"],["lutanist"],["lute"],["lutea"],["luteal"],["lutecium"],["luted"],["lutein"],["luteins"],["lutenist"],["luteolin"],["luteous"],["lutes"],["lutetium"],["luteum"],["luthern"],["lutherns"],["luthier"],["luthiers"],["luting"],["lutings"],["lutist"],["lutists"],["luv"],["luvs"],["lux"],["luxate"],["luxated"],["luxates"],["luxating"],["luxation"],["luxe"],["luxes"],["luxuries"],["luxury"],["lwei"],["lweis"],["lyard"],["lyart"],["lyase"],["lyases"],["lycea"],["lycee"],["lycees"],["lyceum"],["lyceums"],["lychee"],["lychees"],["lychnis"],["lycopene"],["lycopod"],["lycopods"],["lyddite"],["lyddites"],["lye"],["lyes"],["lying"],["lyingly"],["lyings"],["lymph"],["lymphoid"],["lymphoma"],["lymphs"],["lyncean"],["lynch"],["lynched"],["lyncher"],["lynchers"],["lynches"],["lynching"],["lynchpin"],["lynx"],["lynxes"],["lyophile"],["lyrate"],["lyrated"],["lyrately"],["lyre"],["lyrebird"],["lyres"],["lyric"],["lyrical"],["lyricise"],["lyricism"],["lyricist"],["lyricize"],["lyrics"],["lyriform"],["lyrism"],["lyrisms"],["lyrist"],["lyrists"],["lysate"],["lysates"],["lyse"],["lysed"],["lyses"],["lysin"],["lysine"],["lysines"],["lysing"],["lysins"],["lysis"],["lysogen"],["lysogens"],["lysogeny"],["lysosome"],["lysozyme"],["lyssa"],["lyssas"],["lytic"],["lytta"],["lyttae"],["lyttas"],["ma"],["maar"],["maars"],["mabe"],["mabes"],["mac"],["macaber"],["macabre"],["macaco"],["macacos"],["macadam"],["macadams"],["macaque"],["macaques"],["macaroni"],["macaroon"],["macaw"],["macaws"],["maccabaw"],["maccaboy"],["macchia"],["macchie"],["maccoboy"],["mace"],["maced"],["macer"],["macerate"],["macers"],["maces"],["mach"],["mache"],["maches"],["machete"],["machetes"],["machine"],["machined"],["machines"],["machismo"],["macho"],["machos"],["machree"],["machrees"],["machs"],["machzor"],["machzors"],["macing"],["mack"],["mackerel"],["mackinaw"],["mackle"],["mackled"],["mackles"],["mackling"],["macks"],["macle"],["macled"],["macles"],["macon"],["macons"],["macrame"],["macrames"],["macro"],["macron"],["macrons"],["macros"],["macrural"],["macruran"],["macs"],["macula"],["maculae"],["macular"],["maculas"],["maculate"],["macule"],["maculed"],["macules"],["maculing"],["mad"],["madam"],["madame"],["madames"],["madams"],["madcap"],["madcaps"],["madded"],["madden"],["maddened"],["maddens"],["madder"],["madders"],["maddest"],["madding"],["maddish"],["made"],["madeira"],["madeiras"],["madhouse"],["madly"],["madman"],["madmen"],["madness"],["madonna"],["madonnas"],["madras"],["madrases"],["madre"],["madres"],["madrigal"],["madrona"],["madronas"],["madrone"],["madrones"],["madrono"],["madronos"],["mads"],["maduro"],["maduros"],["madwoman"],["madwomen"],["madwort"],["madworts"],["madzoon"],["madzoons"],["mae"],["maenad"],["maenades"],["maenadic"],["maenads"],["maes"],["maestoso"],["maestri"],["maestro"],["maestros"],["maffia"],["maffias"],["maffick"],["mafficks"],["mafia"],["mafias"],["mafic"],["mafiosi"],["mafioso"],["maftir"],["maftirs"],["mag"],["magazine"],["magdalen"],["mage"],["magenta"],["magentas"],["mages"],["maggot"],["maggots"],["maggoty"],["magi"],["magian"],["magians"],["magic"],["magical"],["magician"],["magicked"],["magics"],["magilp"],["magilps"],["magister"],["maglev"],["magma"],["magmas"],["magmata"],["magmatic"],["magnate"],["magnates"],["magnesia"],["magnesic"],["magnet"],["magnetic"],["magneto"],["magneton"],["magnetos"],["magnets"],["magnific"],["magnify"],["magnolia"],["magnum"],["magnums"],["magot"],["magots"],["magpie"],["magpies"],["mags"],["maguey"],["magueys"],["magus"],["maharaja"],["maharani"],["mahatma"],["mahatmas"],["mahimahi"],["mahjong"],["mahjongg"],["mahjongs"],["mahoe"],["mahoes"],["mahogany"],["mahonia"],["mahonias"],["mahout"],["mahouts"],["mahuang"],["mahuangs"],["mahzor"],["mahzorim"],["mahzors"],["maid"],["maiden"],["maidenly"],["maidens"],["maidhood"],["maidish"],["maids"],["maieutic"],["maigre"],["maihem"],["maihems"],["mail"],["mailable"],["mailbag"],["mailbags"],["mailbox"],["maile"],["mailed"],["mailer"],["mailers"],["mailes"],["mailing"],["mailings"],["maill"],["mailless"],["maillot"],["maillots"],["maills"],["mailman"],["mailmen"],["mails"],["maim"],["maimed"],["maimer"],["maimers"],["maiming"],["maims"],["main"],["mainland"],["mainline"],["mainly"],["mainmast"],["mains"],["mainsail"],["mainstay"],["maintain"],["maintop"],["maintops"],["maiolica"],["mair"],["mairs"],["maist"],["maists"],["maize"],["maizes"],["majagua"],["majaguas"],["majestic"],["majesty"],["majolica"],["major"],["majored"],["majoring"],["majority"],["majors"],["makable"],["makar"],["makars"],["make"],["makeable"],["makebate"],["makefast"],["maker"],["makers"],["makes"],["makeup"],["makeups"],["makimono"],["making"],["makings"],["mako"],["makos"],["makuta"],["malacca"],["malaccas"],["maladies"],["malady"],["malaise"],["malaises"],["malamute"],["malanga"],["malangas"],["malapert"],["malaprop"],["malar"],["malaria"],["malarial"],["malarian"],["malarias"],["malarkey"],["malarky"],["malaroma"],["malars"],["malate"],["malates"],["male"],["maleate"],["maleates"],["maledict"],["malefic"],["malemiut"],["malemute"],["maleness"],["males"],["malfed"],["malgre"],["malic"],["malice"],["malices"],["malign"],["maligned"],["maligner"],["malignly"],["maligns"],["malihini"],["maline"],["malines"],["malinger"],["malison"],["malisons"],["malkin"],["malkins"],["mall"],["mallard"],["mallards"],["malled"],["mallee"],["mallees"],["mallei"],["malleoli"],["mallet"],["mallets"],["malleus"],["malling"],["mallow"],["mallows"],["malls"],["malm"],["malmier"],["malmiest"],["malms"],["malmsey"],["malmseys"],["malmy"],["malodor"],["malodors"],["maloti"],["malposed"],["malt"],["maltase"],["maltases"],["malted"],["malteds"],["maltha"],["malthas"],["maltier"],["maltiest"],["malting"],["maltol"],["maltols"],["maltose"],["maltoses"],["maltreat"],["malts"],["maltster"],["malty"],["malvasia"],["mama"],["mamaliga"],["mamas"],["mamba"],["mambas"],["mambo"],["mamboed"],["mamboes"],["mamboing"],["mambos"],["mameluke"],["mamey"],["mameyes"],["mameys"],["mamie"],["mamies"],["mamluk"],["mamluks"],["mamma"],["mammae"],["mammal"],["mammals"],["mammary"],["mammas"],["mammate"],["mammati"],["mammatus"],["mammee"],["mammees"],["mammer"],["mammered"],["mammers"],["mammet"],["mammets"],["mammey"],["mammeys"],["mammie"],["mammies"],["mammilla"],["mammitis"],["mammock"],["mammocks"],["mammon"],["mammons"],["mammoth"],["mammoths"],["mammy"],["man"],["mana"],["manacle"],["manacled"],["manacles"],["manage"],["managed"],["manager"],["managers"],["manages"],["managing"],["manakin"],["manakins"],["manana"],["mananas"],["manas"],["manatee"],["manatees"],["manatoid"],["manche"],["manches"],["manchet"],["manchets"],["manciple"],["mandala"],["mandalas"],["mandalic"],["mandamus"],["mandarin"],["mandate"],["mandated"],["mandates"],["mandator"],["mandible"],["mandioca"],["mandola"],["mandolas"],["mandolin"],["mandrake"],["mandrel"],["mandrels"],["mandril"],["mandrill"],["mandrils"],["mane"],["maned"],["manege"],["maneges"],["maneless"],["manes"],["maneuver"],["manful"],["manfully"],["mangabey"],["mangaby"],["manganic"],["mange"],["mangel"],["mangels"],["manger"],["mangers"],["manges"],["mangey"],["mangier"],["mangiest"],["mangily"],["mangle"],["mangled"],["mangler"],["manglers"],["mangles"],["mangling"],["mango"],["mangoes"],["mangold"],["mangolds"],["mangonel"],["mangos"],["mangrove"],["mangy"],["manhole"],["manholes"],["manhood"],["manhoods"],["manhunt"],["manhunts"],["mania"],["maniac"],["maniacal"],["maniacs"],["manias"],["manic"],["manics"],["manicure"],["manifest"],["manifold"],["manihot"],["manihots"],["manikin"],["manikins"],["manila"],["manilas"],["manilla"],["manillas"],["manille"],["manilles"],["manioc"],["manioca"],["maniocas"],["maniocs"],["maniple"],["maniples"],["manito"],["manitos"],["manitou"],["manitous"],["manitu"],["manitus"],["mankind"],["manless"],["manlier"],["manliest"],["manlike"],["manlily"],["manly"],["manmade"],["manna"],["mannan"],["mannans"],["mannas"],["manned"],["manner"],["mannered"],["mannerly"],["manners"],["mannikin"],["manning"],["mannish"],["mannite"],["mannites"],["mannitic"],["mannitol"],["mannose"],["mannoses"],["mano"],["manor"],["manorial"],["manors"],["manos"],["manpack"],["manpower"],["manque"],["manrope"],["manropes"],["mans"],["mansard"],["mansards"],["manse"],["manses"],["mansion"],["mansions"],["manta"],["mantas"],["manteau"],["manteaus"],["manteaux"],["mantel"],["mantelet"],["mantels"],["mantes"],["mantic"],["mantid"],["mantids"],["mantilla"],["mantis"],["mantises"],["mantissa"],["mantle"],["mantled"],["mantles"],["mantlet"],["mantlets"],["mantling"],["mantra"],["mantrap"],["mantraps"],["mantras"],["mantric"],["mantua"],["mantuas"],["manual"],["manually"],["manuals"],["manuary"],["manubria"],["manumit"],["manumits"],["manure"],["manured"],["manurer"],["manurers"],["manures"],["manurial"],["manuring"],["manus"],["manward"],["manwards"],["manwise"],["many"],["manyfold"],["map"],["maple"],["maples"],["maplike"],["mapmaker"],["mappable"],["mapped"],["mapper"],["mappers"],["mapping"],["mappings"],["maps"],["maquette"],["maqui"],["maquis"],["mar"],["marabou"],["marabous"],["marabout"],["maraca"],["maracas"],["maranta"],["marantas"],["marasca"],["marascas"],["marasmic"],["marasmus"],["marathon"],["maraud"],["marauded"],["marauder"],["marauds"],["maravedi"],["marble"],["marbled"],["marbler"],["marblers"],["marbles"],["marblier"],["marbling"],["marbly"],["marc"],["marcato"],["marcel"],["marcels"],["march"],["marched"],["marchen"],["marcher"],["marchers"],["marches"],["marchesa"],["marchese"],["marchesi"],["marching"],["marcs"],["mare"],["maremma"],["maremme"],["marengo"],["mares"],["margaric"],["margarin"],["margay"],["margays"],["marge"],["margent"],["margents"],["marges"],["margin"],["marginal"],["margined"],["margins"],["margrave"],["maria"],["mariachi"],["marigold"],["marimba"],["marimbas"],["marina"],["marinade"],["marinara"],["marinas"],["marinate"],["marine"],["mariner"],["mariners"],["marines"],["mariposa"],["marish"],["marishes"],["marital"],["maritime"],["marjoram"],["mark"],["markdown"],["marked"],["markedly"],["marker"],["markers"],["market"],["marketed"],["marketer"],["markets"],["markhoor"],["markhor"],["markhors"],["marking"],["markings"],["markka"],["markkaa"],["markkas"],["marks"],["marksman"],["marksmen"],["markup"],["markups"],["marl"],["marled"],["marlier"],["marliest"],["marlin"],["marline"],["marlines"],["marling"],["marlings"],["marlins"],["marlite"],["marlites"],["marlitic"],["marls"],["marly"],["marmite"],["marmites"],["marmoset"],["marmot"],["marmots"],["maroon"],["marooned"],["maroons"],["marplot"],["marplots"],["marque"],["marquee"],["marquees"],["marques"],["marquess"],["marquis"],["marquise"],["marram"],["marrams"],["marrano"],["marranos"],["marred"],["marrer"],["marrers"],["marriage"],["married"],["marrieds"],["marrier"],["marriers"],["marries"],["marring"],["marron"],["marrons"],["marrow"],["marrowed"],["marrows"],["marrowy"],["marry"],["marrying"],["mars"],["marsala"],["marsalas"],["marse"],["marses"],["marsh"],["marshal"],["marshall"],["marshals"],["marshes"],["marshier"],["marshy"],["marsupia"],["mart"],["martagon"],["marted"],["martello"],["marten"],["martens"],["martial"],["martian"],["martians"],["martin"],["martinet"],["marting"],["martini"],["martinis"],["martins"],["martlet"],["martlets"],["marts"],["martyr"],["martyred"],["martyrly"],["martyrs"],["martyry"],["marvel"],["marveled"],["marvels"],["marvy"],["maryjane"],["marzipan"],["mas"],["mascara"],["mascaras"],["mascon"],["mascons"],["mascot"],["mascots"],["maser"],["masers"],["mash"],["mashed"],["masher"],["mashers"],["mashes"],["mashie"],["mashies"],["mashing"],["mashy"],["masjid"],["masjids"],["mask"],["maskable"],["masked"],["maskeg"],["maskegs"],["masker"],["maskers"],["masking"],["maskings"],["masklike"],["masks"],["mason"],["masoned"],["masonic"],["masoning"],["masonry"],["masons"],["masque"],["masquer"],["masquers"],["masques"],["mass"],["massa"],["massacre"],["massage"],["massaged"],["massager"],["massages"],["massas"],["masscult"],["masse"],["massed"],["massedly"],["masses"],["masseter"],["masseur"],["masseurs"],["masseuse"],["massicot"],["massier"],["massiest"],["massif"],["massifs"],["massing"],["massive"],["massless"],["massy"],["mast"],["mastaba"],["mastabah"],["mastabas"],["masted"],["master"],["mastered"],["masterly"],["masters"],["mastery"],["masthead"],["mastic"],["mastiche"],["mastics"],["mastiff"],["mastiffs"],["masting"],["mastitic"],["mastitis"],["mastix"],["mastixes"],["mastless"],["mastlike"],["mastodon"],["mastoid"],["mastoids"],["masts"],["masurium"],["mat"],["matador"],["matadors"],["match"],["matchbox"],["matched"],["matcher"],["matchers"],["matches"],["matching"],["matchup"],["matchups"],["mate"],["mated"],["mateless"],["matelote"],["mater"],["material"],["materiel"],["maternal"],["maters"],["mates"],["mateship"],["matey"],["mateys"],["math"],["maths"],["matilda"],["matildas"],["matin"],["matinal"],["matinee"],["matinees"],["matiness"],["mating"],["matings"],["matins"],["matless"],["matrass"],["matres"],["matrices"],["matrix"],["matrixes"],["matron"],["matronal"],["matronly"],["matrons"],["mats"],["matsah"],["matsahs"],["matt"],["matte"],["matted"],["mattedly"],["matter"],["mattered"],["matters"],["mattery"],["mattes"],["mattin"],["matting"],["mattings"],["mattins"],["mattock"],["mattocks"],["mattoid"],["mattoids"],["mattrass"],["mattress"],["matts"],["maturate"],["mature"],["matured"],["maturely"],["maturer"],["matures"],["maturest"],["maturing"],["maturity"],["matza"],["matzah"],["matzahs"],["matzas"],["matzo"],["matzoh"],["matzohs"],["matzoon"],["matzoons"],["matzos"],["matzot"],["matzoth"],["maud"],["maudlin"],["mauds"],["mauger"],["maugre"],["maul"],["mauled"],["mauler"],["maulers"],["mauling"],["mauls"],["maumet"],["maumetry"],["maumets"],["maun"],["maund"],["maunder"],["maunders"],["maundies"],["maunds"],["maundy"],["mausolea"],["maut"],["mauts"],["mauve"],["mauves"],["maven"],["mavens"],["maverick"],["mavie"],["mavies"],["mavin"],["mavins"],["mavis"],["mavises"],["maw"],["mawed"],["mawing"],["mawkish"],["mawn"],["maws"],["maxi"],["maxicoat"],["maxilla"],["maxillae"],["maxillas"],["maxim"],["maxima"],["maximal"],["maximals"],["maximin"],["maximins"],["maximise"],["maximite"],["maximize"],["maxims"],["maximum"],["maximums"],["maxis"],["maxixe"],["maxixes"],["maxwell"],["maxwells"],["may"],["maya"],["mayan"],["mayapple"],["mayas"],["maybe"],["maybes"],["maybush"],["mayday"],["maydays"],["mayed"],["mayest"],["mayflies"],["mayfly"],["mayhap"],["mayhem"],["mayhems"],["maying"],["mayings"],["mayo"],["mayor"],["mayoral"],["mayoress"],["mayors"],["mayos"],["maypole"],["maypoles"],["maypop"],["maypops"],["mays"],["mayst"],["mayvin"],["mayvins"],["mayweed"],["mayweeds"],["mazaedia"],["mazard"],["mazards"],["maze"],["mazed"],["mazedly"],["mazelike"],["mazer"],["mazers"],["mazes"],["mazier"],["maziest"],["mazily"],["maziness"],["mazing"],["mazourka"],["mazuma"],["mazumas"],["mazurka"],["mazurkas"],["mazy"],["mazzard"],["mazzards"],["mbira"],["mbiras"],["me"],["mead"],["meadow"],["meadows"],["meadowy"],["meads"],["meager"],["meagerly"],["meagre"],["meagrely"],["meal"],["mealie"],["mealier"],["mealies"],["mealiest"],["mealless"],["meals"],["mealtime"],["mealworm"],["mealy"],["mealybug"],["mean"],["meander"],["meanders"],["meaner"],["meaners"],["meanest"],["meanie"],["meanies"],["meaning"],["meanings"],["meanly"],["meanness"],["means"],["meant"],["meantime"],["meany"],["measle"],["measled"],["measles"],["measlier"],["measly"],["measure"],["measured"],["measurer"],["measures"],["meat"],["meatal"],["meatball"],["meathead"],["meatier"],["meatiest"],["meatily"],["meatless"],["meatloaf"],["meatman"],["meatmen"],["meats"],["meatus"],["meatuses"],["meaty"],["mecca"],["meccas"],["mechanic"],["meconium"],["med"],["medaka"],["medakas"],["medal"],["medaled"],["medaling"],["medalist"],["medalled"],["medallic"],["medals"],["meddle"],["meddled"],["meddler"],["meddlers"],["meddles"],["meddling"],["medevac"],["medevacs"],["medflies"],["medfly"],["media"],["mediacy"],["mediad"],["mediae"],["medial"],["medially"],["medials"],["median"],["medianly"],["medians"],["mediant"],["mediants"],["medias"],["mediate"],["mediated"],["mediates"],["mediator"],["medic"],["medicaid"],["medical"],["medicals"],["medicare"],["medicate"],["medicine"],["medick"],["medicks"],["medico"],["medicos"],["medics"],["medieval"],["medii"],["medina"],["medinas"],["mediocre"],["meditate"],["medium"],["mediums"],["medius"],["medlar"],["medlars"],["medley"],["medleys"],["medulla"],["medullae"],["medullar"],["medullas"],["medusa"],["medusae"],["medusal"],["medusan"],["medusans"],["medusas"],["medusoid"],["meed"],["meeds"],["meek"],["meeker"],["meekest"],["meekly"],["meekness"],["meet"],["meeter"],["meeters"],["meeting"],["meetings"],["meetly"],["meetness"],["meets"],["megabar"],["megabars"],["megabit"],["megabits"],["megabuck"],["megabyte"],["megadose"],["megadyne"],["megalith"],["megalops"],["megapod"],["megapode"],["megapods"],["megass"],["megasse"],["megasses"],["megaton"],["megatons"],["megavolt"],["megawatt"],["megillah"],["megilp"],["megilph"],["megilphs"],["megilps"],["megohm"],["megohms"],["megrim"],["megrims"],["meikle"],["meinie"],["meinies"],["meiny"],["meioses"],["meiosis"],["meiotic"],["mel"],["melamdim"],["melamed"],["melamine"],["melange"],["melanges"],["melanian"],["melanic"],["melanics"],["melanin"],["melanins"],["melanism"],["melanist"],["melanite"],["melanize"],["melanoid"],["melanoma"],["melanous"],["meld"],["melded"],["melder"],["melders"],["melding"],["melds"],["melee"],["melees"],["melic"],["melilite"],["melilot"],["melilots"],["melinite"],["melisma"],["melismas"],["mell"],["melled"],["mellific"],["melling"],["mellow"],["mellowed"],["mellower"],["mellowly"],["mellows"],["mells"],["melodeon"],["melodia"],["melodias"],["melodic"],["melodica"],["melodies"],["melodise"],["melodist"],["melodize"],["melody"],["meloid"],["meloids"],["melon"],["melons"],["mels"],["melt"],["meltable"],["meltage"],["meltages"],["meltdown"],["melted"],["melter"],["melters"],["melting"],["melton"],["meltons"],["melts"],["mem"],["member"],["membered"],["members"],["membrane"],["memento"],["mementos"],["memo"],["memoir"],["memoirs"],["memorial"],["memories"],["memorize"],["memory"],["memos"],["mems"],["memsahib"],["men"],["menace"],["menaced"],["menacer"],["menacers"],["menaces"],["menacing"],["menad"],["menads"],["menage"],["menages"],["menarche"],["menazon"],["menazons"],["mend"],["mendable"],["mended"],["mender"],["menders"],["mendigo"],["mendigos"],["mending"],["mendings"],["mends"],["menfolk"],["menfolks"],["menhaden"],["menhir"],["menhirs"],["menial"],["menially"],["menials"],["meninges"],["meninx"],["meniscal"],["menisci"],["meniscus"],["meno"],["menology"],["menorah"],["menorahs"],["mensa"],["mensae"],["mensal"],["mensas"],["mensch"],["menschen"],["mensches"],["mense"],["mensed"],["menseful"],["menses"],["mensing"],["menstrua"],["mensural"],["menswear"],["menta"],["mental"],["mentally"],["menthene"],["menthol"],["menthols"],["mention"],["mentions"],["mentor"],["mentored"],["mentors"],["mentum"],["menu"],["menus"],["meou"],["meoued"],["meouing"],["meous"],["meow"],["meowed"],["meowing"],["meows"],["mephitic"],["mephitis"],["mercapto"],["mercer"],["mercers"],["mercery"],["merchant"],["mercies"],["merciful"],["mercuric"],["mercury"],["mercy"],["merde"],["merdes"],["mere"],["merely"],["merengue"],["merer"],["meres"],["merest"],["merge"],["merged"],["mergence"],["merger"],["mergers"],["merges"],["merging"],["meridian"],["meringue"],["merino"],["merinos"],["merises"],["merisis"],["meristem"],["meristic"],["merit"],["merited"],["meriting"],["merits"],["merk"],["merks"],["merl"],["merle"],["merles"],["merlin"],["merlins"],["merlon"],["merlons"],["merlot"],["merlots"],["merls"],["mermaid"],["mermaids"],["merman"],["mermen"],["meropia"],["meropias"],["meropic"],["merrier"],["merriest"],["merrily"],["merry"],["mesa"],["mesally"],["mesarch"],["mesas"],["mescal"],["mescals"],["mesdames"],["meseemed"],["meseems"],["mesh"],["meshed"],["meshes"],["meshier"],["meshiest"],["meshing"],["meshuga"],["meshugah"],["meshugga"],["meshugge"],["meshwork"],["meshy"],["mesial"],["mesially"],["mesian"],["mesic"],["mesmeric"],["mesnalty"],["mesne"],["mesnes"],["mesocarp"],["mesoderm"],["mesoglea"],["mesomere"],["meson"],["mesonic"],["mesons"],["mesophyl"],["mesosome"],["mesotron"],["mesquit"],["mesquite"],["mesquits"],["mess"],["message"],["messaged"],["messages"],["messan"],["messans"],["messed"],["messes"],["messiah"],["messiahs"],["messier"],["messiest"],["messily"],["messing"],["messman"],["messmate"],["messmen"],["messuage"],["messy"],["mestee"],["mestees"],["mesteso"],["mestesos"],["mestino"],["mestinos"],["mestiza"],["mestizas"],["mestizo"],["mestizos"],["met"],["meta"],["metage"],["metages"],["metal"],["metaled"],["metaling"],["metalise"],["metalist"],["metalize"],["metalled"],["metallic"],["metals"],["metamer"],["metamere"],["metamers"],["metaphor"],["metate"],["metates"],["metazoa"],["metazoal"],["metazoan"],["metazoic"],["metazoon"],["mete"],["meted"],["meteor"],["meteoric"],["meteors"],["metepa"],["metepas"],["meter"],["meterage"],["metered"],["metering"],["meters"],["metes"],["meth"],["methadon"],["methane"],["methanes"],["methanol"],["methinks"],["method"],["methodic"],["methods"],["methoxy"],["methoxyl"],["meths"],["methyl"],["methylal"],["methylic"],["methyls"],["meticais"],["metical"],["meticals"],["metier"],["metiers"],["meting"],["metis"],["metisse"],["metisses"],["metonym"],["metonyms"],["metonymy"],["metopae"],["metope"],["metopes"],["metopic"],["metopon"],["metopons"],["metre"],["metred"],["metres"],["metric"],["metrical"],["metrics"],["metrify"],["metring"],["metrist"],["metrists"],["metritis"],["metro"],["metros"],["mettle"],["mettled"],["mettles"],["metump"],["metumps"],["meuniere"],["mew"],["mewed"],["mewing"],["mewl"],["mewled"],["mewler"],["mewlers"],["mewling"],["mewls"],["mews"],["mezcal"],["mezcals"],["mezereon"],["mezereum"],["mezquit"],["mezquite"],["mezquits"],["mezuza"],["mezuzah"],["mezuzahs"],["mezuzas"],["mezuzot"],["mezuzoth"],["mezzo"],["mezzos"],["mho"],["mhos"],["mi"],["miaou"],["miaoued"],["miaouing"],["miaous"],["miaow"],["miaowed"],["miaowing"],["miaows"],["miasm"],["miasma"],["miasmal"],["miasmas"],["miasmata"],["miasmic"],["miasms"],["miaul"],["miauled"],["miauling"],["miauls"],["mib"],["mibs"],["mica"],["micas"],["micawber"],["mice"],["micell"],["micella"],["micellae"],["micellar"],["micelle"],["micelles"],["micells"],["miche"],["miched"],["miches"],["miching"],["mick"],["mickey"],["mickeys"],["mickle"],["mickler"],["mickles"],["micklest"],["micks"],["micra"],["micrify"],["micro"],["microbar"],["microbe"],["microbes"],["microbic"],["microbus"],["microdot"],["microhm"],["microhms"],["microlux"],["micromho"],["micron"],["microns"],["micrurgy"],["mid"],["midair"],["midairs"],["midbrain"],["midcult"],["midcults"],["midday"],["middays"],["midden"],["middens"],["middies"],["middle"],["middled"],["middler"],["middlers"],["middles"],["middling"],["middy"],["midfield"],["midge"],["midges"],["midget"],["midgets"],["midgut"],["midguts"],["midi"],["midiron"],["midirons"],["midis"],["midland"],["midlands"],["midleg"],["midlegs"],["midlife"],["midline"],["midlines"],["midlives"],["midmonth"],["midmost"],["midmosts"],["midnight"],["midnoon"],["midnoons"],["midpoint"],["midrange"],["midrash"],["midrib"],["midribs"],["midriff"],["midriffs"],["mids"],["midship"],["midships"],["midsize"],["midspace"],["midst"],["midstory"],["midsts"],["midterm"],["midterms"],["midtown"],["midtowns"],["midwatch"],["midway"],["midways"],["midweek"],["midweeks"],["midwife"],["midwifed"],["midwifes"],["midwived"],["midwives"],["midyear"],["midyears"],["mien"],["miens"],["miff"],["miffed"],["miffier"],["miffiest"],["miffing"],["miffs"],["miffy"],["mig"],["migg"],["miggle"],["miggles"],["miggs"],["might"],["mightier"],["mightily"],["mights"],["mighty"],["mignon"],["mignonne"],["mignons"],["migraine"],["migrant"],["migrants"],["migrate"],["migrated"],["migrates"],["migrator"],["migs"],["mihrab"],["mihrabs"],["mijnheer"],["mikado"],["mikados"],["mike"],["miked"],["mikes"],["miking"],["mikra"],["mikron"],["mikrons"],["mikvah"],["mikvahs"],["mikveh"],["mikvehs"],["mikvoth"],["mil"],["miladi"],["miladies"],["miladis"],["milady"],["milage"],["milages"],["milch"],["milchig"],["mild"],["milden"],["mildened"],["mildens"],["milder"],["mildest"],["mildew"],["mildewed"],["mildews"],["mildewy"],["mildly"],["mildness"],["mile"],["mileage"],["mileages"],["milepost"],["miler"],["milers"],["miles"],["milesimo"],["milfoil"],["milfoils"],["milia"],["miliaria"],["miliary"],["milieu"],["milieus"],["milieux"],["militant"],["military"],["militate"],["militia"],["militias"],["milium"],["milk"],["milked"],["milker"],["milkers"],["milkfish"],["milkier"],["milkiest"],["milkily"],["milking"],["milkmaid"],["milkman"],["milkmen"],["milks"],["milkshed"],["milksop"],["milksops"],["milkweed"],["milkwood"],["milkwort"],["milky"],["mill"],["millable"],["millage"],["millages"],["millcake"],["milldam"],["milldams"],["mille"],["milled"],["milleped"],["miller"],["millers"],["milles"],["millet"],["millets"],["milliard"],["milliare"],["milliary"],["millibar"],["millieme"],["millier"],["milliers"],["milligal"],["millilux"],["millime"],["millimes"],["millimho"],["milline"],["milliner"],["millines"],["milling"],["millings"],["milliohm"],["million"],["millions"],["milliped"],["millirem"],["millpond"],["millrace"],["millrun"],["millruns"],["mills"],["millwork"],["milneb"],["milnebs"],["milo"],["milord"],["milords"],["milos"],["milpa"],["milpas"],["milreis"],["mils"],["milt"],["milted"],["milter"],["milters"],["miltier"],["miltiest"],["milting"],["milts"],["milty"],["mim"],["mimbar"],["mimbars"],["mime"],["mimed"],["mimeo"],["mimeoed"],["mimeoing"],["mimeos"],["mimer"],["mimers"],["mimes"],["mimesis"],["mimetic"],["mimetite"],["mimic"],["mimical"],["mimicked"],["mimicker"],["mimicry"],["mimics"],["miming"],["mimosa"],["mimosas"],["mina"],["minable"],["minacity"],["minae"],["minaret"],["minarets"],["minas"],["minatory"],["mince"],["minced"],["mincer"],["mincers"],["minces"],["mincier"],["minciest"],["mincing"],["mincy"],["mind"],["minded"],["minder"],["minders"],["mindful"],["minding"],["mindless"],["minds"],["mindset"],["mindsets"],["mine"],["mineable"],["mined"],["miner"],["mineral"],["minerals"],["miners"],["mines"],["mingier"],["mingiest"],["mingle"],["mingled"],["mingler"],["minglers"],["mingles"],["mingling"],["mingy"],["mini"],["minibike"],["minibus"],["minicab"],["minicabs"],["minicar"],["minicars"],["minified"],["minifies"],["minify"],["minikin"],["minikins"],["minim"],["minima"],["minimal"],["minimals"],["minimax"],["minimise"],["minimize"],["minims"],["minimum"],["minimums"],["mining"],["minings"],["minion"],["minions"],["minipark"],["minis"],["minish"],["minished"],["minishes"],["miniski"],["miniskis"],["minister"],["ministry"],["minium"],["miniums"],["minivan"],["minivans"],["miniver"],["minivers"],["mink"],["minke"],["minkes"],["minks"],["minnies"],["minnow"],["minnows"],["minny"],["minor"],["minorca"],["minorcas"],["minored"],["minoring"],["minority"],["minors"],["minster"],["minsters"],["minstrel"],["mint"],["mintage"],["mintages"],["minted"],["minter"],["minters"],["mintier"],["mintiest"],["minting"],["mints"],["minty"],["minuend"],["minuends"],["minuet"],["minuets"],["minus"],["minuses"],["minute"],["minuted"],["minutely"],["minuter"],["minutes"],["minutest"],["minutia"],["minutiae"],["minutial"],["minuting"],["minx"],["minxes"],["minxish"],["minyan"],["minyanim"],["minyans"],["mioses"],["miosis"],["miotic"],["miotics"],["miquelet"],["mir"],["miracle"],["miracles"],["mirador"],["miradors"],["mirage"],["mirages"],["mire"],["mired"],["mires"],["mirex"],["mirexes"],["miri"],["mirier"],["miriest"],["miriness"],["miring"],["mirk"],["mirker"],["mirkest"],["mirkier"],["mirkiest"],["mirkily"],["mirks"],["mirky"],["mirliton"],["mirror"],["mirrored"],["mirrors"],["mirs"],["mirth"],["mirthful"],["mirths"],["miry"],["mirza"],["mirzas"],["mis"],["misact"],["misacted"],["misacts"],["misadapt"],["misadd"],["misadded"],["misadds"],["misagent"],["misaim"],["misaimed"],["misaims"],["misalign"],["misally"],["misalter"],["misandry"],["misapply"],["misassay"],["misate"],["misatone"],["misaver"],["misavers"],["misaward"],["misbegan"],["misbegin"],["misbegot"],["misbegun"],["misbias"],["misbill"],["misbills"],["misbind"],["misbinds"],["misbound"],["misbrand"],["misbuild"],["misbuilt"],["miscall"],["miscalls"],["miscarry"],["miscast"],["miscasts"],["mischief"],["miscible"],["miscite"],["miscited"],["miscites"],["misclaim"],["misclass"],["miscode"],["miscoded"],["miscodes"],["miscoin"],["miscoins"],["miscolor"],["miscook"],["miscooks"],["miscopy"],["miscount"],["miscue"],["miscued"],["miscues"],["miscuing"],["miscut"],["miscuts"],["misdate"],["misdated"],["misdates"],["misdeal"],["misdeals"],["misdealt"],["misdeed"],["misdeeds"],["misdeem"],["misdeems"],["misdial"],["misdials"],["misdid"],["misdo"],["misdoer"],["misdoers"],["misdoes"],["misdoing"],["misdone"],["misdoubt"],["misdraw"],["misdrawn"],["misdraws"],["misdrew"],["misdrive"],["misdrove"],["mise"],["misease"],["miseases"],["miseat"],["miseaten"],["miseats"],["misedit"],["misedits"],["misenrol"],["misenter"],["misentry"],["miser"],["miserere"],["miseries"],["miserly"],["misers"],["misery"],["mises"],["misevent"],["misfaith"],["misfield"],["misfile"],["misfiled"],["misfiles"],["misfire"],["misfired"],["misfires"],["misfit"],["misfits"],["misfocus"],["misform"],["misforms"],["misframe"],["misgauge"],["misgave"],["misgive"],["misgiven"],["misgives"],["misgrade"],["misgraft"],["misgrew"],["misgrow"],["misgrown"],["misgrows"],["misguess"],["misguide"],["mishap"],["mishaps"],["mishear"],["misheard"],["mishears"],["mishit"],["mishits"],["mishmash"],["mishmosh"],["misinfer"],["misinter"],["misjoin"],["misjoins"],["misjudge"],["miskal"],["miskals"],["miskeep"],["miskeeps"],["miskept"],["miskick"],["miskicks"],["misknew"],["misknow"],["misknown"],["misknows"],["mislabel"],["mislabor"],["mislaid"],["mislain"],["mislay"],["mislayer"],["mislays"],["mislead"],["misleads"],["mislearn"],["misled"],["mislie"],["mislies"],["mislight"],["mislike"],["misliked"],["misliker"],["mislikes"],["mislit"],["mislive"],["mislived"],["mislives"],["mislodge"],["mislying"],["mismade"],["mismake"],["mismakes"],["mismark"],["mismarks"],["mismatch"],["mismate"],["mismated"],["mismates"],["mismeet"],["mismeets"],["mismet"],["mismove"],["mismoved"],["mismoves"],["misname"],["misnamed"],["misnames"],["misnomer"],["miso"],["misogamy"],["misogyny"],["misology"],["misorder"],["misos"],["mispage"],["mispaged"],["mispages"],["mispaint"],["misparse"],["mispart"],["misparts"],["mispatch"],["mispen"],["mispens"],["misplace"],["misplan"],["misplans"],["misplant"],["misplay"],["misplays"],["misplead"],["mispled"],["mispoint"],["mispoise"],["misprice"],["misprint"],["misprize"],["misquote"],["misraise"],["misrate"],["misrated"],["misrates"],["misread"],["misreads"],["misrefer"],["misrely"],["misroute"],["misrule"],["misruled"],["misrules"],["miss"],["missaid"],["missal"],["missals"],["missay"],["missays"],["misseat"],["misseats"],["missed"],["missel"],["missels"],["missend"],["missends"],["missense"],["missent"],["misses"],["misset"],["missets"],["misshape"],["misshod"],["missies"],["missile"],["missiles"],["missilry"],["missing"],["mission"],["missions"],["missis"],["missises"],["missive"],["missives"],["missort"],["missorts"],["missound"],["missout"],["missouts"],["misspace"],["misspeak"],["misspell"],["misspelt"],["misspend"],["misspent"],["misspoke"],["misstart"],["misstate"],["missteer"],["misstep"],["missteps"],["misstop"],["misstops"],["misstyle"],["missuit"],["missuits"],["missus"],["missuses"],["missy"],["mist"],["mistake"],["mistaken"],["mistaker"],["mistakes"],["mistbow"],["mistbows"],["misteach"],["misted"],["mistend"],["mistends"],["mister"],["misterm"],["misterms"],["misters"],["misteuk"],["misthink"],["misthrew"],["misthrow"],["mistier"],["mistiest"],["mistily"],["mistime"],["mistimed"],["mistimes"],["misting"],["mistitle"],["mistook"],["mistouch"],["mistrace"],["mistrain"],["mistral"],["mistrals"],["mistreat"],["mistress"],["mistrial"],["mistrust"],["mistruth"],["mistryst"],["mists"],["mistune"],["mistuned"],["mistunes"],["mistutor"],["misty"],["mistype"],["mistyped"],["mistypes"],["misunion"],["misusage"],["misuse"],["misused"],["misuser"],["misusers"],["misuses"],["misusing"],["misvalue"],["misword"],["miswords"],["miswrit"],["miswrite"],["miswrote"],["misyoke"],["misyoked"],["misyokes"],["mite"],["miter"],["mitered"],["miterer"],["miterers"],["mitering"],["miters"],["mites"],["mither"],["mithers"],["miticide"],["mitier"],["mitiest"],["mitigate"],["mitis"],["mitises"],["mitogen"],["mitogens"],["mitoses"],["mitosis"],["mitotic"],["mitral"],["mitre"],["mitred"],["mitres"],["mitring"],["mitsvah"],["mitsvahs"],["mitsvoth"],["mitt"],["mitten"],["mittens"],["mittimus"],["mitts"],["mity"],["mitzvah"],["mitzvahs"],["mitzvoth"],["mix"],["mixable"],["mixed"],["mixer"],["mixers"],["mixes"],["mixible"],["mixing"],["mixology"],["mixt"],["mixture"],["mixtures"],["mixup"],["mixups"],["mizen"],["mizens"],["mizzen"],["mizzens"],["mizzle"],["mizzled"],["mizzles"],["mizzling"],["mizzly"],["mm"],["mnemonic"],["mo"],["moa"],["moan"],["moaned"],["moanful"],["moaning"],["moans"],["moas"],["moat"],["moated"],["moating"],["moatlike"],["moats"],["mob"],["mobbed"],["mobber"],["mobbers"],["mobbing"],["mobbish"],["mobcap"],["mobcaps"],["mobile"],["mobiles"],["mobilise"],["mobility"],["mobilize"],["mobocrat"],["mobs"],["mobster"],["mobsters"],["moccasin"],["mocha"],["mochas"],["mochila"],["mochilas"],["mock"],["mockable"],["mocked"],["mocker"],["mockers"],["mockery"],["mocking"],["mocks"],["mockup"],["mockups"],["mod"],["modal"],["modality"],["modally"],["mode"],["model"],["modeled"],["modeler"],["modelers"],["modeling"],["modelist"],["modelled"],["modeller"],["models"],["modem"],["modems"],["moderate"],["moderato"],["modern"],["moderne"],["moderner"],["modernly"],["moderns"],["modes"],["modest"],["modester"],["modestly"],["modesty"],["modi"],["modica"],["modicum"],["modicums"],["modified"],["modifier"],["modifies"],["modify"],["modioli"],["modiolus"],["modish"],["modishly"],["modiste"],["modistes"],["mods"],["modular"],["modulate"],["module"],["modules"],["moduli"],["modulo"],["modulus"],["modus"],["mofette"],["mofettes"],["moffette"],["mog"],["mogged"],["mogging"],["mogs"],["mogul"],["moguls"],["mohair"],["mohairs"],["mohalim"],["mohel"],["mohelim"],["mohels"],["mohur"],["mohurs"],["moidore"],["moidores"],["moieties"],["moiety"],["moil"],["moiled"],["moiler"],["moilers"],["moiling"],["moils"],["moira"],["moirai"],["moire"],["moires"],["moist"],["moisten"],["moistens"],["moister"],["moistest"],["moistful"],["moistly"],["moisture"],["mojarra"],["mojarras"],["mojo"],["mojoes"],["mojos"],["moke"],["mokes"],["mol"],["mola"],["molal"],["molality"],["molar"],["molarity"],["molars"],["molas"],["molasses"],["mold"],["moldable"],["molded"],["molder"],["moldered"],["molders"],["moldier"],["moldiest"],["molding"],["moldings"],["molds"],["moldwarp"],["moldy"],["mole"],["molecule"],["molehill"],["moles"],["moleskin"],["molest"],["molested"],["molester"],["molests"],["molies"],["moline"],["moll"],["mollah"],["mollahs"],["mollie"],["mollies"],["mollify"],["molls"],["mollusc"],["molluscs"],["mollusk"],["mollusks"],["molly"],["moloch"],["molochs"],["mols"],["molt"],["molted"],["molten"],["moltenly"],["molter"],["molters"],["molting"],["molto"],["molts"],["moly"],["molybdic"],["mom"],["mome"],["moment"],["momenta"],["momently"],["momento"],["momentos"],["moments"],["momentum"],["momes"],["momi"],["momism"],["momisms"],["momma"],["mommas"],["mommies"],["mommy"],["moms"],["momser"],["momsers"],["momus"],["momuses"],["momzer"],["momzers"],["mon"],["monachal"],["monacid"],["monacids"],["monad"],["monadal"],["monades"],["monadic"],["monadism"],["monads"],["monandry"],["monarch"],["monarchs"],["monarchy"],["monarda"],["monardas"],["monas"],["monastic"],["monaural"],["monaxial"],["monaxon"],["monaxons"],["monazite"],["monde"],["mondes"],["mondo"],["mondos"],["monecian"],["monellin"],["monetary"],["monetise"],["monetize"],["money"],["moneybag"],["moneyed"],["moneyer"],["moneyers"],["moneys"],["mongeese"],["monger"],["mongered"],["mongers"],["mongo"],["mongoe"],["mongoes"],["mongol"],["mongols"],["mongoose"],["mongos"],["mongrel"],["mongrels"],["mongst"],["monicker"],["monie"],["monied"],["monies"],["moniker"],["monikers"],["monish"],["monished"],["monishes"],["monism"],["monisms"],["monist"],["monistic"],["monists"],["monition"],["monitive"],["monitor"],["monitors"],["monitory"],["monk"],["monkery"],["monkey"],["monkeyed"],["monkeys"],["monkfish"],["monkhood"],["monkish"],["monks"],["mono"],["monoacid"],["monocarp"],["monocle"],["monocled"],["monocles"],["monocot"],["monocots"],["monocrat"],["monocyte"],["monodic"],["monodies"],["monodist"],["monody"],["monoecy"],["monofil"],["monofils"],["monofuel"],["monogamy"],["monogeny"],["monogerm"],["monoglot"],["monogram"],["monogyny"],["monolith"],["monolog"],["monologs"],["monology"],["monomer"],["monomers"],["monomial"],["monopode"],["monopody"],["monopole"],["monopoly"],["monorail"],["monos"],["monosome"],["monosomy"],["monotint"],["monotone"],["monotony"],["monotype"],["monoxide"],["mons"],["monsieur"],["monsoon"],["monsoons"],["monster"],["monstera"],["monsters"],["montage"],["montaged"],["montages"],["montane"],["montanes"],["monte"],["monteith"],["montero"],["monteros"],["montes"],["month"],["monthly"],["months"],["monument"],["monuron"],["monurons"],["mony"],["moo"],["mooch"],["mooched"],["moocher"],["moochers"],["mooches"],["mooching"],["mood"],["moodier"],["moodiest"],["moodily"],["moods"],["moody"],["mooed"],["mooing"],["mool"],["moola"],["moolah"],["moolahs"],["moolas"],["mooley"],["mooleys"],["mools"],["moon"],["moonbeam"],["moonbow"],["moonbows"],["mooncalf"],["mooned"],["mooneye"],["mooneyes"],["moonfish"],["moonier"],["mooniest"],["moonily"],["mooning"],["moonish"],["moonless"],["moonlet"],["moonlets"],["moonlike"],["moonlit"],["moonport"],["moonrise"],["moons"],["moonsail"],["moonseed"],["moonset"],["moonsets"],["moonshot"],["moonwalk"],["moonward"],["moonwort"],["moony"],["moor"],["moorage"],["moorages"],["moorcock"],["moored"],["moorfowl"],["moorhen"],["moorhens"],["moorier"],["mooriest"],["mooring"],["moorings"],["moorish"],["moorland"],["moors"],["moorwort"],["moory"],["moos"],["moose"],["moot"],["mooted"],["mooter"],["mooters"],["mooting"],["moots"],["mop"],["mopboard"],["mope"],["moped"],["mopeds"],["moper"],["moperies"],["mopers"],["mopery"],["mopes"],["mopey"],["mopier"],["mopiest"],["moping"],["mopingly"],["mopish"],["mopishly"],["mopoke"],["mopokes"],["mopped"],["mopper"],["moppers"],["moppet"],["moppets"],["mopping"],["mops"],["mopy"],["moquette"],["mor"],["mora"],["morae"],["morainal"],["moraine"],["moraines"],["morainic"],["moral"],["morale"],["morales"],["moralise"],["moralism"],["moralist"],["morality"],["moralize"],["morally"],["morals"],["moras"],["morass"],["morasses"],["morassy"],["moratory"],["moray"],["morays"],["morbid"],["morbidly"],["morbific"],["morbilli"],["morceau"],["morceaux"],["mordancy"],["mordant"],["mordants"],["mordent"],["mordents"],["more"],["moreen"],["moreens"],["morel"],["morelle"],["morelles"],["morello"],["morellos"],["morels"],["moreover"],["mores"],["moresque"],["morgen"],["morgens"],["morgue"],["morgues"],["moribund"],["morion"],["morions"],["morn"],["morning"],["mornings"],["morns"],["morocco"],["moroccos"],["moron"],["moronic"],["moronism"],["moronity"],["morons"],["morose"],["morosely"],["morosity"],["morph"],["morpheme"],["morphia"],["morphias"],["morphic"],["morphin"],["morphine"],["morphins"],["morpho"],["morphos"],["morphs"],["morrion"],["morrions"],["morris"],["morrises"],["morro"],["morros"],["morrow"],["morrows"],["mors"],["morse"],["morsel"],["morseled"],["morsels"],["mort"],["mortal"],["mortally"],["mortals"],["mortar"],["mortared"],["mortars"],["mortary"],["mortgage"],["mortice"],["morticed"],["mortices"],["mortify"],["mortise"],["mortised"],["mortiser"],["mortises"],["mortmain"],["morts"],["mortuary"],["morula"],["morulae"],["morular"],["morulas"],["mos"],["mosaic"],["mosaics"],["mosasaur"],["moschate"],["mosey"],["moseyed"],["moseying"],["moseys"],["moshav"],["moshavim"],["mosk"],["mosks"],["mosque"],["mosques"],["mosquito"],["moss"],["mossback"],["mossed"],["mosser"],["mossers"],["mosses"],["mossier"],["mossiest"],["mossing"],["mosslike"],["mosso"],["mossy"],["most"],["moste"],["mostest"],["mostests"],["mostly"],["mosts"],["mot"],["mote"],["motel"],["motels"],["motes"],["motet"],["motets"],["motey"],["moth"],["mothball"],["mother"],["mothered"],["motherly"],["mothers"],["mothery"],["mothier"],["mothiest"],["mothlike"],["moths"],["mothy"],["motif"],["motific"],["motifs"],["motile"],["motiles"],["motility"],["motion"],["motional"],["motioned"],["motioner"],["motions"],["motivate"],["motive"],["motived"],["motives"],["motivic"],["motiving"],["motivity"],["motley"],["motleyer"],["motleys"],["motlier"],["motliest"],["motmot"],["motmots"],["motor"],["motorbus"],["motorcar"],["motordom"],["motored"],["motoric"],["motoring"],["motorise"],["motorist"],["motorize"],["motorman"],["motormen"],["motors"],["motorway"],["mots"],["mott"],["motte"],["mottes"],["mottle"],["mottled"],["mottler"],["mottlers"],["mottles"],["mottling"],["motto"],["mottoes"],["mottos"],["motts"],["mouch"],["mouched"],["mouches"],["mouching"],["mouchoir"],["moue"],["moues"],["moufflon"],["mouflon"],["mouflons"],["mouille"],["moujik"],["moujiks"],["moulage"],["moulages"],["mould"],["moulded"],["moulder"],["moulders"],["mouldier"],["moulding"],["moulds"],["mouldy"],["moulin"],["moulins"],["moult"],["moulted"],["moulter"],["moulters"],["moulting"],["moults"],["mound"],["mounded"],["mounding"],["mounds"],["mount"],["mountain"],["mounted"],["mounter"],["mounters"],["mounting"],["mounts"],["mourn"],["mourned"],["mourner"],["mourners"],["mournful"],["mourning"],["mourns"],["mouse"],["moused"],["mouser"],["mousers"],["mouses"],["mousey"],["mousier"],["mousiest"],["mousily"],["mousing"],["mousings"],["moussaka"],["mousse"],["mousses"],["mousy"],["mouth"],["mouthed"],["mouther"],["mouthers"],["mouthful"],["mouthier"],["mouthily"],["mouthing"],["mouths"],["mouthy"],["mouton"],["moutons"],["movable"],["movables"],["movably"],["move"],["moveable"],["moveably"],["moved"],["moveless"],["movement"],["mover"],["movers"],["moves"],["movie"],["moviedom"],["movieola"],["movies"],["moving"],["movingly"],["moviola"],["moviolas"],["mow"],["mowed"],["mower"],["mowers"],["mowing"],["mowings"],["mown"],["mows"],["moxa"],["moxas"],["moxie"],["moxies"],["mozetta"],["mozettas"],["mozette"],["mozo"],["mozos"],["mozzetta"],["mozzette"],["mridanga"],["mu"],["much"],["muchacho"],["muches"],["muchly"],["muchness"],["mucid"],["mucidity"],["mucilage"],["mucin"],["mucinoid"],["mucinous"],["mucins"],["muck"],["mucked"],["mucker"],["muckers"],["muckier"],["muckiest"],["muckily"],["mucking"],["muckle"],["muckles"],["muckluck"],["muckrake"],["mucks"],["muckworm"],["mucky"],["mucluc"],["muclucs"],["mucoid"],["mucoidal"],["mucoids"],["mucor"],["mucors"],["mucosa"],["mucosae"],["mucosal"],["mucosas"],["mucose"],["mucosity"],["mucous"],["mucro"],["mucrones"],["mucus"],["mucuses"],["mud"],["mudcap"],["mudcaps"],["mudcat"],["mudcats"],["mudded"],["mudder"],["mudders"],["muddied"],["muddier"],["muddies"],["muddiest"],["muddily"],["mudding"],["muddle"],["muddled"],["muddler"],["muddlers"],["muddles"],["muddling"],["muddly"],["muddy"],["muddying"],["mudfish"],["mudflow"],["mudflows"],["mudguard"],["mudhole"],["mudholes"],["mudlark"],["mudlarks"],["mudpack"],["mudpacks"],["mudpuppy"],["mudra"],["mudras"],["mudrock"],["mudrocks"],["mudroom"],["mudrooms"],["muds"],["mudsill"],["mudsills"],["mudslide"],["mudstone"],["mueddin"],["mueddins"],["muenster"],["muesli"],["mueslis"],["muezzin"],["muezzins"],["muff"],["muffed"],["muffin"],["muffing"],["muffins"],["muffle"],["muffled"],["muffler"],["mufflers"],["muffles"],["muffling"],["muffs"],["mufti"],["muftis"],["mug"],["mugful"],["mugfuls"],["mugg"],["muggar"],["muggars"],["mugged"],["muggee"],["muggees"],["mugger"],["muggers"],["muggier"],["muggiest"],["muggily"],["mugging"],["muggings"],["muggins"],["muggs"],["muggur"],["muggurs"],["muggy"],["mugs"],["mugwort"],["mugworts"],["mugwump"],["mugwumps"],["muhlies"],["muhly"],["mujik"],["mujiks"],["mukluk"],["mukluks"],["muktuk"],["muktuks"],["mulatto"],["mulattos"],["mulberry"],["mulch"],["mulched"],["mulches"],["mulching"],["mulct"],["mulcted"],["mulcting"],["mulcts"],["mule"],["muled"],["mules"],["muleta"],["muletas"],["muleteer"],["muley"],["muleys"],["muling"],["mulish"],["mulishly"],["mull"],["mulla"],["mullah"],["mullahs"],["mullas"],["mulled"],["mullein"],["mulleins"],["mullen"],["mullens"],["muller"],["mullers"],["mullet"],["mullets"],["mulley"],["mulleys"],["mulligan"],["mulling"],["mullion"],["mullions"],["mullite"],["mullites"],["mullock"],["mullocks"],["mullocky"],["mulls"],["multiage"],["multicar"],["multifid"],["multijet"],["multiped"],["multiple"],["multiply"],["multiton"],["multiuse"],["multure"],["multures"],["mum"],["mumble"],["mumbled"],["mumbler"],["mumblers"],["mumbles"],["mumbling"],["mumbly"],["mumm"],["mummed"],["mummer"],["mummers"],["mummery"],["mummied"],["mummies"],["mummify"],["mumming"],["mumms"],["mummy"],["mummying"],["mump"],["mumped"],["mumper"],["mumpers"],["mumping"],["mumps"],["mums"],["mumu"],["mumus"],["mun"],["munch"],["munched"],["muncher"],["munchers"],["munches"],["munchies"],["munching"],["munchkin"],["mundane"],["mundungo"],["mungo"],["mungoose"],["mungos"],["muniment"],["munition"],["munnion"],["munnions"],["muns"],["munster"],["munsters"],["muntin"],["munting"],["muntings"],["muntins"],["muntjac"],["muntjacs"],["muntjak"],["muntjaks"],["muon"],["muonic"],["muonium"],["muoniums"],["muons"],["mura"],["muraenid"],["mural"],["muralist"],["murals"],["muras"],["murder"],["murdered"],["murderee"],["murderer"],["murders"],["mure"],["mured"],["murein"],["mureins"],["mures"],["murex"],["murexes"],["muriate"],["muriated"],["muriates"],["muricate"],["murices"],["murid"],["murids"],["murine"],["murines"],["muring"],["murk"],["murker"],["murkest"],["murkier"],["murkiest"],["murkily"],["murkly"],["murks"],["murky"],["murmur"],["murmured"],["murmurer"],["murmurs"],["murphies"],["murphy"],["murr"],["murra"],["murrain"],["murrains"],["murras"],["murre"],["murrelet"],["murres"],["murrey"],["murreys"],["murrha"],["murrhas"],["murrhine"],["murries"],["murrine"],["murrs"],["murry"],["murther"],["murthers"],["mus"],["musca"],["muscadel"],["muscadet"],["muscae"],["muscat"],["muscatel"],["muscats"],["muscid"],["muscids"],["muscle"],["muscled"],["muscles"],["muscling"],["muscly"],["muscular"],["muse"],["mused"],["museful"],["muser"],["musers"],["muses"],["musette"],["musettes"],["museum"],["museums"],["mush"],["mushed"],["musher"],["mushers"],["mushes"],["mushier"],["mushiest"],["mushily"],["mushing"],["mushroom"],["mushy"],["music"],["musical"],["musicale"],["musicals"],["musician"],["musics"],["musing"],["musingly"],["musings"],["musjid"],["musjids"],["musk"],["muskeg"],["muskegs"],["musket"],["musketry"],["muskets"],["muskie"],["muskier"],["muskies"],["muskiest"],["muskily"],["muskit"],["muskits"],["muskrat"],["muskrats"],["musks"],["musky"],["muslin"],["muslins"],["muspike"],["muspikes"],["musquash"],["muss"],["mussed"],["mussel"],["mussels"],["musses"],["mussier"],["mussiest"],["mussily"],["mussing"],["mussy"],["must"],["mustache"],["mustang"],["mustangs"],["mustard"],["mustards"],["mustardy"],["musted"],["mustee"],["mustees"],["muster"],["mustered"],["musters"],["musth"],["musths"],["mustier"],["mustiest"],["mustily"],["musting"],["musts"],["musty"],["mut"],["mutable"],["mutably"],["mutagen"],["mutagens"],["mutant"],["mutants"],["mutase"],["mutases"],["mutate"],["mutated"],["mutates"],["mutating"],["mutation"],["mutative"],["mutch"],["mutches"],["mutchkin"],["mute"],["muted"],["mutedly"],["mutely"],["muteness"],["muter"],["mutes"],["mutest"],["muticous"],["mutilate"],["mutine"],["mutined"],["mutineer"],["mutines"],["muting"],["mutinied"],["mutinies"],["mutining"],["mutinous"],["mutiny"],["mutism"],["mutisms"],["muton"],["mutons"],["muts"],["mutt"],["mutter"],["muttered"],["mutterer"],["mutters"],["mutton"],["muttons"],["muttony"],["mutts"],["mutual"],["mutually"],["mutuel"],["mutuels"],["mutular"],["mutule"],["mutules"],["muumuu"],["muumuus"],["muzhik"],["muzhiks"],["muzjik"],["muzjiks"],["muzzier"],["muzziest"],["muzzily"],["muzzle"],["muzzled"],["muzzler"],["muzzlers"],["muzzles"],["muzzling"],["muzzy"],["my"],["myalgia"],["myalgias"],["myalgic"],["myases"],["myasis"],["mycele"],["myceles"],["mycelia"],["mycelial"],["mycelian"],["mycelium"],["myceloid"],["mycetoma"],["mycology"],["mycoses"],["mycosis"],["mycotic"],["myelin"],["myeline"],["myelines"],["myelinic"],["myelins"],["myelitis"],["myeloid"],["myeloma"],["myelomas"],["myiases"],["myiasis"],["mylonite"],["myna"],["mynah"],["mynahs"],["mynas"],["mynheer"],["mynheers"],["myoblast"],["myogenic"],["myograph"],["myoid"],["myologic"],["myology"],["myoma"],["myomas"],["myomata"],["myopathy"],["myope"],["myopes"],["myopia"],["myopias"],["myopic"],["myopies"],["myopy"],["myoscope"],["myoses"],["myosin"],["myosins"],["myosis"],["myositis"],["myosote"],["myosotes"],["myosotis"],["myotic"],["myotics"],["myotome"],["myotomes"],["myotonia"],["myotonic"],["myriad"],["myriads"],["myriapod"],["myrica"],["myricas"],["myriopod"],["myrmidon"],["myrrh"],["myrrhic"],["myrrhs"],["myrtle"],["myrtles"],["myself"],["mysid"],["mysids"],["mysost"],["mysosts"],["mystagog"],["mystery"],["mystic"],["mystical"],["mysticly"],["mystics"],["mystify"],["mystique"],["myth"],["mythic"],["mythical"],["mythoi"],["mythos"],["myths"],["myxedema"],["myxocyte"],["myxoid"],["myxoma"],["myxomas"],["myxomata"],["na"],["nab"],["nabbed"],["nabber"],["nabbers"],["nabbing"],["nabe"],["nabes"],["nabis"],["nabob"],["nabobery"],["nabobess"],["nabobish"],["nabobism"],["nabobs"],["nabs"],["nacelle"],["nacelles"],["nachas"],["naches"],["nacho"],["nachos"],["nacre"],["nacred"],["nacreous"],["nacres"],["nadir"],["nadiral"],["nadirs"],["nae"],["naething"],["naevi"],["naevoid"],["naevus"],["nag"],["nagana"],["naganas"],["nagged"],["nagger"],["naggers"],["naggier"],["naggiest"],["nagging"],["naggy"],["nags"],["nah"],["naiad"],["naiades"],["naiads"],["naif"],["naifs"],["nail"],["nailed"],["nailer"],["nailers"],["nailfold"],["nailhead"],["nailing"],["nails"],["nailset"],["nailsets"],["nainsook"],["naira"],["naive"],["naively"],["naiver"],["naives"],["naivest"],["naivete"],["naivetes"],["naivety"],["naked"],["nakeder"],["nakedest"],["nakedly"],["naled"],["naleds"],["naloxone"],["nam"],["namable"],["name"],["nameable"],["named"],["nameless"],["namely"],["namer"],["namers"],["names"],["namesake"],["nametag"],["nametags"],["naming"],["nana"],["nanas"],["nance"],["nances"],["nancies"],["nancy"],["nandin"],["nandins"],["nanism"],["nanisms"],["nankeen"],["nankeens"],["nankin"],["nankins"],["nannie"],["nannies"],["nanny"],["nanogram"],["nanowatt"],["naoi"],["naos"],["nap"],["napalm"],["napalmed"],["napalms"],["nape"],["naperies"],["napery"],["napes"],["naphtha"],["naphthas"],["naphthol"],["naphthyl"],["naphtol"],["naphtols"],["napiform"],["napkin"],["napkins"],["napless"],["napoleon"],["nappe"],["napped"],["napper"],["nappers"],["nappes"],["nappie"],["nappier"],["nappies"],["nappiest"],["napping"],["nappy"],["naps"],["narc"],["narcein"],["narceine"],["narceins"],["narcism"],["narcisms"],["narcissi"],["narcist"],["narcists"],["narco"],["narcos"],["narcose"],["narcoses"],["narcosis"],["narcotic"],["narcs"],["nard"],["nardine"],["nards"],["nares"],["narghile"],["nargile"],["nargileh"],["nargiles"],["narial"],["naric"],["narine"],["naris"],["nark"],["narked"],["narking"],["narks"],["narky"],["narrate"],["narrated"],["narrater"],["narrates"],["narrator"],["narrow"],["narrowed"],["narrower"],["narrowly"],["narrows"],["narthex"],["narwal"],["narwals"],["narwhal"],["narwhale"],["narwhals"],["nary"],["nasal"],["nasalise"],["nasality"],["nasalize"],["nasally"],["nasals"],["nascence"],["nascency"],["nascent"],["nasial"],["nasion"],["nasions"],["nastic"],["nastier"],["nasties"],["nastiest"],["nastily"],["nasty"],["natal"],["natality"],["natant"],["natantly"],["natation"],["natatory"],["natch"],["nates"],["nathless"],["nation"],["national"],["nations"],["native"],["natively"],["natives"],["nativism"],["nativist"],["nativity"],["natrium"],["natriums"],["natron"],["natrons"],["natter"],["nattered"],["natters"],["nattier"],["nattiest"],["nattily"],["natty"],["natural"],["naturals"],["nature"],["natured"],["natures"],["naturism"],["naturist"],["naught"],["naughts"],["naughty"],["naumachy"],["nauplial"],["nauplii"],["nauplius"],["nausea"],["nauseant"],["nauseas"],["nauseate"],["nauseous"],["nautch"],["nautches"],["nautical"],["nautili"],["nautilus"],["navaid"],["navaids"],["naval"],["navally"],["navar"],["navars"],["nave"],["navel"],["navels"],["naves"],["navette"],["navettes"],["navicert"],["navies"],["navigate"],["navvies"],["navvy"],["navy"],["naw"],["nawab"],["nawabs"],["nay"],["nays"],["naysayer"],["nazi"],["nazified"],["nazifies"],["nazify"],["nazis"],["ne"],["neap"],["neaps"],["near"],["nearby"],["neared"],["nearer"],["nearest"],["nearing"],["nearlier"],["nearly"],["nearness"],["nears"],["neat"],["neaten"],["neatened"],["neatens"],["neater"],["neatest"],["neath"],["neatherd"],["neatly"],["neatness"],["neats"],["neb"],["nebbish"],["nebs"],["nebula"],["nebulae"],["nebular"],["nebulas"],["nebule"],["nebulise"],["nebulize"],["nebulose"],["nebulous"],["nebuly"],["neck"],["neckband"],["necked"],["necker"],["neckers"],["necking"],["neckings"],["necklace"],["neckless"],["necklike"],["neckline"],["necks"],["necktie"],["neckties"],["neckwear"],["necropsy"],["necrose"],["necrosed"],["necroses"],["necrosis"],["necrotic"],["nectar"],["nectars"],["nectary"],["nee"],["need"],["needed"],["needer"],["needers"],["needful"],["needfuls"],["needier"],["neediest"],["needily"],["needing"],["needle"],["needled"],["needler"],["needlers"],["needles"],["needless"],["needling"],["needs"],["needy"],["neem"],["neems"],["neep"],["neeps"],["negate"],["negated"],["negater"],["negaters"],["negates"],["negating"],["negation"],["negative"],["negaton"],["negatons"],["negator"],["negators"],["negatron"],["neglect"],["neglects"],["neglige"],["negligee"],["negliges"],["negroid"],["negroids"],["negroni"],["negronis"],["negus"],["neguses"],["neif"],["neifs"],["neigh"],["neighbor"],["neighed"],["neighing"],["neighs"],["neist"],["neither"],["nekton"],["nektonic"],["nektons"],["nellie"],["nellies"],["nelly"],["nelson"],["nelsons"],["nelumbo"],["nelumbos"],["nema"],["nemas"],["nematic"],["nematode"],["nemeses"],["nemesis"],["nene"],["neolith"],["neoliths"],["neologic"],["neology"],["neomorph"],["neomycin"],["neon"],["neonatal"],["neonate"],["neonates"],["neoned"],["neons"],["neophyte"],["neoplasm"],["neoprene"],["neotenic"],["neoteny"],["neoteric"],["neotype"],["neotypes"],["nepenthe"],["nephew"],["nephews"],["nephric"],["nephrism"],["nephrite"],["nephron"],["nephrons"],["nepotic"],["nepotism"],["nepotist"],["nerd"],["nerds"],["nerdy"],["nereid"],["nereides"],["nereids"],["nereis"],["neritic"],["nerol"],["neroli"],["nerolis"],["nerols"],["nerts"],["nertz"],["nervate"],["nerve"],["nerved"],["nerves"],["nervier"],["nerviest"],["nervily"],["nervine"],["nervines"],["nerving"],["nervings"],["nervous"],["nervule"],["nervules"],["nervure"],["nervures"],["nervy"],["nescient"],["ness"],["nesses"],["nest"],["nestable"],["nested"],["nester"],["nesters"],["nesting"],["nestle"],["nestled"],["nestler"],["nestlers"],["nestles"],["nestlike"],["nestling"],["nestor"],["nestors"],["nests"],["net"],["nether"],["netless"],["netlike"],["netop"],["netops"],["nets"],["netsuke"],["netsukes"],["nett"],["nettable"],["netted"],["netter"],["netters"],["nettier"],["nettiest"],["netting"],["nettings"],["nettle"],["nettled"],["nettler"],["nettlers"],["nettles"],["nettlier"],["nettling"],["nettly"],["netts"],["netty"],["network"],["networks"],["neuk"],["neuks"],["neum"],["neumatic"],["neume"],["neumes"],["neumic"],["neums"],["neural"],["neurally"],["neuraxon"],["neurine"],["neurines"],["neuritic"],["neuritis"],["neuroid"],["neuroma"],["neuromas"],["neuron"],["neuronal"],["neurone"],["neurones"],["neuronic"],["neurons"],["neurosal"],["neuroses"],["neurosis"],["neurotic"],["neurula"],["neurulae"],["neurulas"],["neuston"],["neustons"],["neuter"],["neutered"],["neuters"],["neutral"],["neutrals"],["neutrino"],["neutron"],["neutrons"],["neve"],["never"],["neves"],["nevi"],["nevoid"],["nevus"],["new"],["newborn"],["newborns"],["newcomer"],["newel"],["newels"],["newer"],["newest"],["newfound"],["newie"],["newies"],["newish"],["newly"],["newlywed"],["newmown"],["newness"],["news"],["newsboy"],["newsboys"],["newscast"],["newshawk"],["newsie"],["newsier"],["newsies"],["newsiest"],["newsless"],["newsman"],["newsmen"],["newspeak"],["newsreel"],["newsroom"],["newsy"],["newt"],["newton"],["newtons"],["newts"],["next"],["nextdoor"],["nexus"],["nexuses"],["ngultrum"],["ngwee"],["niacin"],["niacins"],["nib"],["nibbed"],["nibbing"],["nibble"],["nibbled"],["nibbler"],["nibblers"],["nibbles"],["nibbling"],["niblick"],["niblicks"],["niblike"],["nibs"],["nicad"],["nicads"],["nice"],["nicely"],["niceness"],["nicer"],["nicest"],["niceties"],["nicety"],["niche"],["niched"],["niches"],["niching"],["nick"],["nicked"],["nickel"],["nickeled"],["nickelic"],["nickels"],["nicker"],["nickered"],["nickers"],["nicking"],["nickle"],["nickled"],["nickles"],["nickling"],["nicknack"],["nickname"],["nicks"],["nicol"],["nicols"],["nicotin"],["nicotine"],["nicotins"],["nictate"],["nictated"],["nictates"],["nidal"],["nide"],["nided"],["nidering"],["nides"],["nidget"],["nidgets"],["nidi"],["nidified"],["nidifies"],["nidify"],["niding"],["nidus"],["niduses"],["niece"],["nieces"],["nielli"],["niellist"],["niello"],["nielloed"],["niellos"],["nieve"],["nieves"],["niffer"],["niffered"],["niffers"],["niftier"],["nifties"],["niftiest"],["niftily"],["nifty"],["niggard"],["niggards"],["nigger"],["niggers"],["niggle"],["niggled"],["niggler"],["nigglers"],["niggles"],["niggling"],["nigh"],["nighed"],["nigher"],["nighest"],["nighing"],["nighness"],["nighs"],["night"],["nightcap"],["nightie"],["nighties"],["nightjar"],["nightly"],["nights"],["nighty"],["nigrify"],["nigrosin"],["nihil"],["nihilism"],["nihilist"],["nihility"],["nihils"],["nil"],["nilgai"],["nilgais"],["nilgau"],["nilgaus"],["nilghai"],["nilghais"],["nilghau"],["nilghaus"],["nill"],["nilled"],["nilling"],["nills"],["nils"],["nim"],["nimbi"],["nimble"],["nimbler"],["nimblest"],["nimbly"],["nimbus"],["nimbused"],["nimbuses"],["nimiety"],["nimious"],["nimmed"],["nimming"],["nimrod"],["nimrods"],["nims"],["nine"],["ninebark"],["ninefold"],["ninepin"],["ninepins"],["nines"],["nineteen"],["nineties"],["ninety"],["ninja"],["ninjas"],["ninnies"],["ninny"],["ninnyish"],["ninon"],["ninons"],["ninth"],["ninthly"],["ninths"],["niobic"],["niobium"],["niobiums"],["niobous"],["nip"],["nipa"],["nipas"],["nipped"],["nipper"],["nippers"],["nippier"],["nippiest"],["nippily"],["nipping"],["nipple"],["nipples"],["nippy"],["nips"],["nirvana"],["nirvanas"],["nirvanic"],["nisei"],["niseis"],["nisi"],["nisus"],["nit"],["nitchie"],["nitchies"],["niter"],["niteries"],["niters"],["nitery"],["nitid"],["nitinol"],["nitinols"],["niton"],["nitons"],["nitpick"],["nitpicks"],["nitrate"],["nitrated"],["nitrates"],["nitrator"],["nitre"],["nitres"],["nitric"],["nitrid"],["nitride"],["nitrided"],["nitrides"],["nitrids"],["nitrify"],["nitril"],["nitrile"],["nitriles"],["nitrils"],["nitrite"],["nitrites"],["nitro"],["nitrogen"],["nitrolic"],["nitros"],["nitroso"],["nitrosyl"],["nitrous"],["nits"],["nittier"],["nittiest"],["nitty"],["nitwit"],["nitwits"],["nival"],["niveous"],["nix"],["nixe"],["nixed"],["nixes"],["nixie"],["nixies"],["nixing"],["nixy"],["nizam"],["nizamate"],["nizams"],["no"],["nob"],["nobbier"],["nobbiest"],["nobbily"],["nobble"],["nobbled"],["nobbler"],["nobblers"],["nobbles"],["nobbling"],["nobby"],["nobelium"],["nobility"],["noble"],["nobleman"],["noblemen"],["nobler"],["nobles"],["noblesse"],["noblest"],["nobly"],["nobodies"],["nobody"],["nobs"],["nocent"],["nock"],["nocked"],["nocking"],["nocks"],["noctuid"],["noctuids"],["noctule"],["noctules"],["noctuoid"],["nocturn"],["nocturne"],["nocturns"],["nocuous"],["nod"],["nodal"],["nodality"],["nodally"],["nodded"],["nodder"],["nodders"],["noddies"],["nodding"],["noddle"],["noddled"],["noddles"],["noddling"],["noddy"],["node"],["nodes"],["nodi"],["nodical"],["nodose"],["nodosity"],["nodous"],["nods"],["nodular"],["nodule"],["nodules"],["nodulose"],["nodulous"],["nodus"],["noel"],["noels"],["noes"],["noesis"],["noesises"],["noetic"],["nog"],["nogg"],["nogged"],["noggin"],["nogging"],["noggings"],["noggins"],["noggs"],["nogs"],["noh"],["nohow"],["noil"],["noils"],["noily"],["noise"],["noised"],["noises"],["noisette"],["noisier"],["noisiest"],["noisily"],["noising"],["noisome"],["noisy"],["nolo"],["nolos"],["nom"],["noma"],["nomad"],["nomadic"],["nomadism"],["nomads"],["nomarch"],["nomarchs"],["nomarchy"],["nomas"],["nombles"],["nombril"],["nombrils"],["nome"],["nomen"],["nomes"],["nomina"],["nominal"],["nominals"],["nominate"],["nominee"],["nominees"],["nomism"],["nomisms"],["nomistic"],["nomogram"],["nomoi"],["nomology"],["nomos"],["noms"],["nona"],["nonacid"],["nonacids"],["nonactor"],["nonadult"],["nonage"],["nonages"],["nonagon"],["nonagons"],["nonart"],["nonarts"],["nonas"],["nonbank"],["nonbasic"],["nonbeing"],["nonblack"],["nonbody"],["nonbook"],["nonbooks"],["nonbrand"],["noncash"],["nonce"],["nonces"],["nonclass"],["noncling"],["noncolor"],["noncom"],["noncoms"],["noncrime"],["nondairy"],["nondance"],["nondrug"],["none"],["nonego"],["nonegos"],["nonelect"],["nonelite"],["nonempty"],["nonentry"],["nonequal"],["nones"],["nonesuch"],["nonet"],["nonets"],["nonevent"],["nonfact"],["nonfacts"],["nonfan"],["nonfans"],["nonfarm"],["nonfat"],["nonfatal"],["nonfatty"],["nonfinal"],["nonfluid"],["nonfocal"],["nonfood"],["nonfuel"],["nongame"],["nongay"],["nongays"],["nonglare"],["nongreen"],["nonguilt"],["nonhardy"],["nonheme"],["nonhero"],["nonhome"],["nonhuman"],["nonideal"],["nonimage"],["nonionic"],["noniron"],["nonissue"],["nonjuror"],["nonjury"],["nonleafy"],["nonlegal"],["nonlife"],["nonlives"],["nonlocal"],["nonmajor"],["nonman"],["nonmeat"],["nonmen"],["nonmetal"],["nonmodal"],["nonmoney"],["nonmoral"],["nonmusic"],["nonnaval"],["nonnews"],["nonnovel"],["nonobese"],["nonohmic"],["nonowner"],["nonpagan"],["nonpapal"],["nonpar"],["nonparty"],["nonpast"],["nonpasts"],["nonpeak"],["nonplay"],["nonplays"],["nonplus"],["nonpolar"],["nonpoor"],["nonprint"],["nonpros"],["nonquota"],["nonrated"],["nonrigid"],["nonrival"],["nonroyal"],["nonrural"],["nonself"],["nonsense"],["nonsked"],["nonskeds"],["nonskid"],["nonskier"],["nonslip"],["nonsolar"],["nonsolid"],["nonstick"],["nonstop"],["nonstory"],["nonsuch"],["nonsugar"],["nonsuit"],["nonsuits"],["nontax"],["nontaxes"],["nontidal"],["nontitle"],["nontonal"],["nontoxic"],["nontrump"],["nontruth"],["nonunion"],["nonuple"],["nonuples"],["nonurban"],["nonuse"],["nonuser"],["nonusers"],["nonuses"],["nonusing"],["nonvalid"],["nonviral"],["nonvocal"],["nonvoter"],["nonwhite"],["nonwoody"],["nonword"],["nonwords"],["nonwoven"],["nonyl"],["nonyls"],["nonzero"],["noo"],["noodge"],["noodged"],["noodges"],["noodging"],["noodle"],["noodled"],["noodles"],["noodling"],["nook"],["nookies"],["nooklike"],["nooks"],["nooky"],["noon"],["noonday"],["noondays"],["nooning"],["noonings"],["noons"],["noontide"],["noontime"],["noose"],["noosed"],["nooser"],["noosers"],["nooses"],["noosing"],["nopal"],["nopals"],["nope"],["nor"],["nordic"],["noria"],["norias"],["norite"],["norites"],["noritic"],["norland"],["norlands"],["norm"],["normal"],["normalcy"],["normally"],["normals"],["normed"],["normless"],["norms"],["north"],["norther"],["northern"],["northers"],["northing"],["norths"],["nos"],["nose"],["nosebag"],["nosebags"],["noseband"],["nosed"],["nosedive"],["nosegay"],["nosegays"],["noseless"],["noselike"],["noses"],["nosey"],["nosh"],["noshed"],["nosher"],["noshers"],["noshes"],["noshing"],["nosier"],["nosiest"],["nosily"],["nosiness"],["nosing"],["nosings"],["nosology"],["nostoc"],["nostocs"],["nostril"],["nostrils"],["nostrum"],["nostrums"],["nosy"],["not"],["nota"],["notable"],["notables"],["notably"],["notal"],["notarial"],["notaries"],["notarize"],["notary"],["notate"],["notated"],["notates"],["notating"],["notation"],["notch"],["notched"],["notcher"],["notchers"],["notches"],["notching"],["note"],["notebook"],["notecase"],["noted"],["notedly"],["noteless"],["notepad"],["notepads"],["noter"],["noters"],["notes"],["nother"],["nothing"],["nothings"],["notice"],["noticed"],["notices"],["noticing"],["notified"],["notifier"],["notifies"],["notify"],["noting"],["notion"],["notional"],["notions"],["notornis"],["notturni"],["notturno"],["notum"],["nougat"],["nougats"],["nought"],["noughts"],["noumena"],["noumenal"],["noumenon"],["noun"],["nounal"],["nounally"],["nounless"],["nouns"],["nourish"],["nous"],["nouses"],["nouveau"],["nova"],["novae"],["novalike"],["novas"],["novation"],["novel"],["novelise"],["novelist"],["novelize"],["novella"],["novellas"],["novelle"],["novelly"],["novels"],["novelty"],["novena"],["novenae"],["novenas"],["novercal"],["novice"],["novices"],["now"],["nowadays"],["noway"],["noways"],["nowhere"],["nowheres"],["nowise"],["nowness"],["nows"],["nowt"],["nowts"],["noxious"],["noyade"],["noyades"],["nozzle"],["nozzles"],["nth"],["nu"],["nuance"],["nuanced"],["nuances"],["nub"],["nubbier"],["nubbiest"],["nubbin"],["nubbins"],["nubble"],["nubbles"],["nubblier"],["nubbly"],["nubby"],["nubia"],["nubias"],["nubile"],["nubility"],["nubilose"],["nubilous"],["nubs"],["nucellar"],["nucelli"],["nucellus"],["nucha"],["nuchae"],["nuchal"],["nuchals"],["nucleal"],["nuclear"],["nuclease"],["nucleate"],["nuclei"],["nuclein"],["nucleins"],["nucleoid"],["nucleole"],["nucleoli"],["nucleon"],["nucleons"],["nucleus"],["nuclide"],["nuclides"],["nuclidic"],["nude"],["nudely"],["nudeness"],["nuder"],["nudes"],["nudest"],["nudge"],["nudged"],["nudger"],["nudgers"],["nudges"],["nudging"],["nudicaul"],["nudie"],["nudies"],["nudism"],["nudisms"],["nudist"],["nudists"],["nudities"],["nudity"],["nudnick"],["nudnicks"],["nudnik"],["nudniks"],["nudzh"],["nudzhed"],["nudzhes"],["nudzhing"],["nugatory"],["nugget"],["nuggets"],["nuggety"],["nuisance"],["nuke"],["nuked"],["nukes"],["nuking"],["null"],["nullah"],["nullahs"],["nulled"],["nullify"],["nulling"],["nullity"],["nulls"],["numb"],["numbat"],["numbats"],["numbed"],["number"],["numbered"],["numberer"],["numbers"],["numbest"],["numbfish"],["numbing"],["numbles"],["numbly"],["numbness"],["numbs"],["numen"],["numeracy"],["numeral"],["numerals"],["numerary"],["numerate"],["numeric"],["numerics"],["numerous"],["numina"],["numinous"],["nummary"],["nummular"],["numskull"],["nun"],["nunatak"],["nunataks"],["nunchaku"],["nuncio"],["nuncios"],["nuncle"],["nuncles"],["nunlike"],["nunnery"],["nunnish"],["nuns"],["nuptial"],["nuptials"],["nurd"],["nurds"],["nurl"],["nurled"],["nurling"],["nurls"],["nurse"],["nursed"],["nurser"],["nursers"],["nursery"],["nurses"],["nursing"],["nursings"],["nursling"],["nurtural"],["nurture"],["nurtured"],["nurturer"],["nurtures"],["nus"],["nut"],["nutant"],["nutate"],["nutated"],["nutates"],["nutating"],["nutation"],["nutbrown"],["nutgall"],["nutgalls"],["nutgrass"],["nuthatch"],["nuthouse"],["nutlet"],["nutlets"],["nutlike"],["nutmeat"],["nutmeats"],["nutmeg"],["nutmegs"],["nutpick"],["nutpicks"],["nutria"],["nutrias"],["nutrient"],["nuts"],["nutsedge"],["nutshell"],["nutsier"],["nutsiest"],["nutsy"],["nutted"],["nutter"],["nutters"],["nuttier"],["nuttiest"],["nuttily"],["nutting"],["nuttings"],["nutty"],["nutwood"],["nutwoods"],["nuzzle"],["nuzzled"],["nuzzler"],["nuzzlers"],["nuzzles"],["nuzzling"],["nyala"],["nyalas"],["nylghai"],["nylghais"],["nylghau"],["nylghaus"],["nylon"],["nylons"],["nymph"],["nympha"],["nymphae"],["nymphal"],["nymphean"],["nymphet"],["nymphets"],["nympho"],["nymphos"],["nymphs"],["nystatin"],["oaf"],["oafish"],["oafishly"],["oafs"],["oak"],["oaken"],["oaklike"],["oakmoss"],["oaks"],["oakum"],["oakums"],["oar"],["oared"],["oarfish"],["oaring"],["oarless"],["oarlike"],["oarlock"],["oarlocks"],["oars"],["oarsman"],["oarsmen"],["oases"],["oasis"],["oast"],["oasts"],["oat"],["oatcake"],["oatcakes"],["oaten"],["oater"],["oaters"],["oath"],["oaths"],["oatlike"],["oatmeal"],["oatmeals"],["oats"],["oaves"],["obconic"],["obduracy"],["obdurate"],["obe"],["obeah"],["obeahism"],["obeahs"],["obedient"],["obeisant"],["obeli"],["obelia"],["obelias"],["obelise"],["obelised"],["obelises"],["obelisk"],["obelisks"],["obelism"],["obelisms"],["obelize"],["obelized"],["obelizes"],["obelus"],["obes"],["obese"],["obesely"],["obesity"],["obey"],["obeyable"],["obeyed"],["obeyer"],["obeyers"],["obeying"],["obeys"],["obi"],["obia"],["obias"],["obiism"],["obiisms"],["obis"],["obit"],["obits"],["obituary"],["object"],["objected"],["objector"],["objects"],["oblast"],["oblasti"],["oblasts"],["oblate"],["oblately"],["oblates"],["oblation"],["oblatory"],["obligate"],["obligati"],["obligato"],["oblige"],["obliged"],["obligee"],["obligees"],["obliger"],["obligers"],["obliges"],["obliging"],["obligor"],["obligors"],["oblique"],["obliqued"],["obliques"],["oblivion"],["oblong"],["oblongly"],["oblongs"],["obloquy"],["oboe"],["oboes"],["oboist"],["oboists"],["obol"],["obole"],["oboles"],["oboli"],["obols"],["obolus"],["obovate"],["obovoid"],["obscene"],["obscener"],["obscure"],["obscured"],["obscurer"],["obscures"],["obsequy"],["observe"],["observed"],["observer"],["observes"],["obsess"],["obsessed"],["obsesses"],["obsessor"],["obsidian"],["obsolete"],["obstacle"],["obstruct"],["obtain"],["obtained"],["obtainer"],["obtains"],["obtect"],["obtected"],["obtest"],["obtested"],["obtests"],["obtrude"],["obtruded"],["obtruder"],["obtrudes"],["obtund"],["obtunded"],["obtunds"],["obturate"],["obtuse"],["obtusely"],["obtuser"],["obtusest"],["obtusity"],["obverse"],["obverses"],["obvert"],["obverted"],["obverts"],["obviable"],["obviate"],["obviated"],["obviates"],["obviator"],["obvious"],["obvolute"],["oca"],["ocarina"],["ocarinas"],["ocas"],["occasion"],["occident"],["occipita"],["occiput"],["occiputs"],["occlude"],["occluded"],["occludes"],["occlusal"],["occult"],["occulted"],["occulter"],["occultly"],["occults"],["occupant"],["occupied"],["occupier"],["occupies"],["occupy"],["occur"],["occurred"],["occurs"],["ocean"],["oceanaut"],["oceanic"],["oceans"],["ocellar"],["ocellate"],["ocelli"],["ocellus"],["oceloid"],["ocelot"],["ocelots"],["ocher"],["ochered"],["ochering"],["ocherous"],["ochers"],["ochery"],["ochone"],["ochre"],["ochrea"],["ochreae"],["ochred"],["ochreous"],["ochres"],["ochring"],["ochroid"],["ochrous"],["ochry"],["ocker"],["ockers"],["ocotillo"],["ocrea"],["ocreae"],["ocreate"],["octad"],["octadic"],["octads"],["octagon"],["octagons"],["octal"],["octan"],["octane"],["octanes"],["octangle"],["octanol"],["octanols"],["octans"],["octant"],["octantal"],["octants"],["octarchy"],["octaval"],["octave"],["octaves"],["octavo"],["octavos"],["octet"],["octets"],["octette"],["octettes"],["octonary"],["octopi"],["octopod"],["octopods"],["octopus"],["octoroon"],["octroi"],["octrois"],["octuple"],["octupled"],["octuples"],["octuplet"],["octuplex"],["octuply"],["octyl"],["octyls"],["ocular"],["ocularly"],["oculars"],["oculist"],["oculists"],["od"],["odalisk"],["odalisks"],["odd"],["oddball"],["oddballs"],["odder"],["oddest"],["oddish"],["oddities"],["oddity"],["oddly"],["oddment"],["oddments"],["oddness"],["odds"],["ode"],["odea"],["odeon"],["odeons"],["odes"],["odeum"],["odeums"],["odic"],["odious"],["odiously"],["odist"],["odists"],["odium"],["odiums"],["odograph"],["odometer"],["odometry"],["odonate"],["odonates"],["odontoid"],["odor"],["odorant"],["odorants"],["odored"],["odorful"],["odorize"],["odorized"],["odorizes"],["odorless"],["odorous"],["odors"],["odour"],["odourful"],["odours"],["ods"],["odyl"],["odyle"],["odyles"],["odyls"],["odyssey"],["odysseys"],["oe"],["oecology"],["oedema"],["oedemas"],["oedemata"],["oedipal"],["oedipean"],["oeillade"],["oenology"],["oenomel"],["oenomels"],["oersted"],["oersteds"],["oes"],["oestrin"],["oestrins"],["oestriol"],["oestrone"],["oestrous"],["oestrum"],["oestrums"],["oestrus"],["oeuvre"],["oeuvres"],["of"],["ofay"],["ofays"],["off"],["offal"],["offals"],["offbeat"],["offbeats"],["offcast"],["offcasts"],["offed"],["offence"],["offences"],["offend"],["offended"],["offender"],["offends"],["offense"],["offenses"],["offer"],["offered"],["offerer"],["offerers"],["offering"],["offeror"],["offerors"],["offers"],["offhand"],["office"],["officer"],["officers"],["offices"],["official"],["offing"],["offings"],["offish"],["offishly"],["offkey"],["offload"],["offloads"],["offprint"],["offramp"],["offramps"],["offs"],["offset"],["offsets"],["offshoot"],["offshore"],["offside"],["offsides"],["offstage"],["offtrack"],["oft"],["often"],["oftener"],["oftenest"],["ofter"],["oftest"],["ofttimes"],["ogam"],["ogams"],["ogdoad"],["ogdoads"],["ogee"],["ogees"],["ogham"],["oghamic"],["oghamist"],["oghams"],["ogival"],["ogive"],["ogives"],["ogle"],["ogled"],["ogler"],["oglers"],["ogles"],["ogling"],["ogre"],["ogreish"],["ogreism"],["ogreisms"],["ogres"],["ogress"],["ogresses"],["ogrish"],["ogrishly"],["ogrism"],["ogrisms"],["oh"],["ohed"],["ohia"],["ohias"],["ohing"],["ohm"],["ohmage"],["ohmages"],["ohmic"],["ohmmeter"],["ohms"],["oho"],["ohs"],["oidia"],["oidium"],["oil"],["oilbird"],["oilbirds"],["oilcamp"],["oilcamps"],["oilcan"],["oilcans"],["oilcloth"],["oilcup"],["oilcups"],["oiled"],["oiler"],["oilers"],["oilhole"],["oilholes"],["oilier"],["oiliest"],["oilily"],["oiliness"],["oiling"],["oilman"],["oilmen"],["oilpaper"],["oilproof"],["oils"],["oilseed"],["oilseeds"],["oilskin"],["oilskins"],["oilstone"],["oiltight"],["oilway"],["oilways"],["oily"],["oink"],["oinked"],["oinking"],["oinks"],["oinology"],["oinomel"],["oinomels"],["ointment"],["oiticica"],["oka"],["okapi"],["okapis"],["okas"],["okay"],["okayed"],["okaying"],["okays"],["oke"],["okeh"],["okehs"],["okes"],["okeydoke"],["okra"],["okras"],["old"],["olden"],["older"],["oldest"],["oldie"],["oldies"],["oldish"],["oldness"],["olds"],["oldsquaw"],["oldster"],["oldsters"],["oldstyle"],["oldwife"],["oldwives"],["oldy"],["ole"],["olea"],["oleander"],["oleaster"],["oleate"],["oleates"],["olefin"],["olefine"],["olefines"],["olefinic"],["olefins"],["oleic"],["olein"],["oleine"],["oleines"],["oleins"],["oleo"],["oleos"],["oles"],["oleum"],["oleums"],["olibanum"],["oligarch"],["oligomer"],["oliguria"],["olio"],["olios"],["olivary"],["olive"],["olives"],["olivine"],["olivines"],["olivinic"],["olla"],["ollas"],["ologies"],["ologist"],["ologists"],["ology"],["oloroso"],["olorosos"],["olympiad"],["om"],["omasa"],["omasum"],["omber"],["ombers"],["ombre"],["ombres"],["omega"],["omegas"],["omelet"],["omelets"],["omelette"],["omen"],["omened"],["omening"],["omens"],["omenta"],["omental"],["omentum"],["omentums"],["omer"],["omers"],["omicron"],["omicrons"],["omikron"],["omikrons"],["ominous"],["omission"],["omissive"],["omit"],["omits"],["omitted"],["omitter"],["omitters"],["omitting"],["omniarch"],["omnibus"],["omnific"],["omniform"],["omnimode"],["omnivora"],["omnivore"],["omophagy"],["omphali"],["omphalos"],["oms"],["on"],["onager"],["onagers"],["onagri"],["onanism"],["onanisms"],["onanist"],["onanists"],["onboard"],["once"],["oncidium"],["oncogene"],["oncology"],["oncoming"],["ondogram"],["one"],["onefold"],["oneiric"],["oneness"],["onerier"],["oneriest"],["onerous"],["onery"],["ones"],["oneself"],["onetime"],["ongoing"],["onion"],["onions"],["onium"],["onlooker"],["only"],["onrush"],["onrushes"],["ons"],["onset"],["onsets"],["onshore"],["onside"],["onstage"],["ontic"],["onto"],["ontogeny"],["ontology"],["onus"],["onuses"],["onward"],["onwards"],["onyx"],["onyxes"],["oocyst"],["oocysts"],["oocyte"],["oocytes"],["oodles"],["oodlins"],["oogamete"],["oogamies"],["oogamous"],["oogamy"],["oogenies"],["oogeny"],["oogonia"],["oogonial"],["oogonium"],["ooh"],["oohed"],["oohing"],["oohs"],["oolachan"],["oolite"],["oolites"],["oolith"],["ooliths"],["oolitic"],["oologic"],["oologies"],["oologist"],["oology"],["oolong"],["oolongs"],["oomiac"],["oomiack"],["oomiacks"],["oomiacs"],["oomiak"],["oomiaks"],["oompah"],["oompahed"],["oompahs"],["oomph"],["oomphs"],["oophyte"],["oophytes"],["oophytic"],["oops"],["oorali"],["ooralis"],["oorie"],["oosperm"],["oosperms"],["oosphere"],["oospore"],["oospores"],["oosporic"],["oot"],["ootheca"],["oothecae"],["oothecal"],["ootid"],["ootids"],["oots"],["ooze"],["oozed"],["oozes"],["oozier"],["ooziest"],["oozily"],["ooziness"],["oozing"],["oozy"],["op"],["opacify"],["opacity"],["opah"],["opahs"],["opal"],["opalesce"],["opaline"],["opalines"],["opals"],["opaque"],["opaqued"],["opaquely"],["opaquer"],["opaques"],["opaquest"],["opaquing"],["ope"],["oped"],["open"],["openable"],["opened"],["opener"],["openers"],["openest"],["opening"],["openings"],["openly"],["openness"],["opens"],["openwork"],["opera"],["operable"],["operably"],["operand"],["operands"],["operant"],["operants"],["operas"],["operate"],["operated"],["operates"],["operatic"],["operator"],["opercele"],["opercula"],["opercule"],["operetta"],["operon"],["operons"],["operose"],["opes"],["ophidian"],["ophite"],["ophites"],["ophitic"],["opiate"],["opiated"],["opiates"],["opiating"],["opine"],["opined"],["opines"],["oping"],["opining"],["opinion"],["opinions"],["opioid"],["opioids"],["opium"],["opiumism"],["opiums"],["opossum"],["opossums"],["oppidan"],["oppidans"],["oppilant"],["oppilate"],["opponent"],["oppose"],["opposed"],["opposer"],["opposers"],["opposes"],["opposing"],["opposite"],["oppress"],["oppugn"],["oppugned"],["oppugner"],["oppugns"],["ops"],["opsin"],["opsins"],["opsonic"],["opsonify"],["opsonin"],["opsonins"],["opsonize"],["opt"],["optative"],["opted"],["optic"],["optical"],["optician"],["opticist"],["optics"],["optima"],["optimal"],["optime"],["optimes"],["optimise"],["optimism"],["optimist"],["optimize"],["optimum"],["optimums"],["opting"],["option"],["optional"],["optioned"],["optionee"],["options"],["opts"],["opulence"],["opulency"],["opulent"],["opuntia"],["opuntias"],["opus"],["opuscula"],["opuscule"],["opuses"],["oquassa"],["oquassas"],["or"],["ora"],["orach"],["orache"],["oraches"],["oracle"],["oracles"],["oracular"],["orad"],["oral"],["oralism"],["oralisms"],["oralist"],["oralists"],["orality"],["orally"],["orals"],["orang"],["orange"],["orangery"],["oranges"],["orangey"],["orangier"],["orangish"],["orangs"],["orangy"],["orate"],["orated"],["orates"],["orating"],["oration"],["orations"],["orator"],["oratorio"],["orators"],["oratory"],["oratress"],["oratrix"],["orb"],["orbed"],["orbier"],["orbiest"],["orbing"],["orbit"],["orbital"],["orbitals"],["orbited"],["orbiter"],["orbiters"],["orbiting"],["orbits"],["orbs"],["orby"],["orc"],["orca"],["orcas"],["orcein"],["orceins"],["orchard"],["orchards"],["orchid"],["orchids"],["orchil"],["orchils"],["orchis"],["orchises"],["orchitic"],["orchitis"],["orcin"],["orcinol"],["orcinols"],["orcins"],["orcs"],["ordain"],["ordained"],["ordainer"],["ordains"],["ordeal"],["ordeals"],["order"],["ordered"],["orderer"],["orderers"],["ordering"],["orderly"],["orders"],["ordinal"],["ordinals"],["ordinand"],["ordinary"],["ordinate"],["ordines"],["ordnance"],["ordo"],["ordos"],["ordure"],["ordures"],["ore"],["oread"],["oreads"],["orectic"],["orective"],["oregano"],["oreganos"],["oreide"],["oreides"],["ores"],["orfray"],["orfrays"],["organ"],["organa"],["organdie"],["organdy"],["organic"],["organics"],["organise"],["organism"],["organist"],["organize"],["organon"],["organons"],["organs"],["organum"],["organums"],["organza"],["organzas"],["orgasm"],["orgasmic"],["orgasms"],["orgastic"],["orgeat"],["orgeats"],["orgiac"],["orgic"],["orgies"],["orgone"],["orgones"],["orgulous"],["orgy"],["oribatid"],["oribi"],["oribis"],["oriel"],["oriels"],["orient"],["oriental"],["oriented"],["orients"],["orifice"],["orifices"],["origami"],["origamis"],["origan"],["origans"],["origanum"],["origin"],["original"],["origins"],["orinasal"],["oriole"],["orioles"],["orison"],["orisons"],["orle"],["orles"],["orlop"],["orlops"],["ormer"],["ormers"],["ormolu"],["ormolus"],["ornament"],["ornate"],["ornately"],["ornerier"],["ornery"],["ornis"],["ornithes"],["ornithic"],["orogenic"],["orogeny"],["oroide"],["oroides"],["orology"],["orometer"],["orotund"],["orphan"],["orphaned"],["orphans"],["orphic"],["orphical"],["orphrey"],["orphreys"],["orpiment"],["orpin"],["orpine"],["orpines"],["orpins"],["orra"],["orreries"],["orrery"],["orrice"],["orrices"],["orris"],["orrises"],["ors"],["ort"],["orthicon"],["ortho"],["orthodox"],["orthoepy"],["orthotic"],["ortolan"],["ortolans"],["orts"],["oryx"],["oryxes"],["orzo"],["orzos"],["os"],["osar"],["oscine"],["oscines"],["oscinine"],["oscitant"],["oscula"],["osculant"],["oscular"],["osculate"],["oscule"],["oscules"],["osculum"],["ose"],["oses"],["osier"],["osiers"],["osmatic"],["osmic"],["osmics"],["osmious"],["osmium"],["osmiums"],["osmol"],["osmolal"],["osmolar"],["osmols"],["osmose"],["osmosed"],["osmoses"],["osmosing"],["osmosis"],["osmotic"],["osmous"],["osmund"],["osmunda"],["osmundas"],["osmunds"],["osnaburg"],["osprey"],["ospreys"],["ossa"],["ossein"],["osseins"],["osseous"],["ossia"],["ossicle"],["ossicles"],["ossific"],["ossified"],["ossifier"],["ossifies"],["ossify"],["ossuary"],["osteal"],["osteitic"],["osteitis"],["osteoid"],["osteoids"],["osteoma"],["osteomas"],["osteoses"],["osteosis"],["ostia"],["ostiary"],["ostinato"],["ostiolar"],["ostiole"],["ostioles"],["ostium"],["ostler"],["ostlers"],["ostmark"],["ostmarks"],["ostomies"],["ostomy"],["ostoses"],["ostosis"],["ostraca"],["ostracod"],["ostracon"],["ostrich"],["otalgia"],["otalgias"],["otalgic"],["otalgies"],["otalgy"],["other"],["others"],["otic"],["otiose"],["otiosely"],["otiosity"],["otitic"],["otitides"],["otitis"],["otocyst"],["otocysts"],["otolith"],["otoliths"],["otology"],["otoscope"],["otoscopy"],["ototoxic"],["ottar"],["ottars"],["ottava"],["ottavas"],["otter"],["otters"],["otto"],["ottoman"],["ottomans"],["ottos"],["ouabain"],["ouabains"],["ouch"],["ouched"],["ouches"],["ouching"],["oud"],["ouds"],["ought"],["oughted"],["oughting"],["oughts"],["ouguiya"],["ouistiti"],["ounce"],["ounces"],["ouph"],["ouphe"],["ouphes"],["ouphs"],["our"],["ourang"],["ourangs"],["ourari"],["ouraris"],["ourebi"],["ourebis"],["ourie"],["ours"],["ourself"],["ousel"],["ousels"],["oust"],["ousted"],["ouster"],["ousters"],["ousting"],["ousts"],["out"],["outact"],["outacted"],["outacts"],["outadd"],["outadded"],["outadds"],["outage"],["outages"],["outargue"],["outask"],["outasked"],["outasks"],["outate"],["outback"],["outbacks"],["outbake"],["outbaked"],["outbakes"],["outbark"],["outbarks"],["outbawl"],["outbawls"],["outbeam"],["outbeams"],["outbeg"],["outbegs"],["outbid"],["outbids"],["outbitch"],["outblaze"],["outbleat"],["outbless"],["outbloom"],["outbluff"],["outblush"],["outboard"],["outboast"],["outbound"],["outbox"],["outboxed"],["outboxes"],["outbrag"],["outbrags"],["outbrave"],["outbrawl"],["outbreak"],["outbred"],["outbreed"],["outbribe"],["outbuild"],["outbuilt"],["outbulk"],["outbulks"],["outbully"],["outburn"],["outburns"],["outburnt"],["outburst"],["outby"],["outbye"],["outcaper"],["outcast"],["outcaste"],["outcasts"],["outcatch"],["outcavil"],["outcharm"],["outcheat"],["outchid"],["outchide"],["outclass"],["outclimb"],["outclomb"],["outcoach"],["outcome"],["outcomes"],["outcook"],["outcooks"],["outcount"],["outcrawl"],["outcried"],["outcries"],["outcrop"],["outcrops"],["outcross"],["outcrow"],["outcrows"],["outcry"],["outcurse"],["outcurve"],["outdance"],["outdare"],["outdared"],["outdares"],["outdate"],["outdated"],["outdates"],["outdid"],["outdo"],["outdodge"],["outdoer"],["outdoers"],["outdoes"],["outdoing"],["outdone"],["outdoor"],["outdoors"],["outdrag"],["outdrags"],["outdrank"],["outdraw"],["outdrawn"],["outdraws"],["outdream"],["outdress"],["outdrew"],["outdrink"],["outdrive"],["outdrop"],["outdrops"],["outdrove"],["outdrunk"],["outduel"],["outduels"],["outearn"],["outearns"],["outeat"],["outeaten"],["outeats"],["outecho"],["outed"],["outer"],["outers"],["outfable"],["outface"],["outfaced"],["outfaces"],["outfall"],["outfalls"],["outfast"],["outfasts"],["outfawn"],["outfawns"],["outfeast"],["outfeel"],["outfeels"],["outfelt"],["outfield"],["outfight"],["outfind"],["outfinds"],["outfire"],["outfired"],["outfires"],["outfish"],["outfit"],["outfits"],["outflank"],["outflew"],["outflies"],["outflow"],["outflown"],["outflows"],["outfly"],["outfool"],["outfools"],["outfoot"],["outfoots"],["outfound"],["outfox"],["outfoxed"],["outfoxes"],["outfrown"],["outgain"],["outgains"],["outgas"],["outgave"],["outgive"],["outgiven"],["outgives"],["outglare"],["outglow"],["outglows"],["outgnaw"],["outgnawn"],["outgnaws"],["outgo"],["outgoes"],["outgoing"],["outgone"],["outgrew"],["outgrin"],["outgrins"],["outgross"],["outgroup"],["outgrow"],["outgrown"],["outgrows"],["outguess"],["outguide"],["outgun"],["outguns"],["outgush"],["outhaul"],["outhauls"],["outhear"],["outheard"],["outhears"],["outhit"],["outhits"],["outhomer"],["outhouse"],["outhowl"],["outhowls"],["outhumor"],["outhunt"],["outhunts"],["outing"],["outings"],["outjinx"],["outjump"],["outjumps"],["outjut"],["outjuts"],["outkeep"],["outkeeps"],["outkept"],["outkick"],["outkicks"],["outkill"],["outkills"],["outkiss"],["outlaid"],["outlain"],["outland"],["outlands"],["outlast"],["outlasts"],["outlaugh"],["outlaw"],["outlawed"],["outlawry"],["outlaws"],["outlay"],["outlays"],["outleap"],["outleaps"],["outleapt"],["outlearn"],["outlet"],["outlets"],["outlie"],["outlier"],["outliers"],["outlies"],["outline"],["outlined"],["outliner"],["outlines"],["outlive"],["outlived"],["outliver"],["outlives"],["outlook"],["outlooks"],["outlove"],["outloved"],["outloves"],["outlying"],["outman"],["outmans"],["outmarch"],["outmatch"],["outmode"],["outmoded"],["outmodes"],["outmost"],["outmove"],["outmoved"],["outmoves"],["outpace"],["outpaced"],["outpaces"],["outpaint"],["outpass"],["outpitch"],["outpity"],["outplan"],["outplans"],["outplay"],["outplays"],["outplod"],["outplods"],["outplot"],["outplots"],["outpoint"],["outpoll"],["outpolls"],["outport"],["outports"],["outpost"],["outposts"],["outpour"],["outpours"],["outpray"],["outprays"],["outpreen"],["outpress"],["outprice"],["outpull"],["outpulls"],["outpunch"],["outpush"],["output"],["outputs"],["outquote"],["outrace"],["outraced"],["outraces"],["outrage"],["outraged"],["outrages"],["outraise"],["outran"],["outrance"],["outrang"],["outrange"],["outrank"],["outranks"],["outrate"],["outrated"],["outrates"],["outrave"],["outraved"],["outraves"],["outre"],["outreach"],["outread"],["outreads"],["outride"],["outrider"],["outrides"],["outright"],["outring"],["outrings"],["outrival"],["outroar"],["outroars"],["outrock"],["outrocks"],["outrode"],["outroll"],["outrolls"],["outroot"],["outroots"],["outrow"],["outrowed"],["outrows"],["outrun"],["outrung"],["outruns"],["outrush"],["outs"],["outsail"],["outsails"],["outsang"],["outsat"],["outsavor"],["outsaw"],["outscold"],["outscoop"],["outscore"],["outscorn"],["outsee"],["outseen"],["outsees"],["outsell"],["outsells"],["outsert"],["outserts"],["outserve"],["outset"],["outsets"],["outshame"],["outshine"],["outshone"],["outshoot"],["outshot"],["outshout"],["outside"],["outsider"],["outsides"],["outsight"],["outsin"],["outsing"],["outsings"],["outsins"],["outsit"],["outsits"],["outsize"],["outsized"],["outsizes"],["outskate"],["outskirt"],["outsleep"],["outslept"],["outsmart"],["outsmile"],["outsmoke"],["outsnore"],["outsoar"],["outsoars"],["outsold"],["outsole"],["outsoles"],["outspan"],["outspans"],["outspeak"],["outsped"],["outspeed"],["outspell"],["outspelt"],["outspend"],["outspent"],["outspoke"],["outstand"],["outstare"],["outstart"],["outstate"],["outstay"],["outstays"],["outsteer"],["outstood"],["outstrip"],["outstudy"],["outstunt"],["outsulk"],["outsulks"],["outsung"],["outswam"],["outsware"],["outswear"],["outswim"],["outswims"],["outswore"],["outsworn"],["outswum"],["outtake"],["outtakes"],["outtalk"],["outtalks"],["outtask"],["outtasks"],["outtell"],["outtells"],["outthank"],["outthink"],["outthrew"],["outthrob"],["outthrow"],["outtold"],["outtower"],["outtrade"],["outtrick"],["outtrot"],["outtrots"],["outtrump"],["outturn"],["outturns"],["outvalue"],["outvaunt"],["outvie"],["outvied"],["outvies"],["outvoice"],["outvote"],["outvoted"],["outvotes"],["outvying"],["outwait"],["outwaits"],["outwalk"],["outwalks"],["outwar"],["outward"],["outwards"],["outwars"],["outwash"],["outwaste"],["outwatch"],["outwear"],["outwears"],["outweary"],["outweep"],["outweeps"],["outweigh"],["outwent"],["outwept"],["outwhirl"],["outwile"],["outwiled"],["outwiles"],["outwill"],["outwills"],["outwind"],["outwinds"],["outwish"],["outwit"],["outwits"],["outwore"],["outwork"],["outworks"],["outworn"],["outwrit"],["outwrite"],["outwrote"],["outyell"],["outyells"],["outyelp"],["outyelps"],["outyield"],["ouzel"],["ouzels"],["ouzo"],["ouzos"],["ova"],["oval"],["ovality"],["ovally"],["ovalness"],["ovals"],["ovarial"],["ovarian"],["ovaries"],["ovariole"],["ovaritis"],["ovary"],["ovate"],["ovately"],["ovation"],["ovations"],["oven"],["ovenbird"],["ovenlike"],["ovens"],["ovenware"],["over"],["overable"],["overact"],["overacts"],["overage"],["overages"],["overall"],["overalls"],["overapt"],["overarch"],["overarm"],["overate"],["overawe"],["overawed"],["overawes"],["overbake"],["overbear"],["overbeat"],["overbed"],["overbet"],["overbets"],["overbid"],["overbids"],["overbig"],["overbill"],["overbite"],["overblew"],["overblow"],["overboil"],["overbold"],["overbook"],["overbore"],["overborn"],["overbred"],["overburn"],["overbusy"],["overbuy"],["overbuys"],["overcall"],["overcame"],["overcast"],["overcoat"],["overcold"],["overcome"],["overcook"],["overcool"],["overcoy"],["overcram"],["overcrop"],["overcure"],["overdare"],["overdear"],["overdeck"],["overdid"],["overdo"],["overdoer"],["overdoes"],["overdone"],["overdose"],["overdraw"],["overdrew"],["overdry"],["overdub"],["overdubs"],["overdue"],["overdye"],["overdyed"],["overdyes"],["overeasy"],["overeat"],["overeats"],["overed"],["overedit"],["overfar"],["overfast"],["overfat"],["overfear"],["overfed"],["overfeed"],["overfill"],["overfish"],["overflew"],["overflow"],["overfly"],["overfond"],["overfoul"],["overfree"],["overfull"],["overfund"],["overgild"],["overgilt"],["overgird"],["overgirt"],["overglad"],["overgoad"],["overgrew"],["overgrow"],["overhand"],["overhang"],["overhard"],["overhate"],["overhaul"],["overhead"],["overheap"],["overhear"],["overheat"],["overheld"],["overhigh"],["overhold"],["overholy"],["overhope"],["overhot"],["overhung"],["overhunt"],["overhype"],["overidle"],["overing"],["overjoy"],["overjoys"],["overjust"],["overkeen"],["overkill"],["overkind"],["overlade"],["overlaid"],["overlain"],["overland"],["overlap"],["overlaps"],["overlate"],["overlax"],["overlay"],["overlays"],["overleaf"],["overleap"],["overlend"],["overlent"],["overlet"],["overlets"],["overlewd"],["overlie"],["overlies"],["overlit"],["overlive"],["overload"],["overlong"],["overlook"],["overlord"],["overloud"],["overlove"],["overlush"],["overly"],["overman"],["overmans"],["overmany"],["overmeek"],["overmelt"],["overmen"],["overmild"],["overmilk"],["overmine"],["overmix"],["overmuch"],["overnear"],["overneat"],["overnew"],["overnice"],["overpaid"],["overpass"],["overpast"],["overpay"],["overpays"],["overpert"],["overplan"],["overplay"],["overplot"],["overplus"],["overply"],["overpump"],["overran"],["overrank"],["overrash"],["overrate"],["overrich"],["override"],["overrife"],["overripe"],["overrode"],["overrude"],["overruff"],["overrule"],["overrun"],["overruns"],["overs"],["oversad"],["oversale"],["oversalt"],["oversave"],["oversaw"],["oversea"],["overseas"],["oversee"],["overseed"],["overseen"],["overseer"],["oversees"],["oversell"],["overset"],["oversets"],["oversew"],["oversewn"],["oversews"],["overshoe"],["overshot"],["oversick"],["overside"],["oversize"],["overslip"],["overslow"],["oversoak"],["oversoft"],["oversold"],["oversoon"],["oversoul"],["overspin"],["overstay"],["overstep"],["overstir"],["oversuds"],["oversup"],["oversups"],["oversure"],["overt"],["overtake"],["overtalk"],["overtame"],["overtart"],["overtask"],["overtax"],["overthin"],["overtime"],["overtip"],["overtips"],["overtire"],["overtly"],["overtoil"],["overtone"],["overtook"],["overtop"],["overtops"],["overtrim"],["overture"],["overturn"],["overurge"],["overuse"],["overused"],["overuses"],["overview"],["overvote"],["overwarm"],["overwary"],["overweak"],["overwear"],["overween"],["overwet"],["overwets"],["overwide"],["overwily"],["overwind"],["overwise"],["overword"],["overwore"],["overwork"],["overworn"],["overzeal"],["ovibos"],["ovicidal"],["ovicide"],["ovicides"],["oviducal"],["oviduct"],["oviducts"],["oviform"],["ovine"],["ovines"],["ovipara"],["oviposit"],["ovisac"],["ovisacs"],["ovoid"],["ovoidal"],["ovoids"],["ovoli"],["ovolo"],["ovolos"],["ovonic"],["ovonics"],["ovular"],["ovulary"],["ovulate"],["ovulated"],["ovulates"],["ovule"],["ovules"],["ovum"],["ow"],["owe"],["owed"],["owes"],["owing"],["owl"],["owlet"],["owlets"],["owlish"],["owlishly"],["owllike"],["owls"],["own"],["ownable"],["owned"],["owner"],["owners"],["owning"],["owns"],["owse"],["owsen"],["ox"],["oxalate"],["oxalated"],["oxalates"],["oxalic"],["oxalis"],["oxalises"],["oxazepam"],["oxazine"],["oxazines"],["oxblood"],["oxbloods"],["oxbow"],["oxbows"],["oxcart"],["oxcarts"],["oxen"],["oxes"],["oxeye"],["oxeyes"],["oxford"],["oxfords"],["oxheart"],["oxhearts"],["oxid"],["oxidable"],["oxidant"],["oxidants"],["oxidase"],["oxidases"],["oxidasic"],["oxidate"],["oxidated"],["oxidates"],["oxide"],["oxides"],["oxidic"],["oxidise"],["oxidised"],["oxidiser"],["oxidises"],["oxidize"],["oxidized"],["oxidizer"],["oxidizes"],["oxids"],["oxim"],["oxime"],["oximes"],["oxims"],["oxlip"],["oxlips"],["oxo"],["oxpecker"],["oxtail"],["oxtails"],["oxter"],["oxters"],["oxtongue"],["oxy"],["oxyacid"],["oxyacids"],["oxygen"],["oxygenic"],["oxygens"],["oxymora"],["oxymoron"],["oxyphil"],["oxyphile"],["oxyphils"],["oxysalt"],["oxysalts"],["oxysome"],["oxysomes"],["oxytocic"],["oxytocin"],["oxytone"],["oxytones"],["oy"],["oyer"],["oyers"],["oyes"],["oyesses"],["oyez"],["oyster"],["oystered"],["oysterer"],["oysters"],["ozone"],["ozones"],["ozonic"],["ozonide"],["ozonides"],["ozonise"],["ozonised"],["ozonises"],["ozonize"],["ozonized"],["ozonizer"],["ozonizes"],["ozonous"],["pa"],["pabular"],["pabulum"],["pabulums"],["pac"],["paca"],["pacas"],["pace"],["paced"],["pacer"],["pacers"],["paces"],["pacha"],["pachadom"],["pachalic"],["pachas"],["pachinko"],["pachisi"],["pachisis"],["pachouli"],["pachuco"],["pachucos"],["pacific"],["pacified"],["pacifier"],["pacifies"],["pacifism"],["pacifist"],["pacify"],["pacing"],["pack"],["packable"],["package"],["packaged"],["packager"],["packages"],["packed"],["packer"],["packers"],["packet"],["packeted"],["packets"],["packing"],["packings"],["packly"],["packman"],["packmen"],["packness"],["packs"],["packsack"],["packwax"],["pacs"],["pact"],["paction"],["pactions"],["pacts"],["pad"],["padauk"],["padauks"],["padded"],["padder"],["padders"],["paddies"],["padding"],["paddings"],["paddle"],["paddled"],["paddler"],["paddlers"],["paddles"],["paddling"],["paddock"],["paddocks"],["paddy"],["padi"],["padis"],["padishah"],["padle"],["padles"],["padlock"],["padlocks"],["padnag"],["padnags"],["padouk"],["padouks"],["padre"],["padres"],["padri"],["padrone"],["padrones"],["padroni"],["pads"],["padshah"],["padshahs"],["paduasoy"],["paean"],["paeanism"],["paeans"],["paella"],["paellas"],["paeon"],["paeons"],["paesan"],["paesani"],["paesano"],["paesanos"],["paesans"],["pagan"],["pagandom"],["paganise"],["paganish"],["paganism"],["paganist"],["paganize"],["pagans"],["page"],["pageant"],["pageants"],["pageboy"],["pageboys"],["paged"],["pager"],["pagers"],["pages"],["paginal"],["paginate"],["paging"],["pagings"],["pagod"],["pagoda"],["pagodas"],["pagods"],["pagurian"],["pagurid"],["pagurids"],["pah"],["pahlavi"],["pahlavis"],["pahoehoe"],["paid"],["paik"],["paiked"],["paiking"],["paiks"],["pail"],["pailful"],["pailfuls"],["paillard"],["pails"],["pailsful"],["pain"],["painch"],["painches"],["pained"],["painful"],["paining"],["painless"],["pains"],["paint"],["painted"],["painter"],["painters"],["paintier"],["painting"],["paints"],["painty"],["pair"],["paired"],["pairing"],["pairings"],["pairs"],["paisa"],["paisan"],["paisana"],["paisanas"],["paisano"],["paisanos"],["paisans"],["paisas"],["paise"],["paisley"],["paisleys"],["pajama"],["pajamaed"],["pajamas"],["pal"],["palabra"],["palabras"],["palace"],["palaced"],["palaces"],["paladin"],["paladins"],["palais"],["palatal"],["palatals"],["palate"],["palates"],["palatial"],["palatine"],["palaver"],["palavers"],["palazzi"],["palazzo"],["palazzos"],["pale"],["palea"],["paleae"],["paleal"],["paled"],["paleface"],["palely"],["paleness"],["paleosol"],["paler"],["pales"],["palest"],["palestra"],["palet"],["paletot"],["paletots"],["palets"],["palette"],["palettes"],["paleways"],["palewise"],["palfrey"],["palfreys"],["palier"],["paliest"],["palikar"],["palikars"],["palimony"],["paling"],["palings"],["palinode"],["palisade"],["palish"],["pall"],["palladia"],["palladic"],["palled"],["pallet"],["pallets"],["pallette"],["pallia"],["pallial"],["palliate"],["pallid"],["pallidly"],["pallier"],["palliest"],["palling"],["pallium"],["palliums"],["pallor"],["pallors"],["palls"],["pally"],["palm"],["palmar"],["palmary"],["palmate"],["palmated"],["palmed"],["palmer"],["palmers"],["palmette"],["palmetto"],["palmier"],["palmiest"],["palming"],["palmist"],["palmists"],["palmitin"],["palmlike"],["palms"],["palmy"],["palmyra"],["palmyras"],["palomino"],["palooka"],["palookas"],["palp"],["palpable"],["palpably"],["palpal"],["palpate"],["palpated"],["palpates"],["palpator"],["palpebra"],["palpi"],["palps"],["palpus"],["pals"],["palship"],["palships"],["palsied"],["palsies"],["palsy"],["palsying"],["palter"],["paltered"],["palterer"],["palters"],["paltrier"],["paltrily"],["paltry"],["paludal"],["paludism"],["paly"],["pam"],["pampa"],["pampas"],["pampean"],["pampeans"],["pamper"],["pampered"],["pamperer"],["pampero"],["pamperos"],["pampers"],["pamphlet"],["pams"],["pan"],["panacea"],["panacean"],["panaceas"],["panache"],["panaches"],["panada"],["panadas"],["panama"],["panamas"],["panatela"],["panbroil"],["pancake"],["pancaked"],["pancakes"],["panchax"],["pancreas"],["panda"],["pandani"],["pandanus"],["pandas"],["pandect"],["pandects"],["pandemic"],["pander"],["pandered"],["panderer"],["panders"],["pandied"],["pandies"],["pandit"],["pandits"],["pandoor"],["pandoors"],["pandora"],["pandoras"],["pandore"],["pandores"],["pandour"],["pandours"],["pandowdy"],["pandura"],["panduras"],["pandy"],["pandying"],["pane"],["paned"],["panel"],["paneled"],["paneling"],["panelist"],["panelled"],["panels"],["panes"],["panetela"],["panfish"],["panfried"],["panfries"],["panfry"],["panful"],["panfuls"],["pang"],["panga"],["pangas"],["panged"],["pangen"],["pangene"],["pangenes"],["pangens"],["panging"],["pangolin"],["pangs"],["panhuman"],["panic"],["panicked"],["panicky"],["panicle"],["panicled"],["panicles"],["panics"],["panicum"],["panicums"],["panier"],["paniers"],["panmixes"],["panmixia"],["panmixis"],["panne"],["panned"],["pannes"],["pannier"],["panniers"],["pannikin"],["panning"],["panocha"],["panochas"],["panoche"],["panoches"],["panoply"],["panoptic"],["panorama"],["panpipe"],["panpipes"],["pans"],["pansies"],["pansophy"],["pansy"],["pant"],["panted"],["pantheon"],["panther"],["panthers"],["pantie"],["panties"],["pantile"],["pantiled"],["pantiles"],["panting"],["panto"],["pantofle"],["pantos"],["pantoum"],["pantoums"],["pantries"],["pantry"],["pants"],["pantsuit"],["panty"],["panzer"],["panzers"],["pap"],["papa"],["papacies"],["papacy"],["papain"],["papains"],["papal"],["papally"],["papas"],["papaw"],["papaws"],["papaya"],["papayan"],["papayas"],["paper"],["paperboy"],["papered"],["paperer"],["paperers"],["papering"],["papers"],["papery"],["paphian"],["paphians"],["papilla"],["papillae"],["papillar"],["papillon"],["papist"],["papistic"],["papistry"],["papists"],["papoose"],["papooses"],["pappi"],["pappier"],["pappies"],["pappiest"],["pappoose"],["pappose"],["pappous"],["pappus"],["pappy"],["paprica"],["papricas"],["paprika"],["paprikas"],["paps"],["papula"],["papulae"],["papular"],["papule"],["papules"],["papulose"],["papyral"],["papyri"],["papyrian"],["papyrine"],["papyrus"],["par"],["para"],["parable"],["parables"],["parabola"],["parachor"],["parade"],["paraded"],["parader"],["paraders"],["parades"],["paradigm"],["parading"],["paradise"],["parador"],["paradors"],["parados"],["paradox"],["paradrop"],["paraffin"],["paraform"],["paragoge"],["paragon"],["paragons"],["parakeet"],["parakite"],["parallax"],["parallel"],["paralyse"],["paralyze"],["parament"],["paramo"],["paramos"],["paramour"],["parang"],["parangs"],["paranoea"],["paranoia"],["paranoic"],["paranoid"],["parapet"],["parapets"],["paraph"],["paraphs"],["paraquat"],["paraquet"],["paras"],["parasang"],["parashah"],["parasite"],["parasol"],["parasols"],["paravane"],["parawing"],["parazoan"],["parboil"],["parboils"],["parcel"],["parceled"],["parcels"],["parcener"],["parch"],["parched"],["parches"],["parchesi"],["parching"],["parchisi"],["pard"],["pardah"],["pardahs"],["pardee"],["pardi"],["pardie"],["pardine"],["pardner"],["pardners"],["pardon"],["pardoned"],["pardoner"],["pardons"],["pards"],["pardy"],["pare"],["parecism"],["pared"],["pareira"],["pareiras"],["parent"],["parental"],["parented"],["parents"],["parer"],["parerga"],["parergon"],["parers"],["pares"],["pareses"],["paresis"],["paretic"],["paretics"],["pareu"],["pareus"],["pareve"],["parfait"],["parfaits"],["parflesh"],["parfocal"],["parge"],["parged"],["parges"],["parget"],["pargeted"],["pargets"],["parging"],["pargings"],["pargo"],["pargos"],["parhelia"],["parhelic"],["pariah"],["pariahs"],["parian"],["parians"],["paries"],["parietal"],["parietes"],["paring"],["parings"],["paris"],["parises"],["parish"],["parishes"],["parities"],["parity"],["park"],["parka"],["parkas"],["parked"],["parker"],["parkers"],["parking"],["parkings"],["parkland"],["parklike"],["parks"],["parkway"],["parkways"],["parlance"],["parlando"],["parlante"],["parlay"],["parlayed"],["parlays"],["parle"],["parled"],["parles"],["parley"],["parleyed"],["parleyer"],["parleys"],["parling"],["parlor"],["parlors"],["parlour"],["parlours"],["parlous"],["parodic"],["parodied"],["parodies"],["parodist"],["parodoi"],["parodos"],["parody"],["parol"],["parole"],["paroled"],["parolee"],["parolees"],["paroles"],["paroling"],["parols"],["paronym"],["paronyms"],["paroquet"],["parotic"],["parotid"],["parotids"],["parotoid"],["parous"],["paroxysm"],["parquet"],["parquets"],["parr"],["parral"],["parrals"],["parred"],["parrel"],["parrels"],["parridge"],["parried"],["parries"],["parring"],["parritch"],["parroket"],["parrot"],["parroted"],["parroter"],["parrots"],["parroty"],["parrs"],["parry"],["parrying"],["pars"],["parsable"],["parse"],["parsec"],["parsecs"],["parsed"],["parser"],["parsers"],["parses"],["parsing"],["parsley"],["parsleys"],["parsnip"],["parsnips"],["parson"],["parsonic"],["parsons"],["part"],["partake"],["partaken"],["partaker"],["partakes"],["partan"],["partans"],["parted"],["parterre"],["partial"],["partials"],["partible"],["particle"],["partied"],["partier"],["partiers"],["parties"],["parting"],["partings"],["partisan"],["partita"],["partitas"],["partite"],["partizan"],["partlet"],["partlets"],["partly"],["partner"],["partners"],["parton"],["partons"],["partook"],["parts"],["partway"],["party"],["partyer"],["partyers"],["partying"],["parura"],["paruras"],["parure"],["parures"],["parve"],["parvenu"],["parvenue"],["parvenus"],["parvis"],["parvise"],["parvises"],["parvolin"],["pas"],["pascal"],["pascals"],["paschal"],["paschals"],["pase"],["paseo"],["paseos"],["pases"],["pash"],["pasha"],["pashadom"],["pashalic"],["pashalik"],["pashas"],["pashed"],["pashes"],["pashing"],["pasquil"],["pasquils"],["pass"],["passable"],["passably"],["passade"],["passades"],["passado"],["passados"],["passage"],["passaged"],["passages"],["passant"],["passband"],["passbook"],["passe"],["passed"],["passee"],["passel"],["passels"],["passer"],["passerby"],["passers"],["passes"],["passible"],["passim"],["passing"],["passings"],["passion"],["passions"],["passive"],["passives"],["passkey"],["passkeys"],["passless"],["passover"],["passport"],["passus"],["passuses"],["password"],["past"],["pasta"],["pastas"],["paste"],["pasted"],["pastel"],["pastels"],["paster"],["pastern"],["pasterns"],["pasters"],["pastes"],["pasteup"],["pasteups"],["pasticci"],["pastiche"],["pastie"],["pastier"],["pasties"],["pastiest"],["pastil"],["pastille"],["pastils"],["pastime"],["pastimes"],["pastina"],["pastinas"],["pasting"],["pastis"],["pastises"],["pastness"],["pastor"],["pastoral"],["pastored"],["pastors"],["pastrami"],["pastries"],["pastromi"],["pastry"],["pasts"],["pastural"],["pasture"],["pastured"],["pasturer"],["pastures"],["pasty"],["pat"],["pataca"],["patacas"],["patagia"],["patagial"],["patagium"],["patamar"],["patamars"],["patch"],["patched"],["patcher"],["patchers"],["patches"],["patchier"],["patchily"],["patching"],["patchy"],["pate"],["pated"],["patella"],["patellae"],["patellar"],["patellas"],["paten"],["patency"],["patens"],["patent"],["patented"],["patentee"],["patently"],["patentor"],["patents"],["pater"],["paternal"],["paters"],["pates"],["path"],["pathetic"],["pathless"],["pathogen"],["pathos"],["pathoses"],["paths"],["pathway"],["pathways"],["patience"],["patient"],["patients"],["patin"],["patina"],["patinae"],["patinas"],["patinate"],["patine"],["patined"],["patines"],["patining"],["patinize"],["patins"],["patio"],["patios"],["patly"],["patness"],["patois"],["patriot"],["patriots"],["patrol"],["patrols"],["patron"],["patronal"],["patronly"],["patrons"],["patroon"],["patroons"],["pats"],["patsies"],["patsy"],["pattamar"],["patted"],["pattee"],["patten"],["pattens"],["patter"],["pattered"],["patterer"],["pattern"],["patterns"],["patters"],["pattie"],["patties"],["patting"],["patty"],["pattypan"],["patulent"],["patulous"],["paty"],["patzer"],["patzers"],["paucity"],["paughty"],["pauldron"],["paulin"],["paulins"],["paunch"],["paunched"],["paunches"],["paunchy"],["pauper"],["paupered"],["paupers"],["pausal"],["pause"],["paused"],["pauser"],["pausers"],["pauses"],["pausing"],["pavan"],["pavane"],["pavanes"],["pavans"],["pave"],["paved"],["paveed"],["pavement"],["paver"],["pavers"],["paves"],["pavid"],["pavilion"],["pavillon"],["pavin"],["paving"],["pavings"],["pavins"],["pavior"],["paviors"],["paviour"],["paviours"],["pavis"],["pavise"],["paviser"],["pavisers"],["pavises"],["pavonine"],["paw"],["pawed"],["pawer"],["pawers"],["pawing"],["pawkier"],["pawkiest"],["pawkily"],["pawky"],["pawl"],["pawls"],["pawn"],["pawnable"],["pawnage"],["pawnages"],["pawned"],["pawnee"],["pawnees"],["pawner"],["pawners"],["pawning"],["pawnor"],["pawnors"],["pawns"],["pawnshop"],["pawpaw"],["pawpaws"],["paws"],["pax"],["paxes"],["paxwax"],["paxwaxes"],["pay"],["payable"],["payables"],["payably"],["payback"],["paybacks"],["paycheck"],["payday"],["paydays"],["payed"],["payee"],["payees"],["payer"],["payers"],["paygrade"],["paying"],["payload"],["payloads"],["payment"],["payments"],["paynim"],["paynims"],["payoff"],["payoffs"],["payola"],["payolas"],["payor"],["payors"],["payout"],["payouts"],["payroll"],["payrolls"],["pays"],["pazazz"],["pazazzes"],["pe"],["pea"],["peace"],["peaced"],["peaceful"],["peacenik"],["peaces"],["peach"],["peached"],["peacher"],["peachers"],["peaches"],["peachier"],["peaching"],["peachy"],["peacing"],["peacoat"],["peacoats"],["peacock"],["peacocks"],["peacocky"],["peafowl"],["peafowls"],["peag"],["peage"],["peages"],["peags"],["peahen"],["peahens"],["peak"],["peaked"],["peakier"],["peakiest"],["peaking"],["peakish"],["peakless"],["peaklike"],["peaks"],["peaky"],["peal"],["pealed"],["pealike"],["pealing"],["peals"],["pean"],["peans"],["peanut"],["peanuts"],["pear"],["pearl"],["pearlash"],["pearled"],["pearler"],["pearlers"],["pearlier"],["pearling"],["pearlite"],["pearls"],["pearly"],["pearmain"],["pears"],["peart"],["pearter"],["peartest"],["peartly"],["peas"],["peasant"],["peasants"],["peascod"],["peascods"],["pease"],["peasecod"],["peasen"],["peases"],["peat"],["peatier"],["peatiest"],["peats"],["peaty"],["peavey"],["peaveys"],["peavies"],["peavy"],["pebble"],["pebbled"],["pebbles"],["pebblier"],["pebbling"],["pebbly"],["pecan"],["pecans"],["peccable"],["peccancy"],["peccant"],["peccary"],["peccavi"],["peccavis"],["pech"],["pechan"],["pechans"],["peched"],["peching"],["pechs"],["peck"],["pecked"],["pecker"],["peckers"],["peckier"],["peckiest"],["pecking"],["peckish"],["pecks"],["pecky"],["pecorini"],["pecorino"],["pecs"],["pectase"],["pectases"],["pectate"],["pectates"],["pecten"],["pectens"],["pectic"],["pectin"],["pectines"],["pectins"],["pectize"],["pectized"],["pectizes"],["pectoral"],["peculate"],["peculia"],["peculiar"],["peculium"],["ped"],["pedagog"],["pedagogs"],["pedagogy"],["pedal"],["pedaled"],["pedalfer"],["pedalier"],["pedaling"],["pedalled"],["pedals"],["pedant"],["pedantic"],["pedantry"],["pedants"],["pedate"],["pedately"],["peddle"],["peddled"],["peddler"],["peddlers"],["peddlery"],["peddles"],["peddling"],["pederast"],["pedes"],["pedestal"],["pedicab"],["pedicabs"],["pedicel"],["pedicels"],["pedicle"],["pedicled"],["pedicles"],["pedicure"],["pediform"],["pedigree"],["pediment"],["pedipalp"],["pedlar"],["pedlars"],["pedlary"],["pedler"],["pedlers"],["pedlery"],["pedocal"],["pedocals"],["pedology"],["pedro"],["pedros"],["peds"],["peduncle"],["pee"],["peebeen"],["peebeens"],["peed"],["peeing"],["peek"],["peekaboo"],["peeked"],["peeking"],["peeks"],["peel"],["peelable"],["peeled"],["peeler"],["peelers"],["peeling"],["peelings"],["peels"],["peen"],["peened"],["peening"],["peens"],["peep"],["peeped"],["peeper"],["peepers"],["peephole"],["peeping"],["peeps"],["peepshow"],["peepul"],["peepuls"],["peer"],["peerage"],["peerages"],["peered"],["peeress"],["peerie"],["peeries"],["peering"],["peerless"],["peers"],["peery"],["pees"],["peesweep"],["peetweet"],["peeve"],["peeved"],["peeves"],["peeving"],["peevish"],["peewee"],["peewees"],["peewit"],["peewits"],["peg"],["pegboard"],["pegbox"],["pegboxes"],["pegged"],["pegging"],["pegless"],["peglike"],["pegs"],["peh"],["pehs"],["peignoir"],["pein"],["peined"],["peining"],["peins"],["peise"],["peised"],["peises"],["peising"],["pekan"],["pekans"],["peke"],["pekes"],["pekin"],["pekins"],["pekoe"],["pekoes"],["pelage"],["pelages"],["pelagial"],["pelagic"],["pele"],["pelerine"],["peles"],["pelf"],["pelfs"],["pelican"],["pelicans"],["pelisse"],["pelisses"],["pelite"],["pelites"],["pelitic"],["pellagra"],["pellet"],["pelletal"],["pelleted"],["pellets"],["pellicle"],["pellmell"],["pellucid"],["pelmet"],["pelmets"],["pelon"],["peloria"],["pelorian"],["pelorias"],["peloric"],["pelorus"],["pelota"],["pelotas"],["pelt"],["peltast"],["peltasts"],["peltate"],["pelted"],["pelter"],["peltered"],["pelters"],["pelting"],["peltries"],["peltry"],["pelts"],["pelves"],["pelvic"],["pelvics"],["pelvis"],["pelvises"],["pembina"],["pembinas"],["pemican"],["pemicans"],["pemmican"],["pemoline"],["pemphix"],["pen"],["penal"],["penalise"],["penality"],["penalize"],["penally"],["penalty"],["penance"],["penanced"],["penances"],["penang"],["penangs"],["penates"],["pence"],["pencel"],["pencels"],["penchant"],["pencil"],["penciled"],["penciler"],["pencils"],["pend"],["pendant"],["pendants"],["pended"],["pendency"],["pendent"],["pendents"],["pending"],["pends"],["pendular"],["pendulum"],["penes"],["pengo"],["pengos"],["penguin"],["penguins"],["penial"],["penicil"],["penicils"],["penile"],["penis"],["penises"],["penitent"],["penknife"],["penlight"],["penlite"],["penlites"],["penman"],["penmen"],["penna"],["pennae"],["penname"],["pennames"],["pennant"],["pennants"],["pennate"],["pennated"],["penned"],["penner"],["penners"],["penni"],["pennia"],["pennies"],["pennine"],["pennines"],["penning"],["pennis"],["pennon"],["pennoned"],["pennons"],["penny"],["penoche"],["penoches"],["penology"],["penoncel"],["penpoint"],["pens"],["pensee"],["pensees"],["pensil"],["pensile"],["pensils"],["pension"],["pensione"],["pensions"],["pensive"],["penster"],["pensters"],["penstock"],["pent"],["pentacle"],["pentad"],["pentads"],["pentagon"],["pentane"],["pentanes"],["pentanol"],["pentarch"],["pentene"],["pentenes"],["pentode"],["pentodes"],["pentomic"],["pentosan"],["pentose"],["pentoses"],["pentyl"],["pentyls"],["penuche"],["penuches"],["penuchi"],["penuchis"],["penuchle"],["penuckle"],["penult"],["penults"],["penumbra"],["penuries"],["penury"],["peon"],["peonage"],["peonages"],["peones"],["peonies"],["peonism"],["peonisms"],["peons"],["peony"],["people"],["peopled"],["peopler"],["peoplers"],["peoples"],["peopling"],["pep"],["peperoni"],["pepla"],["peplos"],["peploses"],["peplum"],["peplumed"],["peplums"],["peplus"],["pepluses"],["pepo"],["peponida"],["peponium"],["pepos"],["pepped"],["pepper"],["peppered"],["pepperer"],["peppers"],["peppery"],["peppier"],["peppiest"],["peppily"],["pepping"],["peppy"],["peps"],["pepsin"],["pepsine"],["pepsines"],["pepsins"],["peptic"],["peptics"],["peptid"],["peptide"],["peptides"],["peptidic"],["peptids"],["peptize"],["peptized"],["peptizer"],["peptizes"],["peptone"],["peptones"],["peptonic"],["per"],["peracid"],["peracids"],["percale"],["percales"],["perceive"],["percent"],["percents"],["percept"],["percepts"],["perch"],["perched"],["percher"],["perchers"],["perches"],["perching"],["percoid"],["percoids"],["percuss"],["perdie"],["perdu"],["perdue"],["perdues"],["perdure"],["perdured"],["perdures"],["perdus"],["perdy"],["perea"],["peregrin"],["pereia"],["pereion"],["pereon"],["pereopod"],["perfect"],["perfecta"],["perfecto"],["perfects"],["perfidy"],["perforce"],["perform"],["performs"],["perfume"],["perfumed"],["perfumer"],["perfumes"],["perfuse"],["perfused"],["perfuses"],["pergola"],["pergolas"],["perhaps"],["peri"],["perianth"],["periapt"],["periapts"],["periblem"],["pericarp"],["pericope"],["periderm"],["peridia"],["peridial"],["peridium"],["peridot"],["peridots"],["perigeal"],["perigean"],["perigee"],["perigees"],["perigon"],["perigons"],["perigyny"],["peril"],["periled"],["periling"],["perilla"],["perillas"],["perilled"],["perilous"],["perils"],["perilune"],["perinea"],["perineal"],["perineum"],["period"],["periodic"],["periodid"],["periods"],["periotic"],["peripety"],["peripter"],["perique"],["periques"],["peris"],["perisarc"],["perish"],["perished"],["perishes"],["periwig"],["periwigs"],["perjure"],["perjured"],["perjurer"],["perjures"],["perjury"],["perk"],["perked"],["perkier"],["perkiest"],["perkily"],["perking"],["perkish"],["perks"],["perky"],["perlite"],["perlites"],["perlitic"],["perm"],["permeant"],["permease"],["permeate"],["permed"],["perming"],["permit"],["permits"],["perms"],["permute"],["permuted"],["permutes"],["peroneal"],["peroral"],["perorate"],["peroxid"],["peroxide"],["peroxids"],["peroxy"],["perpend"],["perpends"],["perpent"],["perpents"],["perplex"],["perries"],["perron"],["perrons"],["perry"],["persalt"],["persalts"],["perse"],["perses"],["persist"],["persists"],["person"],["persona"],["personae"],["personal"],["personas"],["persons"],["perspire"],["perspiry"],["persuade"],["pert"],["pertain"],["pertains"],["perter"],["pertest"],["pertly"],["pertness"],["perturb"],["perturbs"],["peruke"],["perukes"],["perusal"],["perusals"],["peruse"],["perused"],["peruser"],["perusers"],["peruses"],["perusing"],["pervade"],["pervaded"],["pervader"],["pervades"],["perverse"],["pervert"],["perverts"],["pervious"],["pes"],["pesade"],["pesades"],["peseta"],["pesetas"],["pesewa"],["pesewas"],["peskier"],["peskiest"],["peskily"],["pesky"],["peso"],["pesos"],["pessary"],["pest"],["pester"],["pestered"],["pesterer"],["pesters"],["pesthole"],["pestle"],["pestled"],["pestles"],["pestling"],["pesto"],["pestos"],["pests"],["pet"],["petal"],["petaled"],["petaline"],["petalled"],["petalody"],["petaloid"],["petalous"],["petals"],["petard"],["petards"],["petasos"],["petasus"],["petcock"],["petcocks"],["petechia"],["peter"],["petered"],["petering"],["peters"],["petiolar"],["petiole"],["petioled"],["petioles"],["petit"],["petite"],["petites"],["petition"],["petnap"],["petnaps"],["petrel"],["petrels"],["petrify"],["petrol"],["petrolic"],["petrols"],["petronel"],["petrosal"],["petrous"],["pets"],["petsai"],["petsais"],["petted"],["pettedly"],["petter"],["petters"],["petti"],["pettier"],["pettiest"],["pettifog"],["pettily"],["petting"],["pettings"],["pettish"],["pettle"],["pettled"],["pettles"],["pettling"],["petto"],["petty"],["petulant"],["petunia"],["petunias"],["petuntse"],["petuntze"],["pew"],["pewee"],["pewees"],["pewit"],["pewits"],["pews"],["pewter"],["pewterer"],["pewters"],["peyote"],["peyotes"],["peyotl"],["peyotls"],["peytral"],["peytrals"],["peytrel"],["peytrels"],["pfennig"],["pfennige"],["pfennigs"],["pfft"],["pfui"],["phaeton"],["phaetons"],["phage"],["phages"],["phalange"],["phalanx"],["phalli"],["phallic"],["phallism"],["phallist"],["phallus"],["phantasm"],["phantast"],["phantasy"],["phantom"],["phantoms"],["pharaoh"],["pharaohs"],["pharisee"],["pharmacy"],["pharos"],["pharoses"],["pharynx"],["phase"],["phaseal"],["phased"],["phaseout"],["phases"],["phasic"],["phasing"],["phasis"],["phasmid"],["phasmids"],["phat"],["phatic"],["pheasant"],["phellem"],["phellems"],["phelonia"],["phenate"],["phenates"],["phenazin"],["phenetic"],["phenetol"],["phenix"],["phenixes"],["phenol"],["phenolic"],["phenols"],["phenom"],["phenoms"],["phenoxy"],["phenyl"],["phenylic"],["phenyls"],["phew"],["phi"],["phial"],["phials"],["philabeg"],["philibeg"],["philomel"],["philter"],["philters"],["philtra"],["philtre"],["philtred"],["philtres"],["philtrum"],["phimoses"],["phimosis"],["phimotic"],["phis"],["phiz"],["phizes"],["phlegm"],["phlegms"],["phlegmy"],["phloem"],["phloems"],["phlox"],["phloxes"],["phobia"],["phobias"],["phobic"],["phobics"],["phocine"],["phoebe"],["phoebes"],["phoebus"],["phoenix"],["phon"],["phonal"],["phonate"],["phonated"],["phonates"],["phone"],["phoned"],["phoneme"],["phonemes"],["phonemic"],["phones"],["phonetic"],["phoney"],["phoneyed"],["phoneys"],["phonic"],["phonics"],["phonied"],["phonier"],["phonies"],["phoniest"],["phonily"],["phoning"],["phono"],["phonon"],["phonons"],["phonos"],["phons"],["phony"],["phonying"],["phooey"],["phorate"],["phorates"],["phoronid"],["phosgene"],["phosphid"],["phosphin"],["phosphor"],["phot"],["photic"],["photics"],["photo"],["photoed"],["photog"],["photogs"],["photoing"],["photomap"],["photon"],["photonic"],["photons"],["photopia"],["photopic"],["photos"],["photoset"],["phots"],["phpht"],["phrasal"],["phrase"],["phrased"],["phrases"],["phrasing"],["phratral"],["phratric"],["phratry"],["phreatic"],["phrenic"],["phrensy"],["pht"],["phthalic"],["phthalin"],["phthises"],["phthisic"],["phthisis"],["phut"],["phuts"],["phyla"],["phylae"],["phylar"],["phylaxis"],["phyle"],["phyleses"],["phylesis"],["phyletic"],["phylic"],["phyllary"],["phyllite"],["phyllo"],["phyllode"],["phylloid"],["phyllome"],["phyllos"],["phylon"],["phylum"],["physed"],["physeds"],["physes"],["physic"],["physical"],["physics"],["physique"],["physis"],["phytane"],["phytanes"],["phytoid"],["phytol"],["phytols"],["phyton"],["phytonic"],["phytons"],["pi"],["pia"],["piacular"],["piaffe"],["piaffed"],["piaffer"],["piaffers"],["piaffes"],["piaffing"],["pial"],["pian"],["pianic"],["pianism"],["pianisms"],["pianist"],["pianists"],["piano"],["pianos"],["pians"],["pias"],["piasaba"],["piasabas"],["piasava"],["piasavas"],["piassaba"],["piassava"],["piaster"],["piasters"],["piastre"],["piastres"],["piazza"],["piazzas"],["piazze"],["pibal"],["pibals"],["pibroch"],["pibrochs"],["pic"],["pica"],["picacho"],["picachos"],["picador"],["picadors"],["pical"],["picara"],["picaras"],["picaro"],["picaroon"],["picaros"],["picas"],["picayune"],["piccolo"],["piccolos"],["pice"],["piceous"],["piciform"],["pick"],["pickadil"],["pickax"],["pickaxe"],["pickaxed"],["pickaxes"],["picked"],["pickeer"],["pickeers"],["picker"],["pickerel"],["pickers"],["picket"],["picketed"],["picketer"],["pickets"],["pickier"],["pickiest"],["picking"],["pickings"],["pickle"],["pickled"],["pickles"],["pickling"],["picklock"],["pickoff"],["pickoffs"],["picks"],["pickup"],["pickups"],["pickwick"],["picky"],["picloram"],["picnic"],["picnicky"],["picnics"],["picogram"],["picolin"],["picoline"],["picolins"],["picomole"],["picot"],["picoted"],["picotee"],["picotees"],["picoting"],["picots"],["picquet"],["picquets"],["picrate"],["picrated"],["picrates"],["picric"],["picrite"],["picrites"],["picritic"],["pics"],["picture"],["pictured"],["pictures"],["picul"],["piculs"],["piddle"],["piddled"],["piddler"],["piddlers"],["piddles"],["piddling"],["piddly"],["piddock"],["piddocks"],["pidgin"],["pidgins"],["pie"],["piebald"],["piebalds"],["piece"],["pieced"],["piecer"],["piecers"],["pieces"],["piecing"],["piecings"],["piecrust"],["pied"],["piedfort"],["piedmont"],["piefort"],["pieforts"],["pieing"],["pieplant"],["pier"],["pierce"],["pierced"],["piercer"],["piercers"],["pierces"],["piercing"],["pierogi"],["pierrot"],["pierrots"],["piers"],["pies"],["pieta"],["pietas"],["pieties"],["pietism"],["pietisms"],["pietist"],["pietists"],["piety"],["piffle"],["piffled"],["piffles"],["piffling"],["pig"],["pigboat"],["pigboats"],["pigeon"],["pigeons"],["pigfish"],["pigged"],["piggery"],["piggie"],["piggier"],["piggies"],["piggiest"],["piggin"],["pigging"],["piggins"],["piggish"],["piggy"],["piglet"],["piglets"],["pigment"],["pigments"],["pigmies"],["pigmy"],["pignoli"],["pignolia"],["pignolis"],["pignora"],["pignus"],["pignut"],["pignuts"],["pigout"],["pigouts"],["pigpen"],["pigpens"],["pigs"],["pigskin"],["pigskins"],["pigsney"],["pigsneys"],["pigstick"],["pigsties"],["pigsty"],["pigtail"],["pigtails"],["pigweed"],["pigweeds"],["piing"],["pika"],["pikake"],["pikakes"],["pikas"],["pike"],["piked"],["pikeman"],["pikemen"],["piker"],["pikers"],["pikes"],["piking"],["pilaf"],["pilaff"],["pilaffs"],["pilafs"],["pilar"],["pilaster"],["pilau"],["pilaus"],["pilaw"],["pilaws"],["pilchard"],["pile"],["pilea"],["pileate"],["pileated"],["piled"],["pilei"],["pileless"],["pileous"],["piles"],["pileum"],["pileup"],["pileups"],["pileus"],["pilewort"],["pilfer"],["pilfered"],["pilferer"],["pilfers"],["pilgrim"],["pilgrims"],["pili"],["piliform"],["piling"],["pilings"],["pilis"],["pill"],["pillage"],["pillaged"],["pillager"],["pillages"],["pillar"],["pillared"],["pillars"],["pillbox"],["pilled"],["pilling"],["pillion"],["pillions"],["pillory"],["pillow"],["pillowed"],["pillows"],["pillowy"],["pills"],["pilose"],["pilosity"],["pilot"],["pilotage"],["piloted"],["piloting"],["pilots"],["pilous"],["pilsener"],["pilsner"],["pilsners"],["pilular"],["pilule"],["pilules"],["pilus"],["pily"],["pima"],["pimas"],["pimento"],["pimentos"],["pimiento"],["pimp"],["pimped"],["pimping"],["pimple"],["pimpled"],["pimples"],["pimplier"],["pimply"],["pimps"],["pin"],["pina"],["pinafore"],["pinang"],["pinangs"],["pinas"],["pinaster"],["pinata"],["pinatas"],["pinball"],["pinballs"],["pinbone"],["pinbones"],["pincer"],["pincers"],["pinch"],["pinchbug"],["pincheck"],["pinched"],["pincher"],["pinchers"],["pinches"],["pinching"],["pinder"],["pinders"],["pindling"],["pine"],["pineal"],["pinecone"],["pined"],["pineland"],["pinelike"],["pinene"],["pinenes"],["pineries"],["pinery"],["pines"],["pinesap"],["pinesaps"],["pineta"],["pinetum"],["pinewood"],["piney"],["pinfish"],["pinfold"],["pinfolds"],["ping"],["pinged"],["pinger"],["pingers"],["pinging"],["pingo"],["pingos"],["pingrass"],["pings"],["pinguid"],["pinhead"],["pinheads"],["pinhole"],["pinholes"],["pinier"],["piniest"],["pining"],["pinion"],["pinioned"],["pinions"],["pinite"],["pinites"],["pinitol"],["pinitols"],["pink"],["pinked"],["pinken"],["pinkened"],["pinkens"],["pinker"],["pinkers"],["pinkest"],["pinkey"],["pinkeye"],["pinkeyes"],["pinkeys"],["pinkie"],["pinkies"],["pinking"],["pinkings"],["pinkish"],["pinkly"],["pinkness"],["pinko"],["pinkoes"],["pinkos"],["pinkroot"],["pinks"],["pinky"],["pinna"],["pinnace"],["pinnaces"],["pinnacle"],["pinnae"],["pinnal"],["pinnas"],["pinnate"],["pinnated"],["pinned"],["pinner"],["pinners"],["pinnies"],["pinning"],["pinniped"],["pinnula"],["pinnulae"],["pinnular"],["pinnule"],["pinnules"],["pinny"],["pinochle"],["pinocle"],["pinocles"],["pinole"],["pinoles"],["pinon"],["pinones"],["pinons"],["pinot"],["pinots"],["pinpoint"],["pinprick"],["pins"],["pinscher"],["pint"],["pinta"],["pintada"],["pintadas"],["pintado"],["pintados"],["pintail"],["pintails"],["pintano"],["pintanos"],["pintas"],["pintle"],["pintles"],["pinto"],["pintoes"],["pintos"],["pints"],["pintsize"],["pinup"],["pinups"],["pinwale"],["pinwales"],["pinweed"],["pinweeds"],["pinwheel"],["pinwork"],["pinworks"],["pinworm"],["pinworms"],["piny"],["pinyin"],["pinyon"],["pinyons"],["piolet"],["piolets"],["pion"],["pioneer"],["pioneers"],["pionic"],["pions"],["piosity"],["pious"],["piously"],["pip"],["pipage"],["pipages"],["pipal"],["pipals"],["pipe"],["pipeage"],["pipeages"],["piped"],["pipefish"],["pipeful"],["pipefuls"],["pipeless"],["pipelike"],["pipeline"],["piper"],["piperine"],["pipers"],["pipes"],["pipestem"],["pipet"],["pipets"],["pipette"],["pipetted"],["pipettes"],["pipier"],["pipiest"],["pipiness"],["piping"],["pipingly"],["pipings"],["pipit"],["pipits"],["pipkin"],["pipkins"],["pipped"],["pippin"],["pipping"],["pippins"],["pips"],["pipy"],["piquancy"],["piquant"],["pique"],["piqued"],["piques"],["piquet"],["piquets"],["piquing"],["piracies"],["piracy"],["piragua"],["piraguas"],["pirana"],["piranas"],["piranha"],["piranhas"],["pirarucu"],["pirate"],["pirated"],["pirates"],["piratic"],["pirating"],["piraya"],["pirayas"],["piriform"],["pirn"],["pirns"],["pirog"],["pirogen"],["piroghi"],["pirogi"],["pirogies"],["pirogue"],["pirogues"],["pirojki"],["piroque"],["piroques"],["piroshki"],["pirozhki"],["pirozhok"],["pis"],["piscary"],["piscator"],["piscina"],["piscinae"],["piscinal"],["piscinas"],["piscine"],["pisco"],["piscos"],["pish"],["pished"],["pishes"],["pishing"],["pishoge"],["pishoges"],["pishogue"],["pisiform"],["pismire"],["pismires"],["pisolite"],["piss"],["pissant"],["pissants"],["pissed"],["pisser"],["pissers"],["pisses"],["pissing"],["pissoir"],["pissoirs"],["pistache"],["piste"],["pistes"],["pistil"],["pistils"],["pistol"],["pistole"],["pistoled"],["pistoles"],["pistols"],["piston"],["pistons"],["pit"],["pita"],["pitapat"],["pitapats"],["pitas"],["pitch"],["pitched"],["pitcher"],["pitchers"],["pitches"],["pitchier"],["pitchily"],["pitching"],["pitchman"],["pitchmen"],["pitchout"],["pitchy"],["piteous"],["pitfall"],["pitfalls"],["pith"],["pithead"],["pitheads"],["pithed"],["pithier"],["pithiest"],["pithily"],["pithing"],["pithless"],["piths"],["pithy"],["pitiable"],["pitiably"],["pitied"],["pitier"],["pitiers"],["pities"],["pitiful"],["pitiless"],["pitman"],["pitmans"],["pitmen"],["piton"],["pitons"],["pits"],["pitsaw"],["pitsaws"],["pittance"],["pitted"],["pitting"],["pittings"],["pity"],["pitying"],["piu"],["pivot"],["pivotal"],["pivoted"],["pivoting"],["pivotman"],["pivotmen"],["pivots"],["pix"],["pixel"],["pixels"],["pixes"],["pixie"],["pixieish"],["pixies"],["pixiness"],["pixy"],["pixyish"],["pizazz"],["pizazzes"],["pizazzy"],["pizza"],["pizzas"],["pizzeria"],["pizzle"],["pizzles"],["placable"],["placably"],["placard"],["placards"],["placate"],["placated"],["placater"],["placates"],["place"],["placebo"],["placebos"],["placed"],["placeman"],["placemen"],["placenta"],["placer"],["placers"],["places"],["placet"],["placets"],["placid"],["placidly"],["placing"],["plack"],["placket"],["plackets"],["placks"],["placoid"],["placoids"],["plafond"],["plafonds"],["plagal"],["plage"],["plages"],["plagiary"],["plague"],["plagued"],["plaguer"],["plaguers"],["plagues"],["plaguey"],["plaguily"],["plaguing"],["plaguy"],["plaice"],["plaices"],["plaid"],["plaided"],["plaids"],["plain"],["plained"],["plainer"],["plainest"],["plaining"],["plainly"],["plains"],["plaint"],["plaints"],["plaister"],["plait"],["plaited"],["plaiter"],["plaiters"],["plaiting"],["plaits"],["plan"],["planar"],["planaria"],["planate"],["planch"],["planche"],["planches"],["planchet"],["plane"],["planed"],["planer"],["planers"],["planes"],["planet"],["planets"],["planform"],["plangent"],["planing"],["planish"],["plank"],["planked"],["planking"],["planks"],["plankter"],["plankton"],["planless"],["planned"],["planner"],["planners"],["planning"],["planosol"],["plans"],["plant"],["plantain"],["plantar"],["planted"],["planter"],["planters"],["planting"],["plantlet"],["plants"],["planula"],["planulae"],["planular"],["plaque"],["plaques"],["plash"],["plashed"],["plasher"],["plashers"],["plashes"],["plashier"],["plashing"],["plashy"],["plasm"],["plasma"],["plasmas"],["plasmic"],["plasmid"],["plasmids"],["plasmin"],["plasmins"],["plasmoid"],["plasmon"],["plasmons"],["plasms"],["plaster"],["plasters"],["plastery"],["plastic"],["plastics"],["plastid"],["plastids"],["plastral"],["plastron"],["plastrum"],["plat"],["platan"],["platane"],["platanes"],["platans"],["plate"],["plateau"],["plateaus"],["plateaux"],["plated"],["plateful"],["platelet"],["platen"],["platens"],["plater"],["platers"],["plates"],["platform"],["platier"],["platies"],["platiest"],["platina"],["platinas"],["plating"],["platings"],["platinic"],["platinum"],["platonic"],["platoon"],["platoons"],["plats"],["platted"],["platter"],["platters"],["platting"],["platy"],["platypi"],["platypus"],["platys"],["plaudit"],["plaudits"],["plausive"],["play"],["playa"],["playable"],["playact"],["playacts"],["playas"],["playback"],["playbill"],["playbook"],["playboy"],["playboys"],["playdate"],["playday"],["playdays"],["playdown"],["played"],["player"],["players"],["playful"],["playgirl"],["playgoer"],["playing"],["playland"],["playless"],["playlet"],["playlets"],["playlike"],["playlist"],["playmate"],["playoff"],["playoffs"],["playpen"],["playpens"],["playroom"],["plays"],["playsuit"],["playtime"],["playwear"],["plaza"],["plazas"],["plea"],["pleach"],["pleached"],["pleaches"],["plead"],["pleaded"],["pleader"],["pleaders"],["pleading"],["pleads"],["pleas"],["pleasant"],["please"],["pleased"],["pleaser"],["pleasers"],["pleases"],["pleasing"],["pleasure"],["pleat"],["pleated"],["pleater"],["pleaters"],["pleating"],["pleats"],["pleb"],["plebe"],["plebeian"],["plebes"],["plebs"],["plectra"],["plectron"],["plectrum"],["pled"],["pledge"],["pledged"],["pledgee"],["pledgees"],["pledgeor"],["pledger"],["pledgers"],["pledges"],["pledget"],["pledgets"],["pledging"],["pledgor"],["pledgors"],["pleiad"],["pleiades"],["pleiads"],["plena"],["plenary"],["plench"],["plenches"],["plenish"],["plenism"],["plenisms"],["plenist"],["plenists"],["plenties"],["plenty"],["plenum"],["plenums"],["pleonasm"],["pleopod"],["pleopods"],["plessor"],["plessors"],["plethora"],["pleura"],["pleurae"],["pleural"],["pleuras"],["pleurisy"],["pleuron"],["pleuston"],["plew"],["plews"],["plexal"],["plexor"],["plexors"],["plexus"],["plexuses"],["pliable"],["pliably"],["pliancy"],["pliant"],["pliantly"],["plica"],["plicae"],["plical"],["plicate"],["plicated"],["plie"],["plied"],["plier"],["pliers"],["plies"],["plight"],["plighted"],["plighter"],["plights"],["plimsol"],["plimsole"],["plimsoll"],["plimsols"],["plink"],["plinked"],["plinker"],["plinkers"],["plinking"],["plinks"],["plinth"],["plinths"],["pliotron"],["pliskie"],["pliskies"],["plisky"],["plisse"],["plisses"],["plod"],["plodded"],["plodder"],["plodders"],["plodding"],["plods"],["ploidies"],["ploidy"],["plonk"],["plonked"],["plonking"],["plonks"],["plop"],["plopped"],["plopping"],["plops"],["plosion"],["plosions"],["plosive"],["plosives"],["plot"],["plotless"],["plots"],["plottage"],["plotted"],["plotter"],["plotters"],["plottier"],["plotties"],["plotting"],["plotty"],["plotz"],["plotzed"],["plotzes"],["plotzing"],["plough"],["ploughed"],["plougher"],["ploughs"],["plover"],["plovers"],["plow"],["plowable"],["plowback"],["plowboy"],["plowboys"],["plowed"],["plower"],["plowers"],["plowhead"],["plowing"],["plowland"],["plowman"],["plowmen"],["plows"],["ploy"],["ployed"],["ploying"],["ploys"],["pluck"],["plucked"],["plucker"],["pluckers"],["pluckier"],["pluckily"],["plucking"],["plucks"],["plucky"],["plug"],["plugged"],["plugger"],["pluggers"],["plugging"],["plugless"],["plugola"],["plugolas"],["plugs"],["plugugly"],["plum"],["plumage"],["plumaged"],["plumages"],["plumate"],["plumb"],["plumbago"],["plumbed"],["plumber"],["plumbers"],["plumbery"],["plumbic"],["plumbing"],["plumbism"],["plumbous"],["plumbs"],["plumbum"],["plumbums"],["plume"],["plumed"],["plumelet"],["plumes"],["plumier"],["plumiest"],["pluming"],["plumiped"],["plumlike"],["plummet"],["plummets"],["plummier"],["plummy"],["plumose"],["plump"],["plumped"],["plumpen"],["plumpens"],["plumper"],["plumpers"],["plumpest"],["plumping"],["plumpish"],["plumply"],["plumps"],["plums"],["plumular"],["plumule"],["plumules"],["plumy"],["plunder"],["plunders"],["plunge"],["plunged"],["plunger"],["plungers"],["plunges"],["plunging"],["plunk"],["plunked"],["plunker"],["plunkers"],["plunking"],["plunks"],["plural"],["plurally"],["plurals"],["plus"],["pluses"],["plush"],["plusher"],["plushes"],["plushest"],["plushier"],["plushily"],["plushly"],["plushy"],["plussage"],["plusses"],["plutei"],["pluteus"],["pluton"],["plutonic"],["plutons"],["pluvial"],["pluvials"],["pluvian"],["pluviose"],["pluvious"],["ply"],["plyer"],["plyers"],["plying"],["plyingly"],["plywood"],["plywoods"],["pneuma"],["pneumas"],["poaceous"],["poach"],["poached"],["poacher"],["poachers"],["poaches"],["poachier"],["poaching"],["poachy"],["pochard"],["pochards"],["pock"],["pocked"],["pocket"],["pocketed"],["pocketer"],["pockets"],["pockier"],["pockiest"],["pockily"],["pocking"],["pockmark"],["pocks"],["pocky"],["poco"],["pocosin"],["pocosins"],["pod"],["podagra"],["podagral"],["podagras"],["podagric"],["podded"],["podding"],["podesta"],["podestas"],["podgier"],["podgiest"],["podgily"],["podgy"],["podia"],["podiatry"],["podite"],["podites"],["poditic"],["podium"],["podiums"],["podlike"],["podocarp"],["podomere"],["pods"],["podsol"],["podsolic"],["podsols"],["podzol"],["podzolic"],["podzols"],["poechore"],["poem"],["poems"],["poesies"],["poesy"],["poet"],["poetess"],["poetic"],["poetical"],["poetics"],["poetise"],["poetised"],["poetiser"],["poetises"],["poetize"],["poetized"],["poetizer"],["poetizes"],["poetless"],["poetlike"],["poetries"],["poetry"],["poets"],["pogey"],["pogeys"],["pogies"],["pogonia"],["pogonias"],["pogonip"],["pogonips"],["pogrom"],["pogromed"],["pogroms"],["pogy"],["poh"],["poi"],["poignant"],["poilu"],["poilus"],["poind"],["poinded"],["poinding"],["poinds"],["point"],["pointe"],["pointed"],["pointer"],["pointers"],["pointes"],["pointier"],["pointing"],["pointman"],["pointmen"],["points"],["pointy"],["pois"],["poise"],["poised"],["poiser"],["poisers"],["poises"],["poising"],["poison"],["poisoned"],["poisoner"],["poisons"],["poitrel"],["poitrels"],["poke"],["poked"],["poker"],["pokeroot"],["pokers"],["pokes"],["pokeweed"],["pokey"],["pokeys"],["pokier"],["pokies"],["pokiest"],["pokily"],["pokiness"],["poking"],["poky"],["pol"],["polar"],["polarise"],["polarity"],["polarize"],["polaron"],["polarons"],["polars"],["polder"],["polders"],["pole"],["poleax"],["poleaxe"],["poleaxed"],["poleaxes"],["polecat"],["polecats"],["poled"],["poleis"],["poleless"],["polemic"],["polemics"],["polemist"],["polemize"],["polenta"],["polentas"],["poler"],["polers"],["poles"],["polestar"],["poleward"],["poleyn"],["poleyns"],["police"],["policed"],["polices"],["policies"],["policing"],["policy"],["poling"],["polio"],["polios"],["polis"],["polish"],["polished"],["polisher"],["polishes"],["polite"],["politely"],["politer"],["politest"],["politic"],["politick"],["politico"],["politics"],["polities"],["polity"],["polka"],["polkaed"],["polkaing"],["polkas"],["poll"],["pollack"],["pollacks"],["pollard"],["pollards"],["polled"],["pollee"],["pollees"],["pollen"],["pollened"],["pollens"],["poller"],["pollers"],["pollex"],["pollical"],["pollices"],["polling"],["pollinia"],["pollinic"],["pollist"],["pollists"],["polliwog"],["pollock"],["pollocks"],["polls"],["pollster"],["pollute"],["polluted"],["polluter"],["pollutes"],["pollywog"],["polo"],["poloist"],["poloists"],["polonium"],["polos"],["pols"],["poltroon"],["poly"],["polybrid"],["polycot"],["polycots"],["polyene"],["polyenes"],["polyenic"],["polygala"],["polygamy"],["polygene"],["polyglot"],["polygon"],["polygons"],["polygony"],["polygyny"],["polymath"],["polymer"],["polymers"],["polynya"],["polynyas"],["polyoma"],["polyomas"],["polyp"],["polypary"],["polypi"],["polypide"],["polypnea"],["polypod"],["polypods"],["polypody"],["polypoid"],["polypore"],["polypous"],["polyps"],["polypus"],["polys"],["polysemy"],["polysome"],["polytene"],["polyteny"],["polytype"],["polyuria"],["polyuric"],["polyzoan"],["polyzoic"],["pom"],["pomace"],["pomaces"],["pomade"],["pomaded"],["pomades"],["pomading"],["pomander"],["pomatum"],["pomatums"],["pome"],["pomelo"],["pomelos"],["pomes"],["pomfret"],["pomfrets"],["pommee"],["pommel"],["pommeled"],["pommels"],["pommie"],["pommies"],["pommy"],["pomology"],["pomp"],["pompano"],["pompanos"],["pompom"],["pompoms"],["pompon"],["pompons"],["pompous"],["pomps"],["poms"],["ponce"],["ponced"],["ponces"],["poncho"],["ponchos"],["poncing"],["pond"],["ponded"],["ponder"],["pondered"],["ponderer"],["ponders"],["ponding"],["ponds"],["pondweed"],["pone"],["ponent"],["pones"],["pong"],["ponged"],["pongee"],["pongees"],["pongid"],["pongids"],["ponging"],["pongs"],["poniard"],["poniards"],["ponied"],["ponies"],["pons"],["pontes"],["pontifex"],["pontiff"],["pontiffs"],["pontific"],["pontil"],["pontils"],["pontine"],["ponton"],["pontons"],["pontoon"],["pontoons"],["pony"],["ponying"],["ponytail"],["pooch"],["pooched"],["pooches"],["pooching"],["pood"],["poodle"],["poodles"],["poods"],["poof"],["poofs"],["pooftah"],["pooftahs"],["poofter"],["poofters"],["poofy"],["pooh"],["poohed"],["poohing"],["poohs"],["pool"],["pooled"],["poolhall"],["pooling"],["poolroom"],["pools"],["poolside"],["poon"],["poons"],["poop"],["pooped"],["pooping"],["poops"],["poor"],["poorer"],["poorest"],["poori"],["pooris"],["poorish"],["poorly"],["poorness"],["poortith"],["poove"],["pooves"],["pop"],["popcorn"],["popcorns"],["pope"],["popedom"],["popedoms"],["popeless"],["popelike"],["poperies"],["popery"],["popes"],["popeyed"],["popgun"],["popguns"],["popinjay"],["popish"],["popishly"],["poplar"],["poplars"],["poplin"],["poplins"],["poplitic"],["popover"],["popovers"],["poppa"],["poppas"],["popped"],["popper"],["poppers"],["poppet"],["poppets"],["poppied"],["poppies"],["popping"],["popple"],["poppled"],["popples"],["poppling"],["poppy"],["pops"],["popsie"],["popsies"],["popsy"],["populace"],["popular"],["populate"],["populism"],["populist"],["populous"],["porch"],["porches"],["porcine"],["porcini"],["porcino"],["pore"],["pored"],["pores"],["porgies"],["porgy"],["poring"],["porism"],["porisms"],["pork"],["porker"],["porkers"],["porkier"],["porkies"],["porkiest"],["porkpie"],["porkpies"],["porks"],["porkwood"],["porky"],["porn"],["porno"],["pornos"],["porns"],["porny"],["porose"],["porosity"],["porous"],["porously"],["porphyry"],["porpoise"],["porrect"],["porridge"],["port"],["portable"],["portably"],["portage"],["portaged"],["portages"],["portal"],["portaled"],["portals"],["portance"],["portapak"],["ported"],["portend"],["portends"],["portent"],["portents"],["porter"],["porters"],["porthole"],["portico"],["porticos"],["portiere"],["porting"],["portion"],["portions"],["portless"],["portlier"],["portly"],["portrait"],["portray"],["portrays"],["portress"],["ports"],["posada"],["posadas"],["pose"],["posed"],["poser"],["posers"],["poses"],["poseur"],["poseurs"],["posh"],["posher"],["poshest"],["poshly"],["poshness"],["posies"],["posing"],["posingly"],["posit"],["posited"],["positing"],["position"],["positive"],["positron"],["posits"],["posology"],["posse"],["posses"],["possess"],["posset"],["possets"],["possible"],["possibly"],["possum"],["possums"],["post"],["postage"],["postages"],["postal"],["postally"],["postals"],["postanal"],["postbag"],["postbags"],["postbase"],["postbox"],["postboy"],["postboys"],["postburn"],["postcard"],["postcava"],["postcode"],["postcoup"],["postdate"],["postdive"],["postdrug"],["posted"],["posteen"],["posteens"],["poster"],["postern"],["posterns"],["posters"],["postface"],["postfix"],["postform"],["postgame"],["postheat"],["posthole"],["postiche"],["postin"],["posting"],["postings"],["postins"],["postique"],["postlude"],["postman"],["postmark"],["postmen"],["postoral"],["postpaid"],["postpone"],["postrace"],["postriot"],["posts"],["postsync"],["postteen"],["posttest"],["postural"],["posture"],["postured"],["posturer"],["postures"],["postwar"],["posy"],["pot"],["potable"],["potables"],["potage"],["potages"],["potamic"],["potash"],["potashes"],["potassic"],["potation"],["potato"],["potatoes"],["potatory"],["potbelly"],["potboil"],["potboils"],["potboy"],["potboys"],["poteen"],["poteens"],["potence"],["potences"],["potency"],["potent"],["potently"],["potful"],["potfuls"],["pothead"],["potheads"],["potheen"],["potheens"],["pother"],["potherb"],["potherbs"],["pothered"],["pothers"],["pothole"],["potholed"],["potholes"],["pothook"],["pothooks"],["pothouse"],["potiche"],["potiches"],["potion"],["potions"],["potlach"],["potlache"],["potlatch"],["potlike"],["potline"],["potlines"],["potluck"],["potlucks"],["potman"],["potmen"],["potpie"],["potpies"],["pots"],["potshard"],["potsherd"],["potshot"],["potshots"],["potsie"],["potsies"],["potstone"],["potsy"],["pottage"],["pottages"],["potted"],["potteen"],["potteens"],["potter"],["pottered"],["potterer"],["potters"],["pottery"],["pottier"],["potties"],["pottiest"],["potting"],["pottle"],["pottles"],["potto"],["pottos"],["potty"],["pouch"],["pouched"],["pouches"],["pouchier"],["pouching"],["pouchy"],["pouf"],["poufed"],["pouff"],["pouffe"],["pouffed"],["pouffes"],["pouffs"],["poufs"],["poulard"],["poularde"],["poulards"],["poult"],["poulter"],["poulters"],["poultice"],["poultry"],["poults"],["pounce"],["pounced"],["pouncer"],["pouncers"],["pounces"],["pouncing"],["pound"],["poundage"],["poundal"],["poundals"],["pounded"],["pounder"],["pounders"],["pounding"],["pounds"],["pour"],["pourable"],["poured"],["pourer"],["pourers"],["pouring"],["pours"],["poussie"],["poussies"],["pout"],["pouted"],["pouter"],["pouters"],["poutful"],["poutier"],["poutiest"],["pouting"],["pouts"],["pouty"],["poverty"],["pow"],["powder"],["powdered"],["powderer"],["powders"],["powdery"],["power"],["powered"],["powerful"],["powering"],["powers"],["pows"],["powter"],["powters"],["powwow"],["powwowed"],["powwows"],["pox"],["poxed"],["poxes"],["poxing"],["poxvirus"],["poyou"],["poyous"],["pozzolan"],["praam"],["praams"],["practic"],["practice"],["practise"],["praecipe"],["praedial"],["praefect"],["praelect"],["praetor"],["praetors"],["prahu"],["prahus"],["prairie"],["prairies"],["praise"],["praised"],["praiser"],["praisers"],["praises"],["praising"],["praline"],["pralines"],["pram"],["prams"],["prance"],["pranced"],["prancer"],["prancers"],["prances"],["prancing"],["prandial"],["prang"],["pranged"],["pranging"],["prangs"],["prank"],["pranked"],["pranking"],["prankish"],["pranks"],["prao"],["praos"],["prase"],["prases"],["prat"],["prate"],["prated"],["prater"],["praters"],["prates"],["pratfall"],["prating"],["pratique"],["prats"],["prattle"],["prattled"],["prattler"],["prattles"],["prau"],["praus"],["prawn"],["prawned"],["prawner"],["prawners"],["prawning"],["prawns"],["praxes"],["praxis"],["praxises"],["pray"],["prayed"],["prayer"],["prayers"],["praying"],["prays"],["preach"],["preached"],["preacher"],["preaches"],["preachy"],["preact"],["preacted"],["preacts"],["preadapt"],["preadmit"],["preadopt"],["preadult"],["preaged"],["preallot"],["preamble"],["preamp"],["preamps"],["preanal"],["prearm"],["prearmed"],["prearms"],["preaudit"],["preaver"],["preavers"],["preaxial"],["prebasal"],["prebend"],["prebends"],["prebill"],["prebills"],["prebind"],["prebinds"],["prebless"],["preboil"],["preboils"],["preboom"],["prebound"],["precast"],["precasts"],["precava"],["precavae"],["precaval"],["precede"],["preceded"],["precedes"],["precent"],["precents"],["precept"],["precepts"],["precess"],["precheck"],["prechill"],["precieux"],["precinct"],["precious"],["precipe"],["precipes"],["precis"],["precise"],["precised"],["preciser"],["precises"],["precited"],["preclean"],["preclear"],["preclude"],["precode"],["precoded"],["precodes"],["precook"],["precooks"],["precool"],["precools"],["precoup"],["precrash"],["precure"],["precured"],["precures"],["precut"],["precuts"],["predate"],["predated"],["predates"],["predator"],["predawn"],["predawns"],["predial"],["predict"],["predicts"],["predive"],["predrill"],["predusk"],["predusks"],["pree"],["preed"],["preedit"],["preedits"],["preeing"],["preelect"],["preemie"],["preemies"],["preempt"],["preempts"],["preen"],["preenact"],["preened"],["preener"],["preeners"],["preening"],["preens"],["preerect"],["prees"],["preexist"],["prefab"],["prefabs"],["preface"],["prefaced"],["prefacer"],["prefaces"],["prefade"],["prefaded"],["prefades"],["prefect"],["prefects"],["prefer"],["prefers"],["prefight"],["prefile"],["prefiled"],["prefiles"],["prefire"],["prefired"],["prefires"],["prefix"],["prefixal"],["prefixed"],["prefixes"],["preflame"],["prefocus"],["preform"],["preforms"],["prefrank"],["prefroze"],["pregame"],["preggers"],["pregnant"],["preheat"],["preheats"],["prehuman"],["prejudge"],["prelacy"],["prelate"],["prelates"],["prelatic"],["prelect"],["prelects"],["prelegal"],["prelife"],["prelim"],["prelimit"],["prelims"],["prelives"],["prelude"],["preluded"],["preluder"],["preludes"],["prelunch"],["preman"],["premeal"],["premed"],["premedic"],["premeds"],["premeet"],["premen"],["premie"],["premier"],["premiere"],["premiers"],["premies"],["premise"],["premised"],["premises"],["premiss"],["premium"],["premiums"],["premix"],["premixed"],["premixes"],["premolar"],["premold"],["premolds"],["premolt"],["premoral"],["premorse"],["premune"],["prename"],["prenames"],["prenatal"],["prenomen"],["prenoon"],["prentice"],["preorder"],["prep"],["prepack"],["prepacks"],["prepaid"],["prepare"],["prepared"],["preparer"],["prepares"],["prepaste"],["prepay"],["prepays"],["prepense"],["prepill"],["preplace"],["preplan"],["preplans"],["preplant"],["prepped"],["preppie"],["preppier"],["preppies"],["preppily"],["prepping"],["preppy"],["prepreg"],["prepregs"],["preprice"],["preprint"],["preps"],["prepuce"],["prepuces"],["prepunch"],["prepupal"],["prerace"],["prerenal"],["prerinse"],["preriot"],["prerock"],["presa"],["presage"],["presaged"],["presager"],["presages"],["presale"],["prescind"],["prescore"],["prese"],["presell"],["presells"],["presence"],["present"],["presents"],["preserve"],["preset"],["presets"],["preshape"],["preshow"],["preshown"],["preshows"],["preside"],["presided"],["presider"],["presides"],["presidia"],["presidio"],["presift"],["presifts"],["presleep"],["preslice"],["presoak"],["presoaks"],["presold"],["presong"],["presort"],["presorts"],["presplit"],["press"],["pressed"],["presser"],["pressers"],["presses"],["pressing"],["pressman"],["pressmen"],["pressor"],["pressors"],["pressrun"],["pressure"],["prest"],["prestamp"],["prester"],["presters"],["prestige"],["presto"],["prestos"],["prests"],["presume"],["presumed"],["presumer"],["presumes"],["pretape"],["pretaped"],["pretapes"],["pretaste"],["pretax"],["preteen"],["preteens"],["pretence"],["pretend"],["pretends"],["pretense"],["preterit"],["pretest"],["pretests"],["pretext"],["pretexts"],["pretor"],["pretors"],["pretrain"],["pretreat"],["pretrial"],["pretrim"],["pretrims"],["prettied"],["prettier"],["pretties"],["prettify"],["prettily"],["pretty"],["pretype"],["pretyped"],["pretypes"],["pretzel"],["pretzels"],["preunion"],["preunite"],["prevail"],["prevails"],["prevent"],["prevents"],["preview"],["previews"],["previous"],["previse"],["prevised"],["previses"],["previsor"],["prevue"],["prevued"],["prevues"],["prevuing"],["prewar"],["prewarm"],["prewarms"],["prewarn"],["prewarns"],["prewash"],["prework"],["prewrap"],["prewraps"],["prex"],["prexes"],["prexies"],["prexy"],["prey"],["preyed"],["preyer"],["preyers"],["preying"],["preys"],["prez"],["prezes"],["priapean"],["priapi"],["priapic"],["priapism"],["priapus"],["price"],["priced"],["pricer"],["pricers"],["prices"],["pricey"],["pricier"],["priciest"],["pricing"],["prick"],["pricked"],["pricker"],["prickers"],["pricket"],["prickets"],["prickier"],["pricking"],["prickle"],["prickled"],["prickles"],["prickly"],["pricks"],["pricky"],["pricy"],["pride"],["prided"],["prideful"],["prides"],["priding"],["pried"],["priedieu"],["prier"],["priers"],["pries"],["priest"],["priested"],["priestly"],["priests"],["prig"],["prigged"],["priggery"],["prigging"],["priggish"],["priggism"],["prigs"],["prill"],["prilled"],["prilling"],["prills"],["prim"],["prima"],["primacy"],["primage"],["primages"],["primal"],["primary"],["primas"],["primatal"],["primate"],["primates"],["prime"],["primed"],["primely"],["primer"],["primero"],["primeros"],["primers"],["primes"],["primeval"],["primi"],["primine"],["primines"],["priming"],["primings"],["primly"],["primmed"],["primmer"],["primmest"],["primming"],["primness"],["primo"],["primos"],["primp"],["primped"],["primping"],["primps"],["primrose"],["prims"],["primsie"],["primula"],["primulas"],["primus"],["primuses"],["prince"],["princely"],["princes"],["princess"],["principe"],["principi"],["princock"],["princox"],["prink"],["prinked"],["prinker"],["prinkers"],["prinking"],["prinks"],["print"],["printed"],["printer"],["printers"],["printery"],["printing"],["printout"],["prints"],["prior"],["priorate"],["prioress"],["priories"],["priority"],["priorly"],["priors"],["priory"],["prise"],["prised"],["prisere"],["priseres"],["prises"],["prising"],["prism"],["prismoid"],["prisms"],["prison"],["prisoned"],["prisoner"],["prisons"],["priss"],["prissed"],["prisses"],["prissier"],["prissies"],["prissily"],["prissing"],["prissy"],["pristane"],["pristine"],["prithee"],["privacy"],["private"],["privater"],["privates"],["privet"],["privets"],["privier"],["privies"],["priviest"],["privily"],["privity"],["privy"],["prize"],["prized"],["prizer"],["prizers"],["prizes"],["prizing"],["pro"],["proa"],["proas"],["probable"],["probably"],["proband"],["probands"],["probang"],["probangs"],["probate"],["probated"],["probates"],["probe"],["probed"],["prober"],["probers"],["probes"],["probing"],["probit"],["probits"],["probity"],["problem"],["problems"],["procaine"],["procarp"],["procarps"],["proceed"],["proceeds"],["process"],["prochain"],["prochein"],["proclaim"],["proctor"],["proctors"],["procural"],["procure"],["procured"],["procurer"],["procures"],["prod"],["prodded"],["prodder"],["prodders"],["prodding"],["prodigal"],["prodigy"],["prodrome"],["prods"],["produce"],["produced"],["producer"],["produces"],["product"],["products"],["proem"],["proemial"],["proems"],["proette"],["proettes"],["prof"],["profane"],["profaned"],["profaner"],["profanes"],["profess"],["proffer"],["proffers"],["profile"],["profiled"],["profiler"],["profiles"],["profit"],["profited"],["profiter"],["profits"],["profound"],["profs"],["profuse"],["prog"],["progeny"],["progeria"],["progged"],["progger"],["proggers"],["progging"],["prognose"],["prograde"],["program"],["programs"],["progress"],["progs"],["prohibit"],["project"],["projects"],["projet"],["projets"],["prolabor"],["prolamin"],["prolan"],["prolans"],["prolapse"],["prolate"],["prole"],["proleg"],["prolegs"],["proles"],["prolific"],["proline"],["prolines"],["prolix"],["prolixly"],["prolog"],["prologed"],["prologs"],["prologue"],["prolong"],["prolonge"],["prolongs"],["prom"],["promine"],["promines"],["promise"],["promised"],["promisee"],["promiser"],["promises"],["promisor"],["promo"],["promos"],["promote"],["promoted"],["promoter"],["promotes"],["prompt"],["prompted"],["prompter"],["promptly"],["prompts"],["proms"],["promulge"],["pronate"],["pronated"],["pronates"],["pronator"],["prone"],["pronely"],["prong"],["pronged"],["pronging"],["prongs"],["pronota"],["pronotum"],["pronoun"],["pronouns"],["pronto"],["proof"],["proofed"],["proofer"],["proofers"],["proofing"],["proofs"],["prop"],["propane"],["propanes"],["propel"],["propels"],["propend"],["propends"],["propene"],["propenes"],["propenol"],["propense"],["propenyl"],["proper"],["properer"],["properly"],["propers"],["property"],["prophage"],["prophase"],["prophecy"],["prophesy"],["prophet"],["prophets"],["propine"],["propined"],["propines"],["propjet"],["propjets"],["propman"],["propmen"],["propolis"],["propone"],["proponed"],["propones"],["proposal"],["propose"],["proposed"],["proposer"],["proposes"],["propound"],["propped"],["propping"],["props"],["propyl"],["propyla"],["propylic"],["propylon"],["propyls"],["prorate"],["prorated"],["prorates"],["prorogue"],["pros"],["prosaic"],["prosaism"],["prosaist"],["prose"],["prosect"],["prosects"],["prosed"],["proser"],["prosers"],["proses"],["prosier"],["prosiest"],["prosily"],["prosing"],["prosit"],["proso"],["prosodic"],["prosody"],["prosoma"],["prosomal"],["prosomas"],["prosos"],["prospect"],["prosper"],["prospers"],["pross"],["prosses"],["prossie"],["prossies"],["prost"],["prostate"],["prostie"],["prosties"],["prostyle"],["prosy"],["protamin"],["protases"],["protasis"],["protatic"],["protea"],["protean"],["proteans"],["proteas"],["protease"],["protect"],["protects"],["protege"],["protegee"],["proteges"],["protei"],["proteid"],["proteide"],["proteids"],["protein"],["proteins"],["protend"],["protends"],["proteose"],["protest"],["protests"],["proteus"],["protist"],["protists"],["protium"],["protiums"],["protocol"],["proton"],["protonic"],["protons"],["protopod"],["protoxid"],["protozoa"],["protract"],["protrude"],["protyl"],["protyle"],["protyles"],["protyls"],["proud"],["prouder"],["proudest"],["proudful"],["proudly"],["prounion"],["provable"],["provably"],["prove"],["proved"],["proven"],["provenly"],["prover"],["proverb"],["proverbs"],["provers"],["proves"],["provide"],["provided"],["provider"],["provides"],["province"],["proving"],["proviral"],["provirus"],["proviso"],["provisos"],["provoke"],["provoked"],["provoker"],["provokes"],["provost"],["provosts"],["prow"],["prowar"],["prower"],["prowess"],["prowest"],["prowl"],["prowled"],["prowler"],["prowlers"],["prowling"],["prowls"],["prows"],["proxemic"],["proxies"],["proximal"],["proximo"],["proxy"],["prude"],["prudence"],["prudent"],["prudery"],["prudes"],["prudish"],["pruinose"],["prunable"],["prune"],["pruned"],["prunella"],["prunelle"],["prunello"],["pruner"],["pruners"],["prunes"],["pruning"],["prurient"],["prurigo"],["prurigos"],["pruritic"],["pruritus"],["prussic"],["pruta"],["prutah"],["prutot"],["prutoth"],["pry"],["pryer"],["pryers"],["prying"],["pryingly"],["prythee"],["psalm"],["psalmed"],["psalmic"],["psalming"],["psalmist"],["psalmody"],["psalms"],["psalter"],["psalters"],["psaltery"],["psaltry"],["psammite"],["psammon"],["psammons"],["pschent"],["pschents"],["psephite"],["pseud"],["pseudo"],["pseudos"],["pseuds"],["pshaw"],["pshawed"],["pshawing"],["pshaws"],["psi"],["psilocin"],["psiloses"],["psilosis"],["psilotic"],["psis"],["psoae"],["psoai"],["psoas"],["psoatic"],["psocid"],["psocids"],["psoralea"],["psoralen"],["psst"],["psych"],["psyche"],["psyched"],["psyches"],["psychic"],["psychics"],["psyching"],["psycho"],["psychos"],["psychs"],["psylla"],["psyllas"],["psyllid"],["psyllids"],["psyllium"],["psywar"],["psywars"],["pterin"],["pterins"],["pteropod"],["pterygia"],["pteryla"],["pterylae"],["ptisan"],["ptisans"],["ptomain"],["ptomaine"],["ptomains"],["ptoses"],["ptosis"],["ptotic"],["ptyalin"],["ptyalins"],["ptyalism"],["pub"],["puberal"],["pubertal"],["puberty"],["pubes"],["pubic"],["pubis"],["public"],["publican"],["publicly"],["publics"],["publish"],["pubs"],["puccoon"],["puccoons"],["puce"],["puces"],["puck"],["pucka"],["pucker"],["puckered"],["puckerer"],["puckers"],["puckery"],["puckish"],["pucks"],["pud"],["pudding"],["puddings"],["puddle"],["puddled"],["puddler"],["puddlers"],["puddles"],["puddlier"],["puddling"],["puddly"],["pudency"],["pudenda"],["pudendal"],["pudendum"],["pudgier"],["pudgiest"],["pudgily"],["pudgy"],["pudibund"],["pudic"],["puds"],["pueblo"],["pueblos"],["puerile"],["puff"],["puffball"],["puffed"],["puffer"],["puffers"],["puffery"],["puffier"],["puffiest"],["puffily"],["puffin"],["puffing"],["puffins"],["puffs"],["puffy"],["pug"],["pugaree"],["pugarees"],["puggaree"],["pugged"],["puggier"],["puggiest"],["pugging"],["puggish"],["puggree"],["puggrees"],["puggries"],["puggry"],["puggy"],["pugh"],["pugilism"],["pugilist"],["pugmark"],["pugmarks"],["pugree"],["pugrees"],["pugs"],["puisne"],["puisnes"],["puissant"],["puja"],["pujah"],["pujahs"],["pujas"],["puke"],["puked"],["pukes"],["puking"],["pukka"],["pul"],["pula"],["pule"],["puled"],["puler"],["pulers"],["pules"],["puli"],["pulicene"],["pulicide"],["pulik"],["puling"],["pulingly"],["pulings"],["pulis"],["pull"],["pullback"],["pulled"],["puller"],["pullers"],["pullet"],["pullets"],["pulley"],["pulleys"],["pulling"],["pullman"],["pullmans"],["pullout"],["pullouts"],["pullover"],["pulls"],["pullup"],["pullups"],["pulmonic"],["pulmotor"],["pulp"],["pulpal"],["pulpally"],["pulped"],["pulper"],["pulpers"],["pulpier"],["pulpiest"],["pulpily"],["pulping"],["pulpit"],["pulpital"],["pulpits"],["pulpless"],["pulpous"],["pulps"],["pulpwood"],["pulpy"],["pulque"],["pulques"],["puls"],["pulsant"],["pulsar"],["pulsars"],["pulsate"],["pulsated"],["pulsates"],["pulsator"],["pulse"],["pulsed"],["pulsejet"],["pulser"],["pulsers"],["pulses"],["pulsing"],["pulsion"],["pulsions"],["pulsojet"],["pulvilli"],["pulvinar"],["pulvini"],["pulvinus"],["puma"],["pumas"],["pumelo"],["pumelos"],["pumice"],["pumiced"],["pumicer"],["pumicers"],["pumices"],["pumicing"],["pumicite"],["pummel"],["pummeled"],["pummels"],["pump"],["pumped"],["pumper"],["pumpers"],["pumping"],["pumpkin"],["pumpkins"],["pumpless"],["pumplike"],["pumps"],["pun"],["puna"],["punas"],["punch"],["punched"],["puncheon"],["puncher"],["punchers"],["punches"],["punchier"],["punchily"],["punching"],["punchy"],["punctate"],["punctual"],["puncture"],["pundit"],["punditic"],["punditry"],["pundits"],["pung"],["pungency"],["pungent"],["pungle"],["pungled"],["pungles"],["pungling"],["pungs"],["punier"],["puniest"],["punily"],["puniness"],["punish"],["punished"],["punisher"],["punishes"],["punition"],["punitive"],["punitory"],["punk"],["punka"],["punkah"],["punkahs"],["punkas"],["punker"],["punkest"],["punkey"],["punkeys"],["punkie"],["punkier"],["punkies"],["punkiest"],["punkin"],["punkins"],["punks"],["punky"],["punned"],["punner"],["punners"],["punnet"],["punnets"],["punnier"],["punniest"],["punning"],["punny"],["puns"],["punster"],["punsters"],["punt"],["punted"],["punter"],["punters"],["punties"],["punting"],["punto"],["puntos"],["punts"],["punty"],["puny"],["pup"],["pupa"],["pupae"],["pupal"],["puparia"],["puparial"],["puparium"],["pupas"],["pupate"],["pupated"],["pupates"],["pupating"],["pupation"],["pupfish"],["pupil"],["pupilage"],["pupilar"],["pupilary"],["pupils"],["pupped"],["puppet"],["puppetry"],["puppets"],["puppies"],["pupping"],["puppy"],["puppydom"],["puppyish"],["pups"],["pur"],["purana"],["puranas"],["puranic"],["purblind"],["purchase"],["purda"],["purdah"],["purdahs"],["purdas"],["pure"],["purebred"],["puree"],["pureed"],["pureeing"],["purees"],["purely"],["pureness"],["purer"],["purest"],["purfle"],["purfled"],["purfles"],["purfling"],["purge"],["purged"],["purger"],["purgers"],["purges"],["purging"],["purgings"],["puri"],["purified"],["purifier"],["purifies"],["purify"],["purin"],["purine"],["purines"],["purins"],["puris"],["purism"],["purisms"],["purist"],["puristic"],["purists"],["puritan"],["puritans"],["purities"],["purity"],["purl"],["purled"],["purlieu"],["purlieus"],["purlin"],["purline"],["purlines"],["purling"],["purlins"],["purloin"],["purloins"],["purls"],["purple"],["purpled"],["purpler"],["purples"],["purplest"],["purpling"],["purplish"],["purply"],["purport"],["purports"],["purpose"],["purposed"],["purposes"],["purpura"],["purpuras"],["purpure"],["purpures"],["purpuric"],["purpurin"],["purr"],["purred"],["purring"],["purrs"],["purs"],["purse"],["pursed"],["purser"],["pursers"],["purses"],["pursier"],["pursiest"],["pursily"],["pursing"],["purslane"],["pursuant"],["pursue"],["pursued"],["pursuer"],["pursuers"],["pursues"],["pursuing"],["pursuit"],["pursuits"],["pursy"],["purulent"],["purvey"],["purveyed"],["purveyor"],["purveys"],["purview"],["purviews"],["pus"],["puses"],["push"],["pushball"],["pushcart"],["pushdown"],["pushed"],["pusher"],["pushers"],["pushes"],["pushful"],["pushier"],["pushiest"],["pushily"],["pushing"],["pushover"],["pushpin"],["pushpins"],["pushrod"],["pushrods"],["pushup"],["pushups"],["pushy"],["pusley"],["pusleys"],["puslike"],["puss"],["pusses"],["pussier"],["pussies"],["pussiest"],["pussley"],["pussleys"],["pusslies"],["pusslike"],["pussly"],["pussy"],["pussycat"],["pustular"],["pustule"],["pustuled"],["pustules"],["put"],["putamen"],["putamina"],["putative"],["putlog"],["putlogs"],["putoff"],["putoffs"],["puton"],["putons"],["putout"],["putouts"],["putrefy"],["putrid"],["putridly"],["puts"],["putsch"],["putsches"],["putt"],["putted"],["puttee"],["puttees"],["putter"],["puttered"],["putterer"],["putters"],["putti"],["puttied"],["puttier"],["puttiers"],["putties"],["putting"],["putto"],["putts"],["putty"],["puttying"],["putz"],["putzed"],["putzes"],["putzing"],["puzzle"],["puzzled"],["puzzler"],["puzzlers"],["puzzles"],["puzzling"],["pya"],["pyaemia"],["pyaemias"],["pyaemic"],["pyas"],["pycnidia"],["pycnoses"],["pycnosis"],["pycnotic"],["pye"],["pyelitic"],["pyelitis"],["pyemia"],["pyemias"],["pyemic"],["pyes"],["pygidia"],["pygidial"],["pygidium"],["pygmaean"],["pygmean"],["pygmies"],["pygmoid"],["pygmy"],["pygmyish"],["pygmyism"],["pyic"],["pyin"],["pyins"],["pyjamas"],["pyknic"],["pyknics"],["pyknoses"],["pyknosis"],["pyknotic"],["pylon"],["pylons"],["pylori"],["pyloric"],["pylorus"],["pyoderma"],["pyogenic"],["pyoid"],["pyorrhea"],["pyoses"],["pyosis"],["pyralid"],["pyralids"],["pyramid"],["pyramids"],["pyran"],["pyranoid"],["pyranose"],["pyrans"],["pyre"],["pyrene"],["pyrenes"],["pyrenoid"],["pyres"],["pyretic"],["pyrexia"],["pyrexial"],["pyrexias"],["pyrexic"],["pyric"],["pyridic"],["pyridine"],["pyriform"],["pyrite"],["pyrites"],["pyritic"],["pyritous"],["pyrogen"],["pyrogens"],["pyrola"],["pyrolas"],["pyrology"],["pyrolyze"],["pyrone"],["pyrones"],["pyronine"],["pyrope"],["pyropes"],["pyrosis"],["pyrostat"],["pyroxene"],["pyrrhic"],["pyrrhics"],["pyrrol"],["pyrrole"],["pyrroles"],["pyrrolic"],["pyrrols"],["pyruvate"],["python"],["pythonic"],["pythons"],["pyuria"],["pyurias"],["pyx"],["pyxes"],["pyxides"],["pyxidia"],["pyxidium"],["pyxie"],["pyxies"],["pyxis"],["qaid"],["qaids"],["qanat"],["qanats"],["qat"],["qats"],["qindar"],["qindarka"],["qindars"],["qintar"],["qintars"],["qiviut"],["qiviuts"],["qoph"],["qophs"],["qua"],["quack"],["quacked"],["quackery"],["quacking"],["quackish"],["quackism"],["quacks"],["quad"],["quadded"],["quadding"],["quadplex"],["quadrans"],["quadrant"],["quadrat"],["quadrate"],["quadrats"],["quadric"],["quadrics"],["quadriga"],["quadroon"],["quads"],["quaere"],["quaeres"],["quaestor"],["quaff"],["quaffed"],["quaffer"],["quaffers"],["quaffing"],["quaffs"],["quag"],["quagga"],["quaggas"],["quaggier"],["quaggy"],["quagmire"],["quagmiry"],["quags"],["quahaug"],["quahaugs"],["quahog"],["quahogs"],["quai"],["quaich"],["quaiches"],["quaichs"],["quaigh"],["quaighs"],["quail"],["quailed"],["quailing"],["quails"],["quaint"],["quainter"],["quaintly"],["quais"],["quake"],["quaked"],["quaker"],["quakers"],["quakes"],["quakier"],["quakiest"],["quakily"],["quaking"],["quaky"],["quale"],["qualia"],["qualify"],["quality"],["qualm"],["qualmier"],["qualmish"],["qualms"],["qualmy"],["quamash"],["quandang"],["quandary"],["quandong"],["quango"],["quangos"],["quant"],["quanta"],["quantal"],["quanted"],["quantic"],["quantics"],["quantify"],["quantile"],["quanting"],["quantity"],["quantize"],["quantong"],["quants"],["quantum"],["quare"],["quark"],["quarks"],["quarrel"],["quarrels"],["quarried"],["quarrier"],["quarries"],["quarry"],["quart"],["quartan"],["quartans"],["quarte"],["quarter"],["quartern"],["quarters"],["quartes"],["quartet"],["quartets"],["quartic"],["quartics"],["quartile"],["quarto"],["quartos"],["quarts"],["quartz"],["quartzes"],["quasar"],["quasars"],["quash"],["quashed"],["quasher"],["quashers"],["quashes"],["quashing"],["quasi"],["quass"],["quasses"],["quassia"],["quassias"],["quassin"],["quassins"],["quate"],["quatorze"],["quatrain"],["quatre"],["quatres"],["quaver"],["quavered"],["quaverer"],["quavers"],["quavery"],["quay"],["quayage"],["quayages"],["quaylike"],["quays"],["quayside"],["quean"],["queans"],["queasier"],["queasily"],["queasy"],["queazier"],["queazy"],["queen"],["queendom"],["queened"],["queening"],["queenly"],["queens"],["queer"],["queered"],["queerer"],["queerest"],["queering"],["queerish"],["queerly"],["queers"],["quell"],["quelled"],["queller"],["quellers"],["quelling"],["quells"],["quench"],["quenched"],["quencher"],["quenches"],["quenelle"],["quercine"],["querida"],["queridas"],["queried"],["querier"],["queriers"],["queries"],["querist"],["querists"],["quern"],["querns"],["query"],["querying"],["quest"],["quested"],["quester"],["questers"],["questing"],["question"],["questor"],["questors"],["quests"],["quetzal"],["quetzals"],["queue"],["queued"],["queueing"],["queuer"],["queuers"],["queues"],["queuing"],["quey"],["queys"],["quezal"],["quezales"],["quezals"],["quibble"],["quibbled"],["quibbler"],["quibbles"],["quiche"],["quiches"],["quick"],["quicken"],["quickens"],["quicker"],["quickest"],["quickie"],["quickies"],["quickly"],["quicks"],["quickset"],["quid"],["quiddity"],["quidnunc"],["quids"],["quiet"],["quieted"],["quieten"],["quietens"],["quieter"],["quieters"],["quietest"],["quieting"],["quietism"],["quietist"],["quietly"],["quiets"],["quietude"],["quietus"],["quiff"],["quiffs"],["quill"],["quillai"],["quillaia"],["quillais"],["quillaja"],["quilled"],["quillet"],["quillets"],["quilling"],["quills"],["quilt"],["quilted"],["quilter"],["quilters"],["quilting"],["quilts"],["quin"],["quinary"],["quinate"],["quince"],["quinces"],["quincunx"],["quinela"],["quinelas"],["quinella"],["quinic"],["quiniela"],["quinin"],["quinina"],["quininas"],["quinine"],["quinines"],["quinins"],["quinnat"],["quinnats"],["quinoa"],["quinoas"],["quinoid"],["quinoids"],["quinol"],["quinolin"],["quinols"],["quinone"],["quinones"],["quins"],["quinsies"],["quinsy"],["quint"],["quintain"],["quintal"],["quintals"],["quintan"],["quintans"],["quintar"],["quintars"],["quinte"],["quintes"],["quintet"],["quintets"],["quintic"],["quintics"],["quintile"],["quintin"],["quintins"],["quints"],["quip"],["quipped"],["quipping"],["quippish"],["quippu"],["quippus"],["quips"],["quipster"],["quipu"],["quipus"],["quire"],["quired"],["quires"],["quiring"],["quirk"],["quirked"],["quirkier"],["quirkily"],["quirking"],["quirks"],["quirky"],["quirt"],["quirted"],["quirting"],["quirts"],["quisling"],["quit"],["quitch"],["quitches"],["quite"],["quitrent"],["quits"],["quitted"],["quitter"],["quitters"],["quitting"],["quittor"],["quittors"],["quiver"],["quivered"],["quiverer"],["quivers"],["quivery"],["quixote"],["quixotes"],["quixotic"],["quixotry"],["quiz"],["quizzed"],["quizzer"],["quizzers"],["quizzes"],["quizzing"],["quod"],["quods"],["quohog"],["quohogs"],["quoin"],["quoined"],["quoining"],["quoins"],["quoit"],["quoited"],["quoiting"],["quoits"],["quokka"],["quokkas"],["quomodo"],["quomodos"],["quondam"],["quorum"],["quorums"],["quota"],["quotable"],["quotably"],["quotas"],["quote"],["quoted"],["quoter"],["quoters"],["quotes"],["quoth"],["quotha"],["quotient"],["quoting"],["qursh"],["qurshes"],["qurush"],["qurushes"],["rabat"],["rabato"],["rabatos"],["rabats"],["rabbet"],["rabbeted"],["rabbets"],["rabbi"],["rabbies"],["rabbin"],["rabbinic"],["rabbins"],["rabbis"],["rabbit"],["rabbited"],["rabbiter"],["rabbitry"],["rabbits"],["rabbity"],["rabble"],["rabbled"],["rabbler"],["rabblers"],["rabbles"],["rabbling"],["rabboni"],["rabbonis"],["rabic"],["rabid"],["rabidity"],["rabidly"],["rabies"],["rabietic"],["raccoon"],["raccoons"],["race"],["raced"],["racemate"],["raceme"],["racemed"],["racemes"],["racemic"],["racemism"],["racemize"],["racemoid"],["racemose"],["racemous"],["racer"],["racers"],["races"],["raceway"],["raceways"],["rachet"],["rachets"],["rachial"],["rachides"],["rachilla"],["rachis"],["rachises"],["rachitic"],["rachitis"],["racial"],["racially"],["racier"],["raciest"],["racily"],["raciness"],["racing"],["racings"],["racism"],["racisms"],["racist"],["racists"],["rack"],["racked"],["racker"],["rackers"],["racket"],["racketed"],["rackets"],["rackety"],["rackful"],["rackfuls"],["racking"],["rackle"],["racks"],["rackwork"],["raclette"],["racon"],["racons"],["racoon"],["racoons"],["racquet"],["racquets"],["racy"],["rad"],["radar"],["radars"],["radded"],["radding"],["raddle"],["raddled"],["raddles"],["raddling"],["radiable"],["radial"],["radiale"],["radialia"],["radially"],["radials"],["radian"],["radiance"],["radiancy"],["radians"],["radiant"],["radiants"],["radiate"],["radiated"],["radiates"],["radiator"],["radical"],["radicals"],["radicand"],["radicate"],["radicel"],["radicels"],["radices"],["radicle"],["radicles"],["radii"],["radio"],["radioed"],["radioing"],["radioman"],["radiomen"],["radios"],["radish"],["radishes"],["radium"],["radiums"],["radius"],["radiuses"],["radix"],["radixes"],["radome"],["radomes"],["radon"],["radons"],["rads"],["radula"],["radulae"],["radular"],["radulas"],["raff"],["raffia"],["raffias"],["raffish"],["raffle"],["raffled"],["raffler"],["rafflers"],["raffles"],["raffling"],["raffs"],["raft"],["rafted"],["rafter"],["raftered"],["rafters"],["rafting"],["rafts"],["raftsman"],["raftsmen"],["rag"],["raga"],["ragas"],["ragbag"],["ragbags"],["rage"],["raged"],["ragee"],["ragees"],["rages"],["ragged"],["raggeder"],["raggedly"],["raggedy"],["raggee"],["raggees"],["raggies"],["ragging"],["raggle"],["raggles"],["raggy"],["ragi"],["raging"],["ragingly"],["ragis"],["raglan"],["raglans"],["ragman"],["ragmen"],["ragout"],["ragouted"],["ragouts"],["rags"],["ragtag"],["ragtags"],["ragtime"],["ragtimes"],["ragtop"],["ragtops"],["ragweed"],["ragweeds"],["ragwort"],["ragworts"],["rah"],["raia"],["raias"],["raid"],["raided"],["raider"],["raiders"],["raiding"],["raids"],["rail"],["railbird"],["railbus"],["railcar"],["railcars"],["railed"],["railer"],["railers"],["railhead"],["railing"],["railings"],["raillery"],["railroad"],["rails"],["railway"],["railways"],["raiment"],["raiments"],["rain"],["rainband"],["rainbird"],["rainbow"],["rainbows"],["raincoat"],["raindrop"],["rained"],["rainfall"],["rainier"],["rainiest"],["rainily"],["raining"],["rainless"],["rainout"],["rainouts"],["rains"],["rainwash"],["rainwear"],["rainy"],["raisable"],["raise"],["raised"],["raiser"],["raisers"],["raises"],["raisin"],["raising"],["raisings"],["raisins"],["raisiny"],["raisonne"],["raj"],["raja"],["rajah"],["rajahs"],["rajas"],["rajes"],["rake"],["raked"],["rakee"],["rakees"],["rakehell"],["rakeoff"],["rakeoffs"],["raker"],["rakers"],["rakes"],["raki"],["raking"],["rakis"],["rakish"],["rakishly"],["rale"],["rales"],["rallied"],["rallier"],["ralliers"],["rallies"],["ralline"],["rally"],["rallye"],["rallyes"],["rallying"],["rallyist"],["ralph"],["ralphed"],["ralphing"],["ralphs"],["ram"],["ramate"],["ramble"],["rambled"],["rambler"],["ramblers"],["rambles"],["rambling"],["rambutan"],["ramee"],["ramees"],["ramekin"],["ramekins"],["ramenta"],["ramentum"],["ramequin"],["ramet"],["ramets"],["rami"],["ramie"],["ramies"],["ramified"],["ramifies"],["ramiform"],["ramify"],["ramilie"],["ramilies"],["ramillie"],["ramjet"],["ramjets"],["rammed"],["rammer"],["rammers"],["rammier"],["rammiest"],["ramming"],["rammish"],["rammy"],["ramose"],["ramosely"],["ramosity"],["ramous"],["ramp"],["rampage"],["rampaged"],["rampager"],["rampages"],["rampancy"],["rampant"],["rampart"],["ramparts"],["ramped"],["rampike"],["rampikes"],["ramping"],["rampion"],["rampions"],["rampole"],["rampoles"],["ramps"],["ramrod"],["ramrods"],["rams"],["ramshorn"],["ramson"],["ramsons"],["ramtil"],["ramtils"],["ramulose"],["ramulous"],["ramus"],["ran"],["rance"],["rances"],["ranch"],["ranched"],["rancher"],["ranchero"],["ranchers"],["ranches"],["ranching"],["ranchman"],["ranchmen"],["rancho"],["ranchos"],["rancid"],["rancidly"],["rancor"],["rancored"],["rancors"],["rancour"],["rancours"],["rand"],["randan"],["randans"],["randier"],["randies"],["randiest"],["random"],["randomly"],["randoms"],["rands"],["randy"],["ranee"],["ranees"],["rang"],["range"],["ranged"],["ranger"],["rangers"],["ranges"],["rangier"],["rangiest"],["ranging"],["rangy"],["rani"],["ranid"],["ranids"],["ranis"],["rank"],["ranked"],["ranker"],["rankers"],["rankest"],["ranking"],["rankings"],["rankish"],["rankle"],["rankled"],["rankles"],["rankling"],["rankly"],["rankness"],["ranks"],["ranpike"],["ranpikes"],["ransack"],["ransacks"],["ransom"],["ransomed"],["ransomer"],["ransoms"],["rant"],["ranted"],["ranter"],["ranters"],["ranting"],["rants"],["ranula"],["ranulas"],["rap"],["rapacity"],["rape"],["raped"],["raper"],["rapers"],["rapes"],["rapeseed"],["raphae"],["raphe"],["raphes"],["raphia"],["raphias"],["raphide"],["raphides"],["raphis"],["rapid"],["rapider"],["rapidest"],["rapidity"],["rapidly"],["rapids"],["rapier"],["rapiered"],["rapiers"],["rapine"],["rapines"],["raping"],["rapist"],["rapists"],["rapparee"],["rapped"],["rappee"],["rappees"],["rappel"],["rappels"],["rappen"],["rapper"],["rappers"],["rapping"],["rappini"],["rapport"],["rapports"],["raps"],["rapt"],["raptly"],["raptness"],["raptor"],["raptors"],["rapture"],["raptured"],["raptures"],["rare"],["rarebit"],["rarebits"],["rared"],["rarefied"],["rarefier"],["rarefies"],["rarefy"],["rarely"],["rareness"],["rarer"],["rareripe"],["rares"],["rarest"],["rarified"],["rarifies"],["rarify"],["raring"],["rarities"],["rarity"],["ras"],["rasbora"],["rasboras"],["rascal"],["rascally"],["rascals"],["rase"],["rased"],["raser"],["rasers"],["rases"],["rash"],["rasher"],["rashers"],["rashes"],["rashest"],["rashlike"],["rashly"],["rashness"],["rasing"],["rasorial"],["rasp"],["rasped"],["rasper"],["raspers"],["raspier"],["raspiest"],["rasping"],["raspish"],["rasps"],["raspy"],["rassle"],["rassled"],["rassles"],["rassling"],["raster"],["rasters"],["rasure"],["rasures"],["rat"],["ratable"],["ratably"],["ratafee"],["ratafees"],["ratafia"],["ratafias"],["ratal"],["ratals"],["ratan"],["ratanies"],["ratans"],["ratany"],["rataplan"],["ratatat"],["ratatats"],["ratch"],["ratches"],["ratchet"],["ratchets"],["rate"],["rateable"],["rateably"],["rated"],["ratel"],["ratels"],["rater"],["raters"],["rates"],["ratfink"],["ratfinks"],["ratfish"],["rath"],["rathe"],["rather"],["rathole"],["ratholes"],["raticide"],["ratified"],["ratifier"],["ratifies"],["ratify"],["ratine"],["ratines"],["rating"],["ratings"],["ratio"],["ration"],["rational"],["rationed"],["rations"],["ratios"],["ratite"],["ratites"],["ratlike"],["ratlin"],["ratline"],["ratlines"],["ratlins"],["rato"],["ratoon"],["ratooned"],["ratooner"],["ratoons"],["ratos"],["rats"],["ratsbane"],["rattail"],["rattails"],["rattan"],["rattans"],["ratted"],["ratteen"],["ratteens"],["ratten"],["rattened"],["rattener"],["rattens"],["ratter"],["ratters"],["rattier"],["rattiest"],["ratting"],["rattish"],["rattle"],["rattled"],["rattler"],["rattlers"],["rattles"],["rattling"],["rattly"],["ratton"],["rattons"],["rattoon"],["rattoons"],["rattrap"],["rattraps"],["ratty"],["raucity"],["raucous"],["raunchy"],["ravage"],["ravaged"],["ravager"],["ravagers"],["ravages"],["ravaging"],["rave"],["raved"],["ravel"],["raveled"],["raveler"],["ravelers"],["ravelin"],["raveling"],["ravelins"],["ravelled"],["raveller"],["ravelly"],["ravels"],["raven"],["ravened"],["ravener"],["raveners"],["ravening"],["ravenous"],["ravens"],["raver"],["ravers"],["raves"],["ravigote"],["ravin"],["ravine"],["ravined"],["ravines"],["raving"],["ravingly"],["ravings"],["ravining"],["ravins"],["ravioli"],["raviolis"],["ravish"],["ravished"],["ravisher"],["ravishes"],["raw"],["rawboned"],["rawer"],["rawest"],["rawhide"],["rawhided"],["rawhides"],["rawin"],["rawins"],["rawish"],["rawly"],["rawness"],["raws"],["rax"],["raxed"],["raxes"],["raxing"],["ray"],["raya"],["rayah"],["rayahs"],["rayas"],["rayed"],["raygrass"],["raying"],["rayless"],["raylike"],["rayon"],["rayons"],["rays"],["raze"],["razed"],["razee"],["razeed"],["razeeing"],["razees"],["razer"],["razers"],["razes"],["razing"],["razor"],["razored"],["razoring"],["razors"],["razz"],["razzed"],["razzes"],["razzing"],["re"],["reabsorb"],["reaccede"],["reaccent"],["reaccept"],["reaccuse"],["reach"],["reached"],["reacher"],["reachers"],["reaches"],["reaching"],["react"],["reactant"],["reacted"],["reacting"],["reaction"],["reactive"],["reactor"],["reactors"],["reacts"],["read"],["readable"],["readably"],["readapt"],["readapts"],["readd"],["readded"],["readdict"],["readding"],["readds"],["reader"],["readers"],["readied"],["readier"],["readies"],["readiest"],["readily"],["reading"],["readings"],["readjust"],["readmit"],["readmits"],["readopt"],["readopts"],["readorn"],["readorns"],["readout"],["readouts"],["reads"],["ready"],["readying"],["reaffirm"],["reaffix"],["reagent"],["reagents"],["reagin"],["reaginic"],["reagins"],["real"],["realer"],["reales"],["realest"],["realgar"],["realgars"],["realia"],["realign"],["realigns"],["realise"],["realised"],["realiser"],["realises"],["realism"],["realisms"],["realist"],["realists"],["reality"],["realize"],["realized"],["realizer"],["realizes"],["reallot"],["reallots"],["really"],["realm"],["realms"],["realness"],["reals"],["realter"],["realters"],["realties"],["realty"],["ream"],["reamed"],["reamer"],["reamers"],["reaming"],["reams"],["reannex"],["reanoint"],["reap"],["reapable"],["reaped"],["reaper"],["reapers"],["reaphook"],["reaping"],["reappear"],["reapply"],["reaps"],["rear"],["reared"],["rearer"],["rearers"],["reargue"],["reargued"],["reargues"],["rearing"],["rearm"],["rearmed"],["rearmice"],["rearming"],["rearmost"],["rearms"],["rearouse"],["rearrest"],["rears"],["rearward"],["reascend"],["reascent"],["reason"],["reasoned"],["reasoner"],["reasons"],["reassail"],["reassert"],["reassess"],["reassign"],["reassort"],["reassume"],["reassure"],["reata"],["reatas"],["reattach"],["reattack"],["reattain"],["reavail"],["reavails"],["reave"],["reaved"],["reaver"],["reavers"],["reaves"],["reaving"],["reavow"],["reavowed"],["reavows"],["reawake"],["reawaked"],["reawaken"],["reawakes"],["reawoke"],["reawoken"],["reb"],["rebait"],["rebaited"],["rebaits"],["rebate"],["rebated"],["rebater"],["rebaters"],["rebates"],["rebating"],["rebato"],["rebatos"],["rebbe"],["rebbes"],["rebec"],["rebeck"],["rebecks"],["rebecs"],["rebel"],["rebeldom"],["rebelled"],["rebels"],["rebid"],["rebidden"],["rebids"],["rebill"],["rebilled"],["rebills"],["rebind"],["rebinds"],["rebirth"],["rebirths"],["reblend"],["reblends"],["rebloom"],["reblooms"],["reboant"],["reboard"],["reboards"],["rebodied"],["rebodies"],["rebody"],["reboil"],["reboiled"],["reboils"],["rebook"],["rebooked"],["rebooks"],["rebop"],["rebops"],["rebore"],["rebored"],["rebores"],["reboring"],["reborn"],["rebottle"],["rebought"],["rebound"],["rebounds"],["rebozo"],["rebozos"],["rebranch"],["rebs"],["rebuff"],["rebuffed"],["rebuffs"],["rebuild"],["rebuilds"],["rebuilt"],["rebuke"],["rebuked"],["rebuker"],["rebukers"],["rebukes"],["rebuking"],["reburial"],["reburied"],["reburies"],["rebury"],["rebus"],["rebuses"],["rebut"],["rebuts"],["rebuttal"],["rebutted"],["rebutter"],["rebutton"],["rebuy"],["rebuying"],["rebuys"],["rec"],["recall"],["recalled"],["recaller"],["recalls"],["recamier"],["recane"],["recaned"],["recanes"],["recaning"],["recant"],["recanted"],["recanter"],["recants"],["recap"],["recapped"],["recaps"],["recarry"],["recast"],["recasts"],["recede"],["receded"],["recedes"],["receding"],["receipt"],["receipts"],["receive"],["received"],["receiver"],["receives"],["recency"],["recent"],["recenter"],["recently"],["recept"],["receptor"],["recepts"],["recess"],["recessed"],["recesses"],["rechange"],["recharge"],["rechart"],["recharts"],["recheat"],["recheats"],["recheck"],["rechecks"],["rechew"],["rechewed"],["rechews"],["rechoose"],["rechose"],["rechosen"],["recipe"],["recipes"],["recircle"],["recision"],["recital"],["recitals"],["recite"],["recited"],["reciter"],["reciters"],["recites"],["reciting"],["reck"],["recked"],["recking"],["reckless"],["reckon"],["reckoned"],["reckoner"],["reckons"],["recks"],["reclad"],["reclaim"],["reclaims"],["reclame"],["reclames"],["reclasp"],["reclasps"],["reclean"],["recleans"],["recline"],["reclined"],["recliner"],["reclines"],["reclothe"],["recluse"],["recluses"],["recoal"],["recoaled"],["recoals"],["recock"],["recocked"],["recocks"],["recode"],["recoded"],["recodes"],["recodify"],["recoding"],["recoil"],["recoiled"],["recoiler"],["recoils"],["recoin"],["recoined"],["recoins"],["recolor"],["recolors"],["recomb"],["recombed"],["recombs"],["recommit"],["recon"],["recons"],["reconvey"],["recook"],["recooked"],["recooks"],["recopied"],["recopies"],["recopy"],["record"],["recorded"],["recorder"],["records"],["recork"],["recorked"],["recorks"],["recount"],["recounts"],["recoup"],["recoupe"],["recouped"],["recouple"],["recoups"],["recourse"],["recover"],["recovers"],["recovery"],["recrate"],["recrated"],["recrates"],["recreant"],["recreate"],["recross"],["recrown"],["recrowns"],["recruit"],["recruits"],["recs"],["recta"],["rectal"],["rectally"],["recti"],["rectify"],["recto"],["rector"],["rectors"],["rectory"],["rectos"],["rectrix"],["rectum"],["rectums"],["rectus"],["recur"],["recurred"],["recurs"],["recurve"],["recurved"],["recurves"],["recusant"],["recuse"],["recused"],["recuses"],["recusing"],["recut"],["recuts"],["recycle"],["recycled"],["recycler"],["recycles"],["red"],["redact"],["redacted"],["redactor"],["redacts"],["redamage"],["redan"],["redans"],["redargue"],["redate"],["redated"],["redates"],["redating"],["redbait"],["redbaits"],["redbay"],["redbays"],["redbird"],["redbirds"],["redbone"],["redbones"],["redbrick"],["redbud"],["redbuds"],["redbug"],["redbugs"],["redcap"],["redcaps"],["redcoat"],["redcoats"],["redd"],["redded"],["redden"],["reddened"],["reddens"],["redder"],["redders"],["reddest"],["redding"],["reddish"],["reddle"],["reddled"],["reddles"],["reddling"],["redds"],["rede"],["redear"],["redears"],["redecide"],["reded"],["redeem"],["redeemed"],["redeemer"],["redeems"],["redefeat"],["redefect"],["redefied"],["redefies"],["redefine"],["redefy"],["redemand"],["redenied"],["redenies"],["redeny"],["redeploy"],["redes"],["redesign"],["redeye"],["redeyes"],["redfin"],["redfins"],["redfish"],["redhead"],["redheads"],["redhorse"],["redia"],["rediae"],["redial"],["redias"],["redid"],["redigest"],["reding"],["redip"],["redipped"],["redips"],["redipt"],["redirect"],["redivide"],["redleg"],["redlegs"],["redline"],["redlined"],["redlines"],["redly"],["redneck"],["rednecks"],["redness"],["redo"],["redock"],["redocked"],["redocks"],["redoes"],["redoing"],["redolent"],["redon"],["redone"],["redonned"],["redons"],["redos"],["redouble"],["redoubt"],["redoubts"],["redound"],["redounds"],["redout"],["redouts"],["redowa"],["redowas"],["redox"],["redoxes"],["redpoll"],["redpolls"],["redraft"],["redrafts"],["redraw"],["redrawer"],["redrawn"],["redraws"],["redream"],["redreams"],["redreamt"],["redress"],["redrew"],["redried"],["redries"],["redrill"],["redrills"],["redrive"],["redriven"],["redrives"],["redroot"],["redroots"],["redrove"],["redry"],["redrying"],["reds"],["redshank"],["redshift"],["redshirt"],["redskin"],["redskins"],["redstart"],["redtop"],["redtops"],["redub"],["redubbed"],["redubs"],["reduce"],["reduced"],["reducer"],["reducers"],["reduces"],["reducing"],["reductor"],["reduviid"],["redux"],["redware"],["redwares"],["redwing"],["redwings"],["redwood"],["redwoods"],["redye"],["redyed"],["redyeing"],["redyes"],["ree"],["reearn"],["reearned"],["reearns"],["reechier"],["reecho"],["reechoed"],["reechoes"],["reechy"],["reed"],["reedbird"],["reedbuck"],["reeded"],["reedier"],["reediest"],["reedify"],["reedily"],["reeding"],["reedings"],["reedit"],["reedited"],["reedits"],["reedling"],["reedman"],["reedmen"],["reeds"],["reedy"],["reef"],["reefed"],["reefer"],["reefers"],["reefier"],["reefiest"],["reefing"],["reefs"],["reefy"],["reeject"],["reejects"],["reek"],["reeked"],["reeker"],["reekers"],["reekier"],["reekiest"],["reeking"],["reeks"],["reeky"],["reel"],["reelable"],["reelect"],["reelects"],["reeled"],["reeler"],["reelers"],["reeling"],["reels"],["reembark"],["reembody"],["reemerge"],["reemit"],["reemits"],["reemploy"],["reenact"],["reenacts"],["reendow"],["reendows"],["reengage"],["reenjoy"],["reenjoys"],["reenlist"],["reenroll"],["reenter"],["reenters"],["reentry"],["reequip"],["reequips"],["reerect"],["reerects"],["rees"],["reest"],["reested"],["reesting"],["reests"],["reeve"],["reeved"],["reeves"],["reeving"],["reevoke"],["reevoked"],["reevokes"],["reexpel"],["reexpels"],["reexport"],["ref"],["reface"],["refaced"],["refaces"],["refacing"],["refall"],["refallen"],["refalls"],["refasten"],["refect"],["refected"],["refects"],["refed"],["refeed"],["refeeds"],["refeel"],["refeels"],["refel"],["refell"],["refelled"],["refels"],["refelt"],["refence"],["refenced"],["refences"],["refer"],["referee"],["refereed"],["referees"],["referent"],["referral"],["referred"],["referrer"],["refers"],["reffed"],["reffing"],["refight"],["refights"],["refigure"],["refile"],["refiled"],["refiles"],["refiling"],["refill"],["refilled"],["refills"],["refilm"],["refilmed"],["refilms"],["refilter"],["refind"],["refinds"],["refine"],["refined"],["refiner"],["refiners"],["refinery"],["refines"],["refining"],["refinish"],["refire"],["refired"],["refires"],["refiring"],["refit"],["refits"],["refitted"],["refix"],["refixed"],["refixes"],["refixing"],["reflate"],["reflated"],["reflates"],["reflect"],["reflects"],["reflet"],["reflets"],["reflew"],["reflex"],["reflexed"],["reflexes"],["reflexly"],["reflies"],["refloat"],["refloats"],["reflood"],["refloods"],["reflow"],["reflowed"],["reflower"],["reflown"],["reflows"],["refluent"],["reflux"],["refluxed"],["refluxes"],["refly"],["reflying"],["refocus"],["refold"],["refolded"],["refolds"],["reforest"],["reforge"],["reforged"],["reforges"],["reform"],["reformat"],["reformed"],["reformer"],["reforms"],["refought"],["refound"],["refounds"],["refract"],["refracts"],["refrain"],["refrains"],["reframe"],["reframed"],["reframes"],["refreeze"],["refresh"],["refried"],["refries"],["refront"],["refronts"],["refroze"],["refrozen"],["refry"],["refrying"],["refs"],["reft"],["refuel"],["refueled"],["refuels"],["refuge"],["refuged"],["refugee"],["refugees"],["refuges"],["refugia"],["refuging"],["refugium"],["refund"],["refunded"],["refunder"],["refunds"],["refusal"],["refusals"],["refuse"],["refused"],["refuser"],["refusers"],["refuses"],["refusing"],["refusnik"],["refutal"],["refutals"],["refute"],["refuted"],["refuter"],["refuters"],["refutes"],["refuting"],["reg"],["regain"],["regained"],["regainer"],["regains"],["regal"],["regale"],["regaled"],["regaler"],["regalers"],["regales"],["regalia"],["regaling"],["regality"],["regally"],["regard"],["regarded"],["regards"],["regather"],["regatta"],["regattas"],["regauge"],["regauged"],["regauges"],["regave"],["regear"],["regeared"],["regears"],["regelate"],["regency"],["regent"],["regental"],["regents"],["reges"],["reggae"],["reggaes"],["regicide"],["regild"],["regilded"],["regilds"],["regilt"],["regime"],["regimen"],["regimens"],["regiment"],["regimes"],["regina"],["reginae"],["reginal"],["reginas"],["region"],["regional"],["regions"],["register"],["registry"],["regius"],["regive"],["regiven"],["regives"],["regiving"],["reglaze"],["reglazed"],["reglazes"],["reglet"],["reglets"],["regloss"],["reglow"],["reglowed"],["reglows"],["reglue"],["reglued"],["reglues"],["regluing"],["regma"],["regmata"],["regna"],["regnal"],["regnancy"],["regnant"],["regnum"],["regolith"],["regorge"],["regorged"],["regorges"],["regosol"],["regosols"],["regrade"],["regraded"],["regrades"],["regraft"],["regrafts"],["regrant"],["regrants"],["regrate"],["regrated"],["regrates"],["regreen"],["regreens"],["regreet"],["regreets"],["regress"],["regret"],["regrets"],["regrew"],["regrind"],["regrinds"],["regroom"],["regrooms"],["regroove"],["reground"],["regroup"],["regroups"],["regrow"],["regrown"],["regrows"],["regrowth"],["regs"],["regular"],["regulars"],["regulate"],["reguli"],["reguline"],["regulus"],["rehab"],["rehabbed"],["rehabber"],["rehabs"],["rehammer"],["rehandle"],["rehang"],["rehanged"],["rehangs"],["reharden"],["rehash"],["rehashed"],["rehashes"],["rehear"],["reheard"],["rehears"],["rehearse"],["reheat"],["reheated"],["reheater"],["reheats"],["reheel"],["reheeled"],["reheels"],["rehem"],["rehemmed"],["rehems"],["rehinge"],["rehinged"],["rehinges"],["rehire"],["rehired"],["rehires"],["rehiring"],["rehoboam"],["rehouse"],["rehoused"],["rehouses"],["rehung"],["rei"],["reif"],["reified"],["reifier"],["reifiers"],["reifies"],["reifs"],["reify"],["reifying"],["reign"],["reigned"],["reigning"],["reignite"],["reigns"],["reimage"],["reimaged"],["reimages"],["reimport"],["reimpose"],["rein"],["reincite"],["reincur"],["reincurs"],["reindeer"],["reindex"],["reindict"],["reinduce"],["reinduct"],["reined"],["reinfect"],["reinform"],["reinfuse"],["reining"],["reinject"],["reinjure"],["reinjury"],["reink"],["reinked"],["reinking"],["reinks"],["reinless"],["reins"],["reinsert"],["reinsman"],["reinsmen"],["reinsure"],["reinter"],["reinters"],["reinvade"],["reinvent"],["reinvest"],["reinvite"],["reinvoke"],["reis"],["reissue"],["reissued"],["reissuer"],["reissues"],["reitbok"],["reitboks"],["reive"],["reived"],["reiver"],["reivers"],["reives"],["reiving"],["rejacket"],["reject"],["rejected"],["rejectee"],["rejecter"],["rejector"],["rejects"],["rejigger"],["rejoice"],["rejoiced"],["rejoicer"],["rejoices"],["rejoin"],["rejoined"],["rejoins"],["rejudge"],["rejudged"],["rejudges"],["rejuggle"],["rekey"],["rekeyed"],["rekeying"],["rekeys"],["rekindle"],["reknit"],["reknits"],["relabel"],["relabels"],["relace"],["relaced"],["relaces"],["relacing"],["relaid"],["relapse"],["relapsed"],["relapser"],["relapses"],["relate"],["related"],["relater"],["relaters"],["relates"],["relating"],["relation"],["relative"],["relator"],["relators"],["relaunch"],["relax"],["relaxant"],["relaxed"],["relaxer"],["relaxers"],["relaxes"],["relaxin"],["relaxing"],["relaxins"],["relay"],["relayed"],["relaying"],["relays"],["relearn"],["relearns"],["relearnt"],["release"],["released"],["releaser"],["releases"],["relegate"],["relend"],["relends"],["relent"],["relented"],["relents"],["relet"],["relets"],["reletter"],["relevant"],["releve"],["releves"],["reliable"],["reliably"],["reliance"],["reliant"],["relic"],["relics"],["relict"],["relicts"],["relied"],["relief"],["reliefs"],["relier"],["reliers"],["relies"],["relieve"],["relieved"],["reliever"],["relieves"],["relievo"],["relievos"],["relight"],["relights"],["religion"],["reline"],["relined"],["relines"],["relining"],["relink"],["relinked"],["relinks"],["relique"],["reliques"],["relish"],["relished"],["relishes"],["relist"],["relisted"],["relists"],["relit"],["relive"],["relived"],["relives"],["reliving"],["reload"],["reloaded"],["reloader"],["reloads"],["reloan"],["reloaned"],["reloans"],["relocate"],["relock"],["relocked"],["relocks"],["relucent"],["reluct"],["relucted"],["relucts"],["relume"],["relumed"],["relumes"],["relumine"],["reluming"],["rely"],["relying"],["rem"],["remade"],["remail"],["remailed"],["remails"],["remain"],["remained"],["remains"],["remake"],["remakes"],["remaking"],["reman"],["remand"],["remanded"],["remands"],["remanent"],["remanned"],["remans"],["remap"],["remapped"],["remaps"],["remark"],["remarked"],["remarker"],["remarket"],["remarks"],["remarque"],["remarry"],["remaster"],["rematch"],["remate"],["remated"],["remates"],["remating"],["remedial"],["remedied"],["remedies"],["remedy"],["remeet"],["remeets"],["remelt"],["remelted"],["remelts"],["remember"],["remend"],["remended"],["remends"],["remerge"],["remerged"],["remerges"],["remet"],["remex"],["remiges"],["remigial"],["remind"],["reminded"],["reminder"],["reminds"],["remint"],["reminted"],["remints"],["remise"],["remised"],["remises"],["remising"],["remiss"],["remissly"],["remit"],["remits"],["remittal"],["remitted"],["remitter"],["remittor"],["remix"],["remixed"],["remixes"],["remixing"],["remixt"],["remnant"],["remnants"],["remodel"],["remodels"],["remodify"],["remolade"],["remold"],["remolded"],["remolds"],["remora"],["remoras"],["remorid"],["remorse"],["remorses"],["remote"],["remotely"],["remoter"],["remotes"],["remotest"],["remotion"],["remount"],["remounts"],["removal"],["removals"],["remove"],["removed"],["remover"],["removers"],["removes"],["removing"],["rems"],["remuda"],["remudas"],["renail"],["renailed"],["renails"],["renal"],["rename"],["renamed"],["renames"],["renaming"],["renature"],["rend"],["rended"],["render"],["rendered"],["renderer"],["renders"],["rendible"],["rending"],["rends"],["rendzina"],["renegade"],["renegado"],["renege"],["reneged"],["reneger"],["renegers"],["reneges"],["reneging"],["renest"],["renested"],["renests"],["renew"],["renewal"],["renewals"],["renewed"],["renewer"],["renewers"],["renewing"],["renews"],["reniform"],["renig"],["renigged"],["renigs"],["renin"],["renins"],["renitent"],["renminbi"],["rennase"],["rennases"],["rennet"],["rennets"],["rennin"],["rennins"],["renogram"],["renotify"],["renounce"],["renovate"],["renown"],["renowned"],["renowns"],["rent"],["rentable"],["rental"],["rentals"],["rente"],["rented"],["renter"],["renters"],["rentes"],["rentier"],["rentiers"],["renting"],["rents"],["renumber"],["renvoi"],["renvois"],["reobject"],["reobtain"],["reoccupy"],["reoccur"],["reoccurs"],["reoffer"],["reoffers"],["reoil"],["reoiled"],["reoiling"],["reoils"],["reopen"],["reopened"],["reopens"],["reoppose"],["reordain"],["reorder"],["reorders"],["reorient"],["reoutfit"],["reovirus"],["rep"],["repacify"],["repack"],["repacked"],["repacks"],["repaid"],["repaint"],["repaints"],["repair"],["repaired"],["repairer"],["repairs"],["repand"],["repandly"],["repanel"],["repanels"],["repaper"],["repapers"],["repark"],["reparked"],["reparks"],["repartee"],["repass"],["repassed"],["repasses"],["repast"],["repasted"],["repasts"],["repave"],["repaved"],["repaves"],["repaving"],["repay"],["repaying"],["repays"],["repeal"],["repealed"],["repealer"],["repeals"],["repeat"],["repeated"],["repeater"],["repeats"],["repeg"],["repegged"],["repegs"],["repel"],["repelled"],["repeller"],["repels"],["repent"],["repented"],["repenter"],["repents"],["repeople"],["reperk"],["reperked"],["reperks"],["repetend"],["rephrase"],["repin"],["repine"],["repined"],["repiner"],["repiners"],["repines"],["repining"],["repinned"],["repins"],["replace"],["replaced"],["replacer"],["replaces"],["replan"],["replans"],["replant"],["replants"],["replate"],["replated"],["replates"],["replay"],["replayed"],["replays"],["replead"],["repleads"],["repled"],["repledge"],["replete"],["replevin"],["replevy"],["replica"],["replicas"],["replicon"],["replied"],["replier"],["repliers"],["replies"],["replot"],["replots"],["replumb"],["replumbs"],["replunge"],["reply"],["replying"],["repo"],["repolish"],["repoll"],["repolled"],["repolls"],["report"],["reported"],["reporter"],["reports"],["repos"],["reposal"],["reposals"],["repose"],["reposed"],["reposer"],["reposers"],["reposes"],["reposing"],["reposit"],["reposits"],["repot"],["repots"],["repotted"],["repour"],["repoured"],["repours"],["repousse"],["repower"],["repowers"],["repp"],["repped"],["repps"],["repress"],["reprice"],["repriced"],["reprices"],["reprieve"],["reprint"],["reprints"],["reprisal"],["reprise"],["reprised"],["reprises"],["repro"],["reproach"],["reprobe"],["reprobed"],["reprobes"],["reproof"],["reproofs"],["repros"],["reproval"],["reprove"],["reproved"],["reprover"],["reproves"],["reps"],["reptant"],["reptile"],["reptiles"],["republic"],["repugn"],["repugned"],["repugns"],["repulse"],["repulsed"],["repulser"],["repulses"],["repump"],["repumped"],["repumps"],["repurify"],["repursue"],["repute"],["reputed"],["reputes"],["reputing"],["request"],["requests"],["requiem"],["requiems"],["requin"],["requins"],["require"],["required"],["requirer"],["requires"],["requital"],["requite"],["requited"],["requiter"],["requites"],["rerack"],["reracked"],["reracks"],["reraise"],["reraised"],["reraises"],["reran"],["reread"],["rereads"],["rerecord"],["reredos"],["reremice"],["reremind"],["rerepeat"],["rereview"],["rereward"],["rerise"],["rerisen"],["rerises"],["rerising"],["reroll"],["rerolled"],["reroller"],["rerolls"],["reroof"],["reroofed"],["reroofs"],["rerose"],["reroute"],["rerouted"],["reroutes"],["rerun"],["reruns"],["res"],["resaddle"],["resaid"],["resail"],["resailed"],["resails"],["resale"],["resales"],["resalute"],["resample"],["resaw"],["resawed"],["resawing"],["resawn"],["resaws"],["resay"],["resaying"],["resays"],["rescale"],["rescaled"],["rescales"],["reschool"],["rescind"],["rescinds"],["rescore"],["rescored"],["rescores"],["rescreen"],["rescript"],["rescue"],["rescued"],["rescuer"],["rescuers"],["rescues"],["rescuing"],["resculpt"],["reseal"],["resealed"],["reseals"],["research"],["reseason"],["reseat"],["reseated"],["reseats"],["reseau"],["reseaus"],["reseaux"],["resect"],["resected"],["resects"],["resecure"],["reseda"],["resedas"],["resee"],["reseed"],["reseeded"],["reseeds"],["reseeing"],["reseek"],["reseeks"],["reseen"],["resees"],["reseize"],["reseized"],["reseizes"],["resell"],["reseller"],["resells"],["resemble"],["resend"],["resends"],["resent"],["resented"],["resents"],["reserve"],["reserved"],["reserver"],["reserves"],["reset"],["resets"],["resetter"],["resettle"],["resew"],["resewed"],["resewing"],["resewn"],["resews"],["resh"],["reshape"],["reshaped"],["reshaper"],["reshapes"],["reshave"],["reshaved"],["reshaven"],["reshaves"],["reshes"],["reshine"],["reshined"],["reshines"],["reship"],["reships"],["reshod"],["reshoe"],["reshoes"],["reshone"],["reshoot"],["reshoots"],["reshot"],["reshow"],["reshowed"],["reshown"],["reshows"],["resid"],["reside"],["resided"],["resident"],["resider"],["residers"],["resides"],["residing"],["resids"],["residua"],["residual"],["residue"],["residues"],["residuum"],["resift"],["resifted"],["resifts"],["resight"],["resights"],["resign"],["resigned"],["resigner"],["resigns"],["resile"],["resiled"],["resiles"],["resiling"],["resilver"],["resin"],["resinate"],["resined"],["resinify"],["resining"],["resinoid"],["resinous"],["resins"],["resiny"],["resist"],["resisted"],["resister"],["resistor"],["resists"],["resite"],["resited"],["resites"],["resiting"],["resize"],["resized"],["resizes"],["resizing"],["resketch"],["reslate"],["reslated"],["reslates"],["resmelt"],["resmelts"],["resmooth"],["resoak"],["resoaked"],["resoaks"],["resod"],["resodded"],["resods"],["resojet"],["resojets"],["resold"],["resolder"],["resole"],["resoled"],["resoles"],["resoling"],["resolute"],["resolve"],["resolved"],["resolver"],["resolves"],["resonant"],["resonate"],["resorb"],["resorbed"],["resorbs"],["resorcin"],["resort"],["resorted"],["resorter"],["resorts"],["resought"],["resound"],["resounds"],["resource"],["resow"],["resowed"],["resowing"],["resown"],["resows"],["respace"],["respaced"],["respaces"],["respade"],["respaded"],["respades"],["respeak"],["respeaks"],["respect"],["respects"],["respell"],["respells"],["respelt"],["respire"],["respired"],["respires"],["respite"],["respited"],["respites"],["resplice"],["resplit"],["resplits"],["respoke"],["respoken"],["respond"],["responds"],["responsa"],["response"],["respot"],["respots"],["resprang"],["respray"],["resprays"],["respread"],["respring"],["resprout"],["resprung"],["rest"],["restack"],["restacks"],["restaff"],["restaffs"],["restage"],["restaged"],["restages"],["restamp"],["restamps"],["restart"],["restarts"],["restate"],["restated"],["restates"],["rested"],["rester"],["resters"],["restful"],["resting"],["restitch"],["restive"],["restless"],["restock"],["restocks"],["restoral"],["restore"],["restored"],["restorer"],["restores"],["restrain"],["restress"],["restrict"],["restrike"],["restring"],["restrive"],["restroom"],["restrove"],["restruck"],["restrung"],["rests"],["restudy"],["restuff"],["restuffs"],["restyle"],["restyled"],["restyles"],["resubmit"],["result"],["resulted"],["results"],["resume"],["resumed"],["resumer"],["resumers"],["resumes"],["resuming"],["resummon"],["resupine"],["resupply"],["resurge"],["resurged"],["resurges"],["resurvey"],["ret"],["retable"],["retables"],["retack"],["retacked"],["retackle"],["retacks"],["retag"],["retagged"],["retags"],["retail"],["retailed"],["retailer"],["retailor"],["retails"],["retain"],["retained"],["retainer"],["retains"],["retake"],["retaken"],["retaker"],["retakers"],["retakes"],["retaking"],["retape"],["retaped"],["retapes"],["retaping"],["retard"],["retarded"],["retarder"],["retards"],["retarget"],["retaste"],["retasted"],["retastes"],["retaught"],["retax"],["retaxed"],["retaxes"],["retaxing"],["retch"],["retched"],["retches"],["retching"],["rete"],["reteach"],["reteam"],["reteamed"],["reteams"],["retear"],["retears"],["retell"],["retells"],["retem"],["retemper"],["retems"],["retene"],["retenes"],["retest"],["retested"],["retests"],["rethink"],["rethinks"],["rethread"],["retia"],["retial"],["retiarii"],["retiary"],["reticent"],["reticle"],["reticles"],["reticula"],["reticule"],["retie"],["retied"],["reties"],["retiform"],["retime"],["retimed"],["retimes"],["retiming"],["retina"],["retinae"],["retinal"],["retinals"],["retinas"],["retine"],["retinene"],["retines"],["retinite"],["retinol"],["retinols"],["retint"],["retinted"],["retints"],["retinue"],["retinued"],["retinues"],["retinula"],["retirant"],["retire"],["retired"],["retiree"],["retirees"],["retirer"],["retirers"],["retires"],["retiring"],["retitle"],["retitled"],["retitles"],["retold"],["retook"],["retool"],["retooled"],["retools"],["retore"],["retorn"],["retort"],["retorted"],["retorter"],["retorts"],["retouch"],["retrace"],["retraced"],["retraces"],["retrack"],["retracks"],["retract"],["retracts"],["retrain"],["retrains"],["retral"],["retrally"],["retread"],["retreads"],["retreat"],["retreats"],["retrench"],["retrial"],["retrials"],["retried"],["retries"],["retrieve"],["retrim"],["retrims"],["retro"],["retroact"],["retrofit"],["retrorse"],["retros"],["retry"],["retrying"],["rets"],["retsina"],["retsinas"],["retted"],["retting"],["retune"],["retuned"],["retunes"],["retuning"],["return"],["returned"],["returnee"],["returner"],["returns"],["retuse"],["retwist"],["retwists"],["retying"],["retype"],["retyped"],["retypes"],["retyping"],["reunify"],["reunion"],["reunions"],["reunite"],["reunited"],["reuniter"],["reunites"],["reusable"],["reuse"],["reused"],["reuses"],["reusing"],["reutter"],["reutters"],["rev"],["revalue"],["revalued"],["revalues"],["revamp"],["revamped"],["revamper"],["revamps"],["revanche"],["reveal"],["revealed"],["revealer"],["reveals"],["revehent"],["reveille"],["revel"],["reveled"],["reveler"],["revelers"],["reveling"],["revelled"],["reveller"],["revelry"],["revels"],["revenant"],["revenge"],["revenged"],["revenger"],["revenges"],["revenual"],["revenue"],["revenued"],["revenuer"],["revenues"],["reverb"],["reverbed"],["reverbs"],["revere"],["revered"],["reverend"],["reverent"],["reverer"],["reverers"],["reveres"],["reverie"],["reveries"],["reverify"],["revering"],["revers"],["reversal"],["reverse"],["reversed"],["reverser"],["reverses"],["reverso"],["reversos"],["revert"],["reverted"],["reverter"],["reverts"],["revery"],["revest"],["revested"],["revests"],["revet"],["revets"],["revetted"],["review"],["reviewal"],["reviewed"],["reviewer"],["reviews"],["revile"],["reviled"],["reviler"],["revilers"],["reviles"],["reviling"],["revisal"],["revisals"],["revise"],["revised"],["reviser"],["revisers"],["revises"],["revising"],["revision"],["revisit"],["revisits"],["revisor"],["revisors"],["revisory"],["revival"],["revivals"],["revive"],["revived"],["reviver"],["revivers"],["revives"],["revivify"],["reviving"],["revoice"],["revoiced"],["revoices"],["revoke"],["revoked"],["revoker"],["revokers"],["revokes"],["revoking"],["revolt"],["revolted"],["revolter"],["revolts"],["revolute"],["revolve"],["revolved"],["revolver"],["revolves"],["revote"],["revoted"],["revotes"],["revoting"],["revs"],["revue"],["revues"],["revuist"],["revuists"],["revulsed"],["revved"],["revving"],["rewake"],["rewaked"],["rewaken"],["rewakens"],["rewakes"],["rewaking"],["rewan"],["reward"],["rewarded"],["rewarder"],["rewards"],["rewarm"],["rewarmed"],["rewarms"],["rewash"],["rewashed"],["rewashes"],["rewax"],["rewaxed"],["rewaxes"],["rewaxing"],["reweave"],["reweaved"],["reweaves"],["rewed"],["rewedded"],["reweds"],["reweigh"],["reweighs"],["reweld"],["rewelded"],["rewelds"],["rewet"],["rewets"],["rewetted"],["rewiden"],["rewidens"],["rewin"],["rewind"],["rewinded"],["rewinder"],["rewinds"],["rewins"],["rewire"],["rewired"],["rewires"],["rewiring"],["rewoke"],["rewoken"],["rewon"],["reword"],["reworded"],["rewords"],["rework"],["reworked"],["reworks"],["rewound"],["rewove"],["rewoven"],["rewrap"],["rewraps"],["rewrapt"],["rewrite"],["rewriter"],["rewrites"],["rewrote"],["rex"],["rexes"],["reynard"],["reynards"],["rezone"],["rezoned"],["rezones"],["rezoning"],["rhabdom"],["rhabdome"],["rhabdoms"],["rhachis"],["rhamnose"],["rhamnus"],["rhaphae"],["rhaphe"],["rhaphes"],["rhapsode"],["rhapsody"],["rhatany"],["rhea"],["rheas"],["rhebok"],["rheboks"],["rhematic"],["rhenium"],["rheniums"],["rheobase"],["rheology"],["rheophil"],["rheostat"],["rhesus"],["rhesuses"],["rhetor"],["rhetoric"],["rhetors"],["rheum"],["rheumic"],["rheumier"],["rheums"],["rheumy"],["rhinal"],["rhinitis"],["rhino"],["rhinos"],["rhizobia"],["rhizoid"],["rhizoids"],["rhizoma"],["rhizome"],["rhizomes"],["rhizomic"],["rhizopi"],["rhizopod"],["rhizopus"],["rho"],["rhodamin"],["rhodic"],["rhodium"],["rhodiums"],["rhodora"],["rhodoras"],["rhomb"],["rhombi"],["rhombic"],["rhomboid"],["rhombs"],["rhombus"],["rhonchal"],["rhonchi"],["rhonchus"],["rhos"],["rhubarb"],["rhubarbs"],["rhumb"],["rhumba"],["rhumbaed"],["rhumbas"],["rhumbs"],["rhus"],["rhuses"],["rhyme"],["rhymed"],["rhymer"],["rhymers"],["rhymes"],["rhyming"],["rhyolite"],["rhyta"],["rhythm"],["rhythmic"],["rhythms"],["rhyton"],["ria"],["rial"],["rials"],["rialto"],["rialtos"],["riant"],["riantly"],["rias"],["riata"],["riatas"],["rib"],["ribald"],["ribaldly"],["ribaldry"],["ribalds"],["riband"],["ribands"],["ribband"],["ribbands"],["ribbed"],["ribber"],["ribbers"],["ribbier"],["ribbiest"],["ribbing"],["ribbings"],["ribbon"],["ribboned"],["ribbons"],["ribbony"],["ribby"],["ribes"],["ribgrass"],["ribier"],["ribiers"],["ribless"],["riblet"],["riblets"],["riblike"],["ribose"],["riboses"],["ribosome"],["ribs"],["ribwort"],["ribworts"],["rice"],["ricebird"],["riced"],["ricer"],["ricercar"],["ricers"],["rices"],["rich"],["richen"],["richened"],["richens"],["richer"],["riches"],["richest"],["richly"],["richness"],["richweed"],["ricin"],["ricing"],["ricins"],["ricinus"],["rick"],["ricked"],["rickets"],["rickety"],["rickey"],["rickeys"],["ricking"],["rickrack"],["ricks"],["ricksha"],["rickshas"],["rickshaw"],["ricochet"],["ricotta"],["ricottas"],["ricrac"],["ricracs"],["rictal"],["rictus"],["rictuses"],["rid"],["ridable"],["riddance"],["ridded"],["ridden"],["ridder"],["ridders"],["ridding"],["riddle"],["riddled"],["riddler"],["riddlers"],["riddles"],["riddling"],["ride"],["rideable"],["rident"],["rider"],["riders"],["rides"],["ridge"],["ridged"],["ridgel"],["ridgels"],["ridges"],["ridgier"],["ridgiest"],["ridgil"],["ridgils"],["ridging"],["ridgling"],["ridgy"],["ridicule"],["riding"],["ridings"],["ridley"],["ridleys"],["ridotto"],["ridottos"],["rids"],["riel"],["riels"],["riesling"],["riever"],["rievers"],["rif"],["rifampin"],["rife"],["rifely"],["rifeness"],["rifer"],["rifest"],["riff"],["riffed"],["riffing"],["riffle"],["riffled"],["riffler"],["rifflers"],["riffles"],["riffling"],["riffraff"],["riffs"],["rifle"],["rifled"],["rifleman"],["riflemen"],["rifler"],["riflers"],["riflery"],["rifles"],["rifling"],["riflings"],["rifs"],["rift"],["rifted"],["rifting"],["riftless"],["rifts"],["rig"],["rigadoon"],["rigatoni"],["rigaudon"],["rigged"],["rigger"],["riggers"],["rigging"],["riggings"],["right"],["righted"],["righter"],["righters"],["rightest"],["rightful"],["righties"],["righting"],["rightism"],["rightist"],["rightly"],["righto"],["rights"],["righty"],["rigid"],["rigidify"],["rigidity"],["rigidly"],["rigor"],["rigorism"],["rigorist"],["rigorous"],["rigors"],["rigour"],["rigours"],["rigs"],["rikisha"],["rikishas"],["rikshaw"],["rikshaws"],["rile"],["riled"],["riles"],["riley"],["rilievi"],["rilievo"],["riling"],["rill"],["rille"],["rilled"],["rilles"],["rillet"],["rillets"],["rilling"],["rills"],["rim"],["rime"],["rimed"],["rimer"],["rimers"],["rimes"],["rimester"],["rimfire"],["rimfires"],["rimier"],["rimiest"],["riminess"],["riming"],["rimland"],["rimlands"],["rimless"],["rimmed"],["rimmer"],["rimmers"],["rimming"],["rimose"],["rimosely"],["rimosity"],["rimous"],["rimple"],["rimpled"],["rimples"],["rimpling"],["rimrock"],["rimrocks"],["rims"],["rimy"],["rin"],["rind"],["rinded"],["rinds"],["ring"],["ringbark"],["ringbolt"],["ringbone"],["ringdove"],["ringed"],["ringent"],["ringer"],["ringers"],["ringgit"],["ringhals"],["ringing"],["ringlet"],["ringlets"],["ringlike"],["ringneck"],["rings"],["ringside"],["ringtail"],["ringtaw"],["ringtaws"],["ringtoss"],["ringworm"],["rink"],["rinks"],["rinning"],["rins"],["rinsable"],["rinse"],["rinsed"],["rinser"],["rinsers"],["rinses"],["rinsible"],["rinsing"],["rinsings"],["rioja"],["riojas"],["riot"],["rioted"],["rioter"],["rioters"],["rioting"],["riotous"],["riots"],["rip"],["riparian"],["ripcord"],["ripcords"],["ripe"],["riped"],["ripely"],["ripen"],["ripened"],["ripener"],["ripeners"],["ripeness"],["ripening"],["ripens"],["riper"],["ripes"],["ripest"],["ripieni"],["ripieno"],["ripienos"],["riping"],["ripoff"],["ripoffs"],["ripost"],["riposte"],["riposted"],["ripostes"],["riposts"],["rippable"],["ripped"],["ripper"],["rippers"],["ripping"],["ripple"],["rippled"],["rippler"],["ripplers"],["ripples"],["ripplet"],["ripplets"],["ripplier"],["rippling"],["ripply"],["riprap"],["ripraps"],["rips"],["ripsaw"],["ripsaws"],["ripstop"],["ripstops"],["riptide"],["riptides"],["rise"],["risen"],["riser"],["risers"],["rises"],["rishi"],["rishis"],["risible"],["risibles"],["risibly"],["rising"],["risings"],["risk"],["risked"],["risker"],["riskers"],["riskier"],["riskiest"],["riskily"],["risking"],["risks"],["risky"],["risotto"],["risottos"],["risque"],["rissole"],["rissoles"],["risus"],["risuses"],["ritard"],["ritards"],["rite"],["rites"],["ritter"],["ritters"],["ritual"],["ritually"],["rituals"],["ritz"],["ritzes"],["ritzier"],["ritziest"],["ritzily"],["ritzy"],["rivage"],["rivages"],["rival"],["rivaled"],["rivaling"],["rivalled"],["rivalry"],["rivals"],["rive"],["rived"],["riven"],["river"],["riverbed"],["riverine"],["rivers"],["rives"],["rivet"],["riveted"],["riveter"],["riveters"],["riveting"],["rivets"],["rivetted"],["riviera"],["rivieras"],["riviere"],["rivieres"],["riving"],["rivulet"],["rivulets"],["rivulose"],["riyal"],["riyals"],["roach"],["roached"],["roaches"],["roaching"],["road"],["roadbed"],["roadbeds"],["roadeo"],["roadeos"],["roadie"],["roadies"],["roadless"],["roads"],["roadshow"],["roadside"],["roadster"],["roadway"],["roadways"],["roadwork"],["roam"],["roamed"],["roamer"],["roamers"],["roaming"],["roams"],["roan"],["roans"],["roar"],["roared"],["roarer"],["roarers"],["roaring"],["roarings"],["roars"],["roast"],["roasted"],["roaster"],["roasters"],["roasting"],["roasts"],["rob"],["robalo"],["robalos"],["roband"],["robands"],["robbed"],["robber"],["robbers"],["robbery"],["robbin"],["robbing"],["robbins"],["robe"],["robed"],["robes"],["robin"],["robing"],["robins"],["roble"],["robles"],["roborant"],["robot"],["robotic"],["robotics"],["robotism"],["robotize"],["robotry"],["robots"],["robs"],["robust"],["robuster"],["robustly"],["roc"],["rochet"],["rochets"],["rock"],["rockaby"],["rockabye"],["rockaway"],["rocked"],["rocker"],["rockers"],["rockery"],["rocket"],["rocketed"],["rocketer"],["rocketry"],["rockets"],["rockfall"],["rockfish"],["rockier"],["rockiest"],["rocking"],["rockless"],["rocklike"],["rockling"],["rockoon"],["rockoons"],["rockrose"],["rocks"],["rockweed"],["rockwork"],["rocky"],["rococo"],["rococos"],["rocs"],["rod"],["rodded"],["rodding"],["rode"],["rodent"],["rodents"],["rodeo"],["rodeos"],["rodless"],["rodlike"],["rodman"],["rodmen"],["rods"],["rodsman"],["rodsmen"],["roe"],["roebuck"],["roebucks"],["roentgen"],["roes"],["rogation"],["rogatory"],["roger"],["rogers"],["rogue"],["rogued"],["rogueing"],["roguery"],["rogues"],["roguing"],["roguish"],["roil"],["roiled"],["roilier"],["roiliest"],["roiling"],["roils"],["roily"],["roister"],["roisters"],["rolamite"],["role"],["roles"],["roll"],["rollaway"],["rollback"],["rolled"],["roller"],["rollers"],["rollick"],["rollicks"],["rollicky"],["rolling"],["rollings"],["rollmop"],["rollmops"],["rollout"],["rollouts"],["rollover"],["rolls"],["rolltop"],["rollway"],["rollways"],["rom"],["romaine"],["romaines"],["roman"],["romance"],["romanced"],["romancer"],["romances"],["romanize"],["romano"],["romanos"],["romans"],["romantic"],["romaunt"],["romaunts"],["romeo"],["romeos"],["romp"],["romped"],["romper"],["rompers"],["romping"],["rompish"],["romps"],["roms"],["rondeau"],["rondeaux"],["rondel"],["rondelet"],["rondelle"],["rondels"],["rondo"],["rondos"],["rondure"],["rondures"],["ronion"],["ronions"],["ronnel"],["ronnels"],["rontgen"],["rontgens"],["ronyon"],["ronyons"],["rood"],["roods"],["roof"],["roofed"],["roofer"],["roofers"],["roofing"],["roofings"],["roofless"],["rooflike"],["roofline"],["roofs"],["rooftop"],["rooftops"],["rooftree"],["rook"],["rooked"],["rookery"],["rookie"],["rookier"],["rookies"],["rookiest"],["rooking"],["rooks"],["rooky"],["room"],["roomed"],["roomer"],["roomers"],["roomette"],["roomful"],["roomfuls"],["roomie"],["roomier"],["roomies"],["roomiest"],["roomily"],["rooming"],["roommate"],["rooms"],["roomy"],["roorbach"],["roorback"],["roose"],["roosed"],["rooser"],["roosers"],["rooses"],["roosing"],["roost"],["roosted"],["rooster"],["roosters"],["roosting"],["roosts"],["root"],["rootage"],["rootages"],["rooted"],["rooter"],["rooters"],["roothold"],["rootier"],["rootiest"],["rooting"],["rootless"],["rootlet"],["rootlets"],["rootlike"],["roots"],["rooty"],["ropable"],["rope"],["roped"],["roper"],["roperies"],["ropers"],["ropery"],["ropes"],["ropewalk"],["ropeway"],["ropeways"],["ropey"],["ropier"],["ropiest"],["ropily"],["ropiness"],["roping"],["ropy"],["roque"],["roques"],["roquet"],["roqueted"],["roquets"],["rorqual"],["rorquals"],["rosaria"],["rosarian"],["rosaries"],["rosarium"],["rosary"],["roscoe"],["roscoes"],["rose"],["roseate"],["rosebay"],["rosebays"],["rosebud"],["rosebuds"],["rosebush"],["rosed"],["rosefish"],["roselike"],["roselle"],["roselles"],["rosemary"],["roseola"],["roseolar"],["roseolas"],["roseries"],["roseroot"],["rosery"],["roses"],["roseslug"],["roset"],["rosets"],["rosette"],["rosettes"],["rosewood"],["rosier"],["rosiest"],["rosily"],["rosin"],["rosined"],["rosiness"],["rosing"],["rosining"],["rosinol"],["rosinols"],["rosinous"],["rosins"],["rosiny"],["rosolio"],["rosolios"],["rostella"],["roster"],["rosters"],["rostra"],["rostral"],["rostrate"],["rostrum"],["rostrums"],["rosulate"],["rosy"],["rot"],["rota"],["rotaries"],["rotary"],["rotas"],["rotate"],["rotated"],["rotates"],["rotating"],["rotation"],["rotative"],["rotator"],["rotators"],["rotatory"],["rotch"],["rotche"],["rotches"],["rote"],["rotenone"],["rotes"],["rotgut"],["rotguts"],["rotifer"],["rotifers"],["rotiform"],["rotl"],["rotls"],["roto"],["rotor"],["rotors"],["rotos"],["rototill"],["rots"],["rotte"],["rotted"],["rotten"],["rottener"],["rottenly"],["rotter"],["rotters"],["rottes"],["rotting"],["rotund"],["rotunda"],["rotundas"],["rotundly"],["roturier"],["rouble"],["roubles"],["rouche"],["rouches"],["roue"],["rouen"],["rouens"],["roues"],["rouge"],["rouged"],["rouges"],["rough"],["roughage"],["roughdry"],["roughed"],["roughen"],["roughens"],["rougher"],["roughers"],["roughest"],["roughhew"],["roughing"],["roughish"],["roughleg"],["roughly"],["roughs"],["rouging"],["rouille"],["rouilles"],["roulade"],["roulades"],["rouleau"],["rouleaus"],["rouleaux"],["roulette"],["round"],["rounded"],["roundel"],["roundels"],["rounder"],["rounders"],["roundest"],["rounding"],["roundish"],["roundlet"],["roundly"],["rounds"],["roundup"],["roundups"],["roup"],["rouped"],["roupet"],["roupier"],["roupiest"],["roupily"],["rouping"],["roups"],["roupy"],["rouse"],["roused"],["rouser"],["rousers"],["rouses"],["rousing"],["rousseau"],["roust"],["rousted"],["rouster"],["rousters"],["rousting"],["rousts"],["rout"],["route"],["routed"],["routeman"],["routemen"],["router"],["routers"],["routes"],["routeway"],["routh"],["rouths"],["routine"],["routines"],["routing"],["routs"],["roux"],["rove"],["roved"],["roven"],["rover"],["rovers"],["roves"],["roving"],["rovingly"],["rovings"],["row"],["rowable"],["rowan"],["rowans"],["rowboat"],["rowboats"],["rowdier"],["rowdies"],["rowdiest"],["rowdily"],["rowdy"],["rowdyish"],["rowdyism"],["rowed"],["rowel"],["roweled"],["roweling"],["rowelled"],["rowels"],["rowen"],["rowens"],["rower"],["rowers"],["rowing"],["rowings"],["rowlock"],["rowlocks"],["rows"],["rowth"],["rowths"],["royal"],["royalism"],["royalist"],["royally"],["royals"],["royalty"],["royster"],["roysters"],["rozzer"],["rozzers"],["ruana"],["ruanas"],["rub"],["rubaboo"],["rubaboos"],["rubace"],["rubaces"],["rubaiyat"],["rubasse"],["rubasses"],["rubato"],["rubatos"],["rubbaboo"],["rubbed"],["rubber"],["rubbered"],["rubbers"],["rubbery"],["rubbing"],["rubbings"],["rubbish"],["rubbishy"],["rubble"],["rubbled"],["rubbles"],["rubblier"],["rubbling"],["rubbly"],["rubdown"],["rubdowns"],["rube"],["rubella"],["rubellas"],["rubeola"],["rubeolar"],["rubeolas"],["rubes"],["rubicund"],["rubidic"],["rubidium"],["rubied"],["rubier"],["rubies"],["rubiest"],["rubigo"],["rubigos"],["rubious"],["ruble"],["rubles"],["ruboff"],["ruboffs"],["rubout"],["rubouts"],["rubric"],["rubrical"],["rubrics"],["rubs"],["rubus"],["ruby"],["rubying"],["rubylike"],["ruche"],["ruched"],["ruches"],["ruching"],["ruchings"],["ruck"],["rucked"],["rucking"],["ruckle"],["ruckled"],["ruckles"],["ruckling"],["rucks"],["rucksack"],["ruckus"],["ruckuses"],["ruction"],["ructions"],["ructious"],["rudd"],["rudder"],["rudders"],["ruddier"],["ruddiest"],["ruddily"],["ruddle"],["ruddled"],["ruddles"],["ruddling"],["ruddock"],["ruddocks"],["rudds"],["ruddy"],["rude"],["rudely"],["rudeness"],["ruder"],["ruderal"],["ruderals"],["rudesby"],["rudest"],["rudiment"],["rue"],["rued"],["rueful"],["ruefully"],["ruer"],["ruers"],["rues"],["ruff"],["ruffe"],["ruffed"],["ruffes"],["ruffian"],["ruffians"],["ruffing"],["ruffle"],["ruffled"],["ruffler"],["rufflers"],["ruffles"],["rufflier"],["rufflike"],["ruffling"],["ruffly"],["ruffs"],["rufiyaa"],["rufous"],["rug"],["ruga"],["rugae"],["rugal"],["rugate"],["rugbies"],["rugby"],["rugged"],["ruggeder"],["ruggedly"],["rugger"],["ruggers"],["rugging"],["ruglike"],["rugola"],["rugolas"],["rugose"],["rugosely"],["rugosity"],["rugous"],["rugs"],["rugulose"],["ruin"],["ruinable"],["ruinate"],["ruinated"],["ruinates"],["ruined"],["ruiner"],["ruiners"],["ruing"],["ruining"],["ruinous"],["ruins"],["rulable"],["rule"],["ruled"],["ruleless"],["ruler"],["rulers"],["rules"],["ruling"],["rulings"],["rum"],["rumaki"],["rumakis"],["rumba"],["rumbaed"],["rumbaing"],["rumbas"],["rumble"],["rumbled"],["rumbler"],["rumblers"],["rumbles"],["rumbling"],["rumbly"],["rumen"],["rumens"],["rumina"],["ruminal"],["ruminant"],["ruminate"],["rummage"],["rummaged"],["rummager"],["rummages"],["rummer"],["rummers"],["rummest"],["rummier"],["rummies"],["rummiest"],["rummy"],["rumor"],["rumored"],["rumoring"],["rumors"],["rumour"],["rumoured"],["rumours"],["rump"],["rumple"],["rumpled"],["rumples"],["rumpless"],["rumplier"],["rumpling"],["rumply"],["rumps"],["rumpus"],["rumpuses"],["rums"],["run"],["runabout"],["runagate"],["runaway"],["runaways"],["runback"],["runbacks"],["rundle"],["rundles"],["rundlet"],["rundlets"],["rundown"],["rundowns"],["rune"],["runelike"],["runes"],["rung"],["rungless"],["rungs"],["runic"],["runkle"],["runkled"],["runkles"],["runkling"],["runless"],["runlet"],["runlets"],["runnel"],["runnels"],["runner"],["runners"],["runnier"],["runniest"],["running"],["runnings"],["runny"],["runoff"],["runoffs"],["runout"],["runouts"],["runover"],["runovers"],["runround"],["runs"],["runt"],["runtier"],["runtiest"],["runtish"],["runts"],["runty"],["runway"],["runways"],["rupee"],["rupees"],["rupiah"],["rupiahs"],["rupture"],["ruptured"],["ruptures"],["rural"],["ruralise"],["ruralism"],["ruralist"],["ruralite"],["rurality"],["ruralize"],["rurally"],["rurban"],["ruse"],["ruses"],["rush"],["rushed"],["rushee"],["rushees"],["rusher"],["rushers"],["rushes"],["rushier"],["rushiest"],["rushing"],["rushings"],["rushlike"],["rushy"],["rusine"],["rusk"],["rusks"],["russet"],["russets"],["russety"],["russify"],["rust"],["rustable"],["rusted"],["rustic"],["rustical"],["rusticly"],["rustics"],["rustier"],["rustiest"],["rustily"],["rusting"],["rustle"],["rustled"],["rustler"],["rustlers"],["rustles"],["rustless"],["rustling"],["rusts"],["rusty"],["rut"],["rutabaga"],["ruth"],["ruthenic"],["ruthful"],["ruthless"],["ruths"],["rutilant"],["rutile"],["rutiles"],["rutin"],["rutins"],["ruts"],["rutted"],["ruttier"],["ruttiest"],["ruttily"],["rutting"],["ruttish"],["rutty"],["rya"],["ryas"],["rye"],["ryegrass"],["ryes"],["ryke"],["ryked"],["rykes"],["ryking"],["rynd"],["rynds"],["ryokan"],["ryokans"],["ryot"],["ryots"],["sab"],["sabaton"],["sabatons"],["sabayon"],["sabayons"],["sabbat"],["sabbath"],["sabbaths"],["sabbatic"],["sabbats"],["sabbed"],["sabbing"],["sabe"],["sabed"],["sabeing"],["saber"],["sabered"],["sabering"],["sabers"],["sabes"],["sabin"],["sabine"],["sabines"],["sabins"],["sabir"],["sabirs"],["sable"],["sables"],["sabot"],["sabotage"],["saboteur"],["sabots"],["sabra"],["sabras"],["sabre"],["sabred"],["sabres"],["sabring"],["sabs"],["sabulose"],["sabulous"],["sac"],["sacaton"],["sacatons"],["sacbut"],["sacbuts"],["saccade"],["saccades"],["saccadic"],["saccate"],["saccular"],["saccule"],["saccules"],["sacculi"],["sacculus"],["sachem"],["sachemic"],["sachems"],["sachet"],["sacheted"],["sachets"],["sack"],["sackbut"],["sackbuts"],["sacked"],["sacker"],["sackers"],["sackful"],["sackfuls"],["sacking"],["sackings"],["sacklike"],["sacks"],["sacksful"],["saclike"],["sacque"],["sacques"],["sacra"],["sacral"],["sacrals"],["sacraria"],["sacred"],["sacredly"],["sacring"],["sacrings"],["sacrist"],["sacrists"],["sacristy"],["sacrum"],["sacrums"],["sacs"],["sad"],["sadden"],["saddened"],["saddens"],["sadder"],["saddest"],["saddhu"],["saddhus"],["saddle"],["saddled"],["saddler"],["saddlers"],["saddlery"],["saddles"],["saddling"],["sade"],["sades"],["sadhe"],["sadhes"],["sadhu"],["sadhus"],["sadi"],["sadiron"],["sadirons"],["sadis"],["sadism"],["sadisms"],["sadist"],["sadistic"],["sadists"],["sadly"],["sadness"],["sae"],["safari"],["safaried"],["safaris"],["safe"],["safely"],["safeness"],["safer"],["safes"],["safest"],["safetied"],["safeties"],["safety"],["saffron"],["saffrons"],["safranin"],["safrol"],["safrole"],["safroles"],["safrols"],["sag"],["saga"],["sagacity"],["sagaman"],["sagamen"],["sagamore"],["saganash"],["sagas"],["sagbut"],["sagbuts"],["sage"],["sagely"],["sageness"],["sager"],["sages"],["sagest"],["saggar"],["saggard"],["saggards"],["saggared"],["saggars"],["sagged"],["sagger"],["saggered"],["saggers"],["saggier"],["saggiest"],["sagging"],["saggy"],["sagier"],["sagiest"],["sagittal"],["sago"],["sagos"],["sags"],["saguaro"],["saguaros"],["sagum"],["sagy"],["sahib"],["sahibs"],["sahiwal"],["sahiwals"],["sahuaro"],["sahuaros"],["saice"],["saices"],["said"],["saids"],["saiga"],["saigas"],["sail"],["sailable"],["sailboat"],["sailed"],["sailer"],["sailers"],["sailfish"],["sailing"],["sailings"],["sailor"],["sailorly"],["sailors"],["sails"],["saimin"],["saimins"],["sain"],["sained"],["sainfoin"],["saining"],["sains"],["saint"],["saintdom"],["sainted"],["sainting"],["saintly"],["saints"],["saith"],["saithe"],["saiyid"],["saiyids"],["sajou"],["sajous"],["sake"],["saker"],["sakers"],["sakes"],["saki"],["sakis"],["sal"],["salaam"],["salaamed"],["salaams"],["salable"],["salably"],["salacity"],["salad"],["saladang"],["salads"],["salal"],["salals"],["salami"],["salamis"],["salariat"],["salaried"],["salaries"],["salary"],["sale"],["saleable"],["saleably"],["salep"],["saleps"],["saleroom"],["sales"],["salesman"],["salesmen"],["salic"],["salicin"],["salicine"],["salicins"],["salience"],["saliency"],["salient"],["salients"],["salified"],["salifies"],["salify"],["salina"],["salinas"],["saline"],["salines"],["salinity"],["salinize"],["saliva"],["salivary"],["salivas"],["salivate"],["sall"],["sallet"],["sallets"],["sallied"],["sallier"],["salliers"],["sallies"],["sallow"],["sallowed"],["sallower"],["sallowly"],["sallows"],["sallowy"],["sally"],["sallying"],["salmi"],["salmis"],["salmon"],["salmonid"],["salmons"],["salol"],["salols"],["salon"],["salons"],["saloon"],["saloons"],["saloop"],["saloops"],["salp"],["salpa"],["salpae"],["salpas"],["salpian"],["salpians"],["salpid"],["salpids"],["salpinx"],["salps"],["sals"],["salsa"],["salsas"],["salsify"],["salsilla"],["salt"],["saltant"],["saltbox"],["saltbush"],["salted"],["salter"],["saltern"],["salterns"],["salters"],["saltest"],["saltie"],["saltier"],["saltiers"],["salties"],["saltiest"],["saltily"],["saltine"],["saltines"],["salting"],["saltings"],["saltire"],["saltires"],["saltish"],["saltless"],["saltlike"],["saltness"],["saltpan"],["saltpans"],["salts"],["saltwork"],["saltwort"],["salty"],["saluki"],["salukis"],["salutary"],["salute"],["saluted"],["saluter"],["saluters"],["salutes"],["saluting"],["salvable"],["salvably"],["salvage"],["salvaged"],["salvagee"],["salvager"],["salvages"],["salve"],["salved"],["salver"],["salvers"],["salves"],["salvia"],["salvias"],["salvific"],["salving"],["salvo"],["salvoed"],["salvoes"],["salvoing"],["salvor"],["salvors"],["salvos"],["samara"],["samaras"],["samarium"],["samba"],["sambaed"],["sambaing"],["sambar"],["sambars"],["sambas"],["sambhar"],["sambhars"],["sambhur"],["sambhurs"],["sambo"],["sambos"],["sambuca"],["sambucas"],["sambuke"],["sambukes"],["sambur"],["samburs"],["same"],["samech"],["samechs"],["samek"],["samekh"],["samekhs"],["sameks"],["sameness"],["samiel"],["samiels"],["samisen"],["samisens"],["samite"],["samites"],["samizdat"],["samlet"],["samlets"],["samosa"],["samosas"],["samovar"],["samovars"],["samp"],["sampan"],["sampans"],["samphire"],["sample"],["sampled"],["sampler"],["samplers"],["samples"],["sampling"],["samps"],["samsara"],["samsaras"],["samshu"],["samshus"],["samurai"],["samurais"],["sanative"],["sancta"],["sanctify"],["sanction"],["sanctity"],["sanctum"],["sanctums"],["sand"],["sandal"],["sandaled"],["sandals"],["sandarac"],["sandbag"],["sandbags"],["sandbank"],["sandbar"],["sandbars"],["sandbox"],["sandbur"],["sandburr"],["sandburs"],["sanddab"],["sanddabs"],["sanded"],["sander"],["sanders"],["sandfish"],["sandfly"],["sandhi"],["sandhis"],["sandhog"],["sandhogs"],["sandier"],["sandiest"],["sanding"],["sandlike"],["sandling"],["sandlot"],["sandlots"],["sandman"],["sandmen"],["sandpeep"],["sandpile"],["sandpit"],["sandpits"],["sands"],["sandsoap"],["sandspur"],["sandwich"],["sandworm"],["sandwort"],["sandy"],["sane"],["saned"],["sanely"],["saneness"],["saner"],["sanes"],["sanest"],["sang"],["sanga"],["sangar"],["sangaree"],["sangars"],["sangas"],["sanger"],["sangers"],["sangh"],["sanghs"],["sangria"],["sangrias"],["sanguine"],["sanicle"],["sanicles"],["sanies"],["saning"],["sanious"],["sanitary"],["sanitate"],["sanities"],["sanitise"],["sanitize"],["sanity"],["sanjak"],["sanjaks"],["sank"],["sannop"],["sannops"],["sannup"],["sannups"],["sannyasi"],["sans"],["sansar"],["sansars"],["sansei"],["sanseis"],["sanserif"],["santalic"],["santalol"],["santimi"],["santims"],["santir"],["santirs"],["santol"],["santols"],["santonin"],["santour"],["santours"],["santur"],["santurs"],["sap"],["sapajou"],["sapajous"],["saphead"],["sapheads"],["saphena"],["saphenae"],["sapid"],["sapidity"],["sapience"],["sapiency"],["sapiens"],["sapient"],["sapless"],["sapling"],["saplings"],["saponify"],["saponin"],["saponine"],["saponins"],["saponite"],["sapor"],["saporous"],["sapors"],["sapota"],["sapotas"],["sapote"],["sapotes"],["sapour"],["sapours"],["sapped"],["sapper"],["sappers"],["sapphic"],["sapphics"],["sapphire"],["sapphism"],["sapphist"],["sappier"],["sappiest"],["sappily"],["sapping"],["sappy"],["sapremia"],["sapremic"],["saprobe"],["saprobes"],["saprobic"],["sapropel"],["saps"],["sapsago"],["sapsagos"],["sapwood"],["sapwoods"],["saraband"],["saran"],["sarans"],["sarape"],["sarapes"],["sarcasm"],["sarcasms"],["sarcenet"],["sarcoid"],["sarcoids"],["sarcoma"],["sarcomas"],["sarcous"],["sard"],["sardana"],["sardanas"],["sardar"],["sardars"],["sardine"],["sardines"],["sardius"],["sardonic"],["sardonyx"],["sards"],["saree"],["sarees"],["sargasso"],["sarge"],["sarges"],["sari"],["sarin"],["sarins"],["saris"],["sark"],["sarkier"],["sarkiest"],["sarks"],["sarky"],["sarment"],["sarmenta"],["sarments"],["sarod"],["sarode"],["sarodes"],["sarodist"],["sarods"],["sarong"],["sarongs"],["saros"],["saroses"],["sarsar"],["sarsars"],["sarsen"],["sarsenet"],["sarsens"],["sartor"],["sartorii"],["sartors"],["sash"],["sashay"],["sashayed"],["sashays"],["sashed"],["sashes"],["sashimi"],["sashimis"],["sashing"],["sasin"],["sasins"],["sass"],["sassaby"],["sassed"],["sasses"],["sassier"],["sassies"],["sassiest"],["sassily"],["sassing"],["sasswood"],["sassy"],["sastruga"],["sastrugi"],["sat"],["satang"],["satangs"],["satanic"],["satanism"],["satanist"],["satara"],["sataras"],["satay"],["satays"],["satchel"],["satchels"],["sate"],["sated"],["sateen"],["sateens"],["satem"],["sates"],["sati"],["satiable"],["satiably"],["satiate"],["satiated"],["satiates"],["satiety"],["satin"],["satinet"],["satinets"],["sating"],["satinpod"],["satins"],["satiny"],["satire"],["satires"],["satiric"],["satirise"],["satirist"],["satirize"],["satis"],["satisfy"],["satori"],["satoris"],["satrap"],["satraps"],["satrapy"],["satsuma"],["satsumas"],["saturant"],["saturate"],["satyr"],["satyric"],["satyrid"],["satyrids"],["satyrs"],["sau"],["sauce"],["saucebox"],["sauced"],["saucepan"],["saucer"],["saucers"],["sauces"],["sauch"],["sauchs"],["saucier"],["sauciest"],["saucily"],["saucing"],["saucy"],["sauger"],["saugers"],["saugh"],["saughs"],["saughy"],["saul"],["sauls"],["sault"],["saults"],["sauna"],["saunas"],["saunter"],["saunters"],["saurel"],["saurels"],["saurian"],["saurians"],["sauries"],["sauropod"],["saury"],["sausage"],["sausages"],["saute"],["sauted"],["sauteed"],["sauteing"],["sauterne"],["sautes"],["sautoir"],["sautoire"],["sautoirs"],["savable"],["savage"],["savaged"],["savagely"],["savager"],["savagery"],["savages"],["savagest"],["savaging"],["savagism"],["savanna"],["savannah"],["savannas"],["savant"],["savants"],["savarin"],["savarins"],["savate"],["savates"],["save"],["saveable"],["saved"],["saveloy"],["saveloys"],["saver"],["savers"],["saves"],["savin"],["savine"],["savines"],["saving"],["savingly"],["savings"],["savins"],["savior"],["saviors"],["saviour"],["saviours"],["savor"],["savored"],["savorer"],["savorers"],["savorier"],["savories"],["savorily"],["savoring"],["savorous"],["savors"],["savory"],["savour"],["savoured"],["savourer"],["savours"],["savoury"],["savoy"],["savoys"],["savvied"],["savvier"],["savvies"],["savviest"],["savvy"],["savvying"],["saw"],["sawbill"],["sawbills"],["sawbones"],["sawbuck"],["sawbucks"],["sawdust"],["sawdusts"],["sawed"],["sawer"],["sawers"],["sawfish"],["sawflies"],["sawfly"],["sawhorse"],["sawing"],["sawlike"],["sawlog"],["sawlogs"],["sawmill"],["sawmills"],["sawn"],["sawney"],["sawneys"],["saws"],["sawteeth"],["sawtooth"],["sawyer"],["sawyers"],["sax"],["saxatile"],["saxes"],["saxhorn"],["saxhorns"],["saxonies"],["saxony"],["saxtuba"],["saxtubas"],["say"],["sayable"],["sayer"],["sayers"],["sayest"],["sayid"],["sayids"],["saying"],["sayings"],["sayonara"],["says"],["sayst"],["sayyid"],["sayyids"],["scab"],["scabbard"],["scabbed"],["scabbier"],["scabbily"],["scabbing"],["scabble"],["scabbled"],["scabbles"],["scabby"],["scabies"],["scabiosa"],["scabious"],["scabland"],["scablike"],["scabrous"],["scabs"],["scad"],["scads"],["scaffold"],["scag"],["scags"],["scalable"],["scalably"],["scalade"],["scalades"],["scalado"],["scalados"],["scalage"],["scalages"],["scalar"],["scalare"],["scalares"],["scalars"],["scalawag"],["scald"],["scalded"],["scaldic"],["scalding"],["scalds"],["scale"],["scaled"],["scalene"],["scaleni"],["scalenus"],["scalepan"],["scaler"],["scalers"],["scales"],["scaleup"],["scaleups"],["scalier"],["scaliest"],["scaling"],["scall"],["scallion"],["scallop"],["scallops"],["scalls"],["scalp"],["scalped"],["scalpel"],["scalpels"],["scalper"],["scalpers"],["scalping"],["scalps"],["scaly"],["scam"],["scammed"],["scamming"],["scammony"],["scamp"],["scamped"],["scamper"],["scampers"],["scampi"],["scampies"],["scamping"],["scampish"],["scamps"],["scams"],["scan"],["scandal"],["scandals"],["scandent"],["scandia"],["scandias"],["scandic"],["scandium"],["scanned"],["scanner"],["scanners"],["scanning"],["scans"],["scansion"],["scant"],["scanted"],["scanter"],["scantest"],["scantier"],["scanties"],["scantily"],["scanting"],["scantly"],["scants"],["scanty"],["scape"],["scaped"],["scapes"],["scaphoid"],["scaping"],["scapose"],["scapula"],["scapulae"],["scapular"],["scapulas"],["scar"],["scarab"],["scarabs"],["scarce"],["scarcely"],["scarcer"],["scarcest"],["scarcity"],["scare"],["scared"],["scarer"],["scarers"],["scares"],["scarey"],["scarf"],["scarfed"],["scarfing"],["scarfpin"],["scarfs"],["scarier"],["scariest"],["scarify"],["scarily"],["scaring"],["scariose"],["scarious"],["scarless"],["scarlet"],["scarlets"],["scarp"],["scarped"],["scarper"],["scarpers"],["scarph"],["scarphed"],["scarphs"],["scarping"],["scarps"],["scarred"],["scarrier"],["scarring"],["scarry"],["scars"],["scart"],["scarted"],["scarting"],["scarts"],["scarves"],["scary"],["scat"],["scatback"],["scathe"],["scathed"],["scathes"],["scathing"],["scats"],["scatt"],["scatted"],["scatter"],["scatters"],["scattier"],["scatting"],["scatts"],["scatty"],["scaup"],["scauper"],["scaupers"],["scaups"],["scaur"],["scaurs"],["scavenge"],["scena"],["scenario"],["scenas"],["scend"],["scended"],["scending"],["scends"],["scene"],["scenery"],["scenes"],["scenic"],["scenical"],["scent"],["scented"],["scenting"],["scents"],["scepter"],["scepters"],["sceptic"],["sceptics"],["sceptral"],["sceptre"],["sceptred"],["sceptres"],["schappe"],["schappes"],["schav"],["schavs"],["schedule"],["schema"],["schemas"],["schemata"],["scheme"],["schemed"],["schemer"],["schemers"],["schemes"],["scheming"],["scherzi"],["scherzo"],["scherzos"],["schiller"],["schism"],["schisms"],["schist"],["schists"],["schizier"],["schizo"],["schizoid"],["schizont"],["schizos"],["schizy"],["schizzy"],["schlep"],["schlepp"],["schlepps"],["schleps"],["schliere"],["schlock"],["schlocks"],["schlocky"],["schlump"],["schlumps"],["schmaltz"],["schmalz"],["schmalzy"],["schmear"],["schmears"],["schmeer"],["schmeers"],["schmelze"],["schmo"],["schmoe"],["schmoes"],["schmoos"],["schmoose"],["schmooze"],["schmos"],["schmuck"],["schmucks"],["schnapps"],["schnaps"],["schnecke"],["schnook"],["schnooks"],["schnoz"],["schnozz"],["scholar"],["scholars"],["scholia"],["scholium"],["school"],["schooled"],["schools"],["schooner"],["schorl"],["schorls"],["schrik"],["schriks"],["schrod"],["schrods"],["schtick"],["schticks"],["schtik"],["schtiks"],["schuit"],["schuits"],["schul"],["schuln"],["schuss"],["schussed"],["schusser"],["schusses"],["schwa"],["schwas"],["sciaenid"],["sciatic"],["sciatica"],["sciatics"],["science"],["sciences"],["scilicet"],["scilla"],["scillas"],["scimetar"],["scimitar"],["scimiter"],["scincoid"],["sciolism"],["sciolist"],["scion"],["scions"],["scirocco"],["scirrhi"],["scirrhus"],["scissile"],["scission"],["scissor"],["scissors"],["scissure"],["sciurid"],["sciurids"],["sciurine"],["sciuroid"],["sclaff"],["sclaffed"],["sclaffer"],["sclaffs"],["sclera"],["sclerae"],["scleral"],["scleras"],["sclereid"],["sclerite"],["scleroid"],["scleroma"],["sclerose"],["sclerous"],["scoff"],["scoffed"],["scoffer"],["scoffers"],["scoffing"],["scofflaw"],["scoffs"],["scold"],["scolded"],["scolder"],["scolders"],["scolding"],["scolds"],["scoleces"],["scolex"],["scolices"],["scolioma"],["scollop"],["scollops"],["sconce"],["sconced"],["sconces"],["sconcing"],["scone"],["scones"],["scoop"],["scooped"],["scooper"],["scoopers"],["scoopful"],["scooping"],["scoops"],["scoot"],["scooted"],["scooter"],["scooters"],["scooting"],["scoots"],["scop"],["scope"],["scopes"],["scops"],["scopula"],["scopulae"],["scopulas"],["scorch"],["scorched"],["scorcher"],["scorches"],["score"],["scored"],["scorepad"],["scorer"],["scorers"],["scores"],["scoria"],["scoriae"],["scorify"],["scoring"],["scorn"],["scorned"],["scorner"],["scorners"],["scornful"],["scorning"],["scorns"],["scorpion"],["scot"],["scotch"],["scotched"],["scotches"],["scoter"],["scoters"],["scotia"],["scotias"],["scotoma"],["scotomas"],["scotopia"],["scotopic"],["scots"],["scottie"],["scotties"],["scour"],["scoured"],["scourer"],["scourers"],["scourge"],["scourged"],["scourger"],["scourges"],["scouring"],["scours"],["scouse"],["scouses"],["scout"],["scouted"],["scouter"],["scouters"],["scouth"],["scouther"],["scouths"],["scouting"],["scouts"],["scow"],["scowder"],["scowders"],["scowed"],["scowing"],["scowl"],["scowled"],["scowler"],["scowlers"],["scowling"],["scowls"],["scows"],["scrabble"],["scrabbly"],["scrag"],["scragged"],["scraggly"],["scraggy"],["scrags"],["scraich"],["scraichs"],["scraigh"],["scraighs"],["scram"],["scramble"],["scramjet"],["scrammed"],["scrams"],["scrannel"],["scrap"],["scrape"],["scraped"],["scraper"],["scrapers"],["scrapes"],["scrapie"],["scrapies"],["scraping"],["scrapped"],["scrapper"],["scrapple"],["scrappy"],["scraps"],["scratch"],["scratchy"],["scrawl"],["scrawled"],["scrawler"],["scrawls"],["scrawly"],["scrawny"],["screak"],["screaked"],["screaks"],["screaky"],["scream"],["screamed"],["screamer"],["screams"],["scree"],["screech"],["screechy"],["screed"],["screeded"],["screeds"],["screen"],["screened"],["screener"],["screens"],["screes"],["screw"],["screwed"],["screwer"],["screwers"],["screwier"],["screwing"],["screws"],["screwup"],["screwups"],["screwy"],["scribal"],["scribble"],["scribe"],["scribed"],["scriber"],["scribers"],["scribes"],["scribing"],["scried"],["scries"],["scrieve"],["scrieved"],["scrieves"],["scrim"],["scrimp"],["scrimped"],["scrimper"],["scrimpit"],["scrimps"],["scrimpy"],["scrims"],["scrip"],["scrips"],["script"],["scripted"],["scripter"],["scripts"],["scrive"],["scrived"],["scrives"],["scriving"],["scrod"],["scrods"],["scrofula"],["scroggy"],["scroll"],["scrolled"],["scrolls"],["scrooch"],["scrooge"],["scrooges"],["scroop"],["scrooped"],["scroops"],["scrootch"],["scrota"],["scrotal"],["scrotum"],["scrotums"],["scrouge"],["scrouged"],["scrouges"],["scrounge"],["scroungy"],["scrub"],["scrubbed"],["scrubber"],["scrubby"],["scrubs"],["scruff"],["scruffs"],["scruffy"],["scrum"],["scrummed"],["scrums"],["scrunch"],["scruple"],["scrupled"],["scruples"],["scrutiny"],["scry"],["scrying"],["scuba"],["scubas"],["scud"],["scudded"],["scudding"],["scudi"],["scudo"],["scuds"],["scuff"],["scuffed"],["scuffing"],["scuffle"],["scuffled"],["scuffler"],["scuffles"],["scuffs"],["sculk"],["sculked"],["sculker"],["sculkers"],["sculking"],["sculks"],["scull"],["sculled"],["sculler"],["scullers"],["scullery"],["sculling"],["scullion"],["sculls"],["sculp"],["sculped"],["sculpin"],["sculping"],["sculpins"],["sculps"],["sculpt"],["sculpted"],["sculptor"],["sculpts"],["scum"],["scumble"],["scumbled"],["scumbles"],["scumlike"],["scummed"],["scummer"],["scummers"],["scummier"],["scumming"],["scummy"],["scums"],["scunner"],["scunners"],["scup"],["scuppaug"],["scupper"],["scuppers"],["scups"],["scurf"],["scurfier"],["scurfs"],["scurfy"],["scurried"],["scurries"],["scurril"],["scurrile"],["scurry"],["scurvier"],["scurvies"],["scurvily"],["scurvy"],["scut"],["scuta"],["scutage"],["scutages"],["scutate"],["scutch"],["scutched"],["scutcher"],["scutches"],["scute"],["scutella"],["scutes"],["scuts"],["scutter"],["scutters"],["scuttle"],["scuttled"],["scuttles"],["scutum"],["scuzzier"],["scuzzy"],["scyphate"],["scyphi"],["scyphus"],["scythe"],["scythed"],["scythes"],["scything"],["sea"],["seabag"],["seabags"],["seabeach"],["seabed"],["seabeds"],["seabird"],["seabirds"],["seaboard"],["seaboot"],["seaboots"],["seaborne"],["seacoast"],["seacock"],["seacocks"],["seacraft"],["seadog"],["seadogs"],["seadrome"],["seafarer"],["seafloor"],["seafood"],["seafoods"],["seafowl"],["seafowls"],["seafront"],["seagirt"],["seagoing"],["seal"],["sealable"],["sealant"],["sealants"],["sealed"],["sealer"],["sealers"],["sealery"],["sealing"],["seallike"],["seals"],["sealskin"],["seam"],["seaman"],["seamanly"],["seamark"],["seamarks"],["seamed"],["seamen"],["seamer"],["seamers"],["seamier"],["seamiest"],["seaming"],["seamless"],["seamlike"],["seamount"],["seams"],["seamster"],["seamy"],["seance"],["seances"],["seapiece"],["seaplane"],["seaport"],["seaports"],["seaquake"],["sear"],["search"],["searched"],["searcher"],["searches"],["seared"],["searer"],["searest"],["searing"],["searobin"],["sears"],["seas"],["seascape"],["seascout"],["seashell"],["seashore"],["seasick"],["seaside"],["seasides"],["season"],["seasonal"],["seasoned"],["seasoner"],["seasons"],["seat"],["seated"],["seater"],["seaters"],["seating"],["seatings"],["seatless"],["seatmate"],["seatrain"],["seats"],["seatwork"],["seawall"],["seawalls"],["seawan"],["seawans"],["seawant"],["seawants"],["seaward"],["seawards"],["seaware"],["seawares"],["seawater"],["seaway"],["seaways"],["seaweed"],["seaweeds"],["sebacic"],["sebasic"],["sebum"],["sebums"],["sec"],["secalose"],["secant"],["secantly"],["secants"],["secateur"],["secco"],["seccos"],["secede"],["seceded"],["seceder"],["seceders"],["secedes"],["seceding"],["secern"],["secerned"],["secerns"],["seclude"],["secluded"],["secludes"],["second"],["seconde"],["seconded"],["seconder"],["secondes"],["secondi"],["secondly"],["secondo"],["seconds"],["secpar"],["secpars"],["secrecy"],["secret"],["secrete"],["secreted"],["secreter"],["secretes"],["secretin"],["secretly"],["secretor"],["secrets"],["secs"],["sect"],["sectary"],["sectile"],["section"],["sections"],["sector"],["sectoral"],["sectored"],["sectors"],["sects"],["secular"],["seculars"],["secund"],["secundly"],["secundum"],["secure"],["secured"],["securely"],["securer"],["securers"],["secures"],["securest"],["securing"],["security"],["sedan"],["sedans"],["sedarim"],["sedate"],["sedated"],["sedately"],["sedater"],["sedates"],["sedatest"],["sedating"],["sedation"],["sedative"],["seder"],["seders"],["sederunt"],["sedge"],["sedges"],["sedgier"],["sedgiest"],["sedgy"],["sedile"],["sedilia"],["sedilium"],["sediment"],["sedition"],["seduce"],["seduced"],["seducer"],["seducers"],["seduces"],["seducing"],["seducive"],["sedulity"],["sedulous"],["sedum"],["sedums"],["see"],["seeable"],["seecatch"],["seed"],["seedbed"],["seedbeds"],["seedcake"],["seedcase"],["seeded"],["seeder"],["seeders"],["seedier"],["seediest"],["seedily"],["seeding"],["seedless"],["seedlike"],["seedling"],["seedman"],["seedmen"],["seedpod"],["seedpods"],["seeds"],["seedsman"],["seedsmen"],["seedtime"],["seedy"],["seeing"],["seeings"],["seek"],["seeker"],["seekers"],["seeking"],["seeks"],["seel"],["seeled"],["seeling"],["seels"],["seely"],["seem"],["seemed"],["seemer"],["seemers"],["seeming"],["seemings"],["seemlier"],["seemly"],["seems"],["seen"],["seep"],["seepage"],["seepages"],["seeped"],["seepier"],["seepiest"],["seeping"],["seeps"],["seepy"],["seer"],["seeress"],["seers"],["sees"],["seesaw"],["seesawed"],["seesaws"],["seethe"],["seethed"],["seethes"],["seething"],["seg"],["segetal"],["seggar"],["seggars"],["segment"],["segments"],["segni"],["segno"],["segnos"],["sego"],["segos"],["segs"],["segue"],["segued"],["segueing"],["segues"],["sei"],["seicento"],["seiche"],["seiches"],["seidel"],["seidels"],["seif"],["seifs"],["seigneur"],["seignior"],["seignory"],["seine"],["seined"],["seiner"],["seiners"],["seines"],["seining"],["seis"],["seisable"],["seise"],["seised"],["seiser"],["seisers"],["seises"],["seisin"],["seising"],["seisings"],["seisins"],["seism"],["seismal"],["seismic"],["seismism"],["seisms"],["seisor"],["seisors"],["seisure"],["seisures"],["seizable"],["seize"],["seized"],["seizer"],["seizers"],["seizes"],["seizin"],["seizing"],["seizings"],["seizins"],["seizor"],["seizors"],["seizure"],["seizures"],["sejant"],["sejeant"],["sel"],["seladang"],["selah"],["selahs"],["selamlik"],["selcouth"],["seldom"],["seldomly"],["select"],["selected"],["selectee"],["selectly"],["selector"],["selects"],["selenate"],["selenic"],["selenide"],["selenite"],["selenium"],["selenous"],["self"],["selfdom"],["selfdoms"],["selfed"],["selfheal"],["selfhood"],["selfing"],["selfish"],["selfless"],["selfness"],["selfs"],["selfsame"],["selfward"],["sell"],["sellable"],["selle"],["seller"],["sellers"],["selles"],["selling"],["sellout"],["sellouts"],["sells"],["sels"],["selsyn"],["selsyns"],["seltzer"],["seltzers"],["selva"],["selvage"],["selvaged"],["selvages"],["selvas"],["selvedge"],["selves"],["semantic"],["sematic"],["seme"],["sememe"],["sememes"],["semen"],["semens"],["semes"],["semester"],["semi"],["semiarid"],["semibald"],["semicoma"],["semideaf"],["semidome"],["semidry"],["semifit"],["semigala"],["semihard"],["semihigh"],["semihobo"],["semilog"],["semimat"],["semimatt"],["semimute"],["semina"],["seminal"],["seminar"],["seminars"],["seminary"],["seminude"],["semioses"],["semiosis"],["semiotic"],["semipro"],["semipros"],["semiraw"],["semis"],["semises"],["semisoft"],["semitist"],["semitone"],["semiwild"],["semolina"],["semple"],["semplice"],["sempre"],["sen"],["senarii"],["senarius"],["senary"],["senate"],["senates"],["senator"],["senators"],["send"],["sendable"],["sendal"],["sendals"],["sended"],["sender"],["senders"],["sending"],["sendoff"],["sendoffs"],["sends"],["sendup"],["sendups"],["sene"],["seneca"],["senecas"],["senecio"],["senecios"],["senega"],["senegas"],["sengi"],["senhor"],["senhora"],["senhoras"],["senhores"],["senhors"],["senile"],["senilely"],["seniles"],["senility"],["senior"],["seniors"],["seniti"],["senna"],["sennas"],["sennet"],["sennets"],["sennight"],["sennit"],["sennits"],["senopia"],["senopias"],["senor"],["senora"],["senoras"],["senores"],["senorita"],["senors"],["senryu"],["sensa"],["sensate"],["sensated"],["sensates"],["sense"],["sensed"],["senseful"],["senses"],["sensible"],["sensibly"],["sensilla"],["sensing"],["sensor"],["sensoria"],["sensors"],["sensory"],["sensual"],["sensum"],["sensuous"],["sent"],["sentence"],["senti"],["sentient"],["sentimo"],["sentimos"],["sentinel"],["sentries"],["sentry"],["sepal"],["sepaled"],["sepaline"],["sepalled"],["sepaloid"],["sepalous"],["sepals"],["separate"],["sepia"],["sepias"],["sepic"],["sepoy"],["sepoys"],["seppuku"],["seppukus"],["sepses"],["sepsis"],["sept"],["septa"],["septal"],["septaria"],["septate"],["septet"],["septets"],["septette"],["septic"],["septical"],["septics"],["septime"],["septimes"],["septs"],["septum"],["septums"],["septuple"],["sequel"],["sequela"],["sequelae"],["sequels"],["sequence"],["sequency"],["sequent"],["sequents"],["sequin"],["sequined"],["sequins"],["sequitur"],["sequoia"],["sequoias"],["ser"],["sera"],["serac"],["seracs"],["seraglio"],["serai"],["serail"],["serails"],["serais"],["seral"],["serape"],["serapes"],["seraph"],["seraphic"],["seraphim"],["seraphin"],["seraphs"],["serdab"],["serdabs"],["sere"],["sered"],["serein"],["sereins"],["serenade"],["serenata"],["serenate"],["serene"],["serenely"],["serener"],["serenes"],["serenest"],["serenity"],["serer"],["seres"],["serest"],["serf"],["serfage"],["serfages"],["serfdom"],["serfdoms"],["serfhood"],["serfish"],["serflike"],["serfs"],["serge"],["sergeant"],["serges"],["serging"],["sergings"],["serial"],["serially"],["serials"],["seriate"],["seriated"],["seriates"],["seriatim"],["sericin"],["sericins"],["seriema"],["seriemas"],["series"],["serif"],["serifed"],["seriffed"],["serifs"],["serin"],["serine"],["serines"],["sering"],["seringa"],["seringas"],["serins"],["serious"],["serjeant"],["sermon"],["sermonic"],["sermons"],["serology"],["serosa"],["serosae"],["serosal"],["serosas"],["serosity"],["serotine"],["serotype"],["serous"],["serow"],["serows"],["serpent"],["serpents"],["serpigo"],["serranid"],["serrate"],["serrated"],["serrates"],["serried"],["serries"],["serry"],["serrying"],["sers"],["serum"],["serumal"],["serums"],["servable"],["serval"],["servals"],["servant"],["servants"],["serve"],["served"],["server"],["servers"],["serves"],["service"],["serviced"],["servicer"],["services"],["servile"],["serving"],["servings"],["servitor"],["servo"],["servos"],["sesame"],["sesames"],["sesamoid"],["sessile"],["session"],["sessions"],["sesspool"],["sesterce"],["sestet"],["sestets"],["sestina"],["sestinas"],["sestine"],["sestines"],["set"],["seta"],["setae"],["setal"],["setback"],["setbacks"],["setenant"],["setiform"],["setline"],["setlines"],["setoff"],["setoffs"],["seton"],["setons"],["setose"],["setous"],["setout"],["setouts"],["sets"],["setscrew"],["sett"],["settee"],["settees"],["setter"],["setters"],["setting"],["settings"],["settle"],["settled"],["settler"],["settlers"],["settles"],["settling"],["settlor"],["settlors"],["setts"],["setulose"],["setulous"],["setup"],["setups"],["seven"],["sevens"],["seventh"],["sevenths"],["seventy"],["sever"],["several"],["severals"],["severe"],["severed"],["severely"],["severer"],["severest"],["severing"],["severity"],["severs"],["seviche"],["seviches"],["sew"],["sewable"],["sewage"],["sewages"],["sewan"],["sewans"],["sewar"],["sewars"],["sewed"],["sewer"],["sewerage"],["sewered"],["sewering"],["sewers"],["sewing"],["sewings"],["sewn"],["sews"],["sex"],["sexed"],["sexes"],["sexier"],["sexiest"],["sexily"],["sexiness"],["sexing"],["sexism"],["sexisms"],["sexist"],["sexists"],["sexless"],["sexology"],["sexpot"],["sexpots"],["sext"],["sextain"],["sextains"],["sextan"],["sextans"],["sextant"],["sextants"],["sextarii"],["sextet"],["sextets"],["sextette"],["sextile"],["sextiles"],["sexto"],["sexton"],["sextons"],["sextos"],["sexts"],["sextuple"],["sextuply"],["sexual"],["sexually"],["sexy"],["sferics"],["sforzato"],["sfumato"],["sfumatos"],["sh"],["sha"],["shabbier"],["shabbily"],["shabby"],["shack"],["shackle"],["shackled"],["shackler"],["shackles"],["shacko"],["shackoes"],["shackos"],["shacks"],["shad"],["shadblow"],["shadbush"],["shadchan"],["shaddock"],["shade"],["shaded"],["shader"],["shaders"],["shades"],["shadfly"],["shadier"],["shadiest"],["shadily"],["shading"],["shadings"],["shadoof"],["shadoofs"],["shadow"],["shadowed"],["shadower"],["shadows"],["shadowy"],["shadrach"],["shads"],["shaduf"],["shadufs"],["shady"],["shaft"],["shafted"],["shafting"],["shafts"],["shag"],["shagbark"],["shagged"],["shaggier"],["shaggily"],["shagging"],["shaggy"],["shagreen"],["shags"],["shah"],["shahdom"],["shahdoms"],["shahs"],["shaird"],["shairds"],["shairn"],["shairns"],["shaitan"],["shaitans"],["shakable"],["shake"],["shaken"],["shakeout"],["shaker"],["shakers"],["shakes"],["shakeup"],["shakeups"],["shakier"],["shakiest"],["shakily"],["shaking"],["shako"],["shakoes"],["shakos"],["shaky"],["shale"],["shaled"],["shales"],["shaley"],["shalier"],["shaliest"],["shall"],["shalloon"],["shallop"],["shallops"],["shallot"],["shallots"],["shallow"],["shallows"],["shalom"],["shaloms"],["shalt"],["shaly"],["sham"],["shamable"],["shaman"],["shamanic"],["shamans"],["shamas"],["shamble"],["shambled"],["shambles"],["shame"],["shamed"],["shameful"],["shames"],["shaming"],["shammas"],["shammash"],["shammed"],["shammer"],["shammers"],["shammes"],["shammied"],["shammies"],["shamming"],["shammos"],["shammy"],["shamois"],["shamos"],["shamosim"],["shamoy"],["shamoyed"],["shamoys"],["shampoo"],["shampoos"],["shamrock"],["shams"],["shamus"],["shamuses"],["shandies"],["shandy"],["shanghai"],["shank"],["shanked"],["shanking"],["shanks"],["shannies"],["shanny"],["shantey"],["shanteys"],["shanti"],["shanties"],["shantih"],["shantihs"],["shantis"],["shantung"],["shanty"],["shapable"],["shape"],["shaped"],["shapely"],["shapen"],["shaper"],["shapers"],["shapes"],["shapeup"],["shapeups"],["shaping"],["sharable"],["shard"],["shards"],["share"],["shared"],["sharer"],["sharers"],["shares"],["sharif"],["sharifs"],["sharing"],["shark"],["sharked"],["sharker"],["sharkers"],["sharking"],["sharks"],["sharn"],["sharns"],["sharny"],["sharp"],["sharped"],["sharpen"],["sharpens"],["sharper"],["sharpers"],["sharpest"],["sharpie"],["sharpies"],["sharping"],["sharply"],["sharps"],["sharpy"],["shashlik"],["shaslik"],["shasliks"],["shat"],["shatter"],["shatters"],["shaugh"],["shaughs"],["shaul"],["shauled"],["shauling"],["shauls"],["shavable"],["shave"],["shaved"],["shaven"],["shaver"],["shavers"],["shaves"],["shavie"],["shavies"],["shaving"],["shavings"],["shaw"],["shawed"],["shawing"],["shawl"],["shawled"],["shawling"],["shawls"],["shawm"],["shawms"],["shawn"],["shaws"],["shay"],["shays"],["she"],["shea"],["sheaf"],["sheafed"],["sheafing"],["sheafs"],["sheal"],["shealing"],["sheals"],["shear"],["sheared"],["shearer"],["shearers"],["shearing"],["shears"],["sheas"],["sheath"],["sheathe"],["sheathed"],["sheather"],["sheathes"],["sheaths"],["sheave"],["sheaved"],["sheaves"],["sheaving"],["shebang"],["shebangs"],["shebean"],["shebeans"],["shebeen"],["shebeens"],["shed"],["shedable"],["shedded"],["shedder"],["shedders"],["shedding"],["sheds"],["sheen"],["sheened"],["sheeney"],["sheeneys"],["sheenful"],["sheenie"],["sheenier"],["sheenies"],["sheening"],["sheens"],["sheeny"],["sheep"],["sheepcot"],["sheepdog"],["sheepish"],["sheepman"],["sheepmen"],["sheer"],["sheered"],["sheerer"],["sheerest"],["sheering"],["sheerly"],["sheers"],["sheet"],["sheeted"],["sheeter"],["sheeters"],["sheetfed"],["sheeting"],["sheets"],["sheeve"],["sheeves"],["shegetz"],["sheik"],["sheikdom"],["sheikh"],["sheikhs"],["sheiks"],["sheila"],["sheilas"],["sheitan"],["sheitans"],["shekel"],["shekels"],["shelduck"],["shelf"],["shelfful"],["shell"],["shellac"],["shellack"],["shellacs"],["shelled"],["sheller"],["shellers"],["shellier"],["shelling"],["shells"],["shelly"],["shelta"],["sheltas"],["shelter"],["shelters"],["sheltie"],["shelties"],["shelty"],["shelve"],["shelved"],["shelver"],["shelvers"],["shelves"],["shelvier"],["shelving"],["shelvy"],["shend"],["shending"],["shends"],["shent"],["sheol"],["sheols"],["shepherd"],["sherbert"],["sherbet"],["sherbets"],["sherd"],["sherds"],["shereef"],["shereefs"],["sherif"],["sheriff"],["sheriffs"],["sherifs"],["sherlock"],["sheroot"],["sheroots"],["sherpa"],["sherpas"],["sherries"],["sherris"],["sherry"],["shes"],["shetland"],["sheuch"],["sheuchs"],["sheugh"],["sheughs"],["shew"],["shewed"],["shewer"],["shewers"],["shewing"],["shewn"],["shews"],["shh"],["shiatsu"],["shiatsus"],["shiatzu"],["shiatzus"],["shibah"],["shibahs"],["shicker"],["shickers"],["shicksa"],["shicksas"],["shied"],["shiel"],["shield"],["shielded"],["shielder"],["shields"],["shieling"],["shiels"],["shier"],["shiers"],["shies"],["shiest"],["shift"],["shifted"],["shifter"],["shifters"],["shiftier"],["shiftily"],["shifting"],["shifts"],["shifty"],["shigella"],["shikar"],["shikaree"],["shikari"],["shikaris"],["shikars"],["shikker"],["shikkers"],["shiksa"],["shiksas"],["shikse"],["shikses"],["shilingi"],["shill"],["shillala"],["shilled"],["shilling"],["shills"],["shilpit"],["shily"],["shim"],["shimmed"],["shimmer"],["shimmers"],["shimmery"],["shimmied"],["shimmies"],["shimming"],["shimmy"],["shims"],["shin"],["shinbone"],["shindies"],["shindig"],["shindigs"],["shindy"],["shindys"],["shine"],["shined"],["shiner"],["shiners"],["shines"],["shingle"],["shingled"],["shingler"],["shingles"],["shingly"],["shinier"],["shiniest"],["shinily"],["shining"],["shinleaf"],["shinned"],["shinnery"],["shinney"],["shinneys"],["shinnied"],["shinnies"],["shinning"],["shinny"],["shins"],["shiny"],["ship"],["shiplap"],["shiplaps"],["shipload"],["shipman"],["shipmate"],["shipmen"],["shipment"],["shipped"],["shippen"],["shippens"],["shipper"],["shippers"],["shipping"],["shippon"],["shippons"],["ships"],["shipside"],["shipway"],["shipways"],["shipworm"],["shipyard"],["shire"],["shires"],["shirk"],["shirked"],["shirker"],["shirkers"],["shirking"],["shirks"],["shirr"],["shirred"],["shirring"],["shirrs"],["shirt"],["shirtier"],["shirting"],["shirts"],["shirty"],["shist"],["shists"],["shit"],["shithead"],["shits"],["shittah"],["shittahs"],["shitted"],["shittier"],["shittim"],["shittims"],["shitting"],["shitty"],["shiv"],["shiva"],["shivah"],["shivahs"],["shivaree"],["shivas"],["shive"],["shiver"],["shivered"],["shiverer"],["shivers"],["shivery"],["shives"],["shivs"],["shkotzim"],["shlemiel"],["shlep"],["shlepp"],["shlepped"],["shlepps"],["shleps"],["shlock"],["shlocks"],["shlump"],["shlumped"],["shlumps"],["shlumpy"],["shmaltz"],["shmaltzy"],["shmear"],["shmears"],["shmo"],["shmoes"],["shmooze"],["shmoozed"],["shmoozes"],["shmuck"],["shmucks"],["shnaps"],["shnook"],["shnooks"],["shoal"],["shoaled"],["shoaler"],["shoalest"],["shoalier"],["shoaling"],["shoals"],["shoaly"],["shoat"],["shoats"],["shock"],["shocked"],["shocker"],["shockers"],["shocking"],["shocks"],["shod"],["shodden"],["shoddier"],["shoddies"],["shoddily"],["shoddy"],["shoe"],["shoebill"],["shoed"],["shoehorn"],["shoeing"],["shoelace"],["shoeless"],["shoepac"],["shoepack"],["shoepacs"],["shoer"],["shoers"],["shoes"],["shoetree"],["shofar"],["shofars"],["shofroth"],["shog"],["shogged"],["shogging"],["shogs"],["shogun"],["shogunal"],["shoguns"],["shoji"],["shojis"],["sholom"],["sholoms"],["shone"],["shoo"],["shooed"],["shoofly"],["shooing"],["shook"],["shooks"],["shool"],["shooled"],["shooling"],["shools"],["shoon"],["shoos"],["shoot"],["shooter"],["shooters"],["shooting"],["shootout"],["shoots"],["shop"],["shopboy"],["shopboys"],["shopgirl"],["shophar"],["shophars"],["shoplift"],["shopman"],["shopmen"],["shoppe"],["shopped"],["shopper"],["shoppers"],["shoppes"],["shopping"],["shops"],["shoptalk"],["shopworn"],["shoran"],["shorans"],["shore"],["shored"],["shores"],["shoring"],["shorings"],["shorl"],["shorls"],["shorn"],["short"],["shortage"],["shortcut"],["shorted"],["shorten"],["shortens"],["shorter"],["shortest"],["shortia"],["shortias"],["shortie"],["shorties"],["shorting"],["shortish"],["shortly"],["shorts"],["shorty"],["shot"],["shote"],["shotes"],["shotgun"],["shotguns"],["shots"],["shott"],["shotted"],["shotten"],["shotting"],["shotts"],["should"],["shoulder"],["shouldst"],["shout"],["shouted"],["shouter"],["shouters"],["shouting"],["shouts"],["shove"],["shoved"],["shovel"],["shoveled"],["shoveler"],["shovels"],["shover"],["shovers"],["shoves"],["shoving"],["show"],["showboat"],["showcase"],["showdown"],["showed"],["shower"],["showered"],["showers"],["showery"],["showgirl"],["showier"],["showiest"],["showily"],["showing"],["showings"],["showman"],["showmen"],["shown"],["showoff"],["showoffs"],["showroom"],["shows"],["showy"],["shoyu"],["shoyus"],["shrank"],["shrapnel"],["shred"],["shredded"],["shredder"],["shreds"],["shrew"],["shrewd"],["shrewder"],["shrewdie"],["shrewdly"],["shrewed"],["shrewing"],["shrewish"],["shrews"],["shri"],["shriek"],["shrieked"],["shrieker"],["shrieks"],["shrieky"],["shrieval"],["shrieve"],["shrieved"],["shrieves"],["shrift"],["shrifts"],["shrike"],["shrikes"],["shrill"],["shrilled"],["shriller"],["shrills"],["shrilly"],["shrimp"],["shrimped"],["shrimper"],["shrimps"],["shrimpy"],["shrine"],["shrined"],["shrines"],["shrining"],["shrink"],["shrinker"],["shrinks"],["shris"],["shrive"],["shrived"],["shrivel"],["shrivels"],["shriven"],["shriver"],["shrivers"],["shrives"],["shriving"],["shroff"],["shroffed"],["shroffs"],["shroud"],["shrouded"],["shrouds"],["shrove"],["shrub"],["shrubby"],["shrubs"],["shrug"],["shrugged"],["shrugs"],["shrunk"],["shrunken"],["shtetel"],["shtetels"],["shtetl"],["shtetls"],["shtick"],["shticks"],["shtik"],["shtiks"],["shuck"],["shucked"],["shucker"],["shuckers"],["shucking"],["shucks"],["shudder"],["shudders"],["shuddery"],["shuffle"],["shuffled"],["shuffler"],["shuffles"],["shul"],["shuln"],["shuls"],["shun"],["shunned"],["shunner"],["shunners"],["shunning"],["shunpike"],["shuns"],["shunt"],["shunted"],["shunter"],["shunters"],["shunting"],["shunts"],["shush"],["shushed"],["shushes"],["shushing"],["shut"],["shutdown"],["shute"],["shuted"],["shutes"],["shuteye"],["shuteyes"],["shuting"],["shutoff"],["shutoffs"],["shutout"],["shutouts"],["shuts"],["shutter"],["shutters"],["shutting"],["shuttle"],["shuttled"],["shuttles"],["shwanpan"],["shy"],["shyer"],["shyers"],["shyest"],["shying"],["shylock"],["shylocks"],["shyly"],["shyness"],["shyster"],["shysters"],["si"],["sial"],["sialic"],["sialid"],["sialidan"],["sialids"],["sialoid"],["sials"],["siamang"],["siamangs"],["siamese"],["siameses"],["sib"],["sibb"],["sibbs"],["sibilant"],["sibilate"],["sibling"],["siblings"],["sibs"],["sibyl"],["sibylic"],["sibyllic"],["sibyls"],["sic"],["siccan"],["sicced"],["siccing"],["sice"],["sices"],["sick"],["sickbay"],["sickbays"],["sickbed"],["sickbeds"],["sicked"],["sickee"],["sickees"],["sicken"],["sickened"],["sickener"],["sickens"],["sicker"],["sickerly"],["sickest"],["sickie"],["sickies"],["sicking"],["sickish"],["sickle"],["sickled"],["sickles"],["sicklied"],["sicklier"],["sicklies"],["sicklily"],["sickling"],["sickly"],["sickness"],["sicko"],["sickos"],["sickout"],["sickouts"],["sickroom"],["sicks"],["sics"],["siddur"],["siddurim"],["siddurs"],["side"],["sidearm"],["sideband"],["sidebar"],["sidebars"],["sidecar"],["sidecars"],["sided"],["sidehill"],["sidekick"],["sideline"],["sideling"],["sidelong"],["sideman"],["sidemen"],["sidereal"],["siderite"],["sides"],["sideshow"],["sideslip"],["sidespin"],["sidestep"],["sidewalk"],["sidewall"],["sideward"],["sideway"],["sideways"],["sidewise"],["siding"],["sidings"],["sidle"],["sidled"],["sidler"],["sidlers"],["sidles"],["sidling"],["siege"],["sieged"],["sieges"],["sieging"],["siemens"],["sienite"],["sienites"],["sienna"],["siennas"],["sierozem"],["sierra"],["sierran"],["sierras"],["siesta"],["siestas"],["sieur"],["sieurs"],["sieve"],["sieved"],["sieves"],["sieving"],["sifaka"],["sifakas"],["siffleur"],["sift"],["sifted"],["sifter"],["sifters"],["sifting"],["siftings"],["sifts"],["siganid"],["siganids"],["sigh"],["sighed"],["sigher"],["sighers"],["sighing"],["sighless"],["sighlike"],["sighs"],["sight"],["sighted"],["sighter"],["sighters"],["sighting"],["sightly"],["sights"],["sightsaw"],["sightsee"],["sigil"],["sigils"],["sigloi"],["siglos"],["sigma"],["sigmas"],["sigmate"],["sigmoid"],["sigmoids"],["sign"],["signage"],["signages"],["signal"],["signaled"],["signaler"],["signally"],["signals"],["signed"],["signee"],["signees"],["signer"],["signers"],["signet"],["signeted"],["signets"],["signify"],["signing"],["signior"],["signiori"],["signiors"],["signiory"],["signor"],["signora"],["signoras"],["signore"],["signori"],["signors"],["signory"],["signpost"],["signs"],["sike"],["siker"],["sikes"],["silage"],["silages"],["silane"],["silanes"],["sild"],["silds"],["silence"],["silenced"],["silencer"],["silences"],["sileni"],["silent"],["silenter"],["silently"],["silents"],["silenus"],["silesia"],["silesias"],["silex"],["silexes"],["silica"],["silicas"],["silicate"],["silicic"],["silicide"],["silicify"],["silicium"],["silicle"],["silicles"],["silicon"],["silicone"],["silicons"],["silicula"],["siliqua"],["siliquae"],["silique"],["siliques"],["silk"],["silked"],["silken"],["silkier"],["silkiest"],["silkily"],["silking"],["silklike"],["silks"],["silkweed"],["silkworm"],["silky"],["sill"],["sillabub"],["siller"],["sillers"],["sillibub"],["sillier"],["sillies"],["silliest"],["sillily"],["sills"],["silly"],["silo"],["siloed"],["siloing"],["silos"],["siloxane"],["silt"],["silted"],["siltier"],["siltiest"],["silting"],["silts"],["silty"],["silurid"],["silurids"],["siluroid"],["silva"],["silvae"],["silvan"],["silvans"],["silvas"],["silver"],["silvered"],["silverer"],["silverly"],["silvern"],["silvers"],["silvery"],["silvex"],["silvexes"],["silvical"],["silvics"],["sim"],["sima"],["simar"],["simars"],["simaruba"],["simas"],["simazine"],["simian"],["simians"],["similar"],["simile"],["similes"],["simioid"],["simious"],["simitar"],["simitars"],["simlin"],["simlins"],["simmer"],["simmered"],["simmers"],["simnel"],["simnels"],["simoleon"],["simoniac"],["simonies"],["simonist"],["simonize"],["simony"],["simoom"],["simooms"],["simoon"],["simoons"],["simp"],["simper"],["simpered"],["simperer"],["simpers"],["simple"],["simpler"],["simples"],["simplest"],["simplex"],["simplify"],["simplism"],["simplist"],["simply"],["simps"],["sims"],["simulant"],["simular"],["simulars"],["simulate"],["sin"],["sinapism"],["since"],["sincere"],["sincerer"],["sinciput"],["sine"],["sinecure"],["sines"],["sinew"],["sinewed"],["sinewing"],["sinews"],["sinewy"],["sinfonia"],["sinfonie"],["sinful"],["sinfully"],["sing"],["singable"],["singe"],["singed"],["singeing"],["singer"],["singers"],["singes"],["singing"],["single"],["singled"],["singles"],["singlet"],["singlets"],["singling"],["singly"],["sings"],["singsong"],["singular"],["sinh"],["sinhs"],["sinicize"],["sinister"],["sink"],["sinkable"],["sinkage"],["sinkages"],["sinker"],["sinkers"],["sinkhole"],["sinking"],["sinks"],["sinless"],["sinned"],["sinner"],["sinners"],["sinning"],["sinology"],["sinopia"],["sinopias"],["sinopie"],["sins"],["sinsyne"],["sinter"],["sintered"],["sinters"],["sinuate"],["sinuated"],["sinuates"],["sinuous"],["sinus"],["sinuses"],["sinusoid"],["sip"],["sipe"],["siped"],["sipes"],["siphon"],["siphonal"],["siphoned"],["siphonic"],["siphons"],["siping"],["sipped"],["sipper"],["sippers"],["sippet"],["sippets"],["sipping"],["sips"],["sir"],["sirdar"],["sirdars"],["sire"],["sired"],["siree"],["sirees"],["siren"],["sirenian"],["sirens"],["sires"],["siring"],["sirloin"],["sirloins"],["sirocco"],["siroccos"],["sirra"],["sirrah"],["sirrahs"],["sirras"],["sirree"],["sirrees"],["sirs"],["sirup"],["sirups"],["sirupy"],["sirvente"],["sis"],["sisal"],["sisals"],["sises"],["siskin"],["siskins"],["sissier"],["sissies"],["sissiest"],["sissy"],["sissyish"],["sister"],["sistered"],["sisterly"],["sisters"],["sistra"],["sistroid"],["sistrum"],["sistrums"],["sit"],["sitar"],["sitarist"],["sitars"],["sitcom"],["sitcoms"],["site"],["sited"],["sites"],["sith"],["sithence"],["sithens"],["siting"],["sitology"],["sits"],["sitten"],["sitter"],["sitters"],["sitting"],["sittings"],["situate"],["situated"],["situates"],["situp"],["situps"],["situs"],["situses"],["sitzmark"],["siver"],["sivers"],["six"],["sixes"],["sixfold"],["sixmo"],["sixmos"],["sixpence"],["sixpenny"],["sixte"],["sixteen"],["sixteens"],["sixtes"],["sixth"],["sixthly"],["sixths"],["sixties"],["sixtieth"],["sixty"],["sizable"],["sizably"],["sizar"],["sizars"],["size"],["sizeable"],["sizeably"],["sized"],["sizer"],["sizers"],["sizes"],["sizier"],["siziest"],["siziness"],["sizing"],["sizings"],["sizy"],["sizzle"],["sizzled"],["sizzler"],["sizzlers"],["sizzles"],["sizzling"],["sjambok"],["sjamboks"],["ska"],["skag"],["skags"],["skald"],["skaldic"],["skalds"],["skas"],["skat"],["skate"],["skated"],["skater"],["skaters"],["skates"],["skating"],["skatings"],["skatol"],["skatole"],["skatoles"],["skatols"],["skats"],["skean"],["skeane"],["skeanes"],["skeans"],["skee"],["skeed"],["skeeing"],["skeen"],["skeens"],["skees"],["skeet"],["skeeter"],["skeeters"],["skeets"],["skeg"],["skegs"],["skeigh"],["skein"],["skeined"],["skeining"],["skeins"],["skeletal"],["skeleton"],["skellum"],["skellums"],["skelm"],["skelms"],["skelp"],["skelped"],["skelping"],["skelpit"],["skelps"],["skelter"],["skelters"],["skene"],["skenes"],["skep"],["skeps"],["skepsis"],["skeptic"],["skeptics"],["skerries"],["skerry"],["sketch"],["sketched"],["sketcher"],["sketches"],["sketchy"],["skew"],["skewback"],["skewbald"],["skewed"],["skewer"],["skewered"],["skewers"],["skewing"],["skewness"],["skews"],["ski"],["skiable"],["skiagram"],["skibob"],["skibobs"],["skid"],["skidded"],["skidder"],["skidders"],["skiddier"],["skidding"],["skiddoo"],["skiddoos"],["skiddy"],["skidoo"],["skidooed"],["skidoos"],["skids"],["skidway"],["skidways"],["skied"],["skier"],["skiers"],["skies"],["skiey"],["skiff"],["skiffle"],["skiffled"],["skiffles"],["skiffs"],["skiing"],["skiings"],["skijorer"],["skilful"],["skill"],["skilled"],["skilless"],["skillet"],["skillets"],["skillful"],["skilling"],["skills"],["skim"],["skimmed"],["skimmer"],["skimmers"],["skimming"],["skimo"],["skimos"],["skimp"],["skimped"],["skimpier"],["skimpily"],["skimping"],["skimps"],["skimpy"],["skims"],["skin"],["skinful"],["skinfuls"],["skinhead"],["skink"],["skinked"],["skinker"],["skinkers"],["skinking"],["skinks"],["skinless"],["skinlike"],["skinned"],["skinner"],["skinners"],["skinnier"],["skinning"],["skinny"],["skins"],["skint"],["skioring"],["skip"],["skipjack"],["skiplane"],["skipped"],["skipper"],["skippers"],["skippet"],["skippets"],["skipping"],["skips"],["skirl"],["skirled"],["skirling"],["skirls"],["skirmish"],["skirr"],["skirred"],["skirret"],["skirrets"],["skirring"],["skirrs"],["skirt"],["skirted"],["skirter"],["skirters"],["skirting"],["skirts"],["skis"],["skit"],["skite"],["skited"],["skites"],["skiting"],["skits"],["skitter"],["skitters"],["skittery"],["skittish"],["skittle"],["skittles"],["skive"],["skived"],["skiver"],["skivers"],["skives"],["skiving"],["skivvied"],["skivvies"],["skivvy"],["skiwear"],["skiwears"],["sklent"],["sklented"],["sklents"],["skoal"],["skoaled"],["skoaling"],["skoals"],["skookum"],["skreegh"],["skreeghs"],["skreigh"],["skreighs"],["skua"],["skuas"],["skulk"],["skulked"],["skulker"],["skulkers"],["skulking"],["skulks"],["skull"],["skullcap"],["skulled"],["skulls"],["skunk"],["skunked"],["skunking"],["skunks"],["sky"],["skyborne"],["skycap"],["skycaps"],["skydive"],["skydived"],["skydiver"],["skydives"],["skydove"],["skyed"],["skyey"],["skyhook"],["skyhooks"],["skying"],["skyjack"],["skyjacks"],["skylark"],["skylarks"],["skylight"],["skyline"],["skylines"],["skylit"],["skyman"],["skymen"],["skyphoi"],["skyphos"],["skysail"],["skysails"],["skywalk"],["skywalks"],["skyward"],["skywards"],["skyway"],["skyways"],["skywrite"],["skywrote"],["slab"],["slabbed"],["slabber"],["slabbers"],["slabbery"],["slabbing"],["slablike"],["slabs"],["slack"],["slacked"],["slacken"],["slackens"],["slacker"],["slackers"],["slackest"],["slacking"],["slackly"],["slacks"],["slag"],["slagged"],["slaggier"],["slagging"],["slaggy"],["slags"],["slain"],["slainte"],["slakable"],["slake"],["slaked"],["slaker"],["slakers"],["slakes"],["slaking"],["slalom"],["slalomed"],["slaloms"],["slam"],["slammed"],["slammer"],["slammers"],["slamming"],["slams"],["slander"],["slanders"],["slang"],["slanged"],["slangier"],["slangily"],["slanging"],["slangs"],["slangy"],["slank"],["slant"],["slanted"],["slanting"],["slants"],["slanty"],["slap"],["slapdash"],["slapjack"],["slapped"],["slapper"],["slappers"],["slapping"],["slaps"],["slash"],["slashed"],["slasher"],["slashers"],["slashes"],["slashing"],["slat"],["slatch"],["slatches"],["slate"],["slated"],["slater"],["slaters"],["slates"],["slatey"],["slather"],["slathers"],["slatier"],["slatiest"],["slating"],["slatings"],["slats"],["slatted"],["slattern"],["slatting"],["slaty"],["slave"],["slaved"],["slaver"],["slavered"],["slaverer"],["slavers"],["slavery"],["slaves"],["slavey"],["slaveys"],["slaving"],["slavish"],["slaw"],["slaws"],["slay"],["slayed"],["slayer"],["slayers"],["slaying"],["slays"],["sleave"],["sleaved"],["sleaves"],["sleaving"],["sleaze"],["sleazes"],["sleazier"],["sleazily"],["sleazo"],["sleazy"],["sled"],["sledded"],["sledder"],["sledders"],["sledding"],["sledge"],["sledged"],["sledges"],["sledging"],["sleds"],["sleek"],["sleeked"],["sleeken"],["sleekens"],["sleeker"],["sleekest"],["sleekier"],["sleeking"],["sleekit"],["sleekly"],["sleeks"],["sleeky"],["sleep"],["sleeper"],["sleepers"],["sleepier"],["sleepily"],["sleeping"],["sleeps"],["sleepy"],["sleet"],["sleeted"],["sleetier"],["sleeting"],["sleets"],["sleety"],["sleeve"],["sleeved"],["sleeves"],["sleeving"],["sleigh"],["sleighed"],["sleigher"],["sleighs"],["sleight"],["sleights"],["slender"],["slept"],["sleuth"],["sleuthed"],["sleuths"],["slew"],["slewed"],["slewing"],["slews"],["slice"],["sliced"],["slicer"],["slicers"],["slices"],["slicing"],["slick"],["slicked"],["slicker"],["slickers"],["slickest"],["slicking"],["slickly"],["slicks"],["slid"],["slidable"],["slidden"],["slide"],["slider"],["sliders"],["slides"],["slideway"],["sliding"],["slier"],["sliest"],["slight"],["slighted"],["slighter"],["slightly"],["slights"],["slily"],["slim"],["slime"],["slimed"],["slimes"],["slimier"],["slimiest"],["slimily"],["sliming"],["slimly"],["slimmed"],["slimmer"],["slimmest"],["slimming"],["slimness"],["slimpsy"],["slims"],["slimsier"],["slimsy"],["slimy"],["sling"],["slinger"],["slingers"],["slinging"],["slings"],["slink"],["slinked"],["slinkier"],["slinkily"],["slinking"],["slinks"],["slinky"],["slip"],["slipcase"],["slipe"],["sliped"],["slipes"],["slipform"],["sliping"],["slipknot"],["slipless"],["slipout"],["slipouts"],["slipover"],["slippage"],["slipped"],["slipper"],["slippers"],["slippery"],["slippier"],["slipping"],["slippy"],["slips"],["slipshod"],["slipslop"],["slipsole"],["slipt"],["slipup"],["slipups"],["slipware"],["slipway"],["slipways"],["slit"],["slither"],["slithers"],["slithery"],["slitless"],["slits"],["slitted"],["slitter"],["slitters"],["slitting"],["sliver"],["slivered"],["sliverer"],["slivers"],["slivovic"],["slob"],["slobber"],["slobbers"],["slobbery"],["slobbish"],["slobs"],["sloe"],["sloes"],["slog"],["slogan"],["slogans"],["slogged"],["slogger"],["sloggers"],["slogging"],["slogs"],["sloid"],["sloids"],["slojd"],["slojds"],["sloop"],["sloops"],["slop"],["slope"],["sloped"],["sloper"],["slopers"],["slopes"],["sloping"],["slopped"],["sloppier"],["sloppily"],["slopping"],["sloppy"],["slops"],["slopwork"],["slosh"],["sloshed"],["sloshes"],["sloshier"],["sloshing"],["sloshy"],["slot"],["slotback"],["sloth"],["slothful"],["sloths"],["slots"],["slotted"],["slotting"],["slouch"],["slouched"],["sloucher"],["slouches"],["slouchy"],["slough"],["sloughed"],["sloughs"],["sloughy"],["sloven"],["slovenly"],["slovens"],["slow"],["slowdown"],["slowed"],["slower"],["slowest"],["slowing"],["slowish"],["slowly"],["slowness"],["slowpoke"],["slows"],["slowworm"],["sloyd"],["sloyds"],["slub"],["slubbed"],["slubber"],["slubbers"],["slubbing"],["slubs"],["sludge"],["sludges"],["sludgier"],["sludgy"],["slue"],["slued"],["slues"],["sluff"],["sluffed"],["sluffing"],["sluffs"],["slug"],["slugabed"],["slugfest"],["sluggard"],["slugged"],["slugger"],["sluggers"],["slugging"],["sluggish"],["slugs"],["sluice"],["sluiced"],["sluices"],["sluicing"],["sluicy"],["sluing"],["slum"],["slumber"],["slumbers"],["slumbery"],["slumgum"],["slumgums"],["slumism"],["slumisms"],["slumlord"],["slummed"],["slummer"],["slummers"],["slummier"],["slumming"],["slummy"],["slump"],["slumped"],["slumping"],["slumps"],["slums"],["slung"],["slunk"],["slur"],["slurb"],["slurban"],["slurbs"],["slurp"],["slurped"],["slurping"],["slurps"],["slurred"],["slurried"],["slurries"],["slurring"],["slurry"],["slurs"],["slush"],["slushed"],["slushes"],["slushier"],["slushily"],["slushing"],["slushy"],["slut"],["sluts"],["sluttish"],["sly"],["slyboots"],["slyer"],["slyest"],["slyly"],["slyness"],["slype"],["slypes"],["smack"],["smacked"],["smacker"],["smackers"],["smacking"],["smacks"],["small"],["smallage"],["smaller"],["smallest"],["smallish"],["smallpox"],["smalls"],["smalt"],["smalti"],["smaltine"],["smaltite"],["smalto"],["smaltos"],["smalts"],["smaragd"],["smaragde"],["smaragds"],["smarm"],["smarmier"],["smarms"],["smarmy"],["smart"],["smartass"],["smarted"],["smarten"],["smartens"],["smarter"],["smartest"],["smartie"],["smarties"],["smarting"],["smartly"],["smarts"],["smarty"],["smash"],["smashed"],["smasher"],["smashers"],["smashes"],["smashing"],["smashup"],["smashups"],["smatter"],["smatters"],["smaze"],["smazes"],["smear"],["smeared"],["smearer"],["smearers"],["smearier"],["smearing"],["smears"],["smeary"],["smectic"],["smeddum"],["smeddums"],["smeek"],["smeeked"],["smeeking"],["smeeks"],["smegma"],["smegmas"],["smell"],["smelled"],["smeller"],["smellers"],["smellier"],["smelling"],["smells"],["smelly"],["smelt"],["smelted"],["smelter"],["smelters"],["smeltery"],["smelting"],["smelts"],["smerk"],["smerked"],["smerking"],["smerks"],["smew"],["smews"],["smidgen"],["smidgens"],["smidgeon"],["smidgin"],["smidgins"],["smilax"],["smilaxes"],["smile"],["smiled"],["smiler"],["smilers"],["smiles"],["smiley"],["smiling"],["smirch"],["smirched"],["smirches"],["smirk"],["smirked"],["smirker"],["smirkers"],["smirkier"],["smirking"],["smirks"],["smirky"],["smit"],["smite"],["smiter"],["smiters"],["smites"],["smith"],["smithers"],["smithery"],["smithies"],["smiths"],["smithy"],["smiting"],["smitten"],["smock"],["smocked"],["smocking"],["smocks"],["smog"],["smoggier"],["smoggy"],["smogless"],["smogs"],["smokable"],["smoke"],["smoked"],["smokepot"],["smoker"],["smokers"],["smokes"],["smokey"],["smokier"],["smokiest"],["smokily"],["smoking"],["smoky"],["smolder"],["smolders"],["smolt"],["smolts"],["smooch"],["smooched"],["smooches"],["smoochy"],["smooth"],["smoothed"],["smoothen"],["smoother"],["smoothie"],["smoothly"],["smooths"],["smoothy"],["smote"],["smother"],["smothers"],["smothery"],["smoulder"],["smudge"],["smudged"],["smudges"],["smudgier"],["smudgily"],["smudging"],["smudgy"],["smug"],["smugger"],["smuggest"],["smuggle"],["smuggled"],["smuggler"],["smuggles"],["smugly"],["smugness"],["smut"],["smutch"],["smutched"],["smutches"],["smutchy"],["smuts"],["smutted"],["smuttier"],["smuttily"],["smutting"],["smutty"],["snack"],["snacked"],["snacking"],["snacks"],["snaffle"],["snaffled"],["snaffles"],["snafu"],["snafued"],["snafuing"],["snafus"],["snag"],["snagged"],["snaggier"],["snagging"],["snaggy"],["snaglike"],["snags"],["snail"],["snailed"],["snailing"],["snails"],["snake"],["snaked"],["snakes"],["snakey"],["snakier"],["snakiest"],["snakily"],["snaking"],["snaky"],["snap"],["snapback"],["snapless"],["snapped"],["snapper"],["snappers"],["snappier"],["snappily"],["snapping"],["snappish"],["snappy"],["snaps"],["snapshot"],["snapweed"],["snare"],["snared"],["snarer"],["snarers"],["snares"],["snaring"],["snark"],["snarks"],["snarl"],["snarled"],["snarler"],["snarlers"],["snarlier"],["snarling"],["snarls"],["snarly"],["snash"],["snashes"],["snatch"],["snatched"],["snatcher"],["snatches"],["snatchy"],["snath"],["snathe"],["snathes"],["snaths"],["snaw"],["snawed"],["snawing"],["snaws"],["snazzier"],["snazzy"],["sneak"],["sneaked"],["sneaker"],["sneakers"],["sneakier"],["sneakily"],["sneaking"],["sneaks"],["sneaky"],["sneap"],["sneaped"],["sneaping"],["sneaps"],["sneck"],["snecks"],["sned"],["snedded"],["snedding"],["sneds"],["sneer"],["sneered"],["sneerer"],["sneerers"],["sneerful"],["sneering"],["sneers"],["sneesh"],["sneeshes"],["sneeze"],["sneezed"],["sneezer"],["sneezers"],["sneezes"],["sneezier"],["sneezing"],["sneezy"],["snell"],["snelled"],["sneller"],["snellest"],["snelling"],["snells"],["snib"],["snibbed"],["snibbing"],["snibs"],["snick"],["snicked"],["snicker"],["snickers"],["snickery"],["snicking"],["snicks"],["snide"],["snidely"],["snider"],["snidest"],["sniff"],["sniffed"],["sniffer"],["sniffers"],["sniffier"],["sniffily"],["sniffing"],["sniffish"],["sniffle"],["sniffled"],["sniffler"],["sniffles"],["sniffs"],["sniffy"],["snifter"],["snifters"],["snigger"],["sniggers"],["sniggle"],["sniggled"],["sniggler"],["sniggles"],["snip"],["snipe"],["sniped"],["sniper"],["snipers"],["snipes"],["sniping"],["snipped"],["snipper"],["snippers"],["snippet"],["snippets"],["snippety"],["snippier"],["snippily"],["snipping"],["snippy"],["snips"],["snit"],["snitch"],["snitched"],["snitcher"],["snitches"],["snits"],["snivel"],["sniveled"],["sniveler"],["snivels"],["snob"],["snobbery"],["snobbier"],["snobbily"],["snobbish"],["snobbism"],["snobby"],["snobs"],["snog"],["snogged"],["snogging"],["snogs"],["snood"],["snooded"],["snooding"],["snoods"],["snook"],["snooked"],["snooker"],["snookers"],["snooking"],["snooks"],["snool"],["snooled"],["snooling"],["snools"],["snoop"],["snooped"],["snooper"],["snoopers"],["snoopier"],["snoopily"],["snooping"],["snoops"],["snoopy"],["snoot"],["snooted"],["snootier"],["snootily"],["snooting"],["snoots"],["snooty"],["snooze"],["snoozed"],["snoozer"],["snoozers"],["snoozes"],["snoozier"],["snoozing"],["snoozle"],["snoozled"],["snoozles"],["snoozy"],["snore"],["snored"],["snorer"],["snorers"],["snores"],["snoring"],["snorkel"],["snorkels"],["snort"],["snorted"],["snorter"],["snorters"],["snorting"],["snorts"],["snot"],["snots"],["snottier"],["snottily"],["snotty"],["snout"],["snouted"],["snoutier"],["snouting"],["snoutish"],["snouts"],["snouty"],["snow"],["snowball"],["snowbank"],["snowbell"],["snowbelt"],["snowbird"],["snowbush"],["snowcap"],["snowcaps"],["snowdrop"],["snowed"],["snowfall"],["snowier"],["snowiest"],["snowily"],["snowing"],["snowland"],["snowless"],["snowlike"],["snowman"],["snowmelt"],["snowmen"],["snowmold"],["snowpack"],["snowplow"],["snows"],["snowshed"],["snowshoe"],["snowsuit"],["snowy"],["snub"],["snubbed"],["snubber"],["snubbers"],["snubbier"],["snubbing"],["snubby"],["snubness"],["snubs"],["snuck"],["snuff"],["snuffbox"],["snuffed"],["snuffer"],["snuffers"],["snuffier"],["snuffily"],["snuffing"],["snuffle"],["snuffled"],["snuffler"],["snuffles"],["snuffly"],["snuffs"],["snuffy"],["snug"],["snugged"],["snugger"],["snuggery"],["snuggest"],["snuggies"],["snugging"],["snuggle"],["snuggled"],["snuggles"],["snugly"],["snugness"],["snugs"],["snye"],["snyes"],["so"],["soak"],["soakage"],["soakages"],["soaked"],["soaker"],["soakers"],["soaking"],["soaks"],["soap"],["soapbark"],["soapbox"],["soaped"],["soaper"],["soapers"],["soapier"],["soapiest"],["soapily"],["soaping"],["soapless"],["soaplike"],["soaps"],["soapsuds"],["soapwort"],["soapy"],["soar"],["soared"],["soarer"],["soarers"],["soaring"],["soarings"],["soars"],["soave"],["soaves"],["sob"],["sobbed"],["sobber"],["sobbers"],["sobbing"],["sobeit"],["sober"],["sobered"],["soberer"],["soberest"],["sobering"],["soberize"],["soberly"],["sobers"],["sobful"],["sobriety"],["sobs"],["socage"],["socager"],["socagers"],["socages"],["soccage"],["soccages"],["soccer"],["soccers"],["sociable"],["sociably"],["social"],["socially"],["socials"],["societal"],["society"],["sock"],["socked"],["socket"],["socketed"],["sockets"],["sockeye"],["sockeyes"],["socking"],["sockless"],["sockman"],["sockmen"],["socko"],["socks"],["socle"],["socles"],["socman"],["socmen"],["sod"],["soda"],["sodaless"],["sodalist"],["sodalite"],["sodality"],["sodamide"],["sodas"],["sodded"],["sodden"],["soddened"],["soddenly"],["soddens"],["soddies"],["sodding"],["soddy"],["sodic"],["sodium"],["sodiums"],["sodom"],["sodomies"],["sodomite"],["sodomize"],["sodoms"],["sodomy"],["sods"],["soever"],["sofa"],["sofar"],["sofars"],["sofas"],["soffit"],["soffits"],["soft"],["softa"],["softas"],["softback"],["softball"],["soften"],["softened"],["softener"],["softens"],["softer"],["softest"],["softhead"],["softie"],["softies"],["softish"],["softly"],["softness"],["softs"],["software"],["softwood"],["softy"],["sogged"],["soggier"],["soggiest"],["soggily"],["soggy"],["soigne"],["soignee"],["soil"],["soilage"],["soilages"],["soiled"],["soiling"],["soilless"],["soils"],["soilure"],["soilures"],["soiree"],["soirees"],["soja"],["sojas"],["sojourn"],["sojourns"],["soke"],["sokeman"],["sokemen"],["sokes"],["sokol"],["sokols"],["sol"],["sola"],["solace"],["solaced"],["solacer"],["solacers"],["solaces"],["solacing"],["solan"],["soland"],["solander"],["solands"],["solanin"],["solanine"],["solanins"],["solano"],["solanos"],["solans"],["solanum"],["solanums"],["solar"],["solaria"],["solarise"],["solarism"],["solarium"],["solarize"],["solate"],["solated"],["solates"],["solatia"],["solating"],["solation"],["solatium"],["sold"],["soldan"],["soldans"],["solder"],["soldered"],["solderer"],["solders"],["soldi"],["soldier"],["soldiers"],["soldiery"],["soldo"],["sole"],["solecise"],["solecism"],["solecist"],["solecize"],["soled"],["solei"],["soleless"],["solely"],["solemn"],["solemner"],["solemnly"],["soleness"],["solenoid"],["soleret"],["solerets"],["soles"],["soleus"],["solfege"],["solfeges"],["solfeggi"],["solgel"],["soli"],["solicit"],["solicits"],["solid"],["solidago"],["solidary"],["solider"],["solidest"],["solidi"],["solidify"],["solidity"],["solidly"],["solids"],["solidus"],["soling"],["solion"],["solions"],["soliquid"],["solitary"],["soliton"],["solitons"],["solitude"],["solleret"],["solo"],["soloed"],["soloing"],["soloist"],["soloists"],["solon"],["solonets"],["solonetz"],["solons"],["solos"],["sols"],["solstice"],["soluble"],["solubles"],["solubly"],["solum"],["solums"],["solus"],["solute"],["solutes"],["solution"],["solvable"],["solvate"],["solvated"],["solvates"],["solve"],["solved"],["solvency"],["solvent"],["solvents"],["solver"],["solvers"],["solves"],["solving"],["soma"],["somas"],["somata"],["somatic"],["somber"],["somberly"],["sombre"],["sombrely"],["sombrero"],["sombrous"],["some"],["somebody"],["someday"],["somedeal"],["somehow"],["someone"],["someones"],["somerset"],["sometime"],["someway"],["someways"],["somewhat"],["somewhen"],["somewise"],["somital"],["somite"],["somites"],["somitic"],["son"],["sonance"],["sonances"],["sonant"],["sonantal"],["sonantic"],["sonants"],["sonar"],["sonarman"],["sonarmen"],["sonars"],["sonata"],["sonatas"],["sonatina"],["sonatine"],["sonde"],["sonder"],["sonders"],["sondes"],["sone"],["sones"],["song"],["songbird"],["songbook"],["songfest"],["songful"],["songless"],["songlike"],["songs"],["songster"],["sonhood"],["sonhoods"],["sonic"],["sonicate"],["sonics"],["sonless"],["sonlike"],["sonly"],["sonnet"],["sonneted"],["sonnets"],["sonnies"],["sonny"],["sonobuoy"],["sonogram"],["sonorant"],["sonority"],["sonorous"],["sonovox"],["sons"],["sonship"],["sonships"],["sonsie"],["sonsier"],["sonsiest"],["sonsy"],["soochong"],["sooey"],["sook"],["sooks"],["soon"],["sooner"],["sooners"],["soonest"],["soot"],["sooted"],["sooth"],["soothe"],["soothed"],["soother"],["soothers"],["soothes"],["soothest"],["soothing"],["soothly"],["sooths"],["soothsay"],["sootier"],["sootiest"],["sootily"],["sooting"],["soots"],["sooty"],["sop"],["soph"],["sophies"],["sophism"],["sophisms"],["sophist"],["sophists"],["sophs"],["sophy"],["sopite"],["sopited"],["sopites"],["sopiting"],["sopor"],["sopors"],["sopped"],["soppier"],["soppiest"],["sopping"],["soppy"],["soprani"],["soprano"],["sopranos"],["sops"],["sora"],["soras"],["sorb"],["sorbable"],["sorbate"],["sorbates"],["sorbed"],["sorbent"],["sorbents"],["sorbet"],["sorbets"],["sorbic"],["sorbing"],["sorbitol"],["sorbose"],["sorboses"],["sorbs"],["sorcerer"],["sorcery"],["sord"],["sordid"],["sordidly"],["sordine"],["sordines"],["sordini"],["sordino"],["sordor"],["sordors"],["sords"],["sore"],["sorehead"],["sorel"],["sorels"],["sorely"],["soreness"],["sorer"],["sores"],["sorest"],["sorgho"],["sorghos"],["sorghum"],["sorghums"],["sorgo"],["sorgos"],["sori"],["soricine"],["soring"],["sorings"],["sorites"],["soritic"],["sorn"],["sorned"],["sorner"],["sorners"],["sorning"],["sorns"],["soroche"],["soroches"],["sororal"],["sororate"],["sorority"],["soroses"],["sorosis"],["sorption"],["sorptive"],["sorrel"],["sorrels"],["sorrier"],["sorriest"],["sorrily"],["sorrow"],["sorrowed"],["sorrower"],["sorrows"],["sorry"],["sort"],["sortable"],["sortably"],["sorted"],["sorter"],["sorters"],["sortie"],["sortied"],["sorties"],["sorting"],["sorts"],["sorus"],["sos"],["sot"],["soth"],["soths"],["sotol"],["sotols"],["sots"],["sotted"],["sottish"],["sou"],["souari"],["souaris"],["soubise"],["soubises"],["soucar"],["soucars"],["souchong"],["soudan"],["soudans"],["souffle"],["souffled"],["souffles"],["sough"],["soughed"],["soughing"],["soughs"],["sought"],["souk"],["souks"],["soul"],["souled"],["soulful"],["soulless"],["soullike"],["souls"],["sound"],["soundbox"],["sounded"],["sounder"],["sounders"],["soundest"],["sounding"],["soundly"],["sounds"],["soup"],["soupcon"],["soupcons"],["souped"],["soupier"],["soupiest"],["souping"],["soups"],["soupy"],["sour"],["sourball"],["source"],["sources"],["sourdine"],["soured"],["sourer"],["sourest"],["souring"],["sourish"],["sourly"],["sourness"],["sourpuss"],["sours"],["soursop"],["soursops"],["sourwood"],["sous"],["souse"],["soused"],["souses"],["sousing"],["soutache"],["soutane"],["soutanes"],["souter"],["souters"],["south"],["southed"],["souther"],["southern"],["southers"],["southing"],["southpaw"],["southron"],["souths"],["souvenir"],["souvlaki"],["soviet"],["soviets"],["sovkhoz"],["sovkhozy"],["sovran"],["sovranly"],["sovrans"],["sovranty"],["sow"],["sowable"],["sowans"],["sowar"],["sowars"],["sowbelly"],["sowbread"],["sowcar"],["sowcars"],["sowed"],["sowens"],["sower"],["sowers"],["sowing"],["sown"],["sows"],["sox"],["soy"],["soya"],["soyas"],["soybean"],["soybeans"],["soymilk"],["soymilks"],["soys"],["soyuz"],["soyuzes"],["sozin"],["sozine"],["sozines"],["sozins"],["sozzled"],["spa"],["space"],["spaced"],["spaceman"],["spacemen"],["spacer"],["spacers"],["spaces"],["spacey"],["spacial"],["spacier"],["spaciest"],["spacing"],["spacings"],["spacious"],["spackle"],["spackled"],["spackles"],["spacy"],["spade"],["spaded"],["spadeful"],["spader"],["spaders"],["spades"],["spadices"],["spadille"],["spading"],["spadix"],["spadixes"],["spado"],["spadones"],["spae"],["spaed"],["spaeing"],["spaeings"],["spaes"],["spaetzle"],["spagyric"],["spahee"],["spahees"],["spahi"],["spahis"],["spail"],["spails"],["spait"],["spaits"],["spake"],["spale"],["spales"],["spall"],["spalled"],["spaller"],["spallers"],["spalling"],["spalls"],["spalpeen"],["span"],["spancel"],["spancels"],["spandex"],["spandrel"],["spandril"],["spang"],["spangle"],["spangled"],["spangles"],["spangly"],["spaniel"],["spaniels"],["spank"],["spanked"],["spanker"],["spankers"],["spanking"],["spanks"],["spanless"],["spanned"],["spanner"],["spanners"],["spanning"],["spans"],["spanworm"],["spar"],["sparable"],["spare"],["spared"],["sparely"],["sparer"],["sparerib"],["sparers"],["spares"],["sparest"],["sparge"],["sparged"],["sparger"],["spargers"],["sparges"],["sparging"],["sparid"],["sparids"],["sparing"],["spark"],["sparked"],["sparker"],["sparkers"],["sparkier"],["sparkily"],["sparking"],["sparkish"],["sparkle"],["sparkled"],["sparkler"],["sparkles"],["sparks"],["sparky"],["sparlike"],["sparling"],["sparoid"],["sparoids"],["sparred"],["sparrier"],["sparring"],["sparrow"],["sparrows"],["sparry"],["spars"],["sparse"],["sparsely"],["sparser"],["sparsest"],["sparsity"],["spas"],["spasm"],["spasms"],["spastic"],["spastics"],["spat"],["spate"],["spates"],["spathal"],["spathe"],["spathed"],["spathes"],["spathic"],["spathose"],["spatial"],["spats"],["spatted"],["spatter"],["spatters"],["spatting"],["spatula"],["spatular"],["spatulas"],["spatzle"],["spavie"],["spavies"],["spaviet"],["spavin"],["spavined"],["spavins"],["spawn"],["spawned"],["spawner"],["spawners"],["spawning"],["spawns"],["spay"],["spayed"],["spaying"],["spays"],["spaz"],["spazes"],["speak"],["speaker"],["speakers"],["speaking"],["speaks"],["spean"],["speaned"],["speaning"],["speans"],["spear"],["speared"],["spearer"],["spearers"],["spearing"],["spearman"],["spearmen"],["spears"],["spec"],["specced"],["speccing"],["special"],["specials"],["speciate"],["specie"],["species"],["specific"],["specify"],["specimen"],["specious"],["speck"],["specked"],["specking"],["speckle"],["speckled"],["speckles"],["specks"],["specs"],["spectate"],["specter"],["specters"],["spectra"],["spectral"],["spectre"],["spectres"],["spectrum"],["specula"],["specular"],["speculum"],["sped"],["speech"],["speeches"],["speed"],["speeded"],["speeder"],["speeders"],["speedier"],["speedily"],["speeding"],["speedo"],["speedos"],["speeds"],["speedup"],["speedups"],["speedway"],["speedy"],["speel"],["speeled"],["speeling"],["speels"],["speer"],["speered"],["speering"],["speers"],["speil"],["speiled"],["speiling"],["speils"],["speir"],["speired"],["speiring"],["speirs"],["speise"],["speises"],["speiss"],["speisses"],["spelaean"],["spelean"],["spell"],["spelled"],["speller"],["spellers"],["spelling"],["spells"],["spelt"],["spelter"],["spelters"],["spelts"],["speltz"],["speltzes"],["spelunk"],["spelunks"],["spence"],["spencer"],["spencers"],["spences"],["spend"],["spender"],["spenders"],["spending"],["spends"],["spense"],["spenses"],["spent"],["sperm"],["spermary"],["spermic"],["spermine"],["spermous"],["sperms"],["spew"],["spewed"],["spewer"],["spewers"],["spewing"],["spews"],["sphagnum"],["sphene"],["sphenes"],["sphenic"],["sphenoid"],["spheral"],["sphere"],["sphered"],["spheres"],["spheric"],["spherics"],["spherier"],["sphering"],["spheroid"],["spherule"],["sphery"],["sphinges"],["sphingid"],["sphinx"],["sphinxes"],["sphygmic"],["sphygmus"],["spic"],["spica"],["spicae"],["spicas"],["spicate"],["spicated"],["spiccato"],["spice"],["spiced"],["spicer"],["spicers"],["spicery"],["spices"],["spicey"],["spicier"],["spiciest"],["spicily"],["spicing"],["spick"],["spicks"],["spics"],["spicula"],["spiculae"],["spicular"],["spicule"],["spicules"],["spiculum"],["spicy"],["spider"],["spiders"],["spidery"],["spied"],["spiegel"],["spiegels"],["spiel"],["spieled"],["spieler"],["spielers"],["spieling"],["spiels"],["spier"],["spiered"],["spiering"],["spiers"],["spies"],["spiff"],["spiffed"],["spiffier"],["spiffily"],["spiffing"],["spiffs"],["spiffy"],["spigot"],["spigots"],["spik"],["spike"],["spiked"],["spikelet"],["spiker"],["spikers"],["spikes"],["spikier"],["spikiest"],["spikily"],["spiking"],["spiks"],["spiky"],["spile"],["spiled"],["spiles"],["spilikin"],["spiling"],["spilings"],["spill"],["spillage"],["spilled"],["spiller"],["spillers"],["spilling"],["spills"],["spillway"],["spilt"],["spilth"],["spilths"],["spin"],["spinach"],["spinage"],["spinages"],["spinal"],["spinally"],["spinals"],["spinate"],["spindle"],["spindled"],["spindler"],["spindles"],["spindly"],["spine"],["spined"],["spinel"],["spinelle"],["spinels"],["spines"],["spinet"],["spinets"],["spinier"],["spiniest"],["spinifex"],["spinless"],["spinner"],["spinners"],["spinnery"],["spinney"],["spinneys"],["spinnies"],["spinning"],["spinny"],["spinoff"],["spinoffs"],["spinor"],["spinors"],["spinose"],["spinous"],["spinout"],["spinouts"],["spins"],["spinster"],["spinto"],["spintos"],["spinula"],["spinulae"],["spinule"],["spinules"],["spiny"],["spiracle"],["spiraea"],["spiraeas"],["spiral"],["spiraled"],["spirally"],["spirals"],["spirant"],["spirants"],["spire"],["spirea"],["spireas"],["spired"],["spirem"],["spireme"],["spiremes"],["spirems"],["spires"],["spirier"],["spiriest"],["spirilla"],["spiring"],["spirit"],["spirited"],["spirits"],["spiroid"],["spirt"],["spirted"],["spirting"],["spirts"],["spirula"],["spirulae"],["spirulas"],["spiry"],["spit"],["spital"],["spitals"],["spitball"],["spite"],["spited"],["spiteful"],["spites"],["spitfire"],["spiting"],["spits"],["spitted"],["spitter"],["spitters"],["spitting"],["spittle"],["spittles"],["spittoon"],["spitz"],["spitzes"],["spiv"],["spivs"],["splake"],["splakes"],["splash"],["splashed"],["splasher"],["splashes"],["splashy"],["splat"],["splats"],["splatted"],["splatter"],["splay"],["splayed"],["splaying"],["splays"],["spleen"],["spleens"],["spleeny"],["splendid"],["splendor"],["splenia"],["splenial"],["splenic"],["splenii"],["splenium"],["splenius"],["splent"],["splents"],["splice"],["spliced"],["splicer"],["splicers"],["splices"],["splicing"],["spliff"],["spliffs"],["spline"],["splined"],["splines"],["splining"],["splint"],["splinted"],["splinter"],["splints"],["split"],["splits"],["splitter"],["splodge"],["splodged"],["splodges"],["splore"],["splores"],["splosh"],["sploshed"],["sploshes"],["splotch"],["splotchy"],["splurge"],["splurged"],["splurger"],["splurges"],["splurgy"],["splutter"],["spode"],["spodes"],["spoil"],["spoilage"],["spoiled"],["spoiler"],["spoilers"],["spoiling"],["spoils"],["spoilt"],["spoke"],["spoked"],["spoken"],["spokes"],["spoking"],["spoliate"],["spondaic"],["spondee"],["spondees"],["sponge"],["sponged"],["sponger"],["spongers"],["sponges"],["spongier"],["spongily"],["spongin"],["sponging"],["spongins"],["spongy"],["sponsal"],["sponsion"],["sponson"],["sponsons"],["sponsor"],["sponsors"],["spontoon"],["spoof"],["spoofed"],["spoofer"],["spoofers"],["spoofery"],["spoofing"],["spoofs"],["spoofy"],["spook"],["spooked"],["spookery"],["spookier"],["spookily"],["spooking"],["spookish"],["spooks"],["spooky"],["spool"],["spooled"],["spooling"],["spools"],["spoon"],["spooned"],["spooney"],["spooneys"],["spoonful"],["spoonier"],["spoonies"],["spoonily"],["spooning"],["spoons"],["spoony"],["spoor"],["spoored"],["spooring"],["spoors"],["sporadic"],["sporal"],["spore"],["spored"],["spores"],["sporing"],["sporoid"],["sporozoa"],["sporran"],["sporrans"],["sport"],["sported"],["sporter"],["sporters"],["sportful"],["sportier"],["sportily"],["sporting"],["sportive"],["sports"],["sporty"],["sporular"],["sporule"],["sporules"],["spot"],["spotless"],["spotlit"],["spots"],["spotted"],["spotter"],["spotters"],["spottier"],["spottily"],["spotting"],["spotty"],["spousal"],["spousals"],["spouse"],["spoused"],["spouses"],["spousing"],["spout"],["spouted"],["spouter"],["spouters"],["spouting"],["spouts"],["spraddle"],["sprag"],["sprags"],["sprain"],["sprained"],["sprains"],["sprang"],["sprangs"],["sprat"],["sprats"],["sprattle"],["sprawl"],["sprawled"],["sprawler"],["sprawls"],["sprawly"],["spray"],["sprayed"],["sprayer"],["sprayers"],["spraying"],["sprays"],["spread"],["spreader"],["spreads"],["spree"],["sprees"],["sprent"],["sprier"],["spriest"],["sprig"],["sprigged"],["sprigger"],["spriggy"],["spright"],["sprights"],["sprigs"],["spring"],["springal"],["springe"],["springed"],["springer"],["springes"],["springs"],["springy"],["sprinkle"],["sprint"],["sprinted"],["sprinter"],["sprints"],["sprit"],["sprite"],["sprites"],["sprits"],["spritz"],["spritzed"],["spritzer"],["spritzes"],["sprocket"],["sprout"],["sprouted"],["sprouts"],["spruce"],["spruced"],["sprucely"],["sprucer"],["spruces"],["sprucest"],["sprucier"],["sprucing"],["sprucy"],["sprue"],["sprues"],["sprug"],["sprugs"],["sprung"],["spry"],["spryer"],["spryest"],["spryly"],["spryness"],["spud"],["spudded"],["spudder"],["spudders"],["spudding"],["spuds"],["spue"],["spued"],["spues"],["spuing"],["spume"],["spumed"],["spumes"],["spumier"],["spumiest"],["spuming"],["spumone"],["spumones"],["spumoni"],["spumonis"],["spumous"],["spumy"],["spun"],["spunk"],["spunked"],["spunkie"],["spunkier"],["spunkies"],["spunkily"],["spunking"],["spunks"],["spunky"],["spur"],["spurgall"],["spurge"],["spurges"],["spurious"],["spurn"],["spurned"],["spurner"],["spurners"],["spurning"],["spurns"],["spurred"],["spurrer"],["spurrers"],["spurrey"],["spurreys"],["spurrier"],["spurries"],["spurring"],["spurry"],["spurs"],["spurt"],["spurted"],["spurting"],["spurtle"],["spurtles"],["spurts"],["sputa"],["sputnik"],["sputniks"],["sputter"],["sputters"],["sputum"],["spy"],["spyglass"],["spying"],["squab"],["squabble"],["squabby"],["squabs"],["squad"],["squadded"],["squadron"],["squads"],["squalene"],["squalid"],["squall"],["squalled"],["squaller"],["squalls"],["squally"],["squalor"],["squalors"],["squama"],["squamae"],["squamate"],["squamose"],["squamous"],["squander"],["square"],["squared"],["squarely"],["squarer"],["squarers"],["squares"],["squarest"],["squaring"],["squarish"],["squash"],["squashed"],["squasher"],["squashes"],["squashy"],["squat"],["squatly"],["squats"],["squatted"],["squatter"],["squatty"],["squaw"],["squawk"],["squawked"],["squawker"],["squawks"],["squaws"],["squeak"],["squeaked"],["squeaker"],["squeaks"],["squeaky"],["squeal"],["squealed"],["squealer"],["squeals"],["squeegee"],["squeeze"],["squeezed"],["squeezer"],["squeezes"],["squeg"],["squegged"],["squegs"],["squelch"],["squelchy"],["squib"],["squibbed"],["squibs"],["squid"],["squidded"],["squids"],["squiffed"],["squiffy"],["squiggle"],["squiggly"],["squilgee"],["squill"],["squilla"],["squillae"],["squillas"],["squills"],["squinch"],["squinny"],["squint"],["squinted"],["squinter"],["squints"],["squinty"],["squire"],["squired"],["squireen"],["squires"],["squiring"],["squirish"],["squirm"],["squirmed"],["squirmer"],["squirms"],["squirmy"],["squirrel"],["squirt"],["squirted"],["squirter"],["squirts"],["squish"],["squished"],["squishes"],["squishy"],["squoosh"],["squooshy"],["squush"],["squushed"],["squushes"],["sraddha"],["sraddhas"],["sradha"],["sradhas"],["sri"],["sris"],["stab"],["stabbed"],["stabber"],["stabbers"],["stabbing"],["stabile"],["stabiles"],["stable"],["stabled"],["stabler"],["stablers"],["stables"],["stablest"],["stabling"],["stablish"],["stably"],["stabs"],["staccati"],["staccato"],["stack"],["stacked"],["stacker"],["stackers"],["stacking"],["stacks"],["stackup"],["stackups"],["stacte"],["stactes"],["staddle"],["staddles"],["stade"],["stades"],["stadia"],["stadias"],["stadium"],["stadiums"],["staff"],["staffed"],["staffer"],["staffers"],["staffing"],["staffs"],["stag"],["stage"],["staged"],["stageful"],["stager"],["stagers"],["stages"],["stagey"],["staggard"],["staggart"],["stagged"],["stagger"],["staggers"],["staggery"],["staggie"],["staggier"],["staggies"],["stagging"],["staggy"],["stagier"],["stagiest"],["stagily"],["staging"],["stagings"],["stagnant"],["stagnate"],["stags"],["stagy"],["staid"],["staider"],["staidest"],["staidly"],["staig"],["staigs"],["stain"],["stained"],["stainer"],["stainers"],["staining"],["stains"],["stair"],["stairs"],["stairway"],["staithe"],["staithes"],["stake"],["staked"],["stakeout"],["stakes"],["staking"],["stalag"],["stalags"],["stale"],["staled"],["stalely"],["staler"],["stales"],["stalest"],["staling"],["stalk"],["stalked"],["stalker"],["stalkers"],["stalkier"],["stalkily"],["stalking"],["stalks"],["stalky"],["stall"],["stalled"],["stalling"],["stallion"],["stalls"],["stalwart"],["stamen"],["stamens"],["stamina"],["staminal"],["staminas"],["stammel"],["stammels"],["stammer"],["stammers"],["stamp"],["stamped"],["stampede"],["stamper"],["stampers"],["stamping"],["stamps"],["stance"],["stances"],["stanch"],["stanched"],["stancher"],["stanches"],["stanchly"],["stand"],["standard"],["standby"],["standbys"],["standee"],["standees"],["stander"],["standers"],["standing"],["standish"],["standoff"],["standout"],["standpat"],["stands"],["standup"],["stane"],["staned"],["stanes"],["stang"],["stanged"],["stanging"],["stangs"],["stanhope"],["stanine"],["stanines"],["staning"],["stank"],["stanks"],["stannary"],["stannic"],["stannite"],["stannous"],["stannum"],["stannums"],["stanza"],["stanzaed"],["stanzaic"],["stanzas"],["stapedes"],["stapelia"],["stapes"],["staph"],["staphs"],["staple"],["stapled"],["stapler"],["staplers"],["staples"],["stapling"],["star"],["starch"],["starched"],["starches"],["starchy"],["stardom"],["stardoms"],["stardust"],["stare"],["stared"],["starer"],["starers"],["stares"],["starets"],["starfish"],["stargaze"],["staring"],["stark"],["starker"],["starkers"],["starkest"],["starkly"],["starless"],["starlet"],["starlets"],["starlike"],["starling"],["starlit"],["starnose"],["starred"],["starrier"],["starring"],["starry"],["stars"],["start"],["started"],["starter"],["starters"],["starting"],["startle"],["startled"],["startler"],["startles"],["starts"],["startsy"],["startup"],["startups"],["starve"],["starved"],["starver"],["starvers"],["starves"],["starving"],["starwort"],["stases"],["stash"],["stashed"],["stashes"],["stashing"],["stasima"],["stasimon"],["stasis"],["stat"],["statable"],["statal"],["statant"],["state"],["stated"],["statedly"],["stately"],["stater"],["staters"],["states"],["static"],["statical"],["statice"],["statices"],["staticky"],["statics"],["stating"],["station"],["stations"],["statism"],["statisms"],["statist"],["statists"],["stative"],["statives"],["stator"],["stators"],["stats"],["statuary"],["statue"],["statued"],["statues"],["stature"],["statures"],["status"],["statuses"],["statute"],["statutes"],["staumrel"],["staunch"],["stave"],["staved"],["staves"],["staving"],["staw"],["stay"],["stayed"],["stayer"],["stayers"],["staying"],["stays"],["staysail"],["stead"],["steaded"],["steadied"],["steadier"],["steadies"],["steadily"],["steading"],["steads"],["steady"],["steak"],["steaks"],["steal"],["stealage"],["stealer"],["stealers"],["stealing"],["steals"],["stealth"],["stealths"],["stealthy"],["steam"],["steamed"],["steamer"],["steamers"],["steamier"],["steamily"],["steaming"],["steams"],["steamy"],["steapsin"],["stearate"],["stearic"],["stearin"],["stearine"],["stearins"],["steatite"],["stedfast"],["steed"],["steeds"],["steek"],["steeked"],["steeking"],["steeks"],["steel"],["steeled"],["steelie"],["steelier"],["steelies"],["steeling"],["steels"],["steely"],["steenbok"],["steep"],["steeped"],["steepen"],["steepens"],["steeper"],["steepers"],["steepest"],["steeping"],["steeple"],["steepled"],["steeples"],["steeply"],["steeps"],["steer"],["steerage"],["steered"],["steerer"],["steerers"],["steering"],["steers"],["steeve"],["steeved"],["steeves"],["steeving"],["stegodon"],["stein"],["steinbok"],["steins"],["stela"],["stelae"],["stelai"],["stelar"],["stele"],["stelene"],["steles"],["stelic"],["stella"],["stellar"],["stellas"],["stellate"],["stellify"],["stem"],["stemless"],["stemlike"],["stemma"],["stemmas"],["stemmata"],["stemmed"],["stemmer"],["stemmers"],["stemmery"],["stemmier"],["stemming"],["stemmy"],["stems"],["stemson"],["stemsons"],["stemware"],["stench"],["stenches"],["stenchy"],["stencil"],["stencils"],["stengah"],["stengahs"],["steno"],["stenoky"],["stenos"],["stenosed"],["stenoses"],["stenosis"],["stenotic"],["stentor"],["stentors"],["step"],["stepdame"],["steplike"],["steppe"],["stepped"],["stepper"],["steppers"],["steppes"],["stepping"],["steps"],["stepson"],["stepsons"],["stepwise"],["stere"],["stereo"],["stereoed"],["stereos"],["steres"],["steric"],["sterical"],["sterigma"],["sterile"],["sterlet"],["sterlets"],["sterling"],["stern"],["sterna"],["sternal"],["sterner"],["sternest"],["sternite"],["sternly"],["sterns"],["sternson"],["sternum"],["sternums"],["sternway"],["steroid"],["steroids"],["sterol"],["sterols"],["stertor"],["stertors"],["stet"],["stets"],["stetted"],["stetting"],["stew"],["steward"],["stewards"],["stewbum"],["stewbums"],["stewed"],["stewing"],["stewpan"],["stewpans"],["stews"],["stey"],["sthenia"],["sthenias"],["sthenic"],["stibial"],["stibine"],["stibines"],["stibium"],["stibiums"],["stibnite"],["stich"],["stichic"],["stichs"],["stick"],["sticked"],["sticker"],["stickers"],["stickful"],["stickier"],["stickily"],["sticking"],["stickit"],["stickle"],["stickled"],["stickler"],["stickles"],["stickman"],["stickmen"],["stickout"],["stickpin"],["sticks"],["stickum"],["stickums"],["stickup"],["stickups"],["sticky"],["stiction"],["stied"],["sties"],["stiff"],["stiffed"],["stiffen"],["stiffens"],["stiffer"],["stiffest"],["stiffing"],["stiffish"],["stiffly"],["stiffs"],["stifle"],["stifled"],["stifler"],["stiflers"],["stifles"],["stifling"],["stigma"],["stigmal"],["stigmas"],["stigmata"],["stilbene"],["stilbite"],["stile"],["stiles"],["stiletto"],["still"],["stilled"],["stiller"],["stillest"],["stillier"],["stilling"],["stillman"],["stillmen"],["stills"],["stilly"],["stilt"],["stilted"],["stilting"],["stilts"],["stime"],["stimes"],["stimied"],["stimies"],["stimuli"],["stimulus"],["stimy"],["stimying"],["sting"],["stinger"],["stingers"],["stingier"],["stingily"],["stinging"],["stingo"],["stingos"],["stingray"],["stings"],["stingy"],["stink"],["stinkard"],["stinkbug"],["stinker"],["stinkers"],["stinkier"],["stinking"],["stinko"],["stinkpot"],["stinks"],["stinky"],["stint"],["stinted"],["stinter"],["stinters"],["stinting"],["stints"],["stipe"],["stiped"],["stipel"],["stipels"],["stipend"],["stipends"],["stipes"],["stipites"],["stipple"],["stippled"],["stippler"],["stipples"],["stipular"],["stipule"],["stipuled"],["stipules"],["stir"],["stirk"],["stirks"],["stirp"],["stirpes"],["stirps"],["stirred"],["stirrer"],["stirrers"],["stirring"],["stirrup"],["stirrups"],["stirs"],["stitch"],["stitched"],["stitcher"],["stitches"],["stithied"],["stithies"],["stithy"],["stiver"],["stivers"],["stoa"],["stoae"],["stoai"],["stoas"],["stoat"],["stoats"],["stob"],["stobbed"],["stobbing"],["stobs"],["stoccado"],["stoccata"],["stock"],["stockade"],["stockcar"],["stocked"],["stocker"],["stockers"],["stockier"],["stockily"],["stocking"],["stockish"],["stockist"],["stockman"],["stockmen"],["stockpot"],["stocks"],["stocky"],["stodge"],["stodged"],["stodges"],["stodgier"],["stodgily"],["stodging"],["stodgy"],["stogey"],["stogeys"],["stogie"],["stogies"],["stogy"],["stoic"],["stoical"],["stoicism"],["stoics"],["stoke"],["stoked"],["stoker"],["stokers"],["stokes"],["stokesia"],["stoking"],["stole"],["stoled"],["stolen"],["stoles"],["stolid"],["stolider"],["stolidly"],["stollen"],["stollens"],["stolon"],["stolonic"],["stolons"],["stolport"],["stoma"],["stomach"],["stomachs"],["stomachy"],["stomal"],["stomas"],["stomata"],["stomatal"],["stomate"],["stomates"],["stomatic"],["stomodea"],["stomp"],["stomped"],["stomper"],["stompers"],["stomping"],["stomps"],["stonable"],["stone"],["stoned"],["stonefly"],["stoner"],["stoners"],["stones"],["stoney"],["stonier"],["stoniest"],["stonily"],["stoning"],["stonish"],["stony"],["stood"],["stooge"],["stooged"],["stooges"],["stooging"],["stook"],["stooked"],["stooker"],["stookers"],["stooking"],["stooks"],["stool"],["stooled"],["stoolie"],["stoolies"],["stooling"],["stools"],["stoop"],["stooped"],["stooper"],["stoopers"],["stooping"],["stoops"],["stop"],["stopbank"],["stopcock"],["stope"],["stoped"],["stoper"],["stopers"],["stopes"],["stopgap"],["stopgaps"],["stoping"],["stopover"],["stoppage"],["stopped"],["stopper"],["stoppers"],["stopping"],["stopple"],["stoppled"],["stopples"],["stops"],["stopt"],["storable"],["storage"],["storages"],["storax"],["storaxes"],["store"],["stored"],["stores"],["storey"],["storeyed"],["storeys"],["storied"],["stories"],["storing"],["stork"],["storks"],["storm"],["stormed"],["stormier"],["stormily"],["storming"],["storms"],["stormy"],["story"],["storying"],["stoss"],["stotinka"],["stotinki"],["stound"],["stounded"],["stounds"],["stoup"],["stoups"],["stour"],["stoure"],["stoures"],["stourie"],["stours"],["stoury"],["stout"],["stouten"],["stoutens"],["stouter"],["stoutest"],["stoutish"],["stoutly"],["stouts"],["stove"],["stover"],["stovers"],["stoves"],["stow"],["stowable"],["stowage"],["stowages"],["stowaway"],["stowed"],["stowing"],["stowp"],["stowps"],["stows"],["straddle"],["strafe"],["strafed"],["strafer"],["strafers"],["strafes"],["strafing"],["straggle"],["straggly"],["straight"],["strain"],["strained"],["strainer"],["strains"],["strait"],["straiten"],["straiter"],["straitly"],["straits"],["strake"],["straked"],["strakes"],["stramash"],["stramony"],["strand"],["stranded"],["strander"],["strands"],["strang"],["strange"],["stranger"],["strangle"],["strap"],["strapped"],["strapper"],["straps"],["strass"],["strasses"],["strata"],["stratal"],["stratas"],["strategy"],["strath"],["straths"],["strati"],["stratify"],["stratous"],["stratum"],["stratums"],["stratus"],["stravage"],["stravaig"],["straw"],["strawed"],["strawhat"],["strawier"],["strawing"],["straws"],["strawy"],["stray"],["strayed"],["strayer"],["strayers"],["straying"],["strays"],["streak"],["streaked"],["streaker"],["streaks"],["streaky"],["stream"],["streamed"],["streamer"],["streams"],["streamy"],["streek"],["streeked"],["streeker"],["streeks"],["street"],["streets"],["strength"],["strep"],["streps"],["stress"],["stressed"],["stresses"],["stressor"],["stretch"],["stretchy"],["stretta"],["strettas"],["strette"],["stretti"],["stretto"],["strettos"],["streusel"],["strew"],["strewed"],["strewer"],["strewers"],["strewing"],["strewn"],["strews"],["stria"],["striae"],["striate"],["striated"],["striates"],["strick"],["stricken"],["strickle"],["stricks"],["strict"],["stricter"],["strictly"],["strid"],["stridden"],["stride"],["strident"],["strider"],["striders"],["strides"],["striding"],["stridor"],["stridors"],["strife"],["strifes"],["strigil"],["strigils"],["strigose"],["strike"],["striker"],["strikers"],["strikes"],["striking"],["string"],["stringed"],["stringer"],["strings"],["stringy"],["strip"],["stripe"],["striped"],["striper"],["stripers"],["stripes"],["stripier"],["striping"],["stripped"],["stripper"],["strips"],["stript"],["stripy"],["strive"],["strived"],["striven"],["striver"],["strivers"],["strives"],["striving"],["strobe"],["strobes"],["strobic"],["strobil"],["strobila"],["strobile"],["strobili"],["strobils"],["strode"],["stroke"],["stroked"],["stroker"],["strokers"],["strokes"],["stroking"],["stroll"],["strolled"],["stroller"],["strolls"],["stroma"],["stromal"],["stromata"],["strong"],["stronger"],["strongly"],["strongyl"],["strontia"],["strontic"],["strook"],["strop"],["strophe"],["strophes"],["strophic"],["stropped"],["stropper"],["stroppy"],["strops"],["stroud"],["strouds"],["strove"],["strow"],["strowed"],["strowing"],["strown"],["strows"],["stroy"],["stroyed"],["stroyer"],["stroyers"],["stroying"],["stroys"],["struck"],["strucken"],["strudel"],["strudels"],["struggle"],["strum"],["struma"],["strumae"],["strumas"],["strummed"],["strummer"],["strumose"],["strumous"],["strumpet"],["strums"],["strung"],["strunt"],["strunted"],["strunts"],["strut"],["struts"],["strutted"],["strutter"],["stub"],["stubbed"],["stubbier"],["stubbily"],["stubbing"],["stubble"],["stubbled"],["stubbles"],["stubbly"],["stubborn"],["stubby"],["stubs"],["stucco"],["stuccoed"],["stuccoer"],["stuccoes"],["stuccos"],["stuck"],["stud"],["studbook"],["studded"],["studdie"],["studdies"],["studding"],["student"],["students"],["studfish"],["studied"],["studier"],["studiers"],["studies"],["studio"],["studios"],["studious"],["studs"],["studwork"],["study"],["studying"],["stuff"],["stuffed"],["stuffer"],["stuffers"],["stuffier"],["stuffily"],["stuffing"],["stuffs"],["stuffy"],["stuiver"],["stuivers"],["stull"],["stulls"],["stultify"],["stum"],["stumble"],["stumbled"],["stumbler"],["stumbles"],["stummed"],["stumming"],["stump"],["stumpage"],["stumped"],["stumper"],["stumpers"],["stumpier"],["stumping"],["stumps"],["stumpy"],["stums"],["stun"],["stung"],["stunk"],["stunned"],["stunner"],["stunners"],["stunning"],["stuns"],["stunsail"],["stunt"],["stunted"],["stunting"],["stuntman"],["stuntmen"],["stunts"],["stupa"],["stupas"],["stupe"],["stupefy"],["stupes"],["stupid"],["stupider"],["stupidly"],["stupids"],["stupor"],["stupors"],["sturdied"],["sturdier"],["sturdies"],["sturdily"],["sturdy"],["sturgeon"],["sturt"],["sturts"],["stutter"],["stutters"],["sty"],["stye"],["styed"],["styes"],["stygian"],["stying"],["stylar"],["stylate"],["style"],["styled"],["styler"],["stylers"],["styles"],["stylet"],["stylets"],["styli"],["styling"],["stylings"],["stylise"],["stylised"],["styliser"],["stylises"],["stylish"],["stylist"],["stylists"],["stylite"],["stylites"],["stylitic"],["stylize"],["stylized"],["stylizer"],["stylizes"],["styloid"],["stylus"],["styluses"],["stymie"],["stymied"],["stymies"],["stymy"],["stymying"],["stypsis"],["styptic"],["styptics"],["styrax"],["styraxes"],["styrene"],["styrenes"],["suable"],["suably"],["suasion"],["suasions"],["suasive"],["suasory"],["suave"],["suavely"],["suaver"],["suavest"],["suavity"],["sub"],["suba"],["subabbot"],["subacid"],["subacrid"],["subacute"],["subadar"],["subadars"],["subadult"],["subagent"],["subah"],["subahdar"],["subahs"],["subalar"],["subarea"],["subareas"],["subarid"],["subas"],["subatom"],["subatoms"],["subaxial"],["subbase"],["subbases"],["subbasin"],["subbass"],["subbed"],["subbing"],["subbings"],["subblock"],["subbreed"],["subcaste"],["subcause"],["subcell"],["subcells"],["subchief"],["subclan"],["subclans"],["subclass"],["subclerk"],["subcode"],["subcodes"],["subcool"],["subcools"],["subcutes"],["subcutis"],["subdean"],["subdeans"],["subdeb"],["subdebs"],["subdepot"],["subdual"],["subduals"],["subduce"],["subduced"],["subduces"],["subduct"],["subducts"],["subdue"],["subdued"],["subduer"],["subduers"],["subdues"],["subduing"],["subdural"],["subecho"],["subedit"],["subedits"],["subentry"],["subepoch"],["suber"],["suberect"],["suberic"],["suberin"],["suberins"],["suberise"],["suberize"],["suberose"],["suberous"],["subers"],["subfield"],["subfile"],["subfiles"],["subfix"],["subfixes"],["subfloor"],["subfluid"],["subframe"],["subfusc"],["subgenre"],["subgenus"],["subgoal"],["subgoals"],["subgrade"],["subgraph"],["subgroup"],["subgum"],["subgums"],["subhead"],["subheads"],["subhuman"],["subhumid"],["subidea"],["subideas"],["subindex"],["subitem"],["subitems"],["subito"],["subject"],["subjects"],["subjoin"],["subjoins"],["sublate"],["sublated"],["sublates"],["sublease"],["sublet"],["sublets"],["sublevel"],["sublime"],["sublimed"],["sublimer"],["sublimes"],["subline"],["sublines"],["sublot"],["sublots"],["sublunar"],["submerge"],["submerse"],["submiss"],["submit"],["submits"],["subnasal"],["subnet"],["subnets"],["subniche"],["subnodal"],["suboptic"],["suboral"],["suborder"],["suborn"],["suborned"],["suborner"],["suborns"],["suboval"],["subovate"],["suboxide"],["subpanel"],["subpar"],["subpart"],["subparts"],["subpena"],["subpenas"],["subphase"],["subphyla"],["subplot"],["subplots"],["subpoena"],["subpolar"],["subpubic"],["subrace"],["subraces"],["subrent"],["subrents"],["subring"],["subrings"],["subrule"],["subrules"],["subs"],["subsale"],["subsales"],["subscale"],["subsea"],["subsect"],["subsects"],["subsense"],["subsere"],["subseres"],["subserve"],["subset"],["subsets"],["subshaft"],["subshell"],["subshrub"],["subside"],["subsided"],["subsider"],["subsides"],["subsidy"],["subsist"],["subsists"],["subsite"],["subsites"],["subsoil"],["subsoils"],["subsolar"],["subsonic"],["subspace"],["substage"],["substate"],["subsume"],["subsumed"],["subsumes"],["subtask"],["subtasks"],["subtaxa"],["subtaxon"],["subteen"],["subteens"],["subtend"],["subtends"],["subtest"],["subtests"],["subtext"],["subtexts"],["subtheme"],["subtile"],["subtiler"],["subtilin"],["subtilty"],["subtitle"],["subtle"],["subtler"],["subtlest"],["subtlety"],["subtly"],["subtone"],["subtones"],["subtonic"],["subtopia"],["subtopic"],["subtotal"],["subtract"],["subtrend"],["subtribe"],["subtunic"],["subtype"],["subtypes"],["subulate"],["subunit"],["subunits"],["suburb"],["suburban"],["suburbed"],["suburbia"],["suburbs"],["subvene"],["subvened"],["subvenes"],["subvert"],["subverts"],["subvicar"],["subviral"],["subvocal"],["subway"],["subwayed"],["subways"],["subzero"],["subzone"],["subzones"],["succah"],["succahs"],["succeed"],["succeeds"],["success"],["succinct"],["succinic"],["succinyl"],["succor"],["succored"],["succorer"],["succors"],["succory"],["succoth"],["succour"],["succours"],["succuba"],["succubae"],["succubi"],["succubus"],["succumb"],["succumbs"],["succuss"],["such"],["suchlike"],["suchness"],["suck"],["sucked"],["sucker"],["suckered"],["suckers"],["suckfish"],["sucking"],["suckle"],["suckled"],["suckler"],["sucklers"],["suckles"],["suckless"],["suckling"],["sucks"],["sucrase"],["sucrases"],["sucre"],["sucres"],["sucrose"],["sucroses"],["suction"],["suctions"],["sudaria"],["sudaries"],["sudarium"],["sudary"],["sudation"],["sudatory"],["sudd"],["sudden"],["suddenly"],["suddens"],["sudds"],["sudor"],["sudoral"],["sudors"],["suds"],["sudsed"],["sudser"],["sudsers"],["sudses"],["sudsier"],["sudsiest"],["sudsing"],["sudsless"],["sudsy"],["sue"],["sued"],["suede"],["sueded"],["suedes"],["sueding"],["suer"],["suers"],["sues"],["suet"],["suets"],["suety"],["suffari"],["suffaris"],["suffer"],["suffered"],["sufferer"],["suffers"],["suffice"],["sufficed"],["sufficer"],["suffices"],["suffix"],["suffixal"],["suffixed"],["suffixes"],["sufflate"],["suffrage"],["suffuse"],["suffused"],["suffuses"],["sugar"],["sugared"],["sugarier"],["sugaring"],["sugars"],["sugary"],["suggest"],["suggests"],["sugh"],["sughed"],["sughing"],["sughs"],["suicidal"],["suicide"],["suicided"],["suicides"],["suing"],["suint"],["suints"],["suit"],["suitable"],["suitably"],["suitcase"],["suite"],["suited"],["suiter"],["suiters"],["suites"],["suiting"],["suitings"],["suitlike"],["suitor"],["suitors"],["suits"],["sukiyaki"],["sukkah"],["sukkahs"],["sukkot"],["sukkoth"],["sulcal"],["sulcate"],["sulcated"],["sulci"],["sulcus"],["suldan"],["suldans"],["sulfa"],["sulfas"],["sulfate"],["sulfated"],["sulfates"],["sulfid"],["sulfide"],["sulfides"],["sulfids"],["sulfinyl"],["sulfite"],["sulfites"],["sulfitic"],["sulfo"],["sulfone"],["sulfones"],["sulfonic"],["sulfonyl"],["sulfur"],["sulfured"],["sulfuret"],["sulfuric"],["sulfurs"],["sulfury"],["sulfuryl"],["sulk"],["sulked"],["sulker"],["sulkers"],["sulkier"],["sulkies"],["sulkiest"],["sulkily"],["sulking"],["sulks"],["sulky"],["sullage"],["sullages"],["sullen"],["sullener"],["sullenly"],["sullied"],["sullies"],["sully"],["sullying"],["sulpha"],["sulphas"],["sulphate"],["sulphid"],["sulphide"],["sulphids"],["sulphite"],["sulphone"],["sulphur"],["sulphurs"],["sulphury"],["sultan"],["sultana"],["sultanas"],["sultanic"],["sultans"],["sultrier"],["sultrily"],["sultry"],["sulu"],["sulus"],["sum"],["sumac"],["sumach"],["sumachs"],["sumacs"],["sumless"],["summa"],["summable"],["summae"],["summand"],["summands"],["summary"],["summas"],["summate"],["summated"],["summates"],["summed"],["summer"],["summered"],["summerly"],["summers"],["summery"],["summing"],["summit"],["summital"],["summitry"],["summits"],["summon"],["summoned"],["summoner"],["summons"],["sumo"],["sumos"],["sump"],["sumps"],["sumpter"],["sumpters"],["sumpweed"],["sums"],["sun"],["sunback"],["sunbaked"],["sunbath"],["sunbathe"],["sunbaths"],["sunbeam"],["sunbeams"],["sunbeamy"],["sunbelt"],["sunbelts"],["sunbird"],["sunbirds"],["sunbow"],["sunbows"],["sunburn"],["sunburns"],["sunburnt"],["sunburst"],["sundae"],["sundaes"],["sunder"],["sundered"],["sunderer"],["sunders"],["sundew"],["sundews"],["sundial"],["sundials"],["sundog"],["sundogs"],["sundown"],["sundowns"],["sundress"],["sundries"],["sundrops"],["sundry"],["sunfast"],["sunfish"],["sung"],["sunglass"],["sunglow"],["sunglows"],["sunk"],["sunken"],["sunket"],["sunkets"],["sunlamp"],["sunlamps"],["sunland"],["sunlands"],["sunless"],["sunlight"],["sunlike"],["sunlit"],["sunn"],["sunna"],["sunnas"],["sunned"],["sunnier"],["sunniest"],["sunnily"],["sunning"],["sunns"],["sunny"],["sunproof"],["sunrise"],["sunrises"],["sunroof"],["sunroofs"],["sunroom"],["sunrooms"],["suns"],["sunscald"],["sunset"],["sunsets"],["sunshade"],["sunshine"],["sunshiny"],["sunspot"],["sunspots"],["sunstone"],["sunsuit"],["sunsuits"],["suntan"],["suntans"],["sunup"],["sunups"],["sunward"],["sunwards"],["sunwise"],["sup"],["supe"],["super"],["superadd"],["superb"],["superbad"],["superber"],["superbly"],["supercar"],["supercop"],["supered"],["superego"],["superfan"],["superfix"],["superhit"],["supering"],["superior"],["superjet"],["superlay"],["superlie"],["superman"],["supermen"],["supermom"],["supernal"],["superpro"],["supers"],["supersex"],["superspy"],["supertax"],["supes"],["supinate"],["supine"],["supinely"],["supines"],["supped"],["supper"],["suppers"],["supping"],["supplant"],["supple"],["suppled"],["supplely"],["suppler"],["supples"],["supplest"],["supplied"],["supplier"],["supplies"],["suppling"],["supply"],["support"],["supports"],["supposal"],["suppose"],["supposed"],["supposer"],["supposes"],["suppress"],["supra"],["supreme"],["supremer"],["supremo"],["supremos"],["sups"],["sura"],["surah"],["surahs"],["sural"],["suras"],["surbase"],["surbased"],["surbases"],["surcease"],["surcoat"],["surcoats"],["surd"],["surds"],["sure"],["surefire"],["surely"],["sureness"],["surer"],["surest"],["sureties"],["surety"],["surf"],["surfable"],["surface"],["surfaced"],["surfacer"],["surfaces"],["surfbird"],["surfboat"],["surfed"],["surfeit"],["surfeits"],["surfer"],["surfers"],["surffish"],["surfier"],["surfiest"],["surfing"],["surfings"],["surflike"],["surfs"],["surfy"],["surge"],["surged"],["surgeon"],["surgeons"],["surger"],["surgers"],["surgery"],["surges"],["surgical"],["surging"],["surgy"],["suricate"],["surlier"],["surliest"],["surlily"],["surly"],["surmise"],["surmised"],["surmiser"],["surmises"],["surmount"],["surname"],["surnamed"],["surnamer"],["surnames"],["surpass"],["surplice"],["surplus"],["surprint"],["surprise"],["surprize"],["surra"],["surras"],["surreal"],["surrey"],["surreys"],["surround"],["surroyal"],["surtax"],["surtaxed"],["surtaxes"],["surtout"],["surtouts"],["surveil"],["surveils"],["survey"],["surveyed"],["surveyor"],["surveys"],["survival"],["survive"],["survived"],["surviver"],["survives"],["survivor"],["sushi"],["sushis"],["suslik"],["susliks"],["suspect"],["suspects"],["suspend"],["suspends"],["suspense"],["suspire"],["suspired"],["suspires"],["suss"],["sussed"],["susses"],["sussing"],["sustain"],["sustains"],["susurrus"],["sutler"],["sutlers"],["sutra"],["sutras"],["sutta"],["suttas"],["suttee"],["suttees"],["sutural"],["suture"],["sutured"],["sutures"],["suturing"],["suzerain"],["svaraj"],["svarajes"],["svedberg"],["svelte"],["sveltely"],["svelter"],["sveltest"],["swab"],["swabbed"],["swabber"],["swabbers"],["swabbie"],["swabbies"],["swabbing"],["swabby"],["swabs"],["swacked"],["swaddle"],["swaddled"],["swaddles"],["swag"],["swage"],["swaged"],["swager"],["swagers"],["swages"],["swagged"],["swagger"],["swaggers"],["swagging"],["swaging"],["swagman"],["swagmen"],["swags"],["swail"],["swails"],["swain"],["swainish"],["swains"],["swale"],["swales"],["swallow"],["swallows"],["swam"],["swami"],["swamies"],["swamis"],["swamp"],["swamped"],["swamper"],["swampers"],["swampier"],["swamping"],["swampish"],["swamps"],["swampy"],["swamy"],["swan"],["swang"],["swanherd"],["swank"],["swanked"],["swanker"],["swankest"],["swankier"],["swankily"],["swanking"],["swanks"],["swanky"],["swanlike"],["swanned"],["swannery"],["swanning"],["swanpan"],["swanpans"],["swans"],["swanskin"],["swap"],["swapped"],["swapper"],["swappers"],["swapping"],["swaps"],["swaraj"],["swarajes"],["sward"],["swarded"],["swarding"],["swards"],["sware"],["swarf"],["swarfs"],["swarm"],["swarmed"],["swarmer"],["swarmers"],["swarming"],["swarms"],["swart"],["swarth"],["swarths"],["swarthy"],["swarty"],["swash"],["swashed"],["swasher"],["swashers"],["swashes"],["swashing"],["swastica"],["swastika"],["swat"],["swatch"],["swatches"],["swath"],["swathe"],["swathed"],["swather"],["swathers"],["swathes"],["swathing"],["swaths"],["swats"],["swatted"],["swatter"],["swatters"],["swatting"],["sway"],["swayable"],["swayback"],["swayed"],["swayer"],["swayers"],["swayful"],["swaying"],["sways"],["swear"],["swearer"],["swearers"],["swearing"],["swears"],["sweat"],["sweatbox"],["sweated"],["sweater"],["sweaters"],["sweatier"],["sweatily"],["sweating"],["sweats"],["sweaty"],["swede"],["swedes"],["sweenies"],["sweeny"],["sweep"],["sweeper"],["sweepers"],["sweepier"],["sweeping"],["sweeps"],["sweepy"],["sweer"],["sweet"],["sweeten"],["sweetens"],["sweeter"],["sweetest"],["sweetie"],["sweeties"],["sweeting"],["sweetish"],["sweetly"],["sweets"],["sweetsop"],["swell"],["swelled"],["sweller"],["swellest"],["swelling"],["swells"],["swelter"],["swelters"],["sweltry"],["swept"],["swerve"],["swerved"],["swerver"],["swervers"],["swerves"],["swerving"],["sweven"],["swevens"],["swidden"],["swiddens"],["swift"],["swifter"],["swifters"],["swiftest"],["swiftly"],["swifts"],["swig"],["swigged"],["swigger"],["swiggers"],["swigging"],["swigs"],["swill"],["swilled"],["swiller"],["swillers"],["swilling"],["swills"],["swim"],["swimmer"],["swimmers"],["swimmier"],["swimmily"],["swimming"],["swimmy"],["swims"],["swimsuit"],["swimwear"],["swindle"],["swindled"],["swindler"],["swindles"],["swine"],["swinepox"],["swing"],["swingby"],["swingbys"],["swinge"],["swinged"],["swinger"],["swingers"],["swinges"],["swingier"],["swinging"],["swingle"],["swingled"],["swingles"],["swingman"],["swingmen"],["swings"],["swingy"],["swinish"],["swink"],["swinked"],["swinking"],["swinks"],["swinney"],["swinneys"],["swipe"],["swiped"],["swipes"],["swiping"],["swiple"],["swiples"],["swipple"],["swipples"],["swirl"],["swirled"],["swirlier"],["swirling"],["swirls"],["swirly"],["swish"],["swished"],["swisher"],["swishers"],["swishes"],["swishier"],["swishing"],["swishy"],["swiss"],["swisses"],["switch"],["switched"],["switcher"],["switches"],["swith"],["swithe"],["swither"],["swithers"],["swithly"],["swive"],["swived"],["swivel"],["swiveled"],["swivels"],["swives"],["swivet"],["swivets"],["swiving"],["swizzle"],["swizzled"],["swizzler"],["swizzles"],["swob"],["swobbed"],["swobber"],["swobbers"],["swobbing"],["swobs"],["swollen"],["swoon"],["swooned"],["swooner"],["swooners"],["swooning"],["swoons"],["swoop"],["swooped"],["swooper"],["swoopers"],["swooping"],["swoops"],["swoosh"],["swooshed"],["swooshes"],["swop"],["swopped"],["swopping"],["swops"],["sword"],["swordman"],["swordmen"],["swords"],["swore"],["sworn"],["swot"],["swots"],["swotted"],["swotter"],["swotters"],["swotting"],["swoun"],["swound"],["swounded"],["swounds"],["swouned"],["swouning"],["swouns"],["swum"],["swung"],["sybarite"],["sybo"],["syboes"],["sycamine"],["sycamore"],["syce"],["sycee"],["sycees"],["syces"],["sycomore"],["syconia"],["syconium"],["sycoses"],["sycosis"],["syenite"],["syenites"],["syenitic"],["syke"],["sykes"],["syli"],["sylis"],["syllabi"],["syllabic"],["syllable"],["syllabub"],["syllabus"],["sylph"],["sylphic"],["sylphid"],["sylphids"],["sylphish"],["sylphs"],["sylphy"],["sylva"],["sylvae"],["sylvan"],["sylvans"],["sylvas"],["sylvatic"],["sylvin"],["sylvine"],["sylvines"],["sylvins"],["sylvite"],["sylvites"],["symbion"],["symbions"],["symbiont"],["symbiot"],["symbiote"],["symbiots"],["symbol"],["symboled"],["symbolic"],["symbols"],["symmetry"],["sympathy"],["sympatry"],["symphony"],["sympodia"],["symposia"],["symptom"],["symptoms"],["syn"],["synagog"],["synagogs"],["synanon"],["synanons"],["synapse"],["synapsed"],["synapses"],["synapsis"],["synaptic"],["sync"],["syncarp"],["syncarps"],["syncarpy"],["synced"],["synch"],["synched"],["synching"],["synchro"],["synchros"],["synchs"],["syncing"],["syncline"],["syncom"],["syncoms"],["syncopal"],["syncope"],["syncopes"],["syncopic"],["syncs"],["syncytia"],["syndeses"],["syndesis"],["syndet"],["syndetic"],["syndets"],["syndic"],["syndical"],["syndics"],["syndrome"],["syne"],["synectic"],["synergia"],["synergic"],["synergid"],["synergy"],["synesis"],["synfuel"],["synfuels"],["syngamic"],["syngamy"],["syngas"],["syngases"],["synod"],["synodal"],["synodic"],["synods"],["synonym"],["synonyme"],["synonyms"],["synonymy"],["synopses"],["synopsis"],["synoptic"],["synovia"],["synovial"],["synovias"],["syntagma"],["syntax"],["syntaxes"],["synth"],["synths"],["syntonic"],["syntony"],["synura"],["synurae"],["sypher"],["syphered"],["syphers"],["syphilis"],["syphon"],["syphoned"],["syphons"],["syren"],["syrens"],["syringa"],["syringas"],["syringe"],["syringed"],["syringes"],["syrinx"],["syrinxes"],["syrphian"],["syrphid"],["syrphids"],["syrup"],["syrups"],["syrupy"],["system"],["systemic"],["systems"],["systole"],["systoles"],["systolic"],["syzygal"],["syzygial"],["syzygies"],["syzygy"],["ta"],["tab"],["tabanid"],["tabanids"],["tabard"],["tabarded"],["tabards"],["tabaret"],["tabarets"],["tabbed"],["tabbied"],["tabbies"],["tabbing"],["tabbis"],["tabbises"],["tabby"],["tabbying"],["taber"],["tabered"],["tabering"],["tabers"],["tabes"],["tabetic"],["tabetics"],["tabid"],["tabla"],["tablas"],["table"],["tableau"],["tableaus"],["tableaux"],["tabled"],["tableful"],["tables"],["tablet"],["tableted"],["tabletop"],["tablets"],["tabling"],["tabloid"],["tabloids"],["taboo"],["tabooed"],["tabooing"],["tabooley"],["taboos"],["tabor"],["tabored"],["taborer"],["taborers"],["taboret"],["taborets"],["taborin"],["taborine"],["taboring"],["taborins"],["tabors"],["tabouli"],["taboulis"],["tabour"],["taboured"],["tabourer"],["tabouret"],["tabours"],["tabs"],["tabu"],["tabued"],["tabuing"],["tabular"],["tabulate"],["tabuli"],["tabulis"],["tabus"],["tace"],["taces"],["tacet"],["tach"],["tache"],["taches"],["tachinid"],["tachism"],["tachisme"],["tachisms"],["tachist"],["tachiste"],["tachists"],["tachs"],["tachyon"],["tachyons"],["tacit"],["tacitly"],["taciturn"],["tack"],["tacked"],["tacker"],["tackers"],["tacket"],["tackets"],["tackey"],["tackier"],["tackiest"],["tackify"],["tackily"],["tacking"],["tackle"],["tackled"],["tackler"],["tacklers"],["tackles"],["tackless"],["tackling"],["tacks"],["tacky"],["tacnode"],["tacnodes"],["taco"],["taconite"],["tacos"],["tact"],["tactful"],["tactic"],["tactical"],["tactics"],["tactile"],["taction"],["tactions"],["tactless"],["tacts"],["tactual"],["tad"],["tadpole"],["tadpoles"],["tads"],["tae"],["tael"],["taels"],["taenia"],["taeniae"],["taenias"],["taffarel"],["tafferel"],["taffeta"],["taffetas"],["taffia"],["taffias"],["taffies"],["taffrail"],["taffy"],["tafia"],["tafias"],["tag"],["tagalong"],["tagboard"],["tagged"],["tagger"],["taggers"],["tagging"],["taglike"],["tagmeme"],["tagmemes"],["tagmemic"],["tagrag"],["tagrags"],["tags"],["tahini"],["tahinis"],["tahr"],["tahrs"],["tahsil"],["tahsils"],["taiga"],["taigas"],["taiglach"],["tail"],["tailback"],["tailbone"],["tailcoat"],["tailed"],["tailer"],["tailers"],["tailfan"],["tailfans"],["tailgate"],["tailing"],["tailings"],["taillamp"],["taille"],["tailles"],["tailless"],["tailleur"],["taillike"],["tailor"],["tailored"],["tailors"],["tailpipe"],["tailrace"],["tails"],["tailskid"],["tailspin"],["tailwind"],["tain"],["tains"],["taint"],["tainted"],["tainting"],["taints"],["taipan"],["taipans"],["taj"],["tajes"],["taka"],["takable"],["takahe"],["takahes"],["take"],["takeable"],["takeaway"],["takedown"],["taken"],["takeoff"],["takeoffs"],["takeout"],["takeouts"],["takeover"],["taker"],["takers"],["takes"],["takeup"],["takeups"],["takin"],["taking"],["takingly"],["takings"],["takins"],["tala"],["talapoin"],["talar"],["talaria"],["talars"],["talas"],["talc"],["talced"],["talcing"],["talcked"],["talcking"],["talcky"],["talcose"],["talcous"],["talcs"],["talcum"],["talcums"],["tale"],["talent"],["talented"],["talents"],["taler"],["talers"],["tales"],["talesman"],["talesmen"],["taleysim"],["tali"],["talion"],["talions"],["taliped"],["talipeds"],["talipes"],["talipot"],["talipots"],["talisman"],["talk"],["talkable"],["talked"],["talker"],["talkers"],["talkie"],["talkier"],["talkies"],["talkiest"],["talking"],["talkings"],["talks"],["talky"],["tall"],["tallage"],["tallaged"],["tallages"],["tallboy"],["tallboys"],["taller"],["tallest"],["tallied"],["tallier"],["talliers"],["tallies"],["tallish"],["tallit"],["tallith"],["tallitim"],["tallness"],["tallol"],["tallols"],["tallow"],["tallowed"],["tallows"],["tallowy"],["tally"],["tallyho"],["tallyhos"],["tallying"],["tallyman"],["tallymen"],["talmudic"],["talon"],["taloned"],["talons"],["talooka"],["talookas"],["taluk"],["taluka"],["talukas"],["taluks"],["talus"],["taluses"],["tam"],["tamable"],["tamal"],["tamale"],["tamales"],["tamals"],["tamandu"],["tamandua"],["tamandus"],["tamarack"],["tamarao"],["tamaraos"],["tamarau"],["tamaraus"],["tamari"],["tamarin"],["tamarind"],["tamarins"],["tamaris"],["tamarisk"],["tamasha"],["tamashas"],["tambac"],["tambacs"],["tambak"],["tambaks"],["tambala"],["tambalas"],["tambour"],["tamboura"],["tambours"],["tambur"],["tambura"],["tamburas"],["tamburs"],["tame"],["tameable"],["tamed"],["tamein"],["tameins"],["tameless"],["tamely"],["tameness"],["tamer"],["tamers"],["tames"],["tamest"],["taming"],["tamis"],["tamises"],["tammie"],["tammies"],["tammy"],["tamp"],["tampala"],["tampalas"],["tampan"],["tampans"],["tamped"],["tamper"],["tampered"],["tamperer"],["tampers"],["tamping"],["tampion"],["tampions"],["tampon"],["tamponed"],["tampons"],["tamps"],["tams"],["tan"],["tanager"],["tanagers"],["tanbark"],["tanbarks"],["tandem"],["tandems"],["tandoor"],["tandoori"],["tang"],["tanged"],["tangelo"],["tangelos"],["tangence"],["tangency"],["tangent"],["tangents"],["tangible"],["tangibly"],["tangier"],["tangiest"],["tanging"],["tangle"],["tangled"],["tangler"],["tanglers"],["tangles"],["tanglier"],["tangling"],["tangly"],["tango"],["tangoed"],["tangoing"],["tangos"],["tangram"],["tangrams"],["tangs"],["tangy"],["tanist"],["tanistry"],["tanists"],["tank"],["tanka"],["tankage"],["tankages"],["tankard"],["tankards"],["tankas"],["tanked"],["tanker"],["tankers"],["tankful"],["tankfuls"],["tanking"],["tanks"],["tankship"],["tannable"],["tannage"],["tannages"],["tannate"],["tannates"],["tanned"],["tanner"],["tanners"],["tannery"],["tannest"],["tannic"],["tannin"],["tanning"],["tannings"],["tannins"],["tannish"],["tanrec"],["tanrecs"],["tans"],["tansies"],["tansy"],["tantalic"],["tantalum"],["tantalus"],["tantara"],["tantaras"],["tantivy"],["tanto"],["tantra"],["tantras"],["tantric"],["tantrum"],["tantrums"],["tanyard"],["tanyards"],["tao"],["taos"],["tap"],["tapa"],["tapadera"],["tapadero"],["tapalo"],["tapalos"],["tapas"],["tape"],["taped"],["tapeless"],["tapelike"],["tapeline"],["taper"],["tapered"],["taperer"],["taperers"],["tapering"],["tapers"],["tapes"],["tapestry"],["tapeta"],["tapetal"],["tapetum"],["tapeworm"],["taphole"],["tapholes"],["taphouse"],["taping"],["tapioca"],["tapiocas"],["tapir"],["tapirs"],["tapis"],["tapises"],["tapped"],["tapper"],["tappers"],["tappet"],["tappets"],["tapping"],["tappings"],["taproom"],["taprooms"],["taproot"],["taproots"],["taps"],["tapster"],["tapsters"],["tar"],["tarama"],["taramas"],["tarantas"],["tarboosh"],["tarbush"],["tardier"],["tardies"],["tardiest"],["tardily"],["tardo"],["tardy"],["tardyon"],["tardyons"],["tare"],["tared"],["tares"],["targe"],["targes"],["target"],["targeted"],["targets"],["tariff"],["tariffed"],["tariffs"],["taring"],["tarlatan"],["tarletan"],["tarmac"],["tarmacs"],["tarn"],["tarnal"],["tarnally"],["tarnish"],["tarns"],["taro"],["taroc"],["tarocs"],["tarok"],["taroks"],["taros"],["tarot"],["tarots"],["tarp"],["tarpan"],["tarpans"],["tarpaper"],["tarpon"],["tarpons"],["tarps"],["tarragon"],["tarre"],["tarred"],["tarres"],["tarried"],["tarrier"],["tarriers"],["tarries"],["tarriest"],["tarring"],["tarry"],["tarrying"],["tars"],["tarsal"],["tarsals"],["tarsi"],["tarsia"],["tarsias"],["tarsier"],["tarsiers"],["tarsus"],["tart"],["tartan"],["tartana"],["tartanas"],["tartans"],["tartar"],["tartaric"],["tartars"],["tarted"],["tarter"],["tartest"],["tarting"],["tartish"],["tartlet"],["tartlets"],["tartly"],["tartness"],["tartrate"],["tarts"],["tartufe"],["tartufes"],["tartuffe"],["tarty"],["tarweed"],["tarweeds"],["tarzan"],["tarzans"],["tas"],["task"],["tasked"],["tasking"],["tasks"],["taskwork"],["tass"],["tasse"],["tassel"],["tasseled"],["tassels"],["tasses"],["tasset"],["tassets"],["tassie"],["tassies"],["tastable"],["taste"],["tasted"],["tasteful"],["taster"],["tasters"],["tastes"],["tastier"],["tastiest"],["tastily"],["tasting"],["tasty"],["tat"],["tatami"],["tatamis"],["tatar"],["tatars"],["tate"],["tater"],["taters"],["tates"],["tatouay"],["tatouays"],["tats"],["tatted"],["tatter"],["tattered"],["tatters"],["tattier"],["tattiest"],["tattily"],["tatting"],["tattings"],["tattle"],["tattled"],["tattler"],["tattlers"],["tattles"],["tattling"],["tattoo"],["tattooed"],["tattooer"],["tattoos"],["tatty"],["tau"],["taught"],["taunt"],["taunted"],["taunter"],["taunters"],["taunting"],["taunts"],["taupe"],["taupes"],["taurine"],["taurines"],["taus"],["taut"],["tautaug"],["tautaugs"],["tauted"],["tauten"],["tautened"],["tautens"],["tauter"],["tautest"],["tauting"],["tautly"],["tautness"],["tautog"],["tautogs"],["tautomer"],["tautonym"],["tauts"],["tav"],["tavern"],["taverna"],["tavernas"],["taverner"],["taverns"],["tavs"],["taw"],["tawdrier"],["tawdries"],["tawdrily"],["tawdry"],["tawed"],["tawer"],["tawers"],["tawie"],["tawing"],["tawney"],["tawneys"],["tawnier"],["tawnies"],["tawniest"],["tawnily"],["tawny"],["tawpie"],["tawpies"],["taws"],["tawse"],["tawsed"],["tawses"],["tawsing"],["tax"],["taxa"],["taxable"],["taxables"],["taxably"],["taxation"],["taxed"],["taxeme"],["taxemes"],["taxemic"],["taxer"],["taxers"],["taxes"],["taxi"],["taxicab"],["taxicabs"],["taxied"],["taxies"],["taxiing"],["taximan"],["taximen"],["taxing"],["taxingly"],["taxis"],["taxite"],["taxites"],["taxitic"],["taxiway"],["taxiways"],["taxless"],["taxman"],["taxmen"],["taxon"],["taxonomy"],["taxons"],["taxpaid"],["taxpayer"],["taxus"],["taxwise"],["taxying"],["tazza"],["tazzas"],["tazze"],["tea"],["teaberry"],["teaboard"],["teabowl"],["teabowls"],["teabox"],["teaboxes"],["teacake"],["teacakes"],["teacart"],["teacarts"],["teach"],["teacher"],["teachers"],["teaches"],["teaching"],["teacup"],["teacups"],["teahouse"],["teak"],["teaks"],["teakwood"],["teal"],["tealike"],["teals"],["team"],["teamaker"],["teamed"],["teaming"],["teammate"],["teams"],["teamster"],["teamwork"],["teapot"],["teapots"],["teapoy"],["teapoys"],["tear"],["tearable"],["tearaway"],["teardown"],["teardrop"],["teared"],["tearer"],["tearers"],["tearful"],["teargas"],["tearier"],["teariest"],["tearily"],["tearing"],["tearless"],["tearoom"],["tearooms"],["tears"],["teary"],["teas"],["tease"],["teased"],["teasel"],["teaseled"],["teaseler"],["teasels"],["teaser"],["teasers"],["teases"],["teashop"],["teashops"],["teasing"],["teaspoon"],["teat"],["teated"],["teatime"],["teatimes"],["teats"],["teaware"],["teawares"],["teazel"],["teazeled"],["teazels"],["teazle"],["teazled"],["teazles"],["teazling"],["teched"],["techier"],["techiest"],["techily"],["technic"],["technics"],["techy"],["tecta"],["tectal"],["tectite"],["tectites"],["tectonic"],["tectrix"],["tectum"],["ted"],["tedded"],["tedder"],["tedders"],["teddies"],["tedding"],["teddy"],["tedious"],["tedium"],["tediums"],["teds"],["tee"],["teed"],["teeing"],["teel"],["teels"],["teem"],["teemed"],["teemer"],["teemers"],["teeming"],["teems"],["teen"],["teenage"],["teenaged"],["teenager"],["teener"],["teeners"],["teenful"],["teenier"],["teeniest"],["teens"],["teensier"],["teensy"],["teentsy"],["teeny"],["teenybop"],["teepee"],["teepees"],["tees"],["teeter"],["teetered"],["teeters"],["teeth"],["teethe"],["teethed"],["teether"],["teethers"],["teethes"],["teething"],["teetotal"],["teetotum"],["teff"],["teffs"],["tefillin"],["teg"],["tegmen"],["tegmenta"],["tegmina"],["tegminal"],["tegs"],["tegua"],["teguas"],["tegular"],["tegumen"],["tegument"],["tegumina"],["teiglach"],["teiid"],["teiids"],["teind"],["teinds"],["tektite"],["tektites"],["tektitic"],["tel"],["tela"],["telae"],["telamon"],["tele"],["telecast"],["teledu"],["teledus"],["telefilm"],["telega"],["telegas"],["telegony"],["telegram"],["teleman"],["telemark"],["telemen"],["teleost"],["teleosts"],["telepath"],["teleplay"],["teleport"],["teleran"],["telerans"],["teles"],["teleses"],["telesis"],["telestic"],["teletext"],["telethon"],["teleview"],["televise"],["telex"],["telexed"],["telexes"],["telexing"],["telfer"],["telfered"],["telfers"],["telford"],["telfords"],["telia"],["telial"],["telic"],["telium"],["tell"],["tellable"],["teller"],["tellers"],["tellies"],["telling"],["tells"],["telltale"],["telluric"],["telly"],["tellys"],["teloi"],["telome"],["telomere"],["telomes"],["telomic"],["telos"],["telpher"],["telphers"],["tels"],["telson"],["telsonic"],["telsons"],["temblor"],["temblors"],["temerity"],["temp"],["tempeh"],["tempehs"],["temper"],["tempera"],["temperas"],["tempered"],["temperer"],["tempers"],["tempest"],["tempests"],["tempi"],["templar"],["templars"],["template"],["temple"],["templed"],["temples"],["templet"],["templets"],["tempo"],["temporal"],["tempos"],["temps"],["tempt"],["tempted"],["tempter"],["tempters"],["tempting"],["tempts"],["tempura"],["tempuras"],["ten"],["tenable"],["tenably"],["tenace"],["tenaces"],["tenacity"],["tenacula"],["tenail"],["tenaille"],["tenails"],["tenancy"],["tenant"],["tenanted"],["tenantry"],["tenants"],["tench"],["tenches"],["tend"],["tendance"],["tended"],["tendence"],["tendency"],["tender"],["tendered"],["tenderer"],["tenderly"],["tenders"],["tending"],["tendon"],["tendons"],["tendril"],["tendrils"],["tends"],["tenebrae"],["tenement"],["tenesmic"],["tenesmus"],["tenet"],["tenets"],["tenfold"],["tenfolds"],["tenia"],["teniae"],["tenias"],["teniasis"],["tenner"],["tenners"],["tennis"],["tennises"],["tennist"],["tennists"],["tenon"],["tenoned"],["tenoner"],["tenoners"],["tenoning"],["tenons"],["tenor"],["tenorist"],["tenorite"],["tenors"],["tenotomy"],["tenour"],["tenours"],["tenpence"],["tenpenny"],["tenpin"],["tenpins"],["tenrec"],["tenrecs"],["tens"],["tense"],["tensed"],["tensely"],["tenser"],["tenses"],["tensest"],["tensible"],["tensibly"],["tensile"],["tensing"],["tension"],["tensions"],["tensity"],["tensive"],["tensor"],["tensors"],["tent"],["tentacle"],["tentage"],["tentages"],["tented"],["tenter"],["tentered"],["tenters"],["tenth"],["tenthly"],["tenths"],["tentie"],["tentier"],["tentiest"],["tenting"],["tentless"],["tentlike"],["tents"],["tenty"],["tenues"],["tenuis"],["tenuity"],["tenuous"],["tenure"],["tenured"],["tenures"],["tenurial"],["tenuti"],["tenuto"],["tenutos"],["teocalli"],["teopan"],["teopans"],["teosinte"],["tepa"],["tepal"],["tepals"],["tepas"],["tepee"],["tepees"],["tepefied"],["tepefies"],["tepefy"],["tephra"],["tephras"],["tephrite"],["tepid"],["tepidity"],["tepidly"],["tepoy"],["tepoys"],["tequila"],["tequilas"],["terai"],["terais"],["teraohm"],["teraohms"],["teraph"],["teraphim"],["teratism"],["teratoid"],["teratoma"],["terbia"],["terbias"],["terbic"],["terbium"],["terbiums"],["terce"],["tercel"],["tercelet"],["tercels"],["terces"],["tercet"],["tercets"],["terebene"],["terebic"],["teredo"],["teredos"],["terefah"],["terete"],["terga"],["tergal"],["tergite"],["tergites"],["tergum"],["teriyaki"],["term"],["termed"],["termer"],["termers"],["terminal"],["terming"],["termini"],["terminus"],["termite"],["termites"],["termitic"],["termless"],["termly"],["termor"],["termors"],["terms"],["termtime"],["tern"],["ternary"],["ternate"],["terne"],["ternes"],["ternion"],["ternions"],["terns"],["terpene"],["terpenes"],["terpenic"],["terpinol"],["terra"],["terrace"],["terraced"],["terraces"],["terrae"],["terrain"],["terrains"],["terrane"],["terranes"],["terrapin"],["terraria"],["terras"],["terrases"],["terrazzo"],["terreen"],["terreens"],["terrella"],["terrene"],["terrenes"],["terret"],["terrets"],["terrible"],["terribly"],["terrier"],["terriers"],["terries"],["terrific"],["terrify"],["terrine"],["terrines"],["territ"],["territs"],["terror"],["terrors"],["terry"],["terse"],["tersely"],["terser"],["tersest"],["tertial"],["tertials"],["tertian"],["tertians"],["tertiary"],["tesla"],["teslas"],["tessera"],["tesserae"],["test"],["testa"],["testable"],["testacy"],["testae"],["testate"],["testates"],["testator"],["tested"],["testee"],["testees"],["tester"],["testers"],["testes"],["testicle"],["testier"],["testiest"],["testify"],["testily"],["testing"],["testis"],["teston"],["testons"],["testoon"],["testoons"],["tests"],["testudo"],["testudos"],["testy"],["tet"],["tetanal"],["tetanic"],["tetanics"],["tetanies"],["tetanise"],["tetanize"],["tetanoid"],["tetanus"],["tetany"],["tetched"],["tetchier"],["tetchily"],["tetchy"],["teth"],["tether"],["tethered"],["tethers"],["teths"],["tetotum"],["tetotums"],["tetra"],["tetracid"],["tetrad"],["tetradic"],["tetrads"],["tetragon"],["tetramer"],["tetrapod"],["tetrarch"],["tetras"],["tetrode"],["tetrodes"],["tetroxid"],["tetryl"],["tetryls"],["tets"],["tetter"],["tetters"],["teuch"],["teugh"],["teughly"],["tew"],["tewed"],["tewing"],["tews"],["texas"],["texases"],["text"],["textbook"],["textile"],["textiles"],["textless"],["texts"],["textual"],["textuary"],["textural"],["texture"],["textured"],["textures"],["thack"],["thacked"],["thacking"],["thacks"],["thae"],["thairm"],["thairms"],["thalami"],["thalamic"],["thalamus"],["thaler"],["thalers"],["thalli"],["thallic"],["thallium"],["thalloid"],["thallous"],["thallus"],["than"],["thanage"],["thanages"],["thanatos"],["thane"],["thanes"],["thank"],["thanked"],["thanker"],["thankers"],["thankful"],["thanking"],["thanks"],["tharm"],["tharms"],["that"],["thataway"],["thatch"],["thatched"],["thatcher"],["thatches"],["thatchy"],["thaw"],["thawed"],["thawer"],["thawers"],["thawing"],["thawless"],["thaws"],["the"],["thearchy"],["theater"],["theaters"],["theatre"],["theatres"],["theatric"],["thebaine"],["thebe"],["theca"],["thecae"],["thecal"],["thecate"],["thee"],["theelin"],["theelins"],["theelol"],["theelols"],["theft"],["thefts"],["thegn"],["thegnly"],["thegns"],["thein"],["theine"],["theines"],["theins"],["their"],["theirs"],["theism"],["theisms"],["theist"],["theistic"],["theists"],["thelitis"],["them"],["thematic"],["theme"],["themed"],["themes"],["theming"],["then"],["thenage"],["thenages"],["thenal"],["thenar"],["thenars"],["thence"],["thens"],["theocrat"],["theodicy"],["theogony"],["theolog"],["theologs"],["theology"],["theonomy"],["theorbo"],["theorbos"],["theorem"],["theorems"],["theories"],["theorise"],["theorist"],["theorize"],["theory"],["therapy"],["there"],["thereat"],["thereby"],["therefor"],["therein"],["theremin"],["thereof"],["thereon"],["theres"],["thereto"],["theriac"],["theriaca"],["theriacs"],["therm"],["thermae"],["thermal"],["thermals"],["therme"],["thermel"],["thermels"],["thermes"],["thermic"],["thermion"],["thermite"],["thermos"],["therms"],["theroid"],["theropod"],["thesauri"],["these"],["theses"],["thesis"],["thespian"],["theta"],["thetas"],["thetic"],["thetical"],["theurgic"],["theurgy"],["thew"],["thewier"],["thewiest"],["thewless"],["thews"],["thewy"],["they"],["thiamin"],["thiamine"],["thiamins"],["thiazide"],["thiazin"],["thiazine"],["thiazins"],["thiazol"],["thiazole"],["thiazols"],["thick"],["thicken"],["thickens"],["thicker"],["thickest"],["thicket"],["thickets"],["thickety"],["thickish"],["thickly"],["thicks"],["thickset"],["thief"],["thieve"],["thieved"],["thievery"],["thieves"],["thieving"],["thievish"],["thigh"],["thighed"],["thighs"],["thill"],["thills"],["thimble"],["thimbles"],["thin"],["thinclad"],["thindown"],["thine"],["thing"],["things"],["think"],["thinker"],["thinkers"],["thinking"],["thinks"],["thinly"],["thinned"],["thinner"],["thinners"],["thinness"],["thinnest"],["thinning"],["thinnish"],["thins"],["thio"],["thiol"],["thiolic"],["thiols"],["thionate"],["thionic"],["thionin"],["thionine"],["thionins"],["thionyl"],["thionyls"],["thiophen"],["thiotepa"],["thiourea"],["thir"],["thiram"],["thirams"],["third"],["thirdly"],["thirds"],["thirl"],["thirlage"],["thirled"],["thirling"],["thirls"],["thirst"],["thirsted"],["thirster"],["thirsts"],["thirsty"],["thirteen"],["thirties"],["thirty"],["this"],["thistle"],["thistles"],["thistly"],["thither"],["tho"],["thole"],["tholed"],["tholepin"],["tholes"],["tholing"],["tholoi"],["tholos"],["thong"],["thonged"],["thongs"],["thoracal"],["thoraces"],["thoracic"],["thorax"],["thoraxes"],["thoria"],["thorias"],["thoric"],["thorite"],["thorites"],["thorium"],["thoriums"],["thorn"],["thorned"],["thornier"],["thornily"],["thorning"],["thorns"],["thorny"],["thoro"],["thoron"],["thorons"],["thorough"],["thorp"],["thorpe"],["thorpes"],["thorps"],["those"],["thou"],["thoued"],["though"],["thought"],["thoughts"],["thouing"],["thous"],["thousand"],["thowless"],["thraldom"],["thrall"],["thralled"],["thralls"],["thrash"],["thrashed"],["thrasher"],["thrashes"],["thrave"],["thraves"],["thraw"],["thrawart"],["thrawed"],["thrawing"],["thrawn"],["thrawnly"],["thraws"],["thread"],["threaded"],["threader"],["threads"],["thready"],["threap"],["threaped"],["threaper"],["threaps"],["threat"],["threated"],["threaten"],["threats"],["three"],["threep"],["threeped"],["threeps"],["threes"],["threnode"],["threnody"],["thresh"],["threshed"],["thresher"],["threshes"],["threw"],["thrice"],["thrift"],["thrifts"],["thrifty"],["thrill"],["thrilled"],["thriller"],["thrills"],["thrip"],["thrips"],["thrive"],["thrived"],["thriven"],["thriver"],["thrivers"],["thrives"],["thriving"],["thro"],["throat"],["throated"],["throats"],["throaty"],["throb"],["throbbed"],["throbber"],["throbs"],["throe"],["throes"],["thrombi"],["thrombin"],["thrombus"],["throne"],["throned"],["thrones"],["throng"],["thronged"],["throngs"],["throning"],["throstle"],["throttle"],["through"],["throve"],["throw"],["thrower"],["throwers"],["throwing"],["thrown"],["throws"],["thru"],["thrum"],["thrummed"],["thrummer"],["thrummy"],["thrums"],["thruput"],["thruputs"],["thrush"],["thrushes"],["thrust"],["thrusted"],["thruster"],["thrustor"],["thrusts"],["thruway"],["thruways"],["thud"],["thudded"],["thudding"],["thuds"],["thug"],["thuggee"],["thuggees"],["thuggery"],["thuggish"],["thugs"],["thuja"],["thujas"],["thulia"],["thulias"],["thulium"],["thuliums"],["thumb"],["thumbed"],["thumbing"],["thumbkin"],["thumbnut"],["thumbs"],["thump"],["thumped"],["thumper"],["thumpers"],["thumping"],["thumps"],["thunder"],["thunders"],["thundery"],["thunk"],["thunked"],["thunking"],["thunks"],["thurible"],["thurifer"],["thurl"],["thurls"],["thus"],["thusly"],["thuya"],["thuyas"],["thwack"],["thwacked"],["thwacker"],["thwacks"],["thwart"],["thwarted"],["thwarter"],["thwartly"],["thwarts"],["thy"],["thyme"],["thymes"],["thymey"],["thymi"],["thymic"],["thymier"],["thymiest"],["thymine"],["thymines"],["thymol"],["thymols"],["thymosin"],["thymus"],["thymuses"],["thymy"],["thyreoid"],["thyroid"],["thyroids"],["thyroxin"],["thyrse"],["thyrses"],["thyrsi"],["thyrsoid"],["thyrsus"],["thyself"],["ti"],["tiara"],["tiaraed"],["tiaras"],["tibia"],["tibiae"],["tibial"],["tibias"],["tic"],["tical"],["ticals"],["tick"],["ticked"],["ticker"],["tickers"],["ticket"],["ticketed"],["tickets"],["ticking"],["tickings"],["tickle"],["tickled"],["tickler"],["ticklers"],["tickles"],["tickling"],["ticklish"],["ticks"],["tickseed"],["ticktack"],["ticktock"],["tics"],["tictac"],["tictacs"],["tictoc"],["tictocs"],["tidal"],["tidally"],["tidbit"],["tidbits"],["tiddly"],["tide"],["tided"],["tideland"],["tideless"],["tidelike"],["tidemark"],["tiderip"],["tiderips"],["tides"],["tideway"],["tideways"],["tidied"],["tidier"],["tidiers"],["tidies"],["tidiest"],["tidily"],["tidiness"],["tiding"],["tidings"],["tidy"],["tidying"],["tidytips"],["tie"],["tieback"],["tiebacks"],["tieclasp"],["tied"],["tieing"],["tieless"],["tiepin"],["tiepins"],["tier"],["tierce"],["tierced"],["tiercel"],["tiercels"],["tierces"],["tiered"],["tiering"],["tiers"],["ties"],["tiff"],["tiffany"],["tiffed"],["tiffin"],["tiffined"],["tiffing"],["tiffins"],["tiffs"],["tiger"],["tigereye"],["tigerish"],["tigers"],["tight"],["tighten"],["tightens"],["tighter"],["tightest"],["tightly"],["tights"],["tightwad"],["tiglon"],["tiglons"],["tigon"],["tigons"],["tigress"],["tigrish"],["tike"],["tikes"],["tiki"],["tikis"],["til"],["tilak"],["tilaks"],["tilapia"],["tilapias"],["tilbury"],["tilde"],["tildes"],["tile"],["tiled"],["tilefish"],["tilelike"],["tiler"],["tilers"],["tiles"],["tiling"],["tilings"],["till"],["tillable"],["tillage"],["tillages"],["tilled"],["tiller"],["tillered"],["tillers"],["tilling"],["tillite"],["tillites"],["tills"],["tils"],["tilt"],["tiltable"],["tilted"],["tilter"],["tilters"],["tilth"],["tilths"],["tilting"],["tilts"],["tiltyard"],["timarau"],["timaraus"],["timbal"],["timbale"],["timbales"],["timbals"],["timber"],["timbered"],["timbers"],["timbral"],["timbre"],["timbrel"],["timbrels"],["timbres"],["time"],["timecard"],["timed"],["timeless"],["timelier"],["timely"],["timeous"],["timeout"],["timeouts"],["timer"],["timers"],["times"],["timework"],["timeworn"],["timid"],["timider"],["timidest"],["timidity"],["timidly"],["timing"],["timings"],["timorous"],["timothy"],["timpana"],["timpani"],["timpano"],["timpanum"],["tin"],["tinamou"],["tinamous"],["tincal"],["tincals"],["tinct"],["tincted"],["tincting"],["tincts"],["tincture"],["tinder"],["tinders"],["tindery"],["tine"],["tinea"],["tineal"],["tineas"],["tined"],["tineid"],["tineids"],["tines"],["tinfoil"],["tinfoils"],["tinful"],["tinfuls"],["ting"],["tinge"],["tinged"],["tingeing"],["tinges"],["tinging"],["tingle"],["tingled"],["tingler"],["tinglers"],["tingles"],["tinglier"],["tingling"],["tingly"],["tings"],["tinhorn"],["tinhorns"],["tinier"],["tiniest"],["tinily"],["tininess"],["tining"],["tinker"],["tinkered"],["tinkerer"],["tinkers"],["tinkle"],["tinkled"],["tinkler"],["tinklers"],["tinkles"],["tinklier"],["tinkling"],["tinkly"],["tinlike"],["tinman"],["tinmen"],["tinned"],["tinner"],["tinners"],["tinnier"],["tinniest"],["tinnily"],["tinning"],["tinnitus"],["tinny"],["tinplate"],["tins"],["tinsel"],["tinseled"],["tinselly"],["tinsels"],["tinsmith"],["tinstone"],["tint"],["tinted"],["tinter"],["tinters"],["tinting"],["tintings"],["tintless"],["tints"],["tintype"],["tintypes"],["tinware"],["tinwares"],["tinwork"],["tinworks"],["tiny"],["tip"],["tipcart"],["tipcarts"],["tipcat"],["tipcats"],["tipi"],["tipis"],["tipless"],["tipoff"],["tipoffs"],["tippable"],["tipped"],["tipper"],["tippers"],["tippet"],["tippets"],["tippier"],["tippiest"],["tipping"],["tipple"],["tippled"],["tippler"],["tipplers"],["tipples"],["tippling"],["tippy"],["tippytoe"],["tips"],["tipsier"],["tipsiest"],["tipsily"],["tipstaff"],["tipster"],["tipsters"],["tipstock"],["tipsy"],["tiptoe"],["tiptoed"],["tiptoes"],["tiptop"],["tiptops"],["tirade"],["tirades"],["tire"],["tired"],["tireder"],["tiredest"],["tiredly"],["tireless"],["tires"],["tiresome"],["tiring"],["tirl"],["tirled"],["tirling"],["tirls"],["tiro"],["tiros"],["tirrivee"],["tis"],["tisane"],["tisanes"],["tissual"],["tissue"],["tissued"],["tissues"],["tissuey"],["tissuing"],["tissular"],["tit"],["titan"],["titanate"],["titaness"],["titania"],["titanias"],["titanic"],["titanism"],["titanite"],["titanium"],["titanous"],["titans"],["titbit"],["titbits"],["titer"],["titers"],["titfer"],["titfers"],["tithable"],["tithe"],["tithed"],["tither"],["tithers"],["tithes"],["tithing"],["tithings"],["tithonia"],["titi"],["titian"],["titians"],["titis"],["titivate"],["titlark"],["titlarks"],["title"],["titled"],["titles"],["titling"],["titlist"],["titlists"],["titman"],["titmen"],["titmice"],["titmouse"],["titrable"],["titrant"],["titrants"],["titrate"],["titrated"],["titrates"],["titrator"],["titre"],["titres"],["tits"],["titter"],["tittered"],["titterer"],["titters"],["tittie"],["titties"],["tittle"],["tittles"],["tittup"],["tittuped"],["tittuppy"],["tittups"],["titty"],["titular"],["titulars"],["titulary"],["tivy"],["tizzies"],["tizzy"],["tmeses"],["tmesis"],["to"],["toad"],["toadfish"],["toadflax"],["toadied"],["toadies"],["toadish"],["toadless"],["toadlike"],["toads"],["toady"],["toadying"],["toadyish"],["toadyism"],["toast"],["toasted"],["toaster"],["toasters"],["toastier"],["toasting"],["toasts"],["toasty"],["tobacco"],["tobaccos"],["tobies"],["toboggan"],["toby"],["toccata"],["toccatas"],["toccate"],["tocher"],["tochered"],["tochers"],["tocology"],["tocsin"],["tocsins"],["tod"],["today"],["todays"],["toddies"],["toddle"],["toddled"],["toddler"],["toddlers"],["toddles"],["toddling"],["toddy"],["todies"],["tods"],["tody"],["toe"],["toea"],["toecap"],["toecaps"],["toed"],["toehold"],["toeholds"],["toeing"],["toeless"],["toelike"],["toenail"],["toenails"],["toepiece"],["toeplate"],["toes"],["toeshoe"],["toeshoes"],["toff"],["toffee"],["toffees"],["toffies"],["toffs"],["toffy"],["toft"],["tofts"],["tofu"],["tofus"],["tog"],["toga"],["togae"],["togaed"],["togas"],["togate"],["togated"],["together"],["togged"],["toggery"],["togging"],["toggle"],["toggled"],["toggler"],["togglers"],["toggles"],["toggling"],["togs"],["togue"],["togues"],["toil"],["toile"],["toiled"],["toiler"],["toilers"],["toiles"],["toilet"],["toileted"],["toiletry"],["toilets"],["toilette"],["toilful"],["toiling"],["toils"],["toilsome"],["toilworn"],["toit"],["toited"],["toiting"],["toits"],["tokamak"],["tokamaks"],["tokay"],["tokays"],["toke"],["toked"],["token"],["tokened"],["tokening"],["tokenism"],["tokens"],["toker"],["tokers"],["tokes"],["toking"],["tokology"],["tokomak"],["tokomaks"],["tokonoma"],["tola"],["tolan"],["tolane"],["tolanes"],["tolans"],["tolas"],["tolbooth"],["told"],["tole"],["toled"],["toledo"],["toledos"],["tolerant"],["tolerate"],["toles"],["tolidin"],["tolidine"],["tolidins"],["toling"],["toll"],["tollage"],["tollages"],["tollbar"],["tollbars"],["tolled"],["toller"],["tollers"],["tollgate"],["tolling"],["tollman"],["tollmen"],["tolls"],["tollway"],["tollways"],["tolu"],["toluate"],["toluates"],["toluene"],["toluenes"],["toluic"],["toluid"],["toluide"],["toluides"],["toluidin"],["toluids"],["toluol"],["toluole"],["toluoles"],["toluols"],["tolus"],["toluyl"],["toluyls"],["tolyl"],["tolyls"],["tom"],["tomahawk"],["tomalley"],["toman"],["tomans"],["tomato"],["tomatoes"],["tomatoey"],["tomb"],["tombac"],["tomback"],["tombacks"],["tombacs"],["tombak"],["tombaks"],["tombal"],["tombed"],["tombing"],["tombless"],["tomblike"],["tombola"],["tombolas"],["tombolo"],["tombolos"],["tomboy"],["tomboys"],["tombs"],["tomcat"],["tomcats"],["tomcod"],["tomcods"],["tome"],["tomenta"],["tomentum"],["tomes"],["tomfool"],["tomfools"],["tommed"],["tommies"],["tomming"],["tommy"],["tommyrot"],["tomogram"],["tomorrow"],["tompion"],["tompions"],["toms"],["tomtit"],["tomtits"],["ton"],["tonal"],["tonality"],["tonally"],["tondi"],["tondo"],["tondos"],["tone"],["tonearm"],["tonearms"],["toned"],["toneless"],["toneme"],["tonemes"],["tonemic"],["toner"],["toners"],["tones"],["tonetic"],["tonetics"],["tonette"],["tonettes"],["toney"],["tong"],["tonga"],["tongas"],["tonged"],["tonger"],["tongers"],["tonging"],["tongman"],["tongmen"],["tongs"],["tongue"],["tongued"],["tongues"],["tonguing"],["tonic"],["tonicity"],["tonics"],["tonier"],["toniest"],["tonight"],["tonights"],["toning"],["tonish"],["tonishly"],["tonlet"],["tonlets"],["tonnage"],["tonnages"],["tonne"],["tonneau"],["tonneaus"],["tonneaux"],["tonner"],["tonners"],["tonnes"],["tonnish"],["tons"],["tonsil"],["tonsilar"],["tonsils"],["tonsure"],["tonsured"],["tonsures"],["tontine"],["tontines"],["tonus"],["tonuses"],["tony"],["too"],["took"],["tool"],["toolbox"],["tooled"],["tooler"],["toolers"],["toolhead"],["tooling"],["toolings"],["toolless"],["toolroom"],["tools"],["toolshed"],["toom"],["toon"],["toons"],["toot"],["tooted"],["tooter"],["tooters"],["tooth"],["toothed"],["toothier"],["toothily"],["toothing"],["tooths"],["toothy"],["tooting"],["tootle"],["tootled"],["tootler"],["tootlers"],["tootles"],["tootling"],["toots"],["tootses"],["tootsie"],["tootsies"],["tootsy"],["top"],["topaz"],["topazes"],["topazine"],["topcoat"],["topcoats"],["topcross"],["tope"],["toped"],["topee"],["topees"],["toper"],["topers"],["topes"],["topful"],["topfull"],["toph"],["tophe"],["tophes"],["tophi"],["tophs"],["tophus"],["topi"],["topiary"],["topic"],["topical"],["topics"],["toping"],["topis"],["topkick"],["topkicks"],["topknot"],["topknots"],["topless"],["toplofty"],["topmast"],["topmasts"],["topmost"],["topnotch"],["topoi"],["topology"],["toponym"],["toponyms"],["toponymy"],["topos"],["topotype"],["topped"],["topper"],["toppers"],["topping"],["toppings"],["topple"],["toppled"],["topples"],["toppling"],["tops"],["topsail"],["topsails"],["topside"],["topsider"],["topsides"],["topsoil"],["topsoils"],["topspin"],["topspins"],["topstone"],["topwork"],["topworks"],["toque"],["toques"],["toquet"],["toquets"],["tor"],["tora"],["torah"],["torahs"],["toras"],["torc"],["torch"],["torched"],["torchere"],["torches"],["torchier"],["torching"],["torchon"],["torchons"],["torcs"],["tore"],["toreador"],["torero"],["toreros"],["tores"],["toreutic"],["tori"],["toric"],["tories"],["torii"],["torment"],["torments"],["torn"],["tornadic"],["tornado"],["tornados"],["tornillo"],["toro"],["toroid"],["toroidal"],["toroids"],["toros"],["torose"],["torosity"],["torot"],["toroth"],["torous"],["torpedo"],["torpedos"],["torpid"],["torpidly"],["torpids"],["torpor"],["torpors"],["torquate"],["torque"],["torqued"],["torquer"],["torquers"],["torques"],["torquing"],["torr"],["torrefy"],["torrent"],["torrents"],["torrid"],["torrider"],["torridly"],["torrify"],["tors"],["torsade"],["torsades"],["torse"],["torses"],["torsi"],["torsion"],["torsions"],["torsk"],["torsks"],["torso"],["torsos"],["tort"],["torte"],["torten"],["tortes"],["tortile"],["tortilla"],["tortious"],["tortoise"],["tortoni"],["tortonis"],["tortrix"],["torts"],["tortuous"],["torture"],["tortured"],["torturer"],["tortures"],["torula"],["torulae"],["torulas"],["torus"],["tory"],["tosh"],["toshes"],["toss"],["tossed"],["tosser"],["tossers"],["tosses"],["tossing"],["tosspot"],["tosspots"],["tossup"],["tossups"],["tost"],["tostada"],["tostadas"],["tostado"],["tostados"],["tot"],["totable"],["total"],["totaled"],["totaling"],["totalise"],["totalism"],["totalist"],["totality"],["totalize"],["totalled"],["totally"],["totals"],["tote"],["toted"],["totem"],["totemic"],["totemism"],["totemist"],["totemite"],["totems"],["toter"],["toters"],["totes"],["tother"],["toting"],["tots"],["totted"],["totter"],["tottered"],["totterer"],["totters"],["tottery"],["totting"],["toucan"],["toucans"],["touch"],["touche"],["touched"],["toucher"],["touchers"],["touches"],["touchier"],["touchily"],["touching"],["touchup"],["touchups"],["touchy"],["tough"],["toughed"],["toughen"],["toughens"],["tougher"],["toughest"],["toughie"],["toughies"],["toughing"],["toughish"],["toughly"],["toughs"],["toughy"],["toupee"],["toupees"],["tour"],["touraco"],["touracos"],["toured"],["tourer"],["tourers"],["touring"],["tourings"],["tourism"],["tourisms"],["tourist"],["tourists"],["touristy"],["tourney"],["tourneys"],["tours"],["touse"],["toused"],["touses"],["tousing"],["tousle"],["tousled"],["tousles"],["tousling"],["tout"],["touted"],["touter"],["touters"],["touting"],["touts"],["touzle"],["touzled"],["touzles"],["touzling"],["tovarich"],["tovarish"],["tow"],["towage"],["towages"],["toward"],["towardly"],["towards"],["towaway"],["towaways"],["towboat"],["towboats"],["towed"],["towel"],["toweled"],["toweling"],["towelled"],["towels"],["tower"],["towered"],["towerier"],["towering"],["towers"],["towery"],["towhead"],["towheads"],["towhee"],["towhees"],["towie"],["towies"],["towing"],["towline"],["towlines"],["towmond"],["towmonds"],["towmont"],["towmonts"],["town"],["townee"],["townees"],["townfolk"],["townhome"],["townie"],["townies"],["townish"],["townless"],["townlet"],["townlets"],["towns"],["township"],["townsman"],["townsmen"],["townwear"],["towny"],["towpath"],["towpaths"],["towrope"],["towropes"],["tows"],["towy"],["toxaemia"],["toxaemic"],["toxemia"],["toxemias"],["toxemic"],["toxic"],["toxical"],["toxicant"],["toxicity"],["toxin"],["toxine"],["toxines"],["toxins"],["toxoid"],["toxoids"],["toy"],["toyed"],["toyer"],["toyers"],["toying"],["toyish"],["toyless"],["toylike"],["toyo"],["toyon"],["toyons"],["toyos"],["toys"],["toyshop"],["toyshops"],["trabeate"],["trace"],["traced"],["tracer"],["tracers"],["tracery"],["traces"],["trachea"],["tracheae"],["tracheal"],["tracheas"],["tracheid"],["trachle"],["trachled"],["trachles"],["trachoma"],["trachyte"],["tracing"],["tracings"],["track"],["trackage"],["tracked"],["tracker"],["trackers"],["tracking"],["trackman"],["trackmen"],["tracks"],["trackway"],["tract"],["tractate"],["tractile"],["traction"],["tractive"],["tractor"],["tractors"],["tracts"],["trad"],["tradable"],["trade"],["traded"],["tradeoff"],["trader"],["traders"],["trades"],["trading"],["traditor"],["traduce"],["traduced"],["traducer"],["traduces"],["traffic"],["traffics"],["tragedy"],["tragi"],["tragic"],["tragical"],["tragics"],["tragopan"],["tragus"],["traik"],["traiked"],["traiking"],["traiks"],["trail"],["trailed"],["trailer"],["trailers"],["trailing"],["trails"],["train"],["trained"],["trainee"],["trainees"],["trainer"],["trainers"],["trainful"],["training"],["trainman"],["trainmen"],["trains"],["trainway"],["traipse"],["traipsed"],["traipses"],["trait"],["traitor"],["traitors"],["traits"],["traject"],["trajects"],["tram"],["tramcar"],["tramcars"],["tramel"],["trameled"],["tramell"],["tramells"],["tramels"],["tramless"],["tramline"],["trammed"],["trammel"],["trammels"],["tramming"],["tramp"],["tramped"],["tramper"],["trampers"],["tramping"],["trampish"],["trample"],["trampled"],["trampler"],["tramples"],["tramps"],["tramroad"],["trams"],["tramway"],["tramways"],["trance"],["tranced"],["trances"],["tranche"],["tranches"],["trancing"],["trangam"],["trangams"],["trank"],["tranks"],["tranq"],["tranqs"],["tranquil"],["trans"],["transact"],["transect"],["transept"],["transfer"],["transfix"],["tranship"],["transit"],["transits"],["transmit"],["transom"],["transoms"],["transude"],["trap"],["trapan"],["trapans"],["trapball"],["trapdoor"],["trapes"],["trapesed"],["trapeses"],["trapeze"],["trapezes"],["trapezia"],["traplike"],["trapnest"],["trappean"],["trapped"],["trapper"],["trappers"],["trapping"],["trappose"],["trappous"],["traprock"],["traps"],["trapt"],["trapunto"],["trash"],["trashed"],["trashes"],["trashier"],["trashily"],["trashing"],["trashman"],["trashmen"],["trashy"],["trass"],["trasses"],["trauchle"],["trauma"],["traumas"],["traumata"],["travail"],["travails"],["trave"],["travel"],["traveled"],["traveler"],["travelog"],["travels"],["traverse"],["traves"],["travesty"],["travois"],["travoise"],["trawl"],["trawled"],["trawler"],["trawlers"],["trawley"],["trawleys"],["trawling"],["trawlnet"],["trawls"],["tray"],["trayful"],["trayfuls"],["trays"],["treacle"],["treacles"],["treacly"],["tread"],["treaded"],["treader"],["treaders"],["treading"],["treadle"],["treadled"],["treadler"],["treadles"],["treads"],["treason"],["treasons"],["treasure"],["treasury"],["treat"],["treated"],["treater"],["treaters"],["treaties"],["treating"],["treatise"],["treats"],["treaty"],["treble"],["trebled"],["trebles"],["trebling"],["trebly"],["trecento"],["treddle"],["treddled"],["treddles"],["tree"],["treed"],["treeing"],["treelawn"],["treeless"],["treelike"],["treen"],["treenail"],["treens"],["trees"],["treetop"],["treetops"],["tref"],["trefah"],["trefoil"],["trefoils"],["trehala"],["trehalas"],["trek"],["trekked"],["trekker"],["trekkers"],["trekking"],["treks"],["trellis"],["tremble"],["trembled"],["trembler"],["trembles"],["trembly"],["tremolo"],["tremolos"],["tremor"],["tremors"],["trenail"],["trenails"],["trench"],["trenched"],["trencher"],["trenches"],["trend"],["trended"],["trendier"],["trendies"],["trendily"],["trending"],["trends"],["trendy"],["trepan"],["trepang"],["trepangs"],["trepans"],["trephine"],["trepid"],["trespass"],["tress"],["tressed"],["tressel"],["tressels"],["tresses"],["tressier"],["tressour"],["tressure"],["tressy"],["trestle"],["trestles"],["tret"],["trets"],["trevet"],["trevets"],["trews"],["trey"],["treys"],["triable"],["triac"],["triacid"],["triacids"],["triacs"],["triad"],["triadic"],["triadics"],["triadism"],["triads"],["triage"],["triages"],["trial"],["trials"],["triangle"],["triarchy"],["triaxial"],["triazin"],["triazine"],["triazins"],["triazole"],["tribade"],["tribades"],["tribadic"],["tribal"],["tribally"],["tribasic"],["tribe"],["tribes"],["tribrach"],["tribunal"],["tribune"],["tribunes"],["tribute"],["tributes"],["trice"],["triced"],["triceps"],["trices"],["trichina"],["trichite"],["trichoid"],["trichome"],["tricing"],["trick"],["tricked"],["tricker"],["trickers"],["trickery"],["trickie"],["trickier"],["trickily"],["tricking"],["trickish"],["trickle"],["trickled"],["trickles"],["trickly"],["tricks"],["tricksy"],["tricky"],["triclad"],["triclads"],["tricolor"],["tricorn"],["tricorne"],["tricorns"],["tricot"],["tricots"],["trictrac"],["tricycle"],["trident"],["tridents"],["triduum"],["triduums"],["tried"],["triene"],["trienes"],["triennia"],["triens"],["trientes"],["trier"],["triers"],["tries"],["triethyl"],["trifecta"],["trifid"],["trifle"],["trifled"],["trifler"],["triflers"],["trifles"],["trifling"],["trifocal"],["trifold"],["triforia"],["triform"],["trig"],["trigged"],["trigger"],["triggers"],["triggest"],["trigging"],["trigly"],["triglyph"],["trigness"],["trigo"],["trigon"],["trigonal"],["trigons"],["trigos"],["trigram"],["trigrams"],["trigraph"],["trigs"],["trihedra"],["trijet"],["trijets"],["trike"],["trikes"],["trilbies"],["trilby"],["trill"],["trilled"],["triller"],["trillers"],["trilling"],["trillion"],["trillium"],["trills"],["trilobal"],["trilobed"],["trilogy"],["trim"],["trimaran"],["trimer"],["trimeric"],["trimers"],["trimeter"],["trimly"],["trimmed"],["trimmer"],["trimmers"],["trimmest"],["trimming"],["trimness"],["trimorph"],["trimotor"],["trims"],["trinal"],["trinary"],["trindle"],["trindled"],["trindles"],["trine"],["trined"],["trines"],["trining"],["trinity"],["trinket"],["trinkets"],["trinkums"],["trinodal"],["trio"],["triode"],["triodes"],["triol"],["triolet"],["triolets"],["triols"],["trios"],["triose"],["trioses"],["trioxid"],["trioxide"],["trioxids"],["trip"],["tripack"],["tripacks"],["tripart"],["tripe"],["tripedal"],["tripes"],["triphase"],["triplane"],["triple"],["tripled"],["triples"],["triplet"],["triplets"],["triplex"],["tripling"],["triplite"],["triploid"],["triply"],["tripod"],["tripodal"],["tripodic"],["tripods"],["tripody"],["tripoli"],["tripolis"],["tripos"],["triposes"],["tripped"],["tripper"],["trippers"],["trippet"],["trippets"],["tripping"],["trips"],["triptane"],["triptyca"],["triptych"],["tripwire"],["trireme"],["triremes"],["triscele"],["trisect"],["trisects"],["triseme"],["trisemes"],["trisemic"],["triskele"],["trismic"],["trismus"],["trisome"],["trisomes"],["trisomic"],["trisomy"],["tristate"],["triste"],["tristeza"],["tristful"],["tristich"],["trite"],["tritely"],["triter"],["tritest"],["trithing"],["triticum"],["tritium"],["tritiums"],["tritoma"],["tritomas"],["triton"],["tritone"],["tritones"],["tritons"],["triumph"],["triumphs"],["triumvir"],["triune"],["triunes"],["triunity"],["trivalve"],["trivet"],["trivets"],["trivia"],["trivial"],["trivium"],["troak"],["troaked"],["troaking"],["troaks"],["trocar"],["trocars"],["trochaic"],["trochal"],["trochar"],["trochars"],["troche"],["trochee"],["trochees"],["troches"],["trochil"],["trochili"],["trochils"],["trochlea"],["trochoid"],["trock"],["trocked"],["trocking"],["trocks"],["trod"],["trodden"],["trode"],["troffer"],["troffers"],["trogon"],["trogons"],["troika"],["troikas"],["troilism"],["troilite"],["troilus"],["trois"],["troke"],["troked"],["trokes"],["troking"],["troland"],["trolands"],["troll"],["trolled"],["troller"],["trollers"],["trolley"],["trolleys"],["trollied"],["trollies"],["trolling"],["trollop"],["trollops"],["trollopy"],["trolls"],["trolly"],["trombone"],["trommel"],["trommels"],["tromp"],["trompe"],["tromped"],["trompes"],["tromping"],["tromps"],["trona"],["tronas"],["trone"],["trones"],["troop"],["trooped"],["trooper"],["troopers"],["troopial"],["trooping"],["troops"],["trooz"],["trop"],["trope"],["tropes"],["trophic"],["trophied"],["trophies"],["trophy"],["tropic"],["tropical"],["tropics"],["tropin"],["tropine"],["tropines"],["tropins"],["tropism"],["tropisms"],["troponin"],["trot"],["troth"],["trothed"],["trothing"],["troths"],["trotline"],["trots"],["trotted"],["trotter"],["trotters"],["trotting"],["trotyl"],["trotyls"],["trouble"],["troubled"],["troubler"],["troubles"],["trough"],["troughs"],["trounce"],["trounced"],["trouncer"],["trounces"],["troupe"],["trouped"],["trouper"],["troupers"],["troupes"],["troupial"],["trouping"],["trouser"],["trousers"],["trout"],["troutier"],["trouts"],["trouty"],["trouvere"],["trouveur"],["trove"],["trover"],["trovers"],["troves"],["trow"],["trowed"],["trowel"],["troweled"],["troweler"],["trowels"],["trowing"],["trows"],["trowsers"],["trowth"],["trowths"],["troy"],["troys"],["truancy"],["truant"],["truanted"],["truantry"],["truants"],["truce"],["truced"],["truces"],["trucing"],["truck"],["truckage"],["trucked"],["trucker"],["truckers"],["trucking"],["truckle"],["truckled"],["truckler"],["truckles"],["truckman"],["truckmen"],["trucks"],["trudge"],["trudged"],["trudgen"],["trudgens"],["trudgeon"],["trudger"],["trudgers"],["trudges"],["trudging"],["true"],["trueblue"],["trueborn"],["truebred"],["trued"],["trueing"],["truelove"],["trueness"],["truer"],["trues"],["truest"],["truffe"],["truffes"],["truffle"],["truffled"],["truffles"],["trug"],["trugs"],["truing"],["truism"],["truisms"],["truistic"],["trull"],["trulls"],["truly"],["trumeau"],["trumeaux"],["trump"],["trumped"],["trumpery"],["trumpet"],["trumpets"],["trumping"],["trumps"],["truncate"],["trundle"],["trundled"],["trundler"],["trundles"],["trunk"],["trunked"],["trunkful"],["trunks"],["trunnel"],["trunnels"],["trunnion"],["truss"],["trussed"],["trusser"],["trussers"],["trusses"],["trussing"],["trust"],["trusted"],["trustee"],["trusteed"],["trustees"],["truster"],["trusters"],["trustful"],["trustier"],["trusties"],["trustily"],["trusting"],["trustor"],["trustors"],["trusts"],["trusty"],["truth"],["truthful"],["truths"],["try"],["trying"],["tryingly"],["tryma"],["trymata"],["tryout"],["tryouts"],["trypsin"],["trypsins"],["tryptic"],["trysail"],["trysails"],["tryst"],["tryste"],["trysted"],["tryster"],["trysters"],["trystes"],["trysting"],["trysts"],["tryworks"],["tsade"],["tsades"],["tsadi"],["tsadis"],["tsar"],["tsardom"],["tsardoms"],["tsarevna"],["tsarina"],["tsarinas"],["tsarism"],["tsarisms"],["tsarist"],["tsarists"],["tsaritza"],["tsars"],["tsetse"],["tsetses"],["tsimmes"],["tsk"],["tsked"],["tsking"],["tsks"],["tsktsk"],["tsktsked"],["tsktsks"],["tsooris"],["tsores"],["tsoris"],["tsorriss"],["tsuba"],["tsunami"],["tsunamic"],["tsunamis"],["tsuris"],["tuatara"],["tuataras"],["tuatera"],["tuateras"],["tub"],["tuba"],["tubae"],["tubaist"],["tubaists"],["tubal"],["tubas"],["tubate"],["tubbable"],["tubbed"],["tubber"],["tubbers"],["tubbier"],["tubbiest"],["tubbing"],["tubby"],["tube"],["tubed"],["tubeless"],["tubelike"],["tubenose"],["tuber"],["tubercle"],["tuberoid"],["tuberose"],["tuberous"],["tubers"],["tubes"],["tubework"],["tubful"],["tubfuls"],["tubifex"],["tubiform"],["tubing"],["tubings"],["tubist"],["tubists"],["tublike"],["tubs"],["tubular"],["tubulate"],["tubule"],["tubules"],["tubulin"],["tubulins"],["tubulose"],["tubulous"],["tubulure"],["tuchun"],["tuchuns"],["tuck"],["tuckahoe"],["tucked"],["tucker"],["tuckered"],["tuckers"],["tucket"],["tuckets"],["tucking"],["tucks"],["tufa"],["tufas"],["tuff"],["tuffet"],["tuffets"],["tuffs"],["tufoli"],["tuft"],["tufted"],["tufter"],["tufters"],["tuftier"],["tuftiest"],["tuftily"],["tufting"],["tufts"],["tufty"],["tug"],["tugboat"],["tugboats"],["tugged"],["tugger"],["tuggers"],["tugging"],["tughrik"],["tughriks"],["tugless"],["tugrik"],["tugriks"],["tugs"],["tui"],["tuille"],["tuilles"],["tuis"],["tuition"],["tuitions"],["tuladi"],["tuladis"],["tule"],["tules"],["tulip"],["tulips"],["tulle"],["tulles"],["tullibee"],["tumble"],["tumbled"],["tumbler"],["tumblers"],["tumbles"],["tumbling"],["tumbrel"],["tumbrels"],["tumbril"],["tumbrils"],["tumefied"],["tumefies"],["tumefy"],["tumid"],["tumidity"],["tumidly"],["tummies"],["tummler"],["tummlers"],["tummy"],["tumor"],["tumoral"],["tumorous"],["tumors"],["tumour"],["tumours"],["tump"],["tumpline"],["tumps"],["tumular"],["tumuli"],["tumulose"],["tumulous"],["tumult"],["tumults"],["tumulus"],["tun"],["tuna"],["tunable"],["tunably"],["tunas"],["tundish"],["tundra"],["tundras"],["tune"],["tuneable"],["tuneably"],["tuned"],["tuneful"],["tuneless"],["tuner"],["tuners"],["tunes"],["tuneup"],["tuneups"],["tung"],["tungs"],["tungsten"],["tungstic"],["tunic"],["tunica"],["tunicae"],["tunicate"],["tunicle"],["tunicles"],["tunics"],["tuning"],["tunnage"],["tunnages"],["tunned"],["tunnel"],["tunneled"],["tunneler"],["tunnels"],["tunnies"],["tunning"],["tunny"],["tuns"],["tup"],["tupelo"],["tupelos"],["tupik"],["tupiks"],["tupped"],["tuppence"],["tuppenny"],["tupping"],["tups"],["tuque"],["tuques"],["turaco"],["turacos"],["turacou"],["turacous"],["turban"],["turbaned"],["turbans"],["turbary"],["turbeth"],["turbeths"],["turbid"],["turbidly"],["turbinal"],["turbine"],["turbines"],["turbit"],["turbith"],["turbiths"],["turbits"],["turbo"],["turbocar"],["turbofan"],["turbojet"],["turbos"],["turbot"],["turbots"],["turd"],["turdine"],["turds"],["tureen"],["tureens"],["turf"],["turfed"],["turfier"],["turfiest"],["turfing"],["turfless"],["turflike"],["turfman"],["turfmen"],["turfs"],["turfski"],["turfskis"],["turfy"],["turgency"],["turgent"],["turgid"],["turgidly"],["turgite"],["turgites"],["turgor"],["turgors"],["turista"],["turistas"],["turkey"],["turkeys"],["turkois"],["turmeric"],["turmoil"],["turmoils"],["turn"],["turnable"],["turncoat"],["turndown"],["turned"],["turner"],["turners"],["turnery"],["turnhall"],["turning"],["turnings"],["turnip"],["turnips"],["turnkey"],["turnkeys"],["turnoff"],["turnoffs"],["turnout"],["turnouts"],["turnover"],["turnpike"],["turns"],["turnsole"],["turnspit"],["turnup"],["turnups"],["turpeth"],["turpeths"],["turps"],["turquois"],["turret"],["turreted"],["turrets"],["turrical"],["turtle"],["turtled"],["turtler"],["turtlers"],["turtles"],["turtling"],["turves"],["tusche"],["tusches"],["tush"],["tushed"],["tushes"],["tushie"],["tushies"],["tushing"],["tushy"],["tusk"],["tusked"],["tusker"],["tuskers"],["tusking"],["tuskless"],["tusklike"],["tusks"],["tussah"],["tussahs"],["tussal"],["tussar"],["tussars"],["tusseh"],["tussehs"],["tusser"],["tussers"],["tussis"],["tussises"],["tussive"],["tussle"],["tussled"],["tussles"],["tussling"],["tussock"],["tussocks"],["tussocky"],["tussor"],["tussore"],["tussores"],["tussors"],["tussuck"],["tussucks"],["tussur"],["tussurs"],["tut"],["tutee"],["tutees"],["tutelage"],["tutelar"],["tutelars"],["tutelary"],["tutor"],["tutorage"],["tutored"],["tutoress"],["tutorial"],["tutoring"],["tutors"],["tutoyed"],["tutoyer"],["tutoyers"],["tuts"],["tutted"],["tutti"],["tutties"],["tutting"],["tuttis"],["tutty"],["tutu"],["tutus"],["tux"],["tuxedo"],["tuxedoed"],["tuxedoes"],["tuxedos"],["tuxes"],["tuyer"],["tuyere"],["tuyeres"],["tuyers"],["twa"],["twaddle"],["twaddled"],["twaddler"],["twaddles"],["twae"],["twaes"],["twain"],["twains"],["twang"],["twanged"],["twanger"],["twangers"],["twangier"],["twanging"],["twangle"],["twangled"],["twangler"],["twangles"],["twangs"],["twangy"],["twankies"],["twanky"],["twas"],["twasome"],["twasomes"],["twat"],["twats"],["twattle"],["twattled"],["twattles"],["tweak"],["tweaked"],["tweakier"],["tweaking"],["tweaks"],["tweaky"],["twee"],["tweed"],["tweedier"],["tweedle"],["tweedled"],["tweedles"],["tweeds"],["tweedy"],["tween"],["tweenies"],["tweeny"],["tweet"],["tweeted"],["tweeter"],["tweeters"],["tweeting"],["tweets"],["tweeze"],["tweezed"],["tweezer"],["tweezers"],["tweezes"],["tweezing"],["twelfth"],["twelfths"],["twelve"],["twelvemo"],["twelves"],["twenties"],["twenty"],["twerp"],["twerps"],["twibil"],["twibill"],["twibills"],["twibils"],["twice"],["twiddle"],["twiddled"],["twiddler"],["twiddles"],["twiddly"],["twier"],["twiers"],["twig"],["twigged"],["twiggen"],["twiggier"],["twigging"],["twiggy"],["twigless"],["twiglike"],["twigs"],["twilight"],["twilit"],["twill"],["twilled"],["twilling"],["twills"],["twin"],["twinborn"],["twine"],["twined"],["twiner"],["twiners"],["twines"],["twinge"],["twinged"],["twinges"],["twinging"],["twinier"],["twiniest"],["twinight"],["twining"],["twinjet"],["twinjets"],["twinkle"],["twinkled"],["twinkler"],["twinkles"],["twinkly"],["twinned"],["twinning"],["twins"],["twinset"],["twinsets"],["twinship"],["twiny"],["twirl"],["twirled"],["twirler"],["twirlers"],["twirlier"],["twirling"],["twirls"],["twirly"],["twirp"],["twirps"],["twist"],["twisted"],["twister"],["twisters"],["twistier"],["twisting"],["twists"],["twisty"],["twit"],["twitch"],["twitched"],["twitcher"],["twitches"],["twitchy"],["twits"],["twitted"],["twitter"],["twitters"],["twittery"],["twitting"],["twixt"],["two"],["twofer"],["twofers"],["twofold"],["twofolds"],["twopence"],["twopenny"],["twos"],["twosome"],["twosomes"],["twyer"],["twyers"],["tycoon"],["tycoons"],["tye"],["tyee"],["tyees"],["tyes"],["tying"],["tyke"],["tykes"],["tylosin"],["tylosins"],["tymbal"],["tymbals"],["tympan"],["tympana"],["tympanal"],["tympani"],["tympanic"],["tympano"],["tympans"],["tympanum"],["tympany"],["tyne"],["tyned"],["tynes"],["tyning"],["typable"],["typal"],["type"],["typeable"],["typebar"],["typebars"],["typecase"],["typecast"],["typed"],["typeface"],["types"],["typeset"],["typesets"],["typey"],["typhoid"],["typhoids"],["typhon"],["typhonic"],["typhons"],["typhoon"],["typhoons"],["typhose"],["typhous"],["typhus"],["typhuses"],["typic"],["typical"],["typier"],["typiest"],["typified"],["typifier"],["typifies"],["typify"],["typing"],["typist"],["typists"],["typo"],["typology"],["typos"],["typp"],["typps"],["typy"],["tyramine"],["tyrannic"],["tyranny"],["tyrant"],["tyrants"],["tyre"],["tyred"],["tyres"],["tyring"],["tyro"],["tyronic"],["tyros"],["tyrosine"],["tythe"],["tythed"],["tythes"],["tything"],["tzaddik"],["tzar"],["tzardom"],["tzardoms"],["tzarevna"],["tzarina"],["tzarinas"],["tzarism"],["tzarisms"],["tzarist"],["tzarists"],["tzaritza"],["tzars"],["tzetze"],["tzetzes"],["tzigane"],["tziganes"],["tzimmes"],["tzitzis"],["tzitzit"],["tzitzith"],["tzuris"],["ubieties"],["ubiety"],["ubique"],["ubiquity"],["udder"],["udders"],["udo"],["udometer"],["udometry"],["udos"],["ufology"],["ugh"],["ughs"],["uglier"],["uglies"],["ugliest"],["uglified"],["uglifier"],["uglifies"],["uglify"],["uglily"],["ugliness"],["ugly"],["ugsome"],["uh"],["uhlan"],["uhlans"],["uintaite"],["ukase"],["ukases"],["uke"],["ukelele"],["ukeleles"],["ukes"],["ukulele"],["ukuleles"],["ulama"],["ulamas"],["ulan"],["ulans"],["ulcer"],["ulcerate"],["ulcered"],["ulcering"],["ulcerous"],["ulcers"],["ulema"],["ulemas"],["ulexite"],["ulexites"],["ullage"],["ullaged"],["ullages"],["ulna"],["ulnad"],["ulnae"],["ulnar"],["ulnas"],["ulpan"],["ulpanim"],["ulster"],["ulsters"],["ulterior"],["ultima"],["ultimacy"],["ultimas"],["ultimata"],["ultimate"],["ultimo"],["ultra"],["ultradry"],["ultrahot"],["ultraism"],["ultraist"],["ultralow"],["ultrared"],["ultras"],["ulu"],["ululant"],["ululate"],["ululated"],["ululates"],["ulus"],["ulva"],["ulvas"],["um"],["umangite"],["umbel"],["umbeled"],["umbellar"],["umbelled"],["umbellet"],["umbels"],["umber"],["umbered"],["umbering"],["umbers"],["umbilici"],["umbles"],["umbo"],["umbonal"],["umbonate"],["umbones"],["umbonic"],["umbos"],["umbra"],["umbrae"],["umbrage"],["umbrages"],["umbral"],["umbras"],["umbrella"],["umbrette"],["umiac"],["umiack"],["umiacks"],["umiacs"],["umiak"],["umiaks"],["umiaq"],["umiaqs"],["umlaut"],["umlauted"],["umlauts"],["umm"],["ump"],["umped"],["umping"],["umpirage"],["umpire"],["umpired"],["umpires"],["umpiring"],["umps"],["umpteen"],["umteenth"],["un"],["unabated"],["unable"],["unabused"],["unacted"],["unadult"],["unafraid"],["unaged"],["unageing"],["unagile"],["unaging"],["unai"],["unaided"],["unaimed"],["unaired"],["unais"],["unakin"],["unakite"],["unakites"],["unalike"],["unallied"],["unamused"],["unanchor"],["unaneled"],["unapt"],["unaptly"],["unargued"],["unarm"],["unarmed"],["unarming"],["unarms"],["unartful"],["unary"],["unasked"],["unatoned"],["unau"],["unaus"],["unavowed"],["unawaked"],["unaware"],["unawares"],["unawed"],["unbacked"],["unbaked"],["unbanned"],["unbar"],["unbarbed"],["unbarred"],["unbars"],["unbased"],["unbated"],["unbathed"],["unbe"],["unbear"],["unbeared"],["unbears"],["unbeaten"],["unbelief"],["unbelt"],["unbelted"],["unbelts"],["unbend"],["unbended"],["unbends"],["unbenign"],["unbent"],["unbiased"],["unbid"],["unbidden"],["unbilled"],["unbind"],["unbinds"],["unbitted"],["unbitten"],["unbitter"],["unblamed"],["unblest"],["unblock"],["unblocks"],["unbloody"],["unbodied"],["unbolt"],["unbolted"],["unbolts"],["unboned"],["unbonnet"],["unborn"],["unbosom"],["unbosoms"],["unbought"],["unbouncy"],["unbound"],["unbowed"],["unbox"],["unboxed"],["unboxes"],["unboxing"],["unbrace"],["unbraced"],["unbraces"],["unbraid"],["unbraids"],["unbrake"],["unbraked"],["unbrakes"],["unbred"],["unbreech"],["unbridle"],["unbright"],["unbroke"],["unbroken"],["unbuckle"],["unbuild"],["unbuilds"],["unbuilt"],["unbulky"],["unbundle"],["unburden"],["unburied"],["unburned"],["unburnt"],["unbusted"],["unbusy"],["unbutton"],["uncage"],["uncaged"],["uncages"],["uncaging"],["uncake"],["uncaked"],["uncakes"],["uncaking"],["uncalled"],["uncandid"],["uncanny"],["uncap"],["uncapped"],["uncaps"],["uncaring"],["uncase"],["uncased"],["uncases"],["uncashed"],["uncasing"],["uncasked"],["uncatchy"],["uncaught"],["uncaused"],["unchain"],["unchains"],["unchancy"],["uncharge"],["unchary"],["unchaste"],["unchewed"],["unchic"],["unchicly"],["unchoke"],["unchoked"],["unchokes"],["unchosen"],["unchurch"],["unci"],["uncia"],["unciae"],["uncial"],["uncially"],["uncials"],["unciform"],["uncinal"],["uncinate"],["uncini"],["uncinus"],["uncivil"],["unclad"],["unclamp"],["unclamps"],["unclasp"],["unclasps"],["uncle"],["unclean"],["unclear"],["unclench"],["uncles"],["unclinch"],["unclip"],["unclips"],["uncloak"],["uncloaks"],["unclog"],["unclogs"],["unclose"],["unclosed"],["uncloses"],["unclothe"],["uncloud"],["unclouds"],["uncloyed"],["unco"],["uncoated"],["uncock"],["uncocked"],["uncocks"],["uncoded"],["uncoffin"],["uncoil"],["uncoiled"],["uncoils"],["uncoined"],["uncombed"],["uncomely"],["uncomic"],["uncommon"],["uncooked"],["uncool"],["uncooled"],["uncork"],["uncorked"],["uncorks"],["uncos"],["uncouple"],["uncouth"],["uncover"],["uncovers"],["uncoy"],["uncrate"],["uncrated"],["uncrates"],["uncrazy"],["uncreate"],["uncross"],["uncrown"],["uncrowns"],["unction"],["unctions"],["unctuous"],["uncuffed"],["uncurb"],["uncurbed"],["uncurbs"],["uncured"],["uncurl"],["uncurled"],["uncurls"],["uncursed"],["uncus"],["uncut"],["uncute"],["undamped"],["undaring"],["undated"],["unde"],["undecked"],["undee"],["undenied"],["under"],["underact"],["underage"],["underarm"],["underate"],["underbid"],["underbud"],["underbuy"],["undercut"],["underdid"],["underdo"],["underdog"],["undereat"],["underfed"],["underfur"],["undergo"],["undergod"],["underjaw"],["underlap"],["underlay"],["underlet"],["underlie"],["underlip"],["underlit"],["underpay"],["underpin"],["underran"],["underrun"],["undersea"],["underset"],["undertax"],["undertow"],["underway"],["undevout"],["undid"],["undies"],["undimmed"],["undine"],["undines"],["undo"],["undoable"],["undocile"],["undock"],["undocked"],["undocks"],["undoer"],["undoers"],["undoes"],["undoing"],["undoings"],["undone"],["undotted"],["undouble"],["undrape"],["undraped"],["undrapes"],["undraw"],["undrawn"],["undraws"],["undreamt"],["undress"],["undrest"],["undrew"],["undried"],["undrunk"],["undue"],["undulant"],["undular"],["undulate"],["undulled"],["unduly"],["undy"],["undyed"],["undying"],["uneager"],["unearned"],["unearth"],["unearths"],["unease"],["uneases"],["uneasier"],["uneasily"],["uneasy"],["uneaten"],["unedible"],["unedited"],["unended"],["unending"],["unenvied"],["unequal"],["unequals"],["unerased"],["unerotic"],["unerring"],["unevaded"],["uneven"],["unevener"],["unevenly"],["unexotic"],["unexpert"],["unfaded"],["unfading"],["unfair"],["unfairer"],["unfairly"],["unfaith"],["unfaiths"],["unfaked"],["unfallen"],["unfamous"],["unfancy"],["unfasten"],["unfazed"],["unfeared"],["unfed"],["unfelt"],["unfence"],["unfenced"],["unfences"],["unfetter"],["unfilial"],["unfilled"],["unfilmed"],["unfired"],["unfished"],["unfit"],["unfitly"],["unfits"],["unfitted"],["unfix"],["unfixed"],["unfixes"],["unfixing"],["unfixt"],["unflashy"],["unflexed"],["unfoiled"],["unfold"],["unfolded"],["unfolder"],["unfolds"],["unfond"],["unforced"],["unforged"],["unforgot"],["unforked"],["unformed"],["unfought"],["unfound"],["unframed"],["unfree"],["unfreed"],["unfrees"],["unfreeze"],["unfrock"],["unfrocks"],["unfroze"],["unfrozen"],["unfunded"],["unfunny"],["unfurl"],["unfurled"],["unfurls"],["unfused"],["unfussy"],["ungainly"],["ungalled"],["ungenial"],["ungentle"],["ungently"],["ungifted"],["ungird"],["ungirded"],["ungirds"],["ungirt"],["unglazed"],["unglove"],["ungloved"],["ungloves"],["unglue"],["unglued"],["unglues"],["ungluing"],["ungodly"],["ungot"],["ungotten"],["ungowned"],["ungraced"],["ungraded"],["ungreedy"],["ungual"],["unguard"],["unguards"],["unguent"],["unguenta"],["unguents"],["ungues"],["unguided"],["unguis"],["ungula"],["ungulae"],["ungular"],["ungulate"],["unhailed"],["unhair"],["unhaired"],["unhairs"],["unhallow"],["unhalved"],["unhand"],["unhanded"],["unhands"],["unhandy"],["unhang"],["unhanged"],["unhangs"],["unhappy"],["unharmed"],["unhasty"],["unhat"],["unhats"],["unhatted"],["unhealed"],["unheard"],["unheated"],["unhedged"],["unheeded"],["unhelm"],["unhelmed"],["unhelms"],["unhelped"],["unheroic"],["unhewn"],["unhinge"],["unhinged"],["unhinges"],["unhip"],["unhired"],["unhitch"],["unholier"],["unholily"],["unholy"],["unhood"],["unhooded"],["unhoods"],["unhook"],["unhooked"],["unhooks"],["unhoped"],["unhorse"],["unhorsed"],["unhorses"],["unhouse"],["unhoused"],["unhouses"],["unhuman"],["unhung"],["unhurt"],["unhusk"],["unhusked"],["unhusks"],["unialgal"],["uniaxial"],["unicolor"],["unicorn"],["unicorns"],["unicycle"],["unideaed"],["unideal"],["uniface"],["unifaces"],["unific"],["unified"],["unifier"],["unifiers"],["unifies"],["unifilar"],["uniform"],["uniforms"],["unify"],["unifying"],["unilobed"],["unimbued"],["union"],["unionise"],["unionism"],["unionist"],["unionize"],["unions"],["unipod"],["unipods"],["unipolar"],["unique"],["uniquely"],["uniquer"],["uniques"],["uniquest"],["unironed"],["unisex"],["unisexes"],["unison"],["unisonal"],["unisons"],["unissued"],["unit"],["unitage"],["unitages"],["unitard"],["unitards"],["unitary"],["unite"],["united"],["unitedly"],["uniter"],["uniters"],["unites"],["unities"],["uniting"],["unitive"],["unitize"],["unitized"],["unitizer"],["unitizes"],["unitrust"],["units"],["unity"],["univalve"],["universe"],["univocal"],["unjaded"],["unjoined"],["unjoint"],["unjoints"],["unjoyful"],["unjudged"],["unjust"],["unjustly"],["unkempt"],["unkend"],["unkenned"],["unkennel"],["unkent"],["unkept"],["unkind"],["unkinder"],["unkindly"],["unkingly"],["unkink"],["unkinked"],["unkinks"],["unkissed"],["unknit"],["unknits"],["unknot"],["unknots"],["unknown"],["unknowns"],["unkosher"],["unlace"],["unlaced"],["unlaces"],["unlacing"],["unlade"],["unladed"],["unladen"],["unlades"],["unlading"],["unlaid"],["unlash"],["unlashed"],["unlashes"],["unlatch"],["unlawful"],["unlay"],["unlaying"],["unlays"],["unlead"],["unleaded"],["unleads"],["unlearn"],["unlearns"],["unlearnt"],["unleased"],["unleash"],["unled"],["unless"],["unlet"],["unlethal"],["unletted"],["unlevel"],["unlevels"],["unlevied"],["unlicked"],["unlike"],["unlikely"],["unlimber"],["unlined"],["unlink"],["unlinked"],["unlinks"],["unlisted"],["unlit"],["unlive"],["unlived"],["unlively"],["unlives"],["unliving"],["unload"],["unloaded"],["unloader"],["unloads"],["unlobed"],["unlock"],["unlocked"],["unlocks"],["unloose"],["unloosed"],["unloosen"],["unlooses"],["unloved"],["unlovely"],["unloving"],["unlucky"],["unmacho"],["unmade"],["unmake"],["unmaker"],["unmakers"],["unmakes"],["unmaking"],["unman"],["unmanful"],["unmanly"],["unmanned"],["unmans"],["unmapped"],["unmarked"],["unmarred"],["unmask"],["unmasked"],["unmasker"],["unmasks"],["unmated"],["unmatted"],["unmeant"],["unmeet"],["unmeetly"],["unmellow"],["unmelted"],["unmended"],["unmerry"],["unmesh"],["unmeshed"],["unmeshes"],["unmet"],["unmew"],["unmewed"],["unmewing"],["unmews"],["unmilled"],["unmingle"],["unmiter"],["unmiters"],["unmitre"],["unmitred"],["unmitres"],["unmixed"],["unmixt"],["unmodish"],["unmold"],["unmolded"],["unmolds"],["unmolten"],["unmoor"],["unmoored"],["unmoors"],["unmoral"],["unmoved"],["unmoving"],["unmown"],["unmuffle"],["unmuzzle"],["unnail"],["unnailed"],["unnails"],["unnamed"],["unneeded"],["unnerve"],["unnerved"],["unnerves"],["unnoisy"],["unnoted"],["unoiled"],["unopen"],["unopened"],["unornate"],["unowned"],["unpack"],["unpacked"],["unpacker"],["unpacks"],["unpaged"],["unpaid"],["unpaired"],["unparted"],["unpaved"],["unpaying"],["unpeg"],["unpegged"],["unpegs"],["unpen"],["unpenned"],["unpens"],["unpent"],["unpeople"],["unperson"],["unpick"],["unpicked"],["unpicks"],["unpile"],["unpiled"],["unpiles"],["unpiling"],["unpin"],["unpinned"],["unpins"],["unpitied"],["unplaced"],["unplait"],["unplaits"],["unplayed"],["unpliant"],["unplowed"],["unplug"],["unplugs"],["unpoetic"],["unpoised"],["unpolite"],["unpolled"],["unposed"],["unposted"],["unpotted"],["unpretty"],["unpriced"],["unprimed"],["unprized"],["unprobed"],["unproved"],["unproven"],["unpruned"],["unpucker"],["unpure"],["unpurged"],["unpuzzle"],["unquiet"],["unquiets"],["unquote"],["unquoted"],["unquotes"],["unraised"],["unraked"],["unranked"],["unrated"],["unravel"],["unravels"],["unrazed"],["unread"],["unready"],["unreal"],["unreally"],["unreason"],["unreel"],["unreeled"],["unreeler"],["unreels"],["unreeve"],["unreeved"],["unreeves"],["unrent"],["unrented"],["unrepaid"],["unrepair"],["unrest"],["unrested"],["unrests"],["unrhymed"],["unriddle"],["unrifled"],["unrig"],["unrigged"],["unrigs"],["unrimed"],["unrinsed"],["unrip"],["unripe"],["unripely"],["unriper"],["unripest"],["unripped"],["unrips"],["unrisen"],["unrobe"],["unrobed"],["unrobes"],["unrobing"],["unroll"],["unrolled"],["unrolls"],["unroof"],["unroofed"],["unroofs"],["unroot"],["unrooted"],["unroots"],["unroped"],["unrough"],["unround"],["unrounds"],["unrove"],["unroven"],["unruled"],["unrulier"],["unruly"],["unrushed"],["unrusted"],["uns"],["unsaddle"],["unsafe"],["unsafely"],["unsafety"],["unsaid"],["unsalted"],["unsated"],["unsaved"],["unsavory"],["unsawed"],["unsawn"],["unsay"],["unsaying"],["unsays"],["unscaled"],["unscrew"],["unscrews"],["unseal"],["unsealed"],["unseals"],["unseam"],["unseamed"],["unseams"],["unseared"],["unseat"],["unseated"],["unseats"],["unseeded"],["unseeing"],["unseemly"],["unseen"],["unseized"],["unsent"],["unserved"],["unset"],["unsets"],["unsettle"],["unsew"],["unsewed"],["unsewing"],["unsewn"],["unsews"],["unsex"],["unsexed"],["unsexes"],["unsexing"],["unsexual"],["unsexy"],["unshaded"],["unshaken"],["unshamed"],["unshaped"],["unshapen"],["unshared"],["unsharp"],["unshaved"],["unshaven"],["unshed"],["unshell"],["unshells"],["unshift"],["unshifts"],["unship"],["unships"],["unshod"],["unshorn"],["unshowy"],["unshrunk"],["unshut"],["unsicker"],["unsifted"],["unsight"],["unsights"],["unsigned"],["unsilent"],["unsinful"],["unsized"],["unslaked"],["unsliced"],["unsling"],["unslings"],["unslung"],["unsmart"],["unsmoked"],["unsnap"],["unsnaps"],["unsnarl"],["unsnarls"],["unsoaked"],["unsober"],["unsocial"],["unsoiled"],["unsold"],["unsolder"],["unsolid"],["unsolved"],["unsoncy"],["unsonsie"],["unsonsy"],["unsorted"],["unsought"],["unsound"],["unsoured"],["unsowed"],["unsown"],["unspeak"],["unspeaks"],["unspent"],["unsphere"],["unspilt"],["unsplit"],["unspoilt"],["unspoke"],["unspoken"],["unsprung"],["unspun"],["unstable"],["unstably"],["unstack"],["unstacks"],["unstate"],["unstated"],["unstates"],["unsteady"],["unsteel"],["unsteels"],["unstep"],["unsteps"],["unstick"],["unsticks"],["unstitch"],["unstoned"],["unstop"],["unstops"],["unstrap"],["unstraps"],["unstress"],["unstring"],["unstrung"],["unstuck"],["unstuffy"],["unstung"],["unsubtle"],["unsubtly"],["unsuited"],["unsung"],["unsunk"],["unsure"],["unsurely"],["unswathe"],["unswayed"],["unswear"],["unswears"],["unswept"],["unswore"],["unsworn"],["untack"],["untacked"],["untacks"],["untagged"],["untaken"],["untame"],["untamed"],["untangle"],["untanned"],["untapped"],["untasted"],["untaught"],["untaxed"],["unteach"],["untended"],["untented"],["untested"],["untether"],["unthawed"],["unthink"],["unthinks"],["unthread"],["unthrone"],["untidied"],["untidier"],["untidies"],["untidily"],["untidy"],["untie"],["untied"],["unties"],["until"],["untilled"],["untilted"],["untimely"],["untinged"],["untipped"],["untired"],["untiring"],["untitled"],["unto"],["untold"],["untorn"],["untoward"],["untraced"],["untread"],["untreads"],["untrendy"],["untried"],["untrim"],["untrims"],["untrod"],["untrue"],["untruer"],["untruest"],["untruly"],["untruss"],["untrusty"],["untruth"],["untruths"],["untuck"],["untucked"],["untucks"],["untufted"],["untune"],["untuned"],["untunes"],["untuning"],["unturned"],["untwine"],["untwined"],["untwines"],["untwist"],["untwists"],["untying"],["ununited"],["unurged"],["unusable"],["unused"],["unusual"],["unvalued"],["unvaried"],["unveil"],["unveiled"],["unveils"],["unveined"],["unversed"],["unvexed"],["unvext"],["unviable"],["unvocal"],["unvoice"],["unvoiced"],["unvoices"],["unwalled"],["unwaning"],["unwanted"],["unwarier"],["unwarily"],["unwarmed"],["unwarned"],["unwarped"],["unwary"],["unwashed"],["unwasted"],["unwaxed"],["unweaned"],["unweary"],["unweave"],["unweaves"],["unwed"],["unwedded"],["unweeded"],["unweight"],["unwelded"],["unwell"],["unwept"],["unwetted"],["unwhite"],["unwieldy"],["unwifely"],["unwilled"],["unwind"],["unwinder"],["unwinds"],["unwisdom"],["unwise"],["unwisely"],["unwiser"],["unwisest"],["unwish"],["unwished"],["unwishes"],["unwit"],["unwits"],["unwitted"],["unwon"],["unwonted"],["unwooded"],["unwooed"],["unworked"],["unworn"],["unworthy"],["unwound"],["unwove"],["unwoven"],["unwrap"],["unwraps"],["unwrung"],["unyeaned"],["unyoke"],["unyoked"],["unyokes"],["unyoking"],["unyoung"],["unzip"],["unzipped"],["unzips"],["unzoned"],["up"],["upas"],["upases"],["upbear"],["upbearer"],["upbears"],["upbeat"],["upbeats"],["upbind"],["upbinds"],["upboil"],["upboiled"],["upboils"],["upbore"],["upborne"],["upbound"],["upbow"],["upbows"],["upbraid"],["upbraids"],["upbuild"],["upbuilds"],["upbuilt"],["upby"],["upbye"],["upcast"],["upcasts"],["upchuck"],["upchucks"],["upclimb"],["upclimbs"],["upcoil"],["upcoiled"],["upcoils"],["upcoming"],["upcurl"],["upcurled"],["upcurls"],["upcurve"],["upcurved"],["upcurves"],["updart"],["updarted"],["updarts"],["update"],["updated"],["updater"],["updaters"],["updates"],["updating"],["updive"],["updived"],["updives"],["updiving"],["updo"],["updos"],["updove"],["updraft"],["updrafts"],["updried"],["updries"],["updry"],["updrying"],["upend"],["upended"],["upending"],["upends"],["upfield"],["upfling"],["upflings"],["upflow"],["upflowed"],["upflows"],["upflung"],["upfold"],["upfolded"],["upfolds"],["upfront"],["upgather"],["upgaze"],["upgazed"],["upgazes"],["upgazing"],["upgird"],["upgirded"],["upgirds"],["upgirt"],["upgoing"],["upgrade"],["upgraded"],["upgrades"],["upgrew"],["upgrow"],["upgrown"],["upgrows"],["upgrowth"],["upheap"],["upheaped"],["upheaps"],["upheaval"],["upheave"],["upheaved"],["upheaver"],["upheaves"],["upheld"],["uphill"],["uphills"],["uphoard"],["uphoards"],["uphold"],["upholder"],["upholds"],["uphove"],["uphroe"],["uphroes"],["upkeep"],["upkeeps"],["upland"],["uplander"],["uplands"],["upleap"],["upleaped"],["upleaps"],["upleapt"],["uplift"],["uplifted"],["uplifter"],["uplifts"],["uplight"],["uplights"],["uplit"],["upmarket"],["upmost"],["upo"],["upon"],["upped"],["upper"],["uppercut"],["uppers"],["uppile"],["uppiled"],["uppiles"],["uppiling"],["upping"],["uppings"],["uppish"],["uppishly"],["uppity"],["upprop"],["upprops"],["upraise"],["upraised"],["upraiser"],["upraises"],["upreach"],["uprear"],["upreared"],["uprears"],["upright"],["uprights"],["uprise"],["uprisen"],["upriser"],["uprisers"],["uprises"],["uprising"],["upriver"],["uprivers"],["uproar"],["uproars"],["uproot"],["uprootal"],["uprooted"],["uprooter"],["uproots"],["uprose"],["uprouse"],["uproused"],["uprouses"],["uprush"],["uprushed"],["uprushes"],["ups"],["upscale"],["upsend"],["upsends"],["upsent"],["upset"],["upsets"],["upsetter"],["upshift"],["upshifts"],["upshoot"],["upshoots"],["upshot"],["upshots"],["upside"],["upsides"],["upsilon"],["upsilons"],["upsoar"],["upsoared"],["upsoars"],["upsprang"],["upspring"],["upsprung"],["upstage"],["upstaged"],["upstages"],["upstair"],["upstairs"],["upstand"],["upstands"],["upstare"],["upstared"],["upstares"],["upstart"],["upstarts"],["upstate"],["upstater"],["upstates"],["upstep"],["upsteps"],["upstir"],["upstirs"],["upstood"],["upstream"],["upstroke"],["upsurge"],["upsurged"],["upsurges"],["upsweep"],["upsweeps"],["upswell"],["upswells"],["upswept"],["upswing"],["upswings"],["upswung"],["uptake"],["uptakes"],["uptear"],["uptears"],["upthrew"],["upthrow"],["upthrown"],["upthrows"],["upthrust"],["uptick"],["upticks"],["uptight"],["uptilt"],["uptilted"],["uptilts"],["uptime"],["uptimes"],["uptore"],["uptorn"],["uptoss"],["uptossed"],["uptosses"],["uptown"],["uptowner"],["uptowns"],["uptrend"],["uptrends"],["upturn"],["upturned"],["upturns"],["upwaft"],["upwafted"],["upwafts"],["upward"],["upwardly"],["upwards"],["upwell"],["upwelled"],["upwells"],["upwind"],["upwinds"],["uracil"],["uracils"],["uraei"],["uraemia"],["uraemias"],["uraemic"],["uraeus"],["uraeuses"],["uralite"],["uralites"],["uralitic"],["urania"],["uranias"],["uranic"],["uranide"],["uranides"],["uranism"],["uranisms"],["uranite"],["uranites"],["uranitic"],["uranium"],["uraniums"],["uranous"],["uranyl"],["uranylic"],["uranyls"],["urare"],["urares"],["urari"],["uraris"],["urase"],["urases"],["urate"],["urates"],["uratic"],["urb"],["urban"],["urbane"],["urbanely"],["urbaner"],["urbanest"],["urbanise"],["urbanism"],["urbanist"],["urbanite"],["urbanity"],["urbanize"],["urbia"],["urbias"],["urbs"],["urchin"],["urchins"],["urd"],["urds"],["urea"],["ureal"],["ureas"],["urease"],["ureases"],["uredia"],["uredial"],["uredinia"],["uredium"],["uredo"],["uredos"],["ureic"],["ureide"],["ureides"],["uremia"],["uremias"],["uremic"],["ureter"],["ureteral"],["ureteric"],["ureters"],["urethan"],["urethane"],["urethans"],["urethra"],["urethrae"],["urethral"],["urethras"],["uretic"],["urge"],["urged"],["urgency"],["urgent"],["urgently"],["urger"],["urgers"],["urges"],["urging"],["urgingly"],["urial"],["urials"],["uric"],["uridine"],["uridines"],["urinal"],["urinals"],["urinary"],["urinate"],["urinated"],["urinates"],["urine"],["urinemia"],["urinemic"],["urines"],["urinose"],["urinous"],["urn"],["urnlike"],["urns"],["urochord"],["urodele"],["urodeles"],["urolith"],["uroliths"],["urologic"],["urology"],["uropod"],["uropodal"],["uropods"],["uropygia"],["uroscopy"],["urostyle"],["ursa"],["ursae"],["ursiform"],["ursine"],["urtext"],["urtexts"],["urticant"],["urticate"],["urus"],["uruses"],["urushiol"],["us"],["usable"],["usably"],["usage"],["usages"],["usance"],["usances"],["usaunce"],["usaunces"],["use"],["useable"],["useably"],["used"],["useful"],["usefully"],["useless"],["user"],["users"],["uses"],["usher"],["ushered"],["ushering"],["ushers"],["using"],["usnea"],["usneas"],["usquabae"],["usque"],["usquebae"],["usques"],["ustulate"],["usual"],["usually"],["usuals"],["usufruct"],["usurer"],["usurers"],["usuries"],["usurious"],["usurp"],["usurped"],["usurper"],["usurpers"],["usurping"],["usurps"],["usury"],["ut"],["uta"],["utas"],["utensil"],["utensils"],["uteri"],["uterine"],["uterus"],["uteruses"],["utile"],["utilidor"],["utilise"],["utilised"],["utiliser"],["utilises"],["utility"],["utilize"],["utilized"],["utilizer"],["utilizes"],["utmost"],["utmosts"],["utopia"],["utopian"],["utopians"],["utopias"],["utopism"],["utopisms"],["utopist"],["utopists"],["utricle"],["utricles"],["utriculi"],["uts"],["utter"],["uttered"],["utterer"],["utterers"],["uttering"],["utterly"],["utters"],["uvea"],["uveal"],["uveas"],["uveitic"],["uveitis"],["uveous"],["uvula"],["uvulae"],["uvular"],["uvularly"],["uvulars"],["uvulas"],["uvulitis"],["uxorial"],["uxorious"],["vac"],["vacancy"],["vacant"],["vacantly"],["vacate"],["vacated"],["vacates"],["vacating"],["vacation"],["vaccina"],["vaccinal"],["vaccinas"],["vaccine"],["vaccinee"],["vaccines"],["vaccinia"],["vacs"],["vacua"],["vacuity"],["vacuolar"],["vacuole"],["vacuoles"],["vacuous"],["vacuum"],["vacuumed"],["vacuums"],["vadose"],["vagabond"],["vagal"],["vagally"],["vagaries"],["vagary"],["vagi"],["vagile"],["vagility"],["vagina"],["vaginae"],["vaginal"],["vaginas"],["vaginate"],["vagotomy"],["vagrancy"],["vagrant"],["vagrants"],["vagrom"],["vague"],["vaguely"],["vaguer"],["vaguest"],["vagus"],["vahine"],["vahines"],["vail"],["vailed"],["vailing"],["vails"],["vain"],["vainer"],["vainest"],["vainly"],["vainness"],["vair"],["vairs"],["vakeel"],["vakeels"],["vakil"],["vakils"],["valance"],["valanced"],["valances"],["vale"],["valence"],["valences"],["valencia"],["valency"],["valerate"],["valerian"],["valeric"],["vales"],["valet"],["valeted"],["valeting"],["valets"],["valgoid"],["valgus"],["valguses"],["valiance"],["valiancy"],["valiant"],["valiants"],["valid"],["validate"],["validity"],["validly"],["valine"],["valines"],["valise"],["valises"],["valkyr"],["valkyrie"],["valkyrs"],["vallate"],["valley"],["valleys"],["valonia"],["valonias"],["valor"],["valorise"],["valorize"],["valorous"],["valors"],["valour"],["valours"],["valse"],["valses"],["valuable"],["valuably"],["valuate"],["valuated"],["valuates"],["valuator"],["value"],["valued"],["valuer"],["valuers"],["values"],["valuing"],["valuta"],["valutas"],["valval"],["valvar"],["valvate"],["valve"],["valved"],["valvelet"],["valves"],["valving"],["valvula"],["valvulae"],["valvular"],["valvule"],["valvules"],["vambrace"],["vamoose"],["vamoosed"],["vamooses"],["vamose"],["vamosed"],["vamoses"],["vamosing"],["vamp"],["vamped"],["vamper"],["vampers"],["vamping"],["vampire"],["vampires"],["vampiric"],["vampish"],["vamps"],["van"],["vanadate"],["vanadic"],["vanadium"],["vanadous"],["vanda"],["vandal"],["vandalic"],["vandals"],["vandas"],["vandyke"],["vandyked"],["vandykes"],["vane"],["vaned"],["vanes"],["vang"],["vangs"],["vanguard"],["vanilla"],["vanillas"],["vanillic"],["vanillin"],["vanish"],["vanished"],["vanisher"],["vanishes"],["vanitied"],["vanities"],["vanitory"],["vanity"],["vanman"],["vanmen"],["vanned"],["vanner"],["vanners"],["vanning"],["vanpool"],["vanpools"],["vanquish"],["vans"],["vantage"],["vantages"],["vanward"],["vapid"],["vapidity"],["vapidly"],["vapor"],["vapored"],["vaporer"],["vaporers"],["vaporing"],["vaporise"],["vaporish"],["vaporize"],["vaporous"],["vapors"],["vapory"],["vapour"],["vapoured"],["vapourer"],["vapours"],["vapoury"],["vaquero"],["vaqueros"],["var"],["vara"],["varactor"],["varas"],["varia"],["variable"],["variably"],["variance"],["variant"],["variants"],["variate"],["variated"],["variates"],["varices"],["varicose"],["varied"],["variedly"],["varier"],["variers"],["varies"],["varietal"],["variety"],["variform"],["variola"],["variolar"],["variolas"],["variole"],["varioles"],["variorum"],["various"],["varistor"],["varix"],["varlet"],["varletry"],["varlets"],["varment"],["varments"],["varmint"],["varmints"],["varna"],["varnas"],["varnish"],["varnishy"],["varoom"],["varoomed"],["varooms"],["vars"],["varsity"],["varus"],["varuses"],["varve"],["varved"],["varves"],["vary"],["varying"],["vas"],["vasa"],["vasal"],["vascula"],["vascular"],["vasculum"],["vase"],["vaselike"],["vases"],["vasiform"],["vasotomy"],["vassal"],["vassals"],["vast"],["vaster"],["vastest"],["vastier"],["vastiest"],["vastity"],["vastly"],["vastness"],["vasts"],["vasty"],["vat"],["vatful"],["vatfuls"],["vatic"],["vatical"],["vaticide"],["vats"],["vatted"],["vatting"],["vatu"],["vatus"],["vau"],["vault"],["vaulted"],["vaulter"],["vaulters"],["vaultier"],["vaulting"],["vaults"],["vaulty"],["vaunt"],["vaunted"],["vaunter"],["vaunters"],["vauntful"],["vauntie"],["vaunting"],["vaunts"],["vaunty"],["vaus"],["vav"],["vavasor"],["vavasors"],["vavasour"],["vavassor"],["vavs"],["vaw"],["vaward"],["vawards"],["vawntie"],["vaws"],["veal"],["vealed"],["vealer"],["vealers"],["vealier"],["vealiest"],["vealing"],["veals"],["vealy"],["vector"],["vectored"],["vectors"],["vedalia"],["vedalias"],["vedette"],["vedettes"],["vee"],["veejay"],["veejays"],["veena"],["veenas"],["veep"],["veepee"],["veepees"],["veeps"],["veer"],["veered"],["veeries"],["veering"],["veers"],["veery"],["vees"],["veg"],["vegan"],["veganism"],["vegans"],["vegetal"],["vegetant"],["vegetate"],["vegete"],["vegetist"],["vegetive"],["veggie"],["veggies"],["vegie"],["vegies"],["vehement"],["vehicle"],["vehicles"],["veil"],["veiled"],["veiledly"],["veiler"],["veilers"],["veiling"],["veilings"],["veillike"],["veils"],["vein"],["veinal"],["veined"],["veiner"],["veiners"],["veinier"],["veiniest"],["veining"],["veinings"],["veinless"],["veinlet"],["veinlets"],["veinlike"],["veins"],["veinule"],["veinules"],["veinulet"],["veiny"],["vela"],["velamen"],["velamina"],["velar"],["velaria"],["velarium"],["velarize"],["velars"],["velate"],["veld"],["velds"],["veldt"],["veldts"],["veliger"],["veligers"],["velites"],["velleity"],["vellum"],["vellums"],["veloce"],["velocity"],["velour"],["velours"],["veloute"],["veloutes"],["velum"],["velure"],["velured"],["velures"],["veluring"],["velveret"],["velvet"],["velveted"],["velvets"],["velvety"],["vena"],["venae"],["venal"],["venality"],["venally"],["venatic"],["venation"],["vend"],["vendable"],["vendace"],["vendaces"],["vended"],["vendee"],["vendees"],["vender"],["venders"],["vendetta"],["vendeuse"],["vendible"],["vendibly"],["vending"],["vendor"],["vendors"],["vends"],["vendue"],["vendues"],["veneer"],["veneered"],["veneerer"],["veneers"],["venenate"],["venenose"],["venerate"],["venereal"],["veneries"],["venery"],["venetian"],["venge"],["venged"],["vengeful"],["venges"],["venging"],["venial"],["venially"],["venin"],["venine"],["venines"],["venins"],["venire"],["venires"],["venison"],["venisons"],["venogram"],["venom"],["venomed"],["venomer"],["venomers"],["venoming"],["venomous"],["venoms"],["venose"],["venosity"],["venous"],["venously"],["vent"],["ventage"],["ventages"],["ventail"],["ventails"],["vented"],["venter"],["venters"],["venting"],["ventless"],["ventral"],["ventrals"],["vents"],["venture"],["ventured"],["venturer"],["ventures"],["venturi"],["venturis"],["venue"],["venues"],["venular"],["venule"],["venules"],["venulose"],["venulous"],["vera"],["veracity"],["veranda"],["verandah"],["verandas"],["veratria"],["veratrin"],["veratrum"],["verb"],["verbal"],["verbally"],["verbals"],["verbatim"],["verbena"],["verbenas"],["verbiage"],["verbid"],["verbids"],["verbify"],["verbile"],["verbiles"],["verbless"],["verbose"],["verboten"],["verbs"],["verdancy"],["verdant"],["verderer"],["verderor"],["verdict"],["verdicts"],["verdin"],["verdins"],["verditer"],["verdure"],["verdured"],["verdures"],["verecund"],["verge"],["verged"],["vergence"],["verger"],["vergers"],["verges"],["verging"],["verglas"],["veridic"],["verier"],["veriest"],["verified"],["verifier"],["verifies"],["verify"],["verily"],["verism"],["verismo"],["verismos"],["verisms"],["verist"],["veristic"],["verists"],["veritas"],["verite"],["verites"],["verities"],["verity"],["verjuice"],["vermeil"],["vermeils"],["vermes"],["vermian"],["vermin"],["vermis"],["vermoulu"],["vermouth"],["vermuth"],["vermuths"],["vernacle"],["vernal"],["vernally"],["vernicle"],["vernier"],["verniers"],["vernix"],["vernixes"],["veronica"],["verruca"],["verrucae"],["versal"],["versant"],["versants"],["verse"],["versed"],["verseman"],["versemen"],["verser"],["versers"],["verses"],["verset"],["versets"],["versicle"],["versify"],["versine"],["versines"],["versing"],["version"],["versions"],["verso"],["versos"],["verst"],["verste"],["verstes"],["versts"],["versus"],["vert"],["vertebra"],["vertex"],["vertexes"],["vertical"],["vertices"],["verticil"],["vertigo"],["vertigos"],["verts"],["vertu"],["vertus"],["vervain"],["vervains"],["verve"],["verves"],["vervet"],["vervets"],["very"],["vesica"],["vesicae"],["vesical"],["vesicant"],["vesicate"],["vesicle"],["vesicles"],["vesicula"],["vesper"],["vesperal"],["vespers"],["vespiary"],["vespid"],["vespids"],["vespine"],["vessel"],["vesseled"],["vessels"],["vest"],["vesta"],["vestal"],["vestally"],["vestals"],["vestas"],["vested"],["vestee"],["vestees"],["vestiary"],["vestige"],["vestiges"],["vestigia"],["vesting"],["vestings"],["vestless"],["vestlike"],["vestment"],["vestral"],["vestries"],["vestry"],["vests"],["vestural"],["vesture"],["vestured"],["vestures"],["vesuvian"],["vet"],["vetch"],["vetches"],["veteran"],["veterans"],["vetiver"],["vetivers"],["vetivert"],["veto"],["vetoed"],["vetoer"],["vetoers"],["vetoes"],["vetoing"],["vets"],["vetted"],["vetting"],["vex"],["vexation"],["vexed"],["vexedly"],["vexer"],["vexers"],["vexes"],["vexil"],["vexilla"],["vexillar"],["vexillum"],["vexils"],["vexing"],["vexingly"],["vext"],["via"],["viable"],["viably"],["viaduct"],["viaducts"],["vial"],["vialed"],["vialing"],["vialled"],["vialling"],["vials"],["viand"],["viands"],["viatic"],["viatica"],["viatical"],["viaticum"],["viator"],["viatores"],["viators"],["vibe"],["vibes"],["vibist"],["vibists"],["vibrance"],["vibrancy"],["vibrant"],["vibrants"],["vibrate"],["vibrated"],["vibrates"],["vibrato"],["vibrator"],["vibratos"],["vibrio"],["vibrioid"],["vibrion"],["vibrions"],["vibrios"],["vibrissa"],["vibronic"],["viburnum"],["vicar"],["vicarage"],["vicarate"],["vicarial"],["vicarly"],["vicars"],["vice"],["viced"],["viceless"],["vicenary"],["viceroy"],["viceroys"],["vices"],["vichies"],["vichy"],["vicinage"],["vicinal"],["vicing"],["vicinity"],["vicious"],["vicomte"],["vicomtes"],["victim"],["victims"],["victor"],["victoria"],["victors"],["victory"],["victress"],["victual"],["victuals"],["vicugna"],["vicugnas"],["vicuna"],["vicunas"],["vide"],["video"],["videos"],["videotex"],["vidette"],["videttes"],["vidicon"],["vidicons"],["viduity"],["vie"],["vied"],["vier"],["viers"],["vies"],["view"],["viewable"],["viewdata"],["viewed"],["viewer"],["viewers"],["viewier"],["viewiest"],["viewing"],["viewings"],["viewless"],["views"],["viewy"],["vig"],["viga"],["vigas"],["vigil"],["vigilant"],["vigils"],["vigneron"],["vignette"],["vigor"],["vigorish"],["vigoroso"],["vigorous"],["vigors"],["vigour"],["vigours"],["vigs"],["viking"],["vikings"],["vilayet"],["vilayets"],["vile"],["vilely"],["vileness"],["viler"],["vilest"],["vilified"],["vilifier"],["vilifies"],["vilify"],["vilipend"],["vill"],["villa"],["villadom"],["villae"],["village"],["villager"],["villages"],["villain"],["villains"],["villainy"],["villas"],["villatic"],["villein"],["villeins"],["villi"],["villose"],["villous"],["vills"],["villus"],["vim"],["vimen"],["vimina"],["viminal"],["vims"],["vin"],["vina"],["vinal"],["vinals"],["vinas"],["vinasse"],["vinasses"],["vinca"],["vincas"],["vincible"],["vincibly"],["vincula"],["vinculum"],["vine"],["vineal"],["vined"],["vinegar"],["vinegars"],["vinegary"],["vineries"],["vinery"],["vines"],["vineyard"],["vinic"],["vinier"],["viniest"],["vinifera"],["vinified"],["vinifies"],["vinify"],["vining"],["vino"],["vinos"],["vinosity"],["vinous"],["vinously"],["vins"],["vintage"],["vintager"],["vintages"],["vintner"],["vintners"],["viny"],["vinyl"],["vinylic"],["vinyls"],["viol"],["viola"],["violable"],["violably"],["violas"],["violate"],["violated"],["violater"],["violates"],["violator"],["violence"],["violent"],["violet"],["violets"],["violin"],["violins"],["violist"],["violists"],["violone"],["violones"],["viols"],["viomycin"],["viper"],["viperine"],["viperish"],["viperous"],["vipers"],["virago"],["viragoes"],["viragos"],["viral"],["virally"],["virelai"],["virelais"],["virelay"],["virelays"],["viremia"],["viremias"],["viremic"],["vireo"],["vireos"],["vires"],["virga"],["virgas"],["virgate"],["virgates"],["virgin"],["virginal"],["virgins"],["virgule"],["virgules"],["viricide"],["virid"],["viridian"],["viridity"],["virile"],["virilely"],["virilism"],["virility"],["virion"],["virions"],["virl"],["virls"],["viroid"],["viroids"],["virology"],["viroses"],["virosis"],["virtu"],["virtual"],["virtue"],["virtues"],["virtuosa"],["virtuose"],["virtuosi"],["virtuoso"],["virtuous"],["virtus"],["virucide"],["virulent"],["virus"],["viruses"],["vis"],["visa"],["visaed"],["visage"],["visaged"],["visages"],["visaing"],["visard"],["visards"],["visas"],["viscacha"],["viscera"],["visceral"],["viscid"],["viscidly"],["viscoid"],["viscose"],["viscoses"],["viscount"],["viscous"],["viscus"],["vise"],["vised"],["viseed"],["viseing"],["viselike"],["vises"],["visible"],["visibly"],["vising"],["vision"],["visional"],["visioned"],["visions"],["visit"],["visitant"],["visited"],["visiter"],["visiters"],["visiting"],["visitor"],["visitors"],["visits"],["visive"],["visor"],["visored"],["visoring"],["visors"],["vista"],["vistaed"],["vistas"],["visual"],["visually"],["visuals"],["vita"],["vitae"],["vital"],["vitalise"],["vitalism"],["vitalist"],["vitality"],["vitalize"],["vitally"],["vitals"],["vitamer"],["vitamers"],["vitamin"],["vitamine"],["vitamins"],["vitellin"],["vitellus"],["vitesse"],["vitesses"],["vitiable"],["vitiate"],["vitiated"],["vitiates"],["vitiator"],["vitiligo"],["vitrain"],["vitrains"],["vitreous"],["vitric"],["vitrics"],["vitrify"],["vitrine"],["vitrines"],["vitriol"],["vitriols"],["vitta"],["vittae"],["vittate"],["vittle"],["vittled"],["vittles"],["vittling"],["vituline"],["viva"],["vivace"],["vivaces"],["vivacity"],["vivaria"],["vivaries"],["vivarium"],["vivary"],["vivas"],["vive"],["viverrid"],["vivers"],["vivid"],["vivider"],["vividest"],["vividly"],["vivific"],["vivified"],["vivifier"],["vivifies"],["vivify"],["vivipara"],["vivisect"],["vixen"],["vixenish"],["vixenly"],["vixens"],["vizard"],["vizarded"],["vizards"],["vizcacha"],["vizier"],["viziers"],["vizir"],["vizirate"],["vizirial"],["vizirs"],["vizor"],["vizored"],["vizoring"],["vizors"],["vizsla"],["vizslas"],["vocable"],["vocables"],["vocably"],["vocal"],["vocalic"],["vocalics"],["vocalise"],["vocalism"],["vocalist"],["vocality"],["vocalize"],["vocally"],["vocals"],["vocation"],["vocative"],["voces"],["vocoder"],["vocoders"],["vodka"],["vodkas"],["vodoun"],["vodouns"],["vodun"],["voduns"],["voe"],["voes"],["vogie"],["vogue"],["vogues"],["voguish"],["voice"],["voiced"],["voiceful"],["voicer"],["voicers"],["voices"],["voicing"],["void"],["voidable"],["voidance"],["voided"],["voider"],["voiders"],["voiding"],["voidness"],["voids"],["voila"],["voile"],["voiles"],["volant"],["volante"],["volar"],["volatile"],["volcanic"],["volcano"],["volcanos"],["vole"],["voled"],["voleries"],["volery"],["voles"],["voling"],["volitant"],["volition"],["volitive"],["volley"],["volleyed"],["volleyer"],["volleys"],["volost"],["volosts"],["volplane"],["volt"],["volta"],["voltage"],["voltages"],["voltaic"],["voltaism"],["volte"],["voltes"],["volti"],["volts"],["voluble"],["volubly"],["volume"],["volumed"],["volumes"],["voluming"],["volute"],["voluted"],["volutes"],["volutin"],["volutins"],["volution"],["volva"],["volvas"],["volvate"],["volvox"],["volvoxes"],["volvuli"],["volvulus"],["vomer"],["vomerine"],["vomers"],["vomica"],["vomicae"],["vomit"],["vomited"],["vomiter"],["vomiters"],["vomiting"],["vomitive"],["vomito"],["vomitory"],["vomitos"],["vomitous"],["vomits"],["vomitus"],["von"],["voodoo"],["voodooed"],["voodoos"],["voracity"],["vorlage"],["vorlages"],["vortex"],["vortexes"],["vortical"],["vortices"],["votable"],["votaress"],["votaries"],["votarist"],["votary"],["vote"],["voteable"],["voted"],["voteless"],["voter"],["voters"],["votes"],["voting"],["votive"],["votively"],["votress"],["vouch"],["vouched"],["vouchee"],["vouchees"],["voucher"],["vouchers"],["vouches"],["vouching"],["voussoir"],["vouvray"],["vouvrays"],["vow"],["vowed"],["vowel"],["vowelize"],["vowels"],["vower"],["vowers"],["vowing"],["vowless"],["vows"],["vox"],["voyage"],["voyaged"],["voyager"],["voyagers"],["voyages"],["voyageur"],["voyaging"],["voyeur"],["voyeurs"],["vroom"],["vroomed"],["vrooming"],["vrooms"],["vrouw"],["vrouws"],["vrow"],["vrows"],["vug"],["vugg"],["vuggier"],["vuggiest"],["vuggs"],["vuggy"],["vugh"],["vughs"],["vugs"],["vulcanic"],["vulgar"],["vulgarer"],["vulgarly"],["vulgars"],["vulgate"],["vulgates"],["vulgo"],["vulgus"],["vulguses"],["vulpine"],["vulture"],["vultures"],["vulva"],["vulvae"],["vulval"],["vulvar"],["vulvas"],["vulvate"],["vulvitis"],["vying"],["vyingly"],["wab"],["wabble"],["wabbled"],["wabbler"],["wabblers"],["wabbles"],["wabblier"],["wabbling"],["wabbly"],["wabs"],["wack"],["wacke"],["wackes"],["wackier"],["wackiest"],["wackily"],["wacko"],["wackos"],["wacks"],["wacky"],["wad"],["wadable"],["wadded"],["wadder"],["wadders"],["waddie"],["waddied"],["waddies"],["wadding"],["waddings"],["waddle"],["waddled"],["waddler"],["waddlers"],["waddles"],["waddling"],["waddly"],["waddy"],["waddying"],["wade"],["wadeable"],["waded"],["wader"],["waders"],["wades"],["wadi"],["wadies"],["wading"],["wadis"],["wadmaal"],["wadmaals"],["wadmal"],["wadmals"],["wadmel"],["wadmels"],["wadmol"],["wadmoll"],["wadmolls"],["wadmols"],["wads"],["wadset"],["wadsets"],["wady"],["wae"],["waeful"],["waeness"],["waes"],["waesuck"],["waesucks"],["wafer"],["wafered"],["wafering"],["wafers"],["wafery"],["waff"],["waffed"],["waffie"],["waffies"],["waffing"],["waffle"],["waffled"],["waffles"],["waffling"],["waffs"],["waft"],["waftage"],["waftages"],["wafted"],["wafter"],["wafters"],["wafting"],["wafts"],["wafture"],["waftures"],["wag"],["wage"],["waged"],["wageless"],["wager"],["wagered"],["wagerer"],["wagerers"],["wagering"],["wagers"],["wages"],["wagged"],["wagger"],["waggers"],["waggery"],["wagging"],["waggish"],["waggle"],["waggled"],["waggles"],["waggling"],["waggly"],["waggon"],["waggoned"],["waggoner"],["waggons"],["waging"],["wagon"],["wagonage"],["wagoned"],["wagoner"],["wagoners"],["wagoning"],["wagons"],["wags"],["wagsome"],["wagtail"],["wagtails"],["wahconda"],["wahine"],["wahines"],["wahoo"],["wahoos"],["waif"],["waifed"],["waifing"],["waifs"],["wail"],["wailed"],["wailer"],["wailers"],["wailful"],["wailing"],["wails"],["wailsome"],["wain"],["wains"],["wainscot"],["wair"],["waired"],["wairing"],["wairs"],["waist"],["waisted"],["waister"],["waisters"],["waisting"],["waists"],["wait"],["waited"],["waiter"],["waiters"],["waiting"],["waitings"],["waitress"],["waits"],["waive"],["waived"],["waiver"],["waivers"],["waives"],["waiving"],["wakanda"],["wakandas"],["wake"],["waked"],["wakeful"],["wakeless"],["waken"],["wakened"],["wakener"],["wakeners"],["wakening"],["wakens"],["waker"],["wakerife"],["wakers"],["wakes"],["wakiki"],["wakikis"],["waking"],["wale"],["waled"],["waler"],["walers"],["wales"],["walies"],["waling"],["walk"],["walkable"],["walkaway"],["walked"],["walker"],["walkers"],["walking"],["walkings"],["walkout"],["walkouts"],["walkover"],["walks"],["walkup"],["walkups"],["walkway"],["walkways"],["walkyrie"],["wall"],["walla"],["wallaby"],["wallah"],["wallahs"],["wallaroo"],["wallas"],["walled"],["wallet"],["wallets"],["walleye"],["walleyed"],["walleyes"],["wallie"],["wallies"],["walling"],["wallop"],["walloped"],["walloper"],["wallops"],["wallow"],["wallowed"],["wallower"],["wallows"],["walls"],["wally"],["walnut"],["walnuts"],["walrus"],["walruses"],["waltz"],["waltzed"],["waltzer"],["waltzers"],["waltzes"],["waltzing"],["waly"],["wamble"],["wambled"],["wambles"],["wamblier"],["wambling"],["wambly"],["wame"],["wamefou"],["wamefous"],["wameful"],["wamefuls"],["wames"],["wammus"],["wammuses"],["wampish"],["wampum"],["wampums"],["wampus"],["wampuses"],["wamus"],["wamuses"],["wan"],["wand"],["wander"],["wandered"],["wanderer"],["wanderoo"],["wanders"],["wandle"],["wands"],["wane"],["waned"],["wanes"],["waney"],["wangan"],["wangans"],["wangle"],["wangled"],["wangler"],["wanglers"],["wangles"],["wangling"],["wangun"],["wanguns"],["wanier"],["waniest"],["wanigan"],["wanigans"],["waning"],["wanion"],["wanions"],["wanly"],["wanned"],["wanner"],["wanness"],["wannest"],["wannigan"],["wanning"],["wans"],["want"],["wantage"],["wantages"],["wanted"],["wanter"],["wanters"],["wanting"],["wanton"],["wantoned"],["wantoner"],["wantonly"],["wantons"],["wants"],["wany"],["wap"],["wapiti"],["wapitis"],["wapped"],["wapping"],["waps"],["war"],["warble"],["warbled"],["warbler"],["warblers"],["warbles"],["warbling"],["warcraft"],["ward"],["warded"],["warden"],["wardenry"],["wardens"],["warder"],["warders"],["warding"],["wardress"],["wardrobe"],["wardroom"],["wards"],["wardship"],["ware"],["wared"],["wareroom"],["wares"],["warfare"],["warfares"],["warfarin"],["warhead"],["warheads"],["warhorse"],["warier"],["wariest"],["warily"],["wariness"],["waring"],["warison"],["warisons"],["wark"],["warked"],["warking"],["warks"],["warless"],["warlike"],["warlock"],["warlocks"],["warlord"],["warlords"],["warm"],["warmaker"],["warmed"],["warmer"],["warmers"],["warmest"],["warming"],["warmish"],["warmly"],["warmness"],["warmouth"],["warms"],["warmth"],["warmths"],["warmup"],["warmups"],["warn"],["warned"],["warner"],["warners"],["warning"],["warnings"],["warns"],["warp"],["warpage"],["warpages"],["warpath"],["warpaths"],["warped"],["warper"],["warpers"],["warping"],["warplane"],["warpower"],["warps"],["warpwise"],["warragal"],["warrant"],["warrants"],["warranty"],["warred"],["warren"],["warrener"],["warrens"],["warrigal"],["warring"],["warrior"],["warriors"],["wars"],["warsaw"],["warsaws"],["warship"],["warships"],["warsle"],["warsled"],["warsler"],["warslers"],["warsles"],["warsling"],["warstle"],["warstled"],["warstler"],["warstles"],["wart"],["warted"],["warthog"],["warthogs"],["wartier"],["wartiest"],["wartime"],["wartimes"],["wartless"],["wartlike"],["warts"],["warty"],["warwork"],["warworks"],["warworn"],["wary"],["was"],["wasabi"],["wasabis"],["wash"],["washable"],["washbowl"],["washday"],["washdays"],["washed"],["washer"],["washers"],["washes"],["washier"],["washiest"],["washing"],["washings"],["washout"],["washouts"],["washrag"],["washrags"],["washroom"],["washtub"],["washtubs"],["washup"],["washups"],["washy"],["wasp"],["waspier"],["waspiest"],["waspily"],["waspish"],["wasplike"],["wasps"],["waspy"],["wassail"],["wassails"],["wast"],["wastable"],["wastage"],["wastages"],["waste"],["wasted"],["wasteful"],["wastelot"],["waster"],["wasterie"],["wasters"],["wastery"],["wastes"],["wasteway"],["wasting"],["wastrel"],["wastrels"],["wastrie"],["wastries"],["wastry"],["wasts"],["wat"],["watap"],["watape"],["watapes"],["wataps"],["watch"],["watchcry"],["watchdog"],["watched"],["watcher"],["watchers"],["watches"],["watcheye"],["watchful"],["watching"],["watchman"],["watchmen"],["watchout"],["water"],["waterage"],["waterbed"],["waterdog"],["watered"],["waterer"],["waterers"],["waterier"],["waterily"],["watering"],["waterish"],["waterlog"],["waterloo"],["waterman"],["watermen"],["waters"],["waterway"],["watery"],["wats"],["watt"],["wattage"],["wattages"],["wattape"],["wattapes"],["watter"],["wattest"],["watthour"],["wattle"],["wattled"],["wattles"],["wattless"],["wattling"],["watts"],["waucht"],["wauchted"],["wauchts"],["waugh"],["waught"],["waughted"],["waughts"],["wauk"],["wauked"],["wauking"],["wauks"],["waul"],["wauled"],["wauling"],["wauls"],["waur"],["wave"],["waveband"],["waved"],["waveform"],["waveless"],["wavelet"],["wavelets"],["wavelike"],["waveoff"],["waveoffs"],["waver"],["wavered"],["waverer"],["waverers"],["wavering"],["wavers"],["wavery"],["waves"],["wavey"],["waveys"],["wavier"],["wavies"],["waviest"],["wavily"],["waviness"],["waving"],["wavy"],["waw"],["wawl"],["wawled"],["wawling"],["wawls"],["waws"],["wax"],["waxberry"],["waxbill"],["waxbills"],["waxed"],["waxen"],["waxer"],["waxers"],["waxes"],["waxier"],["waxiest"],["waxily"],["waxiness"],["waxing"],["waxings"],["waxlike"],["waxplant"],["waxweed"],["waxweeds"],["waxwing"],["waxwings"],["waxwork"],["waxworks"],["waxworm"],["waxworms"],["waxy"],["way"],["waybill"],["waybills"],["wayfarer"],["waygoing"],["waylaid"],["waylay"],["waylayer"],["waylays"],["wayless"],["ways"],["wayside"],["waysides"],["wayward"],["wayworn"],["we"],["weak"],["weaken"],["weakened"],["weakener"],["weakens"],["weaker"],["weakest"],["weakfish"],["weakish"],["weaklier"],["weakling"],["weakly"],["weakness"],["weakside"],["weal"],["weald"],["wealds"],["weals"],["wealth"],["wealths"],["wealthy"],["wean"],["weaned"],["weaner"],["weaners"],["weaning"],["weanling"],["weans"],["weapon"],["weaponed"],["weaponry"],["weapons"],["wear"],["wearable"],["wearer"],["wearers"],["wearied"],["wearier"],["wearies"],["weariest"],["weariful"],["wearily"],["wearing"],["wearish"],["wears"],["weary"],["wearying"],["weasand"],["weasands"],["weasel"],["weaseled"],["weaselly"],["weasels"],["weason"],["weasons"],["weather"],["weathers"],["weave"],["weaved"],["weaver"],["weavers"],["weaves"],["weaving"],["weazand"],["weazands"],["web"],["webbed"],["webbier"],["webbiest"],["webbing"],["webbings"],["webby"],["weber"],["webers"],["webfed"],["webfeet"],["webfoot"],["webless"],["weblike"],["webs"],["webster"],["websters"],["webworm"],["webworms"],["wecht"],["wechts"],["wed"],["wedded"],["wedder"],["wedders"],["wedding"],["weddings"],["wedel"],["wedeled"],["wedeling"],["wedeln"],["wedelns"],["wedels"],["wedge"],["wedged"],["wedges"],["wedgie"],["wedgier"],["wedgies"],["wedgiest"],["wedging"],["wedgy"],["wedlock"],["wedlocks"],["weds"],["wee"],["weed"],["weeded"],["weeder"],["weeders"],["weedier"],["weediest"],["weedily"],["weeding"],["weedless"],["weedlike"],["weeds"],["weedy"],["week"],["weekday"],["weekdays"],["weekend"],["weekends"],["weeklies"],["weeklong"],["weekly"],["weeks"],["weel"],["ween"],["weened"],["weenie"],["weenier"],["weenies"],["weeniest"],["weening"],["weens"],["weensier"],["weensy"],["weeny"],["weep"],["weeper"],["weepers"],["weepie"],["weepier"],["weepies"],["weepiest"],["weeping"],["weepings"],["weeps"],["weepy"],["weer"],["wees"],["weest"],["weet"],["weeted"],["weeting"],["weets"],["weever"],["weevers"],["weevil"],["weeviled"],["weevilly"],["weevils"],["weevily"],["weewee"],["weeweed"],["weewees"],["weft"],["wefts"],["weftwise"],["weigela"],["weigelas"],["weigelia"],["weigh"],["weighed"],["weigher"],["weighers"],["weighing"],["weighman"],["weighmen"],["weighs"],["weight"],["weighted"],["weighter"],["weights"],["weighty"],["weiner"],["weiners"],["weir"],["weird"],["weirder"],["weirdest"],["weirdie"],["weirdies"],["weirdly"],["weirdo"],["weirdoes"],["weirdos"],["weirds"],["weirdy"],["weirs"],["weka"],["wekas"],["welch"],["welched"],["welcher"],["welchers"],["welches"],["welching"],["welcome"],["welcomed"],["welcomer"],["welcomes"],["weld"],["weldable"],["welded"],["welder"],["welders"],["welding"],["weldless"],["weldment"],["weldor"],["weldors"],["welds"],["welfare"],["welfares"],["welkin"],["welkins"],["well"],["welladay"],["wellaway"],["wellborn"],["wellcurb"],["welldoer"],["welled"],["wellhead"],["wellhole"],["wellie"],["wellies"],["welling"],["wellness"],["wells"],["wellsite"],["welly"],["welsh"],["welshed"],["welsher"],["welshers"],["welshes"],["welshing"],["welt"],["welted"],["welter"],["weltered"],["welters"],["welting"],["weltings"],["welts"],["wen"],["wench"],["wenched"],["wencher"],["wenchers"],["wenches"],["wenching"],["wend"],["wended"],["wendigo"],["wendigos"],["wending"],["wends"],["wennier"],["wenniest"],["wennish"],["wenny"],["wens"],["went"],["wept"],["were"],["weregild"],["werewolf"],["wergeld"],["wergelds"],["wergelt"],["wergelts"],["wergild"],["wergilds"],["wert"],["werwolf"],["weskit"],["weskits"],["wessand"],["wessands"],["west"],["wester"],["westered"],["westerly"],["western"],["westerns"],["westers"],["westing"],["westings"],["westmost"],["wests"],["westward"],["wet"],["wetback"],["wetbacks"],["wether"],["wethers"],["wetland"],["wetlands"],["wetly"],["wetness"],["wetproof"],["wets"],["wettable"],["wetted"],["wetter"],["wetters"],["wettest"],["wetting"],["wettings"],["wettish"],["wha"],["whack"],["whacked"],["whacker"],["whackers"],["whackier"],["whacking"],["whacko"],["whackos"],["whacks"],["whacky"],["whale"],["whaled"],["whaleman"],["whalemen"],["whaler"],["whalers"],["whales"],["whaling"],["whalings"],["wham"],["whammed"],["whammies"],["whamming"],["whammo"],["whammy"],["whamo"],["whams"],["whang"],["whanged"],["whangee"],["whangees"],["whanging"],["whangs"],["whap"],["whapped"],["whapper"],["whappers"],["whapping"],["whaps"],["wharf"],["wharfage"],["wharfed"],["wharfing"],["wharfs"],["wharve"],["wharves"],["what"],["whatever"],["whatnot"],["whatnots"],["whats"],["whaup"],["whaups"],["wheal"],["wheals"],["wheat"],["wheatear"],["wheaten"],["wheatens"],["wheats"],["whee"],["wheedle"],["wheedled"],["wheedler"],["wheedles"],["wheel"],["wheeled"],["wheeler"],["wheelers"],["wheelie"],["wheelies"],["wheeling"],["wheelman"],["wheelmen"],["wheels"],["wheen"],["wheens"],["wheep"],["wheeped"],["wheeping"],["wheeple"],["wheepled"],["wheeples"],["wheeps"],["wheeze"],["wheezed"],["wheezer"],["wheezers"],["wheezes"],["wheezier"],["wheezily"],["wheezing"],["wheezy"],["whelk"],["whelkier"],["whelks"],["whelky"],["whelm"],["whelmed"],["whelming"],["whelms"],["whelp"],["whelped"],["whelping"],["whelps"],["when"],["whenas"],["whence"],["whenever"],["whens"],["where"],["whereas"],["whereat"],["whereby"],["wherein"],["whereof"],["whereon"],["wheres"],["whereto"],["wherever"],["wherried"],["wherries"],["wherry"],["wherve"],["wherves"],["whet"],["whether"],["whets"],["whetted"],["whetter"],["whetters"],["whetting"],["whew"],["whews"],["whey"],["wheyey"],["wheyface"],["wheyish"],["wheys"],["which"],["whicker"],["whickers"],["whid"],["whidah"],["whidahs"],["whidded"],["whidding"],["whids"],["whiff"],["whiffed"],["whiffer"],["whiffers"],["whiffet"],["whiffets"],["whiffing"],["whiffle"],["whiffled"],["whiffler"],["whiffles"],["whiffs"],["whig"],["whigs"],["while"],["whiled"],["whiles"],["whiling"],["whilom"],["whilst"],["whim"],["whimbrel"],["whimper"],["whimpers"],["whims"],["whimsey"],["whimseys"],["whimsied"],["whimsies"],["whimsy"],["whin"],["whinchat"],["whine"],["whined"],["whiner"],["whiners"],["whines"],["whiney"],["whinge"],["whinged"],["whinges"],["whinier"],["whiniest"],["whining"],["whinnied"],["whinnier"],["whinnies"],["whinny"],["whins"],["whiny"],["whip"],["whipcord"],["whiplash"],["whiplike"],["whipped"],["whipper"],["whippers"],["whippet"],["whippets"],["whippier"],["whipping"],["whippy"],["whipray"],["whiprays"],["whips"],["whipsaw"],["whipsawn"],["whipsaws"],["whipt"],["whiptail"],["whipworm"],["whir"],["whirl"],["whirled"],["whirler"],["whirlers"],["whirlier"],["whirlies"],["whirling"],["whirls"],["whirly"],["whirr"],["whirred"],["whirried"],["whirries"],["whirring"],["whirrs"],["whirry"],["whirs"],["whish"],["whished"],["whishes"],["whishing"],["whisht"],["whishted"],["whishts"],["whisk"],["whisked"],["whisker"],["whiskers"],["whiskery"],["whiskey"],["whiskeys"],["whiskies"],["whisking"],["whisks"],["whisky"],["whisper"],["whispers"],["whispery"],["whist"],["whisted"],["whisting"],["whistle"],["whistled"],["whistler"],["whistles"],["whists"],["whit"],["white"],["whitecap"],["whited"],["whitefly"],["whitely"],["whiten"],["whitened"],["whitener"],["whitens"],["whiteout"],["whiter"],["whites"],["whitest"],["whitey"],["whiteys"],["whither"],["whitier"],["whities"],["whitiest"],["whiting"],["whitings"],["whitish"],["whitlow"],["whitlows"],["whitrack"],["whits"],["whitter"],["whitters"],["whittle"],["whittled"],["whittler"],["whittles"],["whittret"],["whity"],["whiz"],["whizbang"],["whizz"],["whizzed"],["whizzer"],["whizzers"],["whizzes"],["whizzing"],["who"],["whoa"],["whodunit"],["whoever"],["whole"],["wholes"],["wholism"],["wholisms"],["wholly"],["whom"],["whomever"],["whomp"],["whomped"],["whomping"],["whomps"],["whomso"],["whoof"],["whoofed"],["whoofing"],["whoofs"],["whoop"],["whooped"],["whoopee"],["whoopees"],["whooper"],["whoopers"],["whooping"],["whoopla"],["whooplas"],["whoops"],["whoosh"],["whooshed"],["whooshes"],["whoosis"],["whop"],["whopped"],["whopper"],["whoppers"],["whopping"],["whops"],["whore"],["whored"],["whoredom"],["whores"],["whoreson"],["whoring"],["whorish"],["whorl"],["whorled"],["whorls"],["whort"],["whortle"],["whortles"],["whorts"],["whose"],["whosever"],["whosis"],["whosises"],["whoso"],["whump"],["whumped"],["whumping"],["whumps"],["why"],["whydah"],["whydahs"],["whys"],["wich"],["wiches"],["wick"],["wickape"],["wickapes"],["wicked"],["wickeder"],["wickedly"],["wicker"],["wickers"],["wicket"],["wickets"],["wicking"],["wickings"],["wickiup"],["wickiups"],["wicks"],["wickyup"],["wickyups"],["wicopies"],["wicopy"],["widder"],["widders"],["widdie"],["widdies"],["widdle"],["widdled"],["widdles"],["widdling"],["widdy"],["wide"],["wideband"],["widely"],["widen"],["widened"],["widener"],["wideners"],["wideness"],["widening"],["widens"],["wider"],["wides"],["widest"],["widgeon"],["widgeons"],["widget"],["widgets"],["widish"],["widow"],["widowed"],["widower"],["widowers"],["widowing"],["widows"],["width"],["widths"],["widthway"],["wield"],["wielded"],["wielder"],["wielders"],["wieldier"],["wielding"],["wields"],["wieldy"],["wiener"],["wieners"],["wienie"],["wienies"],["wife"],["wifed"],["wifedom"],["wifedoms"],["wifehood"],["wifeless"],["wifelier"],["wifelike"],["wifely"],["wifes"],["wifing"],["wig"],["wigan"],["wigans"],["wigeon"],["wigeons"],["wigged"],["wiggery"],["wiggier"],["wiggiest"],["wigging"],["wiggings"],["wiggle"],["wiggled"],["wiggler"],["wigglers"],["wiggles"],["wigglier"],["wiggling"],["wiggly"],["wiggy"],["wight"],["wights"],["wigless"],["wiglet"],["wiglets"],["wiglike"],["wigmaker"],["wigs"],["wigwag"],["wigwags"],["wigwam"],["wigwams"],["wikiup"],["wikiups"],["wilco"],["wild"],["wildcat"],["wildcats"],["wilder"],["wildered"],["wilders"],["wildest"],["wildfire"],["wildfowl"],["wilding"],["wildings"],["wildish"],["wildland"],["wildlife"],["wildling"],["wildly"],["wildness"],["wilds"],["wildwood"],["wile"],["wiled"],["wiles"],["wilful"],["wilfully"],["wilier"],["wiliest"],["wilily"],["wiliness"],["wiling"],["will"],["willable"],["willed"],["willer"],["willers"],["willet"],["willets"],["willful"],["willied"],["willies"],["willing"],["williwau"],["williwaw"],["willow"],["willowed"],["willower"],["willows"],["willowy"],["wills"],["willy"],["willyard"],["willyart"],["willying"],["willywaw"],["wilt"],["wilted"],["wilting"],["wilts"],["wily"],["wimble"],["wimbled"],["wimbles"],["wimbling"],["wimp"],["wimpish"],["wimple"],["wimpled"],["wimples"],["wimpling"],["wimps"],["wimpy"],["win"],["wince"],["winced"],["wincer"],["wincers"],["winces"],["wincey"],["winceys"],["winch"],["winched"],["wincher"],["winchers"],["winches"],["winching"],["wincing"],["wind"],["windable"],["windage"],["windages"],["windbag"],["windbags"],["windburn"],["winded"],["winder"],["winders"],["windfall"],["windflaw"],["windgall"],["windier"],["windiest"],["windigo"],["windigos"],["windily"],["winding"],["windings"],["windlass"],["windle"],["windled"],["windles"],["windless"],["windling"],["windmill"],["window"],["windowed"],["windows"],["windpipe"],["windrow"],["windrows"],["winds"],["windsock"],["windup"],["windups"],["windward"],["windway"],["windways"],["windy"],["wine"],["wined"],["wineless"],["wineries"],["winery"],["wines"],["wineshop"],["wineskin"],["winesop"],["winesops"],["winey"],["wing"],["wingback"],["wingbow"],["wingbows"],["wingding"],["winged"],["wingedly"],["winger"],["wingers"],["wingier"],["wingiest"],["winging"],["wingless"],["winglet"],["winglets"],["winglike"],["wingman"],["wingmen"],["wingover"],["wings"],["wingspan"],["wingtip"],["wingtips"],["wingy"],["winier"],["winiest"],["wining"],["winish"],["wink"],["winked"],["winker"],["winkers"],["winking"],["winkle"],["winkled"],["winkles"],["winkling"],["winks"],["winless"],["winnable"],["winned"],["winner"],["winners"],["winning"],["winnings"],["winnock"],["winnocks"],["winnow"],["winnowed"],["winnower"],["winnows"],["wino"],["winoes"],["winos"],["wins"],["winsome"],["winsomer"],["winter"],["wintered"],["winterer"],["winterly"],["winters"],["wintery"],["wintle"],["wintled"],["wintles"],["wintling"],["wintrier"],["wintrily"],["wintry"],["winy"],["winze"],["winzes"],["wipe"],["wiped"],["wipeout"],["wipeouts"],["wiper"],["wipers"],["wipes"],["wiping"],["wirable"],["wire"],["wired"],["wiredraw"],["wiredrew"],["wirehair"],["wireless"],["wirelike"],["wireman"],["wiremen"],["wirer"],["wirers"],["wires"],["wiretap"],["wiretaps"],["wireway"],["wireways"],["wirework"],["wireworm"],["wirier"],["wiriest"],["wirily"],["wiriness"],["wiring"],["wirings"],["wirra"],["wiry"],["wis"],["wisdom"],["wisdoms"],["wise"],["wiseacre"],["wiseass"],["wised"],["wiselier"],["wisely"],["wiseness"],["wisent"],["wisents"],["wiser"],["wises"],["wisest"],["wish"],["wisha"],["wishbone"],["wished"],["wisher"],["wishers"],["wishes"],["wishful"],["wishing"],["wishless"],["wising"],["wisp"],["wisped"],["wispier"],["wispiest"],["wispily"],["wisping"],["wispish"],["wisplike"],["wisps"],["wispy"],["wiss"],["wissed"],["wisses"],["wissing"],["wist"],["wistaria"],["wisted"],["wisteria"],["wistful"],["wisting"],["wists"],["wit"],["witan"],["witch"],["witched"],["witchery"],["witches"],["witchier"],["witching"],["witchy"],["wite"],["wited"],["wites"],["with"],["withal"],["withdraw"],["withdrew"],["withe"],["withed"],["wither"],["withered"],["witherer"],["withers"],["withes"],["withheld"],["withhold"],["withier"],["withies"],["withiest"],["within"],["withing"],["withins"],["without"],["withouts"],["withy"],["witing"],["witless"],["witling"],["witlings"],["witloof"],["witloofs"],["witness"],["witney"],["witneys"],["wits"],["witted"],["wittier"],["wittiest"],["wittily"],["witting"],["wittings"],["wittol"],["wittols"],["witty"],["wive"],["wived"],["wiver"],["wivern"],["wiverns"],["wivers"],["wives"],["wiving"],["wiz"],["wizard"],["wizardly"],["wizardry"],["wizards"],["wizen"],["wizened"],["wizening"],["wizens"],["wizes"],["wizzen"],["wizzens"],["wo"],["woad"],["woaded"],["woads"],["woadwax"],["woald"],["woalds"],["wobble"],["wobbled"],["wobbler"],["wobblers"],["wobbles"],["wobblier"],["wobblies"],["wobbling"],["wobbly"],["wobegone"],["wodge"],["wodges"],["woe"],["woeful"],["woefully"],["woeness"],["woes"],["woesome"],["woful"],["wofully"],["wog"],["wogs"],["wok"],["woke"],["woken"],["woks"],["wold"],["wolds"],["wolf"],["wolfed"],["wolfer"],["wolfers"],["wolffish"],["wolfing"],["wolfish"],["wolflike"],["wolfram"],["wolframs"],["wolfs"],["wolver"],["wolvers"],["wolves"],["woman"],["womaned"],["womaning"],["womanise"],["womanish"],["womanize"],["womanly"],["womans"],["womb"],["wombat"],["wombats"],["wombed"],["wombier"],["wombiest"],["wombs"],["womby"],["women"],["womera"],["womeras"],["wommera"],["wommeras"],["won"],["wonder"],["wondered"],["wonderer"],["wonders"],["wondrous"],["wonk"],["wonkier"],["wonkiest"],["wonks"],["wonky"],["wonned"],["wonner"],["wonners"],["wonning"],["wons"],["wont"],["wonted"],["wontedly"],["wonting"],["wonton"],["wontons"],["wonts"],["woo"],["wood"],["woodbin"],["woodbind"],["woodbine"],["woodbins"],["woodbox"],["woodchat"],["woodcock"],["woodcut"],["woodcuts"],["wooded"],["wooden"],["woodener"],["woodenly"],["woodhen"],["woodhens"],["woodie"],["woodier"],["woodies"],["woodiest"],["wooding"],["woodland"],["woodlark"],["woodless"],["woodlore"],["woodlot"],["woodlots"],["woodman"],["woodmen"],["woodnote"],["woodpile"],["woodruff"],["woods"],["woodshed"],["woodsia"],["woodsias"],["woodsier"],["woodsman"],["woodsmen"],["woodsy"],["woodwax"],["woodwind"],["woodwork"],["woodworm"],["woody"],["wooed"],["wooer"],["wooers"],["woof"],["woofed"],["woofer"],["woofers"],["woofing"],["woofs"],["wooing"],["wooingly"],["wool"],["wooled"],["woolen"],["woolens"],["wooler"],["woolers"],["woolfell"],["woolhat"],["woolhats"],["woolie"],["woolier"],["woolies"],["wooliest"],["woollen"],["woollens"],["woollier"],["woollies"],["woollike"],["woolly"],["woolman"],["woolmen"],["woolpack"],["wools"],["woolsack"],["woolshed"],["woolskin"],["woolwork"],["wooly"],["woomera"],["woomeras"],["woops"],["woopsed"],["woopses"],["woopsing"],["woorali"],["wooralis"],["woorari"],["wooraris"],["woos"],["woosh"],["wooshed"],["wooshes"],["wooshing"],["woozier"],["wooziest"],["woozily"],["woozy"],["wop"],["wops"],["word"],["wordage"],["wordages"],["wordbook"],["worded"],["wordier"],["wordiest"],["wordily"],["wording"],["wordings"],["wordless"],["wordplay"],["words"],["wordy"],["wore"],["work"],["workable"],["workaday"],["workbag"],["workbags"],["workboat"],["workbook"],["workbox"],["workday"],["workdays"],["worked"],["worker"],["workers"],["workfare"],["workfolk"],["working"],["workings"],["workless"],["workload"],["workman"],["workmate"],["workmen"],["workout"],["workouts"],["workroom"],["works"],["workshop"],["workup"],["workups"],["workweek"],["world"],["worldly"],["worlds"],["worm"],["wormed"],["wormer"],["wormers"],["wormhole"],["wormier"],["wormiest"],["wormil"],["wormils"],["worming"],["wormish"],["wormlike"],["wormroot"],["worms"],["wormseed"],["wormwood"],["wormy"],["worn"],["wornness"],["worried"],["worrier"],["worriers"],["worries"],["worrit"],["worrited"],["worrits"],["worry"],["worrying"],["worse"],["worsen"],["worsened"],["worsens"],["worser"],["worses"],["worset"],["worsets"],["worship"],["worships"],["worst"],["worsted"],["worsteds"],["worsting"],["worsts"],["wort"],["worth"],["worthed"],["worthful"],["worthier"],["worthies"],["worthily"],["worthing"],["worths"],["worthy"],["worts"],["wos"],["wost"],["wot"],["wots"],["wotted"],["wotting"],["would"],["wouldest"],["wouldst"],["wound"],["wounded"],["wounding"],["wounds"],["wove"],["woven"],["wovens"],["wow"],["wowed"],["wowing"],["wows"],["wowser"],["wowsers"],["wrack"],["wracked"],["wrackful"],["wracking"],["wracks"],["wraith"],["wraiths"],["wrang"],["wrangle"],["wrangled"],["wrangler"],["wrangles"],["wrangs"],["wrap"],["wrapped"],["wrapper"],["wrappers"],["wrapping"],["wraps"],["wrapt"],["wrasse"],["wrasses"],["wrassle"],["wrassled"],["wrassles"],["wrastle"],["wrastled"],["wrastles"],["wrath"],["wrathed"],["wrathful"],["wrathier"],["wrathily"],["wrathing"],["wraths"],["wrathy"],["wreak"],["wreaked"],["wreaker"],["wreakers"],["wreaking"],["wreaks"],["wreath"],["wreathe"],["wreathed"],["wreathen"],["wreathes"],["wreaths"],["wreathy"],["wreck"],["wreckage"],["wrecked"],["wrecker"],["wreckers"],["wreckful"],["wrecking"],["wrecks"],["wren"],["wrench"],["wrenched"],["wrenches"],["wrens"],["wrest"],["wrested"],["wrester"],["wresters"],["wresting"],["wrestle"],["wrestled"],["wrestler"],["wrestles"],["wrests"],["wretch"],["wretched"],["wretches"],["wrick"],["wricked"],["wricking"],["wricks"],["wried"],["wrier"],["wries"],["wriest"],["wriggle"],["wriggled"],["wriggler"],["wriggles"],["wriggly"],["wright"],["wrights"],["wring"],["wringed"],["wringer"],["wringers"],["wringing"],["wrings"],["wrinkle"],["wrinkled"],["wrinkles"],["wrinkly"],["wrist"],["wristier"],["wristlet"],["wrists"],["wristy"],["writ"],["writable"],["write"],["writer"],["writerly"],["writers"],["writes"],["writhe"],["writhed"],["writhen"],["writher"],["writhers"],["writhes"],["writhing"],["writing"],["writings"],["writs"],["written"],["wrong"],["wronged"],["wronger"],["wrongers"],["wrongest"],["wrongful"],["wronging"],["wrongly"],["wrongs"],["wrote"],["wroth"],["wrothful"],["wrought"],["wrung"],["wry"],["wryer"],["wryest"],["wrying"],["wryly"],["wryneck"],["wrynecks"],["wryness"],["wud"],["wurst"],["wursts"],["wurzel"],["wurzels"],["wych"],["wyches"],["wye"],["wyes"],["wyle"],["wyled"],["wyles"],["wyling"],["wyn"],["wynd"],["wynds"],["wynn"],["wynns"],["wyns"],["wyte"],["wyted"],["wytes"],["wyting"],["wyvern"],["wyverns"],["xanthan"],["xanthans"],["xanthate"],["xanthein"],["xanthene"],["xanthic"],["xanthin"],["xanthine"],["xanthins"],["xanthoma"],["xanthone"],["xanthous"],["xebec"],["xebecs"],["xenia"],["xenial"],["xenias"],["xenic"],["xenogamy"],["xenogeny"],["xenolith"],["xenon"],["xenons"],["xerarch"],["xeric"],["xerosere"],["xeroses"],["xerosis"],["xerotic"],["xerus"],["xeruses"],["xi"],["xiphoid"],["xiphoids"],["xis"],["xu"],["xylan"],["xylans"],["xylem"],["xylems"],["xylene"],["xylenes"],["xylidin"],["xylidine"],["xylidins"],["xylitol"],["xylitols"],["xylocarp"],["xyloid"],["xylol"],["xylols"],["xylose"],["xyloses"],["xylotomy"],["xylyl"],["xylyls"],["xyst"],["xyster"],["xysters"],["xysti"],["xystoi"],["xystos"],["xysts"],["xystus"],["ya"],["yabber"],["yabbered"],["yabbers"],["yacht"],["yachted"],["yachter"],["yachters"],["yachting"],["yachtman"],["yachtmen"],["yachts"],["yack"],["yacked"],["yacking"],["yacks"],["yaff"],["yaffed"],["yaffing"],["yaffs"],["yager"],["yagers"],["yagi"],["yagis"],["yah"],["yahoo"],["yahooism"],["yahoos"],["yahrzeit"],["yaird"],["yairds"],["yak"],["yakitori"],["yakked"],["yakker"],["yakkers"],["yakking"],["yaks"],["yald"],["yam"],["yamalka"],["yamalkas"],["yamen"],["yamens"],["yammer"],["yammered"],["yammerer"],["yammers"],["yams"],["yamulka"],["yamulkas"],["yamun"],["yamuns"],["yang"],["yangs"],["yank"],["yanked"],["yanking"],["yanks"],["yanqui"],["yanquis"],["yantra"],["yantras"],["yap"],["yapock"],["yapocks"],["yapok"],["yapoks"],["yapon"],["yapons"],["yapped"],["yapper"],["yappers"],["yapping"],["yaps"],["yar"],["yard"],["yardage"],["yardages"],["yardarm"],["yardarms"],["yardbird"],["yarded"],["yarding"],["yardland"],["yardman"],["yardmen"],["yards"],["yardwand"],["yardwork"],["yare"],["yarely"],["yarer"],["yarest"],["yarmelke"],["yarmulke"],["yarn"],["yarned"],["yarner"],["yarners"],["yarning"],["yarns"],["yarrow"],["yarrows"],["yashmac"],["yashmacs"],["yashmak"],["yashmaks"],["yasmak"],["yasmaks"],["yatagan"],["yatagans"],["yataghan"],["yatter"],["yattered"],["yatters"],["yaud"],["yauds"],["yauld"],["yaup"],["yauped"],["yauper"],["yaupers"],["yauping"],["yaupon"],["yaupons"],["yaups"],["yautia"],["yautias"],["yaw"],["yawed"],["yawing"],["yawl"],["yawled"],["yawling"],["yawls"],["yawmeter"],["yawn"],["yawned"],["yawner"],["yawners"],["yawning"],["yawns"],["yawp"],["yawped"],["yawper"],["yawpers"],["yawping"],["yawpings"],["yawps"],["yaws"],["yay"],["yays"],["ycleped"],["yclept"],["ye"],["yea"],["yeah"],["yealing"],["yealings"],["yean"],["yeaned"],["yeaning"],["yeanling"],["yeans"],["year"],["yearbook"],["yearend"],["yearends"],["yearlies"],["yearling"],["yearlong"],["yearly"],["yearn"],["yearned"],["yearner"],["yearners"],["yearning"],["yearns"],["years"],["yeas"],["yeasayer"],["yeast"],["yeasted"],["yeastier"],["yeastily"],["yeasting"],["yeasts"],["yeasty"],["yecch"],["yecchs"],["yech"],["yechs"],["yechy"],["yeelin"],["yeelins"],["yegg"],["yeggman"],["yeggmen"],["yeggs"],["yeh"],["yeld"],["yelk"],["yelks"],["yell"],["yelled"],["yeller"],["yellers"],["yelling"],["yellow"],["yellowed"],["yellower"],["yellowly"],["yellows"],["yellowy"],["yells"],["yelp"],["yelped"],["yelper"],["yelpers"],["yelping"],["yelps"],["yen"],["yenned"],["yenning"],["yens"],["yenta"],["yentas"],["yente"],["yentes"],["yeoman"],["yeomanly"],["yeomanry"],["yeomen"],["yep"],["yerba"],["yerbas"],["yerk"],["yerked"],["yerking"],["yerks"],["yes"],["yeses"],["yeshiva"],["yeshivah"],["yeshivas"],["yeshivot"],["yessed"],["yesses"],["yessing"],["yester"],["yestern"],["yestreen"],["yet"],["yeti"],["yetis"],["yett"],["yetts"],["yeuk"],["yeuked"],["yeuking"],["yeuks"],["yeuky"],["yew"],["yews"],["yid"],["yids"],["yield"],["yielded"],["yielder"],["yielders"],["yielding"],["yields"],["yikes"],["yill"],["yills"],["yin"],["yince"],["yins"],["yip"],["yipe"],["yipes"],["yipped"],["yippee"],["yippie"],["yippies"],["yipping"],["yips"],["yird"],["yirds"],["yirr"],["yirred"],["yirring"],["yirrs"],["yirth"],["yirths"],["ylem"],["ylems"],["yob"],["yobbo"],["yobboes"],["yobbos"],["yobs"],["yock"],["yocked"],["yocking"],["yocks"],["yod"],["yodel"],["yodeled"],["yodeler"],["yodelers"],["yodeling"],["yodelled"],["yodeller"],["yodels"],["yodh"],["yodhs"],["yodle"],["yodled"],["yodler"],["yodlers"],["yodles"],["yodling"],["yods"],["yoga"],["yogas"],["yogee"],["yogees"],["yogh"],["yoghourt"],["yoghs"],["yoghurt"],["yoghurts"],["yogi"],["yogic"],["yogin"],["yogini"],["yoginis"],["yogins"],["yogis"],["yogurt"],["yogurts"],["yoicks"],["yok"],["yoke"],["yoked"],["yokel"],["yokeless"],["yokelish"],["yokels"],["yokemate"],["yokes"],["yoking"],["yokozuna"],["yoks"],["yolk"],["yolked"],["yolkier"],["yolkiest"],["yolks"],["yolky"],["yom"],["yomim"],["yon"],["yond"],["yonder"],["yoni"],["yonic"],["yonis"],["yonker"],["yonkers"],["yore"],["yores"],["you"],["young"],["younger"],["youngers"],["youngest"],["youngish"],["youngs"],["younker"],["younkers"],["youpon"],["youpons"],["your"],["yourn"],["yours"],["yourself"],["youse"],["youth"],["youthen"],["youthens"],["youthful"],["youths"],["yow"],["yowe"],["yowed"],["yowes"],["yowie"],["yowies"],["yowing"],["yowl"],["yowled"],["yowler"],["yowlers"],["yowling"],["yowls"],["yows"],["yperite"],["yperites"],["ytterbia"],["ytterbic"],["yttria"],["yttrias"],["yttric"],["yttrium"],["yttriums"],["yuan"],["yuans"],["yucca"],["yuccas"],["yucch"],["yuch"],["yuck"],["yucked"],["yuckier"],["yuckiest"],["yucking"],["yucks"],["yucky"],["yuga"],["yugas"],["yuk"],["yukked"],["yukking"],["yuks"],["yulan"],["yulans"],["yule"],["yules"],["yuletide"],["yum"],["yummier"],["yummies"],["yummiest"],["yummy"],["yup"],["yupon"],["yupons"],["yuppie"],["yuppies"],["yurt"],["yurta"],["yurts"],["ywis"],["zabaione"],["zabajone"],["zacaton"],["zacatons"],["zaddick"],["zaddik"],["zaddikim"],["zaffar"],["zaffars"],["zaffer"],["zaffers"],["zaffir"],["zaffirs"],["zaffre"],["zaffres"],["zaftig"],["zag"],["zagged"],["zagging"],["zags"],["zaibatsu"],["zaikai"],["zaikais"],["zaire"],["zaires"],["zamarra"],["zamarras"],["zamarro"],["zamarros"],["zamia"],["zamias"],["zamindar"],["zanana"],["zananas"],["zander"],["zanders"],["zanier"],["zanies"],["zaniest"],["zanily"],["zaniness"],["zany"],["zanyish"],["zanza"],["zanzas"],["zap"],["zapateo"],["zapateos"],["zapped"],["zapper"],["zappers"],["zappier"],["zappiest"],["zapping"],["zappy"],["zaps"],["zaptiah"],["zaptiahs"],["zaptieh"],["zaptiehs"],["zaratite"],["zareba"],["zarebas"],["zareeba"],["zareebas"],["zarf"],["zarfs"],["zariba"],["zaribas"],["zarzuela"],["zastruga"],["zastrugi"],["zax"],["zaxes"],["zayin"],["zayins"],["zazen"],["zazens"],["zeal"],["zealot"],["zealotry"],["zealots"],["zealous"],["zeals"],["zeatin"],["zeatins"],["zebec"],["zebeck"],["zebecks"],["zebecs"],["zebra"],["zebraic"],["zebras"],["zebrass"],["zebrine"],["zebroid"],["zebu"],["zebus"],["zecchin"],["zecchini"],["zecchino"],["zecchins"],["zechin"],["zechins"],["zed"],["zedoary"],["zeds"],["zee"],["zees"],["zein"],["zeins"],["zek"],["zeks"],["zelkova"],["zelkovas"],["zemindar"],["zemstva"],["zemstvo"],["zemstvos"],["zenaida"],["zenaidas"],["zenana"],["zenanas"],["zenith"],["zenithal"],["zeniths"],["zeolite"],["zeolites"],["zeolitic"],["zephyr"],["zephyrs"],["zeppelin"],["zero"],["zeroed"],["zeroes"],["zeroing"],["zeros"],["zeroth"],["zest"],["zested"],["zestful"],["zestier"],["zestiest"],["zesting"],["zests"],["zesty"],["zeta"],["zetas"],["zeugma"],["zeugmas"],["zibeline"],["zibet"],["zibeth"],["zibeths"],["zibets"],["zig"],["zigged"],["zigging"],["ziggurat"],["zigs"],["zigzag"],["zigzags"],["zikkurat"],["zikurat"],["zikurats"],["zilch"],["zilches"],["zill"],["zillah"],["zillahs"],["zillion"],["zillions"],["zills"],["zinc"],["zincate"],["zincates"],["zinced"],["zincic"],["zincify"],["zincing"],["zincite"],["zincites"],["zincked"],["zincking"],["zincky"],["zincoid"],["zincous"],["zincs"],["zincy"],["zineb"],["zinebs"],["zing"],["zingani"],["zingano"],["zingara"],["zingare"],["zingari"],["zingaro"],["zinged"],["zinger"],["zingers"],["zingier"],["zingiest"],["zinging"],["zings"],["zingy"],["zinkify"],["zinky"],["zinnia"],["zinnias"],["zip"],["zipless"],["zipped"],["zipper"],["zippered"],["zippers"],["zippier"],["zippiest"],["zipping"],["zippy"],["zips"],["ziram"],["zirams"],["zircon"],["zirconia"],["zirconic"],["zircons"],["zit"],["zither"],["zithern"],["zitherns"],["zithers"],["ziti"],["zitis"],["zits"],["zizit"],["zizith"],["zizzle"],["zizzled"],["zizzles"],["zizzling"],["zlote"],["zloties"],["zloty"],["zlotych"],["zlotys"],["zoa"],["zoaria"],["zoarial"],["zoarium"],["zodiac"],["zodiacal"],["zodiacs"],["zoea"],["zoeae"],["zoeal"],["zoeas"],["zoftig"],["zoic"],["zoisite"],["zoisites"],["zombi"],["zombie"],["zombies"],["zombiism"],["zombis"],["zonal"],["zonally"],["zonary"],["zonate"],["zonated"],["zonation"],["zone"],["zoned"],["zoneless"],["zoner"],["zoners"],["zones"],["zonetime"],["zoning"],["zonk"],["zonked"],["zonking"],["zonks"],["zonula"],["zonulae"],["zonular"],["zonulas"],["zonule"],["zonules"],["zoo"],["zoochore"],["zoogenic"],["zooglea"],["zoogleae"],["zoogleal"],["zoogleas"],["zoogloea"],["zooid"],["zooidal"],["zooids"],["zooks"],["zoolater"],["zoolatry"],["zoologic"],["zoology"],["zoom"],["zoomania"],["zoomed"],["zoometry"],["zooming"],["zoomorph"],["zooms"],["zoon"],["zoonal"],["zoonoses"],["zoonosis"],["zoonotic"],["zoons"],["zoophile"],["zoophily"],["zoophobe"],["zoophyte"],["zoos"],["zoosperm"],["zoospore"],["zootomic"],["zootomy"],["zori"],["zoril"],["zorilla"],["zorillas"],["zorille"],["zorilles"],["zorillo"],["zorillos"],["zorils"],["zoris"],["zoster"],["zosters"],["zouave"],["zouaves"],["zounds"],["zowie"],["zoysia"],["zoysias"],["zucchini"],["zwieback"],["zydeco"],["zydecos"],["zygoid"],["zygoma"],["zygomas"],["zygomata"],["zygose"],["zygoses"],["zygosis"],["zygosity"],["zygote"],["zygotene"],["zygotes"],["zygotic"],["zymase"],["zymases"],["zyme"],["zymes"],["zymogen"],["zymogene"],["zymogens"],["zymogram"],["zymology"],["zymosan"],["zymosans"],["zymoses"],["zymosis"],["zymotic"],["zymurgy"],["zyzzyva"],["zyzzyvas"],[""]],"errors":[],"meta":{"delimiter":",","linebreak":"\n","aborted":false,"truncated":false,"cursor":614670}}
/* harmony export (immutable) */ __webpack_exports__["a"] = DictFile;


/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Sound {
  constructor(src) {
    this.sound = document.createElement("audio");
    this.sound.src = src;
    this.sound.setAttribute("preload", "auto");
    this.sound.setAttribute("controls", "none");
    this.sound.style.display = "none";
    document.body.appendChild(this.sound);
  }
  play() {
    this.sound.play();
  }

  stop() {
    this.sound.pause();
  }
}

/* harmony default export */ __webpack_exports__["a"] = (Sound);


/***/ })
/******/ ]);
//# sourceMappingURL=bundle.js.map